
EGE_AKSV2_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  0800c2bc  0800c2bc  0001c2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c72c  0800c72c  00021030  2**0
                  CONTENTS
  4 .ARM          00000008  0800c72c  0800c72c  0001c72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c734  0800c734  00021030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c734  0800c734  0001c734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c738  0800c738  0001c738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c73c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ARM.__at_0x20000000 00000fbc  20000074  0800c7b0  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000b258  20001030  0800d76c  00021030  2**3
                  ALLOC
 11 ._user_heap_stack 00006000  2000c288  0800d76c  0002c288  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00021030  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ad27  00000000  00000000  00021060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000053bb  00000000  00000000  0004bd87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002180  00000000  00000000  00051148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f50  00000000  00000000  000532c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000099ee  00000000  00000000  00055218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033073  00000000  00000000  0005ec06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd282  00000000  00000000  00091c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018eefb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008f10  00000000  00000000  0018ef4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001030 	.word	0x20001030
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c2a4 	.word	0x0800c2a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001034 	.word	0x20001034
 800020c:	0800c2a4 	.word	0x0800c2a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f002 f82a 	bl	8002610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f834 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 fbfa 	bl	8000db8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005c4:	f000 f8a0 	bl	8000708 <MX_ADC1_Init>
  MX_ADC3_Init();
 80005c8:	f000 f8f0 	bl	80007ac <MX_ADC3_Init>
  MX_CAN1_Init();
 80005cc:	f000 f940 	bl	8000850 <MX_CAN1_Init>
  MX_CAN2_Init();
 80005d0:	f000 f974 	bl	80008bc <MX_CAN2_Init>
  MX_I2C1_Init();
 80005d4:	f000 f9bc 	bl	8000950 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005d8:	f000 f9e8 	bl	80009ac <MX_I2C2_Init>
  MX_I2C3_Init();
 80005dc:	f000 fa14 	bl	8000a08 <MX_I2C3_Init>
  MX_SPI2_Init();
 80005e0:	f000 fa66 	bl	8000ab0 <MX_SPI2_Init>
  MX_SPI3_Init();
 80005e4:	f000 fa9a 	bl	8000b1c <MX_SPI3_Init>
  MX_TIM1_Init();
 80005e8:	f000 face 	bl	8000b88 <MX_TIM1_Init>
  MX_UART4_Init();
 80005ec:	f000 fb90 	bl	8000d10 <MX_UART4_Init>
  MX_UART5_Init();
 80005f0:	f000 fbb8 	bl	8000d64 <MX_UART5_Init>
  MX_CRC_Init();
 80005f4:	f000 f998 	bl	8000928 <MX_CRC_Init>
  //MX_IWDG_Init();
  MX_RTC_Init();
 80005f8:	f000 fa34 	bl	8000a64 <MX_RTC_Init>
  //MX_WWDG_Init();
  /* USER CODE BEGIN 2 */

  MAIN_App(); /* JUMP INTO BODY CONTROL MODULE */
 80005fc:	f009 fe6a 	bl	800a2d4 <MAIN_App>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000600:	f006 fa6c 	bl	8006adc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000604:	4a05      	ldr	r2, [pc, #20]	; (800061c <main+0x68>)
 8000606:	2100      	movs	r1, #0
 8000608:	4805      	ldr	r0, [pc, #20]	; (8000620 <main+0x6c>)
 800060a:	f006 fab1 	bl	8006b70 <osThreadNew>
 800060e:	4603      	mov	r3, r0
 8000610:	4a04      	ldr	r2, [pc, #16]	; (8000624 <main+0x70>)
 8000612:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000614:	f006 fa86 	bl	8006b24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	e7fe      	b.n	8000618 <main+0x64>
 800061a:	bf00      	nop
 800061c:	0800c620 	.word	0x0800c620
 8000620:	080010a9 	.word	0x080010a9
 8000624:	200013d0 	.word	0x200013d0

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	2234      	movs	r2, #52	; 0x34
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f00b f9cc 	bl	800b9d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <SystemClock_Config+0xd8>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a2a      	ldr	r2, [pc, #168]	; (8000700 <SystemClock_Config+0xd8>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b28      	ldr	r3, [pc, #160]	; (8000700 <SystemClock_Config+0xd8>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000668:	2300      	movs	r3, #0
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <SystemClock_Config+0xdc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000674:	4a23      	ldr	r2, [pc, #140]	; (8000704 <SystemClock_Config+0xdc>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b21      	ldr	r3, [pc, #132]	; (8000704 <SystemClock_Config+0xdc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000688:	230a      	movs	r3, #10
 800068a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	2310      	movs	r3, #16
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a4:	2308      	movs	r3, #8
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80006a8:	2354      	movs	r3, #84	; 0x54
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4618      	mov	r0, r3
 80006be:	f004 fc0b 	bl	8004ed8 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006c8:	f000 fcf6 	bl	80010b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	2102      	movs	r1, #2
 80006e8:	4618      	mov	r0, r3
 80006ea:	f003 fe07 	bl	80042fc <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006f4:	f000 fce0 	bl	80010b8 <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3750      	adds	r7, #80	; 0x50
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070e:	463b      	mov	r3, r7
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800071a:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <MX_ADC1_Init+0x98>)
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <MX_ADC1_Init+0x9c>)
 800071e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000720:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000722:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000726:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_ADC1_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000736:	2200      	movs	r2, #0
 8000738:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <MX_ADC1_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000744:	2200      	movs	r2, #0
 8000746:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_ADC1_Init+0x98>)
 800074a:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <MX_ADC1_Init+0xa0>)
 800074c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000756:	2201      	movs	r2, #1
 8000758:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_ADC1_Init+0x98>)
 800075c:	2200      	movs	r2, #0
 800075e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000764:	2201      	movs	r2, #1
 8000766:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000768:	480d      	ldr	r0, [pc, #52]	; (80007a0 <MX_ADC1_Init+0x98>)
 800076a:	f001 ffe7 	bl	800273c <HAL_ADC_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000774:	f000 fca0 	bl	80010b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000778:	2304      	movs	r3, #4
 800077a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800077c:	2301      	movs	r3, #1
 800077e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000784:	463b      	mov	r3, r7
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_ADC1_Init+0x98>)
 800078a:	f002 f9b9 	bl	8002b00 <HAL_ADC_ConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000794:	f000 fc90 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	2000104c 	.word	0x2000104c
 80007a4:	40012000 	.word	0x40012000
 80007a8:	0f000001 	.word	0x0f000001

080007ac <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80007be:	4b21      	ldr	r3, [pc, #132]	; (8000844 <MX_ADC3_Init+0x98>)
 80007c0:	4a21      	ldr	r2, [pc, #132]	; (8000848 <MX_ADC3_Init+0x9c>)
 80007c2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c4:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_ADC3_Init+0x98>)
 80007c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007ca:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007cc:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_ADC3_Init+0x98>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_ADC3_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80007d8:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_ADC3_Init+0x98>)
 80007da:	2200      	movs	r2, #0
 80007dc:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_ADC3_Init+0x98>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_ADC3_Init+0x98>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_ADC3_Init+0x98>)
 80007ee:	4a17      	ldr	r2, [pc, #92]	; (800084c <MX_ADC3_Init+0xa0>)
 80007f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_ADC3_Init+0x98>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_ADC3_Init+0x98>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_ADC3_Init+0x98>)
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_ADC3_Init+0x98>)
 8000808:	2201      	movs	r2, #1
 800080a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800080c:	480d      	ldr	r0, [pc, #52]	; (8000844 <MX_ADC3_Init+0x98>)
 800080e:	f001 ff95 	bl	800273c <HAL_ADC_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000818:	f000 fc4e 	bl	80010b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800081c:	2301      	movs	r3, #1
 800081e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000820:	2301      	movs	r3, #1
 8000822:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000828:	463b      	mov	r3, r7
 800082a:	4619      	mov	r1, r3
 800082c:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_ADC3_Init+0x98>)
 800082e:	f002 f967 	bl	8002b00 <HAL_ADC_ConfigChannel>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000838:	f000 fc3e 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20001094 	.word	0x20001094
 8000848:	40012200 	.word	0x40012200
 800084c:	0f000001 	.word	0x0f000001

08000850 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000856:	4a18      	ldr	r2, [pc, #96]	; (80008b8 <MX_CAN1_Init+0x68>)
 8000858:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_CAN1_Init+0x64>)
 800085c:	220c      	movs	r2, #12
 800085e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_CAN1_Init+0x64>)
 800086e:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000872:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000876:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800087a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800087c:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <MX_CAN1_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <MX_CAN1_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000890:	2201      	movs	r2, #1
 8000892:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_CAN1_Init+0x64>)
 800089c:	2200      	movs	r2, #0
 800089e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_CAN1_Init+0x64>)
 80008a2:	f002 fb5b 	bl	8002f5c <HAL_CAN_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80008ac:	f000 fc04 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200010dc 	.word	0x200010dc
 80008b8:	40006400 	.word	0x40006400

080008bc <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_CAN2_Init+0x64>)
 80008c2:	4a18      	ldr	r2, [pc, #96]	; (8000924 <MX_CAN2_Init+0x68>)
 80008c4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 12;
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <MX_CAN2_Init+0x64>)
 80008c8:	220c      	movs	r2, #12
 80008ca:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_CAN2_Init+0x64>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_CAN2_Init+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_CAN2_Init+0x64>)
 80008da:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80008de:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_CAN2_Init+0x64>)
 80008e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80008e6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80008e8:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <MX_CAN2_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_CAN2_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <MX_CAN2_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_CAN2_Init+0x64>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <MX_CAN2_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_CAN2_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_CAN2_Init+0x64>)
 800090e:	f002 fb25 	bl	8002f5c <HAL_CAN_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000918:	f000 fbce 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20001104 	.word	0x20001104
 8000924:	40006800 	.word	0x40006800

08000928 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_CRC_Init+0x20>)
 800092e:	4a07      	ldr	r2, [pc, #28]	; (800094c <MX_CRC_Init+0x24>)
 8000930:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_CRC_Init+0x20>)
 8000934:	f003 f9af 	bl	8003c96 <HAL_CRC_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800093e:	f000 fbbb 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000112c 	.word	0x2000112c
 800094c:	40023000 	.word	0x40023000

08000950 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <MX_I2C1_Init+0x50>)
 8000956:	4a13      	ldr	r2, [pc, #76]	; (80009a4 <MX_I2C1_Init+0x54>)
 8000958:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_I2C1_Init+0x50>)
 800095c:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <MX_I2C1_Init+0x58>)
 800095e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_I2C1_Init+0x50>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_I2C1_Init+0x50>)
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_I2C1_Init+0x50>)
 800096e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000972:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <MX_I2C1_Init+0x50>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_I2C1_Init+0x50>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <MX_I2C1_Init+0x50>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_I2C1_Init+0x50>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_I2C1_Init+0x50>)
 800098e:	f003 fb71 	bl	8004074 <HAL_I2C_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000998:	f000 fb8e 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20001134 	.word	0x20001134
 80009a4:	40005400 	.word	0x40005400
 80009a8:	000186a0 	.word	0x000186a0

080009ac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <MX_I2C2_Init+0x50>)
 80009b2:	4a13      	ldr	r2, [pc, #76]	; (8000a00 <MX_I2C2_Init+0x54>)
 80009b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_I2C2_Init+0x50>)
 80009b8:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <MX_I2C2_Init+0x58>)
 80009ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_I2C2_Init+0x50>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_I2C2_Init+0x50>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_I2C2_Init+0x50>)
 80009ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <MX_I2C2_Init+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_I2C2_Init+0x50>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <MX_I2C2_Init+0x50>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_I2C2_Init+0x50>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_I2C2_Init+0x50>)
 80009ea:	f003 fb43 	bl	8004074 <HAL_I2C_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80009f4:	f000 fb60 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20001188 	.word	0x20001188
 8000a00:	40005800 	.word	0x40005800
 8000a04:	000186a0 	.word	0x000186a0

08000a08 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <MX_I2C3_Init+0x50>)
 8000a0e:	4a13      	ldr	r2, [pc, #76]	; (8000a5c <MX_I2C3_Init+0x54>)
 8000a10:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_I2C3_Init+0x50>)
 8000a14:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <MX_I2C3_Init+0x58>)
 8000a16:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_I2C3_Init+0x50>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_I2C3_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_I2C3_Init+0x50>)
 8000a26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a2a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <MX_I2C3_Init+0x50>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_I2C3_Init+0x50>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <MX_I2C3_Init+0x50>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_I2C3_Init+0x50>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a44:	4804      	ldr	r0, [pc, #16]	; (8000a58 <MX_I2C3_Init+0x50>)
 8000a46:	f003 fb15 	bl	8004074 <HAL_I2C_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a50:	f000 fb32 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200011dc 	.word	0x200011dc
 8000a5c:	40005c00 	.word	0x40005c00
 8000a60:	000186a0 	.word	0x000186a0

08000a64 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_RTC_Init+0x44>)
 8000a6a:	4a10      	ldr	r2, [pc, #64]	; (8000aac <MX_RTC_Init+0x48>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_RTC_Init+0x44>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_RTC_Init+0x44>)
 8000a76:	227f      	movs	r2, #127	; 0x7f
 8000a78:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_RTC_Init+0x44>)
 8000a7c:	22ff      	movs	r2, #255	; 0xff
 8000a7e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_RTC_Init+0x44>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_RTC_Init+0x44>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_RTC_Init+0x44>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_RTC_Init+0x44>)
 8000a94:	f004 fcbe 	bl	8005414 <HAL_RTC_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000a9e:	f000 fb0b 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20001230 	.word	0x20001230
 8000aac:	40002800 	.word	0x40002800

08000ab0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <MX_SPI2_Init+0x64>)
 8000ab6:	4a18      	ldr	r2, [pc, #96]	; (8000b18 <MX_SPI2_Init+0x68>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000aba:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <MX_SPI2_Init+0x64>)
 8000abc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ac0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_SPI2_Init+0x64>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <MX_SPI2_Init+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_SPI2_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_SPI2_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_SPI2_Init+0x64>)
 8000adc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ae0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <MX_SPI2_Init+0x64>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <MX_SPI2_Init+0x64>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_SPI2_Init+0x64>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <MX_SPI2_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_SPI2_Init+0x64>)
 8000afc:	220a      	movs	r2, #10
 8000afe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b00:	4804      	ldr	r0, [pc, #16]	; (8000b14 <MX_SPI2_Init+0x64>)
 8000b02:	f004 fd81 	bl	8005608 <HAL_SPI_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b0c:	f000 fad4 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20001250 	.word	0x20001250
 8000b18:	40003800 	.word	0x40003800

08000b1c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_SPI3_Init+0x64>)
 8000b22:	4a18      	ldr	r2, [pc, #96]	; (8000b84 <MX_SPI3_Init+0x68>)
 8000b24:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <MX_SPI3_Init+0x64>)
 8000b28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b2c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_SPI3_Init+0x64>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <MX_SPI3_Init+0x64>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_SPI3_Init+0x64>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_SPI3_Init+0x64>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_SPI3_Init+0x64>)
 8000b48:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b4c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_SPI3_Init+0x64>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <MX_SPI3_Init+0x64>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_SPI3_Init+0x64>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <MX_SPI3_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_SPI3_Init+0x64>)
 8000b68:	220a      	movs	r2, #10
 8000b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_SPI3_Init+0x64>)
 8000b6e:	f004 fd4b 	bl	8005608 <HAL_SPI_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000b78:	f000 fa9e 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	200012a8 	.word	0x200012a8
 8000b84:	40003c00 	.word	0x40003c00

08000b88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b096      	sub	sp, #88	; 0x58
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]
 8000bb6:	615a      	str	r2, [r3, #20]
 8000bb8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2220      	movs	r2, #32
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f00a ff07 	bl	800b9d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bc6:	4b50      	ldr	r3, [pc, #320]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000bc8:	4a50      	ldr	r2, [pc, #320]	; (8000d0c <MX_TIM1_Init+0x184>)
 8000bca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bcc:	4b4e      	ldr	r3, [pc, #312]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd2:	4b4d      	ldr	r3, [pc, #308]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000bd8:	4b4b      	ldr	r3, [pc, #300]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000bda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bde:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be0:	4b49      	ldr	r3, [pc, #292]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000be6:	4b48      	ldr	r3, [pc, #288]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bec:	4b46      	ldr	r3, [pc, #280]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bf2:	4845      	ldr	r0, [pc, #276]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000bf4:	f004 fd91 	bl	800571a <HAL_TIM_Base_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000bfe:	f000 fa5b 	bl	80010b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c06:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	483e      	ldr	r0, [pc, #248]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000c10:	f004 feee 	bl	80059f0 <HAL_TIM_ConfigClockSource>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c1a:	f000 fa4d 	bl	80010b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c1e:	483a      	ldr	r0, [pc, #232]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000c20:	f004 fdca 	bl	80057b8 <HAL_TIM_PWM_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000c2a:	f000 fa45 	bl	80010b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4832      	ldr	r0, [pc, #200]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000c3e:	f005 fa89 	bl	8006154 <HAL_TIMEx_MasterConfigSynchronization>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000c48:	f000 fa36 	bl	80010b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c4c:	2360      	movs	r3, #96	; 0x60
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c60:	2300      	movs	r3, #0
 8000c62:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c64:	2300      	movs	r3, #0
 8000c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4825      	ldr	r0, [pc, #148]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000c72:	f004 fdfb 	bl	800586c <HAL_TIM_PWM_ConfigChannel>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000c7c:	f000 fa1c 	bl	80010b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c84:	2204      	movs	r2, #4
 8000c86:	4619      	mov	r1, r3
 8000c88:	481f      	ldr	r0, [pc, #124]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000c8a:	f004 fdef 	bl	800586c <HAL_TIM_PWM_ConfigChannel>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000c94:	f000 fa10 	bl	80010b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9c:	2208      	movs	r2, #8
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4819      	ldr	r0, [pc, #100]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000ca2:	f004 fde3 	bl	800586c <HAL_TIM_PWM_ConfigChannel>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000cac:	f000 fa04 	bl	80010b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb4:	220c      	movs	r2, #12
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4813      	ldr	r0, [pc, #76]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000cba:	f004 fdd7 	bl	800586c <HAL_TIM_PWM_ConfigChannel>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000cc4:	f000 f9f8 	bl	80010b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4807      	ldr	r0, [pc, #28]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000cec:	f005 faae 	bl	800624c <HAL_TIMEx_ConfigBreakDeadTime>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000cf6:	f000 f9df 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cfa:	4803      	ldr	r0, [pc, #12]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000cfc:	f000 fde4 	bl	80018c8 <HAL_TIM_MspPostInit>

}
 8000d00:	bf00      	nop
 8000d02:	3758      	adds	r7, #88	; 0x58
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20001300 	.word	0x20001300
 8000d0c:	40010000 	.word	0x40010000

08000d10 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_UART4_Init+0x4c>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <MX_UART4_Init+0x50>)
 8000d18:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <MX_UART4_Init+0x4c>)
 8000d1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d20:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_UART4_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <MX_UART4_Init+0x4c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <MX_UART4_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_UART4_Init+0x4c>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <MX_UART4_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_UART4_Init+0x4c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_UART4_Init+0x4c>)
 8000d48:	f005 fad2 	bl	80062f0 <HAL_UART_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000d52:	f000 f9b1 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20001348 	.word	0x20001348
 8000d60:	40004c00 	.word	0x40004c00

08000d64 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_UART5_Init+0x4c>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <MX_UART5_Init+0x50>)
 8000d6c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <MX_UART5_Init+0x4c>)
 8000d70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d74:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_UART5_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <MX_UART5_Init+0x4c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <MX_UART5_Init+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_UART5_Init+0x4c>)
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <MX_UART5_Init+0x4c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_UART5_Init+0x4c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_UART5_Init+0x4c>)
 8000d9c:	f005 faa8 	bl	80062f0 <HAL_UART_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000da6:	f000 f987 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	2000138c 	.word	0x2000138c
 8000db4:	40005000 	.word	0x40005000

08000db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08e      	sub	sp, #56	; 0x38
 8000dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
 8000dd2:	4bae      	ldr	r3, [pc, #696]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4aad      	ldr	r2, [pc, #692]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000dd8:	f043 0310 	orr.w	r3, r3, #16
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4bab      	ldr	r3, [pc, #684]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0310 	and.w	r3, r3, #16
 8000de6:	623b      	str	r3, [r7, #32]
 8000de8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
 8000dee:	4ba7      	ldr	r3, [pc, #668]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4aa6      	ldr	r2, [pc, #664]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4ba4      	ldr	r3, [pc, #656]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	61fb      	str	r3, [r7, #28]
 8000e04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
 8000e0a:	4ba0      	ldr	r3, [pc, #640]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a9f      	ldr	r2, [pc, #636]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e10:	f043 0320 	orr.w	r3, r3, #32
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b9d      	ldr	r3, [pc, #628]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0320 	and.w	r3, r3, #32
 8000e1e:	61bb      	str	r3, [r7, #24]
 8000e20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
 8000e26:	4b99      	ldr	r3, [pc, #612]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a98      	ldr	r2, [pc, #608]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b96      	ldr	r3, [pc, #600]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	4b92      	ldr	r3, [pc, #584]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a91      	ldr	r2, [pc, #580]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b8f      	ldr	r3, [pc, #572]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	4b8b      	ldr	r3, [pc, #556]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a8a      	ldr	r2, [pc, #552]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b88      	ldr	r3, [pc, #544]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	4b84      	ldr	r3, [pc, #528]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a83      	ldr	r2, [pc, #524]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b81      	ldr	r3, [pc, #516]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	4b7d      	ldr	r3, [pc, #500]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a7c      	ldr	r2, [pc, #496]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e9c:	f043 0308 	orr.w	r3, r3, #8
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b7a      	ldr	r3, [pc, #488]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0308 	and.w	r3, r3, #8
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STOP_LAMP_Pin|VEHICLE_INLAMP1_Pin|VEHICLE_INLAMP2_Pin|BONNET_LAMP_Pin
 8000eae:	2200      	movs	r2, #0
 8000eb0:	21ff      	movs	r1, #255	; 0xff
 8000eb2:	4877      	ldr	r0, [pc, #476]	; (8001090 <MX_GPIO_Init+0x2d8>)
 8000eb4:	f003 f8a0 	bl	8003ff8 <HAL_GPIO_WritePin>
                          |RIGHT_SIGNAL_Pin|DYH_GPIO7_Pin|FRONT_LAMP_Pin|BACK_LAMP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LEFT_SIGNAL_Pin|GPIO_MPU6050_GYRO2_AD0_Pin, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8000ebe:	4875      	ldr	r0, [pc, #468]	; (8001094 <MX_GPIO_Init+0x2dc>)
 8000ec0:	f003 f89a 	bl	8003ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DYH_GPIO2_Pin|DYH_GPIO3_Pin|DYH_GPIO4_Pin, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000eca:	4873      	ldr	r0, [pc, #460]	; (8001098 <MX_GPIO_Init+0x2e0>)
 8000ecc:	f003 f894 	bl	8003ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DYH_GPIO5_Pin|DYH_GPIO6_Pin|DEBUG_SET_Pin|GPIO_SX1262_TXEN_Pin
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f245 5167 	movw	r1, #21863	; 0x5567
 8000ed6:	4871      	ldr	r0, [pc, #452]	; (800109c <MX_GPIO_Init+0x2e4>)
 8000ed8:	f003 f88e 	bl	8003ff8 <HAL_GPIO_WritePin>
                          |GPIO_SX1262_RXEN_Pin|GPIO_SX1262_RESET_Pin|GPIO_MPU6050_GYRO1_AD0_Pin|GPIO_MPU6050_GYRORIGHT_AD0_Pin
                          |GPIO_MPU6050_GYROLEFT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_Output_M1_S2_Pin|GPIO_Output_M1_S1_Pin|GPIO_Output_M1_S0_Pin|GPIO_Output_M0_S2_Pin
 8000edc:	2200      	movs	r2, #0
 8000ede:	f64f 4180 	movw	r1, #64640	; 0xfc80
 8000ee2:	486f      	ldr	r0, [pc, #444]	; (80010a0 <MX_GPIO_Init+0x2e8>)
 8000ee4:	f003 f888 	bl	8003ff8 <HAL_GPIO_WritePin>
                          |GPIO_Output_M0_S1_Pin|GPIO_Output_M0_S0_Pin|GPIO_Output_LED_DRIVER_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : STOP_LAMP_Pin VEHICLE_INLAMP1_Pin VEHICLE_INLAMP2_Pin BONNET_LAMP_Pin
                           RIGHT_SIGNAL_Pin DYH_GPIO7_Pin FRONT_LAMP_Pin BACK_LAMP_Pin */
  GPIO_InitStruct.Pin = STOP_LAMP_Pin|VEHICLE_INLAMP1_Pin|VEHICLE_INLAMP2_Pin|BONNET_LAMP_Pin
 8000ee8:	23ff      	movs	r3, #255	; 0xff
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
                          |RIGHT_SIGNAL_Pin|DYH_GPIO7_Pin|FRONT_LAMP_Pin|BACK_LAMP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efc:	4619      	mov	r1, r3
 8000efe:	4864      	ldr	r0, [pc, #400]	; (8001090 <MX_GPIO_Init+0x2d8>)
 8000f00:	f002 fee6 	bl	8003cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_SIGNAL_Pin GPIO_MPU6050_GYRO2_AD0_Pin */
  GPIO_InitStruct.Pin = LEFT_SIGNAL_Pin|GPIO_MPU6050_GYRO2_AD0_Pin;
 8000f04:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	485d      	ldr	r0, [pc, #372]	; (8001094 <MX_GPIO_Init+0x2dc>)
 8000f1e:	f002 fed7 	bl	8003cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DYH_GPIO2_Pin DYH_GPIO3_Pin DYH_GPIO4_Pin */
  GPIO_InitStruct.Pin = DYH_GPIO2_Pin|DYH_GPIO3_Pin|DYH_GPIO4_Pin;
 8000f22:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4857      	ldr	r0, [pc, #348]	; (8001098 <MX_GPIO_Init+0x2e0>)
 8000f3c:	f002 fec8 	bl	8003cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DYH_GPIO5_Pin DYH_GPIO6_Pin DEBUG_SET_Pin GPIO_SX1262_TXEN_Pin
                           GPIO_SX1262_RXEN_Pin GPIO_SX1262_RESET_Pin GPIO_MPU6050_GYRO1_AD0_Pin GPIO_MPU6050_GYRORIGHT_AD0_Pin
                           GPIO_MPU6050_GYROLEFT_Pin */
  GPIO_InitStruct.Pin = DYH_GPIO5_Pin|DYH_GPIO6_Pin|DEBUG_SET_Pin|GPIO_SX1262_TXEN_Pin
 8000f40:	f245 5367 	movw	r3, #21863	; 0x5567
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_SX1262_RXEN_Pin|GPIO_SX1262_RESET_Pin|GPIO_MPU6050_GYRO1_AD0_Pin|GPIO_MPU6050_GYRORIGHT_AD0_Pin
                          |GPIO_MPU6050_GYROLEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f56:	4619      	mov	r1, r3
 8000f58:	4850      	ldr	r0, [pc, #320]	; (800109c <MX_GPIO_Init+0x2e4>)
 8000f5a:	f002 feb9 	bl	8003cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DYH_BUSY_INPUT_Pin */
  GPIO_InitStruct.Pin = DYH_BUSY_INPUT_Pin;
 8000f5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DYH_BUSY_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f70:	4619      	mov	r1, r3
 8000f72:	4847      	ldr	r0, [pc, #284]	; (8001090 <MX_GPIO_Init+0x2d8>)
 8000f74:	f002 feac 	bl	8003cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_Output_M1_S2_Pin GPIO_Output_M1_S1_Pin GPIO_Output_M1_S0_Pin GPIO_Output_M0_S2_Pin
                           GPIO_Output_M0_S1_Pin GPIO_Output_M0_S0_Pin GPIO_Output_LED_DRIVER_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_Output_M1_S2_Pin|GPIO_Output_M1_S1_Pin|GPIO_Output_M1_S0_Pin|GPIO_Output_M0_S2_Pin
 8000f78:	f64f 4380 	movw	r3, #64640	; 0xfc80
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_Output_M0_S1_Pin|GPIO_Output_M0_S0_Pin|GPIO_Output_LED_DRIVER_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4843      	ldr	r0, [pc, #268]	; (80010a0 <MX_GPIO_Init+0x2e8>)
 8000f92:	f002 fe9d 	bl	8003cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI3_SX1262_DIO2_Pin EXTI4_SX1262_DIO1_Pin EXTI9_MPU6050_GYRO1_Pin EXT11_MPU5060_GYRORIGHT_Pin
                           EXTI13_MPU6050_GYROLEFT_Pin */
  GPIO_InitStruct.Pin = EXTI3_SX1262_DIO2_Pin|EXTI4_SX1262_DIO1_Pin|EXTI9_MPU6050_GYRO1_Pin|EXT11_MPU5060_GYRORIGHT_Pin
 8000f96:	f642 2318 	movw	r3, #10776	; 0x2a18
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
                          |EXTI13_MPU6050_GYROLEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f9c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000faa:	4619      	mov	r1, r3
 8000fac:	483b      	ldr	r0, [pc, #236]	; (800109c <MX_GPIO_Init+0x2e4>)
 8000fae:	f002 fe8f 	bl	8003cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1262_BUSY_INPUT_Pin */
  GPIO_InitStruct.Pin = SX1262_BUSY_INPUT_Pin;
 8000fb2:	2380      	movs	r3, #128	; 0x80
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX1262_BUSY_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4835      	ldr	r0, [pc, #212]	; (800109c <MX_GPIO_Init+0x2e4>)
 8000fc6:	f002 fe83 	bl	8003cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI7_MPU6050_GYRO2_Pin */
  GPIO_InitStruct.Pin = EXTI7_MPU6050_GYRO2_Pin;
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXTI7_MPU6050_GYRO2_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fdc:	4619      	mov	r1, r3
 8000fde:	482d      	ldr	r0, [pc, #180]	; (8001094 <MX_GPIO_Init+0x2dc>)
 8000fe0:	f002 fe76 	bl	8003cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI0_IGN_KEY_Pin */
  GPIO_InitStruct.Pin = EXTI0_IGN_KEY_Pin;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXTI0_IGN_KEY_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4829      	ldr	r0, [pc, #164]	; (80010a0 <MX_GPIO_Init+0x2e8>)
 8000ffa:	f002 fe69 	bl	8003cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI8_RIGHTARM_Pin */
  GPIO_InitStruct.Pin = EXTI8_RIGHTARM_Pin;
 8000ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001004:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXTI8_RIGHTARM_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	4619      	mov	r1, r3
 8001014:	4823      	ldr	r0, [pc, #140]	; (80010a4 <MX_GPIO_Init+0x2ec>)
 8001016:	f002 fe5b 	bl	8003cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_LEFTARM_INPUT_Pin */
  GPIO_InitStruct.Pin = GPIO_LEFTARM_INPUT_Pin;
 800101a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001020:	2300      	movs	r3, #0
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIO_LEFTARM_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102c:	4619      	mov	r1, r3
 800102e:	481d      	ldr	r0, [pc, #116]	; (80010a4 <MX_GPIO_Init+0x2ec>)
 8001030:	f002 fe4e 	bl	8003cd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2105      	movs	r1, #5
 8001038:	2006      	movs	r0, #6
 800103a:	f002 fdf6 	bl	8003c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800103e:	2006      	movs	r0, #6
 8001040:	f002 fe0f 	bl	8003c62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	2105      	movs	r1, #5
 8001048:	2009      	movs	r0, #9
 800104a:	f002 fdee 	bl	8003c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800104e:	2009      	movs	r0, #9
 8001050:	f002 fe07 	bl	8003c62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2105      	movs	r1, #5
 8001058:	200a      	movs	r0, #10
 800105a:	f002 fde6 	bl	8003c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800105e:	200a      	movs	r0, #10
 8001060:	f002 fdff 	bl	8003c62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	2105      	movs	r1, #5
 8001068:	2017      	movs	r0, #23
 800106a:	f002 fdde 	bl	8003c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800106e:	2017      	movs	r0, #23
 8001070:	f002 fdf7 	bl	8003c62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	2105      	movs	r1, #5
 8001078:	2028      	movs	r0, #40	; 0x28
 800107a:	f002 fdd6 	bl	8003c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800107e:	2028      	movs	r0, #40	; 0x28
 8001080:	f002 fdef 	bl	8003c62 <HAL_NVIC_EnableIRQ>

}
 8001084:	bf00      	nop
 8001086:	3738      	adds	r7, #56	; 0x38
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40023800 	.word	0x40023800
 8001090:	40021000 	.word	0x40021000
 8001094:	40020800 	.word	0x40020800
 8001098:	40021400 	.word	0x40021400
 800109c:	40021800 	.word	0x40021800
 80010a0:	40020c00 	.word	0x40020c00
 80010a4:	40020400 	.word	0x40020400

080010a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010b0:	2001      	movs	r0, #1
 80010b2:	f005 fdef 	bl	8006c94 <osDelay>
 80010b6:	e7fb      	b.n	80010b0 <StartDefaultTask+0x8>

080010b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010bc:	b672      	cpsid	i
}
 80010be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <Error_Handler+0x8>
	...

080010c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_MspInit+0x54>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a11      	ldr	r2, [pc, #68]	; (8001118 <HAL_MspInit+0x54>)
 80010d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <HAL_MspInit+0x54>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_MspInit+0x54>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <HAL_MspInit+0x54>)
 80010f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f4:	6413      	str	r3, [r2, #64]	; 0x40
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <HAL_MspInit+0x54>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	210f      	movs	r1, #15
 8001106:	f06f 0001 	mvn.w	r0, #1
 800110a:	f002 fd8e 	bl	8003c2a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800

0800111c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b090      	sub	sp, #64	; 0x40
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a62      	ldr	r2, [pc, #392]	; (80012c4 <HAL_ADC_MspInit+0x1a8>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d15c      	bne.n	80011f8 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
 8001142:	4b61      	ldr	r3, [pc, #388]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	4a60      	ldr	r2, [pc, #384]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114c:	6453      	str	r3, [r2, #68]	; 0x44
 800114e:	4b5e      	ldr	r3, [pc, #376]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
 8001158:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
 800115e:	4b5a      	ldr	r3, [pc, #360]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a59      	ldr	r2, [pc, #356]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b57      	ldr	r3, [pc, #348]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
 8001174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
 800117a:	4b53      	ldr	r3, [pc, #332]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a52      	ldr	r2, [pc, #328]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b50      	ldr	r3, [pc, #320]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	623b      	str	r3, [r7, #32]
 8001190:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
 8001196:	4b4c      	ldr	r3, [pc, #304]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a4b      	ldr	r2, [pc, #300]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b49      	ldr	r3, [pc, #292]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	61fb      	str	r3, [r7, #28]
 80011ac:	69fb      	ldr	r3, [r7, #28]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_IN4_BRAKE_Pin|ADC1_IN5_ANGLETEST_Pin|ADC1_IN6_GAS_Pin|ADC1_IN7_RIGHTARM_AXIS_Y_Pin;
 80011ae:	23f0      	movs	r3, #240	; 0xf0
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b2:	2303      	movs	r3, #3
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011be:	4619      	mov	r1, r3
 80011c0:	4842      	ldr	r0, [pc, #264]	; (80012cc <HAL_ADC_MspInit+0x1b0>)
 80011c2:	f002 fd85 	bl	8003cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN14_LEFTARM_AXIS_X_Pin|ADC1_IN15_LEFTARM_AXIS_Y_Pin;
 80011c6:	2330      	movs	r3, #48	; 0x30
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ca:	2303      	movs	r3, #3
 80011cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d6:	4619      	mov	r1, r3
 80011d8:	483d      	ldr	r0, [pc, #244]	; (80012d0 <HAL_ADC_MspInit+0x1b4>)
 80011da:	f002 fd79 	bl	8003cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN9_RIGHTARM_AXIS_X_Pin;
 80011de:	2302      	movs	r3, #2
 80011e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e2:	2303      	movs	r3, #3
 80011e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ADC1_IN9_RIGHTARM_AXIS_X_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ee:	4619      	mov	r1, r3
 80011f0:	4838      	ldr	r0, [pc, #224]	; (80012d4 <HAL_ADC_MspInit+0x1b8>)
 80011f2:	f002 fd6d 	bl	8003cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80011f6:	e061      	b.n	80012bc <HAL_ADC_MspInit+0x1a0>
  else if(hadc->Instance==ADC3)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a36      	ldr	r2, [pc, #216]	; (80012d8 <HAL_ADC_MspInit+0x1bc>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d15c      	bne.n	80012bc <HAL_ADC_MspInit+0x1a0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a2f      	ldr	r2, [pc, #188]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 800120c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b2d      	ldr	r3, [pc, #180]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	4b29      	ldr	r3, [pc, #164]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a28      	ldr	r2, [pc, #160]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001228:	f043 0320 	orr.w	r3, r3, #32
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0320 	and.w	r3, r3, #32
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a21      	ldr	r2, [pc, #132]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a1a      	ldr	r2, [pc, #104]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC3_IN9_5VIN_Pin|GPIO_PIN_4|GPIO_PIN_5|ADC3_IN4_VINLAMP2_Pin
 8001272:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001278:	2303      	movs	r3, #3
 800127a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001280:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001284:	4619      	mov	r1, r3
 8001286:	4815      	ldr	r0, [pc, #84]	; (80012dc <HAL_ADC_MspInit+0x1c0>)
 8001288:	f002 fd22 	bl	8003cd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC3_IN10_12VIN_Pin|ADC3_IN11_VMCU_Pin|ADC3_IN12_3V3IN_Pin|ADC3_IN13_M0_Pin;
 800128c:	230f      	movs	r3, #15
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001290:	2303      	movs	r3, #3
 8001292:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001298:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800129c:	4619      	mov	r1, r3
 800129e:	480c      	ldr	r0, [pc, #48]	; (80012d0 <HAL_ADC_MspInit+0x1b4>)
 80012a0:	f002 fd16 	bl	8003cd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC3_IN1_FRONT_LIGHT_CURRENT_Pin|ADC3_IN2_BACK_LIGHT_CURRENT_Pin|ADC3_IN3_VINLAMP1_Pin;
 80012a4:	230e      	movs	r3, #14
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a8:	2303      	movs	r3, #3
 80012aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012b4:	4619      	mov	r1, r3
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <HAL_ADC_MspInit+0x1b0>)
 80012b8:	f002 fd0a 	bl	8003cd0 <HAL_GPIO_Init>
}
 80012bc:	bf00      	nop
 80012be:	3740      	adds	r7, #64	; 0x40
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40012000 	.word	0x40012000
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40020800 	.word	0x40020800
 80012d4:	40020400 	.word	0x40020400
 80012d8:	40012200 	.word	0x40012200
 80012dc:	40021400 	.word	0x40021400

080012e0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08c      	sub	sp, #48	; 0x30
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 031c 	add.w	r3, r7, #28
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a53      	ldr	r2, [pc, #332]	; (800144c <HAL_CAN_MspInit+0x16c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d156      	bne.n	80013b0 <HAL_CAN_MspInit+0xd0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001302:	4b53      	ldr	r3, [pc, #332]	; (8001450 <HAL_CAN_MspInit+0x170>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	3301      	adds	r3, #1
 8001308:	4a51      	ldr	r2, [pc, #324]	; (8001450 <HAL_CAN_MspInit+0x170>)
 800130a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800130c:	4b50      	ldr	r3, [pc, #320]	; (8001450 <HAL_CAN_MspInit+0x170>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d10d      	bne.n	8001330 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001314:	2300      	movs	r3, #0
 8001316:	61bb      	str	r3, [r7, #24]
 8001318:	4b4e      	ldr	r3, [pc, #312]	; (8001454 <HAL_CAN_MspInit+0x174>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	4a4d      	ldr	r2, [pc, #308]	; (8001454 <HAL_CAN_MspInit+0x174>)
 800131e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001322:	6413      	str	r3, [r2, #64]	; 0x40
 8001324:	4b4b      	ldr	r3, [pc, #300]	; (8001454 <HAL_CAN_MspInit+0x174>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	4b47      	ldr	r3, [pc, #284]	; (8001454 <HAL_CAN_MspInit+0x174>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	4a46      	ldr	r2, [pc, #280]	; (8001454 <HAL_CAN_MspInit+0x174>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	6313      	str	r3, [r2, #48]	; 0x30
 8001340:	4b44      	ldr	r3, [pc, #272]	; (8001454 <HAL_CAN_MspInit+0x174>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800134c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800135e:	2309      	movs	r3, #9
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	483b      	ldr	r0, [pc, #236]	; (8001458 <HAL_CAN_MspInit+0x178>)
 800136a:	f002 fcb1 	bl	8003cd0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2105      	movs	r1, #5
 8001372:	2013      	movs	r0, #19
 8001374:	f002 fc59 	bl	8003c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001378:	2013      	movs	r0, #19
 800137a:	f002 fc72 	bl	8003c62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2105      	movs	r1, #5
 8001382:	2014      	movs	r0, #20
 8001384:	f002 fc51 	bl	8003c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001388:	2014      	movs	r0, #20
 800138a:	f002 fc6a 	bl	8003c62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2105      	movs	r1, #5
 8001392:	2015      	movs	r0, #21
 8001394:	f002 fc49 	bl	8003c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001398:	2015      	movs	r0, #21
 800139a:	f002 fc62 	bl	8003c62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2105      	movs	r1, #5
 80013a2:	2016      	movs	r0, #22
 80013a4:	f002 fc41 	bl	8003c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80013a8:	2016      	movs	r0, #22
 80013aa:	f002 fc5a 	bl	8003c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80013ae:	e048      	b.n	8001442 <HAL_CAN_MspInit+0x162>
  else if(hcan->Instance==CAN2)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a29      	ldr	r2, [pc, #164]	; (800145c <HAL_CAN_MspInit+0x17c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d143      	bne.n	8001442 <HAL_CAN_MspInit+0x162>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	4b25      	ldr	r3, [pc, #148]	; (8001454 <HAL_CAN_MspInit+0x174>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	4a24      	ldr	r2, [pc, #144]	; (8001454 <HAL_CAN_MspInit+0x174>)
 80013c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013c8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ca:	4b22      	ldr	r3, [pc, #136]	; (8001454 <HAL_CAN_MspInit+0x174>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80013d6:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <HAL_CAN_MspInit+0x170>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	3301      	adds	r3, #1
 80013dc:	4a1c      	ldr	r2, [pc, #112]	; (8001450 <HAL_CAN_MspInit+0x170>)
 80013de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <HAL_CAN_MspInit+0x170>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d10d      	bne.n	8001404 <HAL_CAN_MspInit+0x124>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	4b19      	ldr	r3, [pc, #100]	; (8001454 <HAL_CAN_MspInit+0x174>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	4a18      	ldr	r2, [pc, #96]	; (8001454 <HAL_CAN_MspInit+0x174>)
 80013f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013f6:	6413      	str	r3, [r2, #64]	; 0x40
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <HAL_CAN_MspInit+0x174>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001404:	2300      	movs	r3, #0
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_CAN_MspInit+0x174>)
 800140a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140c:	4a11      	ldr	r2, [pc, #68]	; (8001454 <HAL_CAN_MspInit+0x174>)
 800140e:	f043 0302 	orr.w	r3, r3, #2
 8001412:	6313      	str	r3, [r2, #48]	; 0x30
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <HAL_CAN_MspInit+0x174>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001420:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001432:	2309      	movs	r3, #9
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	4619      	mov	r1, r3
 800143c:	4808      	ldr	r0, [pc, #32]	; (8001460 <HAL_CAN_MspInit+0x180>)
 800143e:	f002 fc47 	bl	8003cd0 <HAL_GPIO_Init>
}
 8001442:	bf00      	nop
 8001444:	3730      	adds	r7, #48	; 0x30
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40006400 	.word	0x40006400
 8001450:	200013d4 	.word	0x200013d4
 8001454:	40023800 	.word	0x40023800
 8001458:	40020000 	.word	0x40020000
 800145c:	40006800 	.word	0x40006800
 8001460:	40020400 	.word	0x40020400

08001464 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <HAL_CRC_MspInit+0x3c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d10d      	bne.n	8001492 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_CRC_MspInit+0x40>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a09      	ldr	r2, [pc, #36]	; (80014a4 <HAL_CRC_MspInit+0x40>)
 8001480:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <HAL_CRC_MspInit+0x40>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023000 	.word	0x40023000
 80014a4:	40023800 	.word	0x40023800

080014a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08e      	sub	sp, #56	; 0x38
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a5b      	ldr	r2, [pc, #364]	; (8001634 <HAL_I2C_MspInit+0x18c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d12c      	bne.n	8001524 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
 80014ce:	4b5a      	ldr	r3, [pc, #360]	; (8001638 <HAL_I2C_MspInit+0x190>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a59      	ldr	r2, [pc, #356]	; (8001638 <HAL_I2C_MspInit+0x190>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b57      	ldr	r3, [pc, #348]	; (8001638 <HAL_I2C_MspInit+0x190>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	623b      	str	r3, [r7, #32]
 80014e4:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014e6:	23c0      	movs	r3, #192	; 0xc0
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ea:	2312      	movs	r3, #18
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014f6:	2304      	movs	r3, #4
 80014f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fe:	4619      	mov	r1, r3
 8001500:	484e      	ldr	r0, [pc, #312]	; (800163c <HAL_I2C_MspInit+0x194>)
 8001502:	f002 fbe5 	bl	8003cd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
 800150a:	4b4b      	ldr	r3, [pc, #300]	; (8001638 <HAL_I2C_MspInit+0x190>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	4a4a      	ldr	r2, [pc, #296]	; (8001638 <HAL_I2C_MspInit+0x190>)
 8001510:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001514:	6413      	str	r3, [r2, #64]	; 0x40
 8001516:	4b48      	ldr	r3, [pc, #288]	; (8001638 <HAL_I2C_MspInit+0x190>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800151e:	61fb      	str	r3, [r7, #28]
 8001520:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001522:	e082      	b.n	800162a <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a45      	ldr	r2, [pc, #276]	; (8001640 <HAL_I2C_MspInit+0x198>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d12c      	bne.n	8001588 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <HAL_I2C_MspInit+0x190>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a40      	ldr	r2, [pc, #256]	; (8001638 <HAL_I2C_MspInit+0x190>)
 8001538:	f043 0320 	orr.w	r3, r3, #32
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b3e      	ldr	r3, [pc, #248]	; (8001638 <HAL_I2C_MspInit+0x190>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0320 	and.w	r3, r3, #32
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800154a:	2303      	movs	r3, #3
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800154e:	2312      	movs	r3, #18
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800155a:	2304      	movs	r3, #4
 800155c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800155e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001562:	4619      	mov	r1, r3
 8001564:	4837      	ldr	r0, [pc, #220]	; (8001644 <HAL_I2C_MspInit+0x19c>)
 8001566:	f002 fbb3 	bl	8003cd0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	4b32      	ldr	r3, [pc, #200]	; (8001638 <HAL_I2C_MspInit+0x190>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	4a31      	ldr	r2, [pc, #196]	; (8001638 <HAL_I2C_MspInit+0x190>)
 8001574:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001578:	6413      	str	r3, [r2, #64]	; 0x40
 800157a:	4b2f      	ldr	r3, [pc, #188]	; (8001638 <HAL_I2C_MspInit+0x190>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	697b      	ldr	r3, [r7, #20]
}
 8001586:	e050      	b.n	800162a <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C3)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a2e      	ldr	r2, [pc, #184]	; (8001648 <HAL_I2C_MspInit+0x1a0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d14b      	bne.n	800162a <HAL_I2C_MspInit+0x182>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b28      	ldr	r3, [pc, #160]	; (8001638 <HAL_I2C_MspInit+0x190>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a27      	ldr	r2, [pc, #156]	; (8001638 <HAL_I2C_MspInit+0x190>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b25      	ldr	r3, [pc, #148]	; (8001638 <HAL_I2C_MspInit+0x190>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b21      	ldr	r3, [pc, #132]	; (8001638 <HAL_I2C_MspInit+0x190>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a20      	ldr	r2, [pc, #128]	; (8001638 <HAL_I2C_MspInit+0x190>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <HAL_I2C_MspInit+0x190>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d0:	2312      	movs	r3, #18
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015dc:	2304      	movs	r3, #4
 80015de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e4:	4619      	mov	r1, r3
 80015e6:	4819      	ldr	r0, [pc, #100]	; (800164c <HAL_I2C_MspInit+0x1a4>)
 80015e8:	f002 fb72 	bl	8003cd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f2:	2312      	movs	r3, #18
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015fe:	2304      	movs	r3, #4
 8001600:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001606:	4619      	mov	r1, r3
 8001608:	4811      	ldr	r0, [pc, #68]	; (8001650 <HAL_I2C_MspInit+0x1a8>)
 800160a:	f002 fb61 	bl	8003cd0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HAL_I2C_MspInit+0x190>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	4a08      	ldr	r2, [pc, #32]	; (8001638 <HAL_I2C_MspInit+0x190>)
 8001618:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800161c:	6413      	str	r3, [r2, #64]	; 0x40
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_I2C_MspInit+0x190>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
}
 800162a:	bf00      	nop
 800162c:	3738      	adds	r7, #56	; 0x38
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40005400 	.word	0x40005400
 8001638:	40023800 	.word	0x40023800
 800163c:	40020400 	.word	0x40020400
 8001640:	40005800 	.word	0x40005800
 8001644:	40021400 	.word	0x40021400
 8001648:	40005c00 	.word	0x40005c00
 800164c:	40020800 	.word	0x40020800
 8001650:	40020000 	.word	0x40020000

08001654 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b09a      	sub	sp, #104	; 0x68
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	225c      	movs	r2, #92	; 0x5c
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f00a f9b5 	bl	800b9d4 <memset>
  if(hrtc->Instance==RTC)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a0c      	ldr	r2, [pc, #48]	; (80016a0 <HAL_RTC_MspInit+0x4c>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d111      	bne.n	8001698 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001674:	2320      	movs	r3, #32
 8001676:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001678:	f44f 7300 	mov.w	r3, #512	; 0x200
 800167c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800167e:	f107 030c 	add.w	r3, r7, #12
 8001682:	4618      	mov	r0, r3
 8001684:	f002 ff54 	bl	8004530 <HAL_RCCEx_PeriphCLKConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800168e:	f7ff fd13 	bl	80010b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <HAL_RTC_MspInit+0x50>)
 8001694:	2201      	movs	r2, #1
 8001696:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001698:	bf00      	nop
 800169a:	3768      	adds	r7, #104	; 0x68
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40002800 	.word	0x40002800
 80016a4:	42470e3c 	.word	0x42470e3c

080016a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08e      	sub	sp, #56	; 0x38
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a68      	ldr	r2, [pc, #416]	; (8001868 <HAL_SPI_MspInit+0x1c0>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d14b      	bne.n	8001762 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	623b      	str	r3, [r7, #32]
 80016ce:	4b67      	ldr	r3, [pc, #412]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	4a66      	ldr	r2, [pc, #408]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 80016d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d8:	6413      	str	r3, [r2, #64]	; 0x40
 80016da:	4b64      	ldr	r3, [pc, #400]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e2:	623b      	str	r3, [r7, #32]
 80016e4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	4b60      	ldr	r3, [pc, #384]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a5f      	ldr	r2, [pc, #380]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 80016f0:	f043 0302 	orr.w	r3, r3, #2
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b5d      	ldr	r3, [pc, #372]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	61fb      	str	r3, [r7, #28]
 8001700:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	61bb      	str	r3, [r7, #24]
 8001706:	4b59      	ldr	r3, [pc, #356]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a58      	ldr	r2, [pc, #352]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 800170c:	f043 0308 	orr.w	r3, r3, #8
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b56      	ldr	r3, [pc, #344]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	61bb      	str	r3, [r7, #24]
 800171c:	69bb      	ldr	r3, [r7, #24]
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    PD1     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800171e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172c:	2303      	movs	r3, #3
 800172e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001730:	2305      	movs	r3, #5
 8001732:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001738:	4619      	mov	r1, r3
 800173a:	484d      	ldr	r0, [pc, #308]	; (8001870 <HAL_SPI_MspInit+0x1c8>)
 800173c:	f002 fac8 	bl	8003cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001740:	2302      	movs	r3, #2
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001750:	2307      	movs	r3, #7
 8001752:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001758:	4619      	mov	r1, r3
 800175a:	4846      	ldr	r0, [pc, #280]	; (8001874 <HAL_SPI_MspInit+0x1cc>)
 800175c:	f002 fab8 	bl	8003cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001760:	e07e      	b.n	8001860 <HAL_SPI_MspInit+0x1b8>
  else if(hspi->Instance==SPI3)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a44      	ldr	r2, [pc, #272]	; (8001878 <HAL_SPI_MspInit+0x1d0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d179      	bne.n	8001860 <HAL_SPI_MspInit+0x1b8>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	4b3e      	ldr	r3, [pc, #248]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	4a3d      	ldr	r2, [pc, #244]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 8001776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800177a:	6413      	str	r3, [r2, #64]	; 0x40
 800177c:	4b3b      	ldr	r3, [pc, #236]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001788:	2300      	movs	r3, #0
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	4b37      	ldr	r3, [pc, #220]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 800178e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001790:	4a36      	ldr	r2, [pc, #216]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 8001792:	f043 0302 	orr.w	r3, r3, #2
 8001796:	6313      	str	r3, [r2, #48]	; 0x30
 8001798:	4b34      	ldr	r3, [pc, #208]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 800179a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	4b30      	ldr	r3, [pc, #192]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	4a2f      	ldr	r2, [pc, #188]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6313      	str	r3, [r2, #48]	; 0x30
 80017b4:	4b2d      	ldr	r3, [pc, #180]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 80017b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c0:	2300      	movs	r3, #0
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	4b29      	ldr	r3, [pc, #164]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 80017c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c8:	4a28      	ldr	r2, [pc, #160]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 80017ca:	f043 0304 	orr.w	r3, r3, #4
 80017ce:	6313      	str	r3, [r2, #48]	; 0x30
 80017d0:	4b26      	ldr	r3, [pc, #152]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 80017d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017dc:	2301      	movs	r3, #1
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e8:	2303      	movs	r3, #3
 80017ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80017ec:	2307      	movs	r3, #7
 80017ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f4:	4619      	mov	r1, r3
 80017f6:	481e      	ldr	r0, [pc, #120]	; (8001870 <HAL_SPI_MspInit+0x1c8>)
 80017f8:	f002 fa6a 	bl	8003cd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800180e:	2306      	movs	r3, #6
 8001810:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001816:	4619      	mov	r1, r3
 8001818:	4818      	ldr	r0, [pc, #96]	; (800187c <HAL_SPI_MspInit+0x1d4>)
 800181a:	f002 fa59 	bl	8003cd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800181e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182c:	2303      	movs	r3, #3
 800182e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001830:	2306      	movs	r3, #6
 8001832:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001838:	4619      	mov	r1, r3
 800183a:	4811      	ldr	r0, [pc, #68]	; (8001880 <HAL_SPI_MspInit+0x1d8>)
 800183c:	f002 fa48 	bl	8003cd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001840:	2310      	movs	r3, #16
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	2303      	movs	r3, #3
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001850:	2306      	movs	r3, #6
 8001852:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001858:	4619      	mov	r1, r3
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <HAL_SPI_MspInit+0x1c8>)
 800185c:	f002 fa38 	bl	8003cd0 <HAL_GPIO_Init>
}
 8001860:	bf00      	nop
 8001862:	3738      	adds	r7, #56	; 0x38
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40003800 	.word	0x40003800
 800186c:	40023800 	.word	0x40023800
 8001870:	40020400 	.word	0x40020400
 8001874:	40020c00 	.word	0x40020c00
 8001878:	40003c00 	.word	0x40003c00
 800187c:	40020000 	.word	0x40020000
 8001880:	40020800 	.word	0x40020800

08001884 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <HAL_TIM_Base_MspInit+0x3c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d10d      	bne.n	80018b2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_TIM_Base_MspInit+0x40>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	4a09      	ldr	r2, [pc, #36]	; (80018c4 <HAL_TIM_Base_MspInit+0x40>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6453      	str	r3, [r2, #68]	; 0x44
 80018a6:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <HAL_TIM_Base_MspInit+0x40>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80018b2:	bf00      	nop
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40010000 	.word	0x40010000
 80018c4:	40023800 	.word	0x40023800

080018c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a12      	ldr	r2, [pc, #72]	; (8001930 <HAL_TIM_MspPostInit+0x68>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d11e      	bne.n	8001928 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <HAL_TIM_MspPostInit+0x6c>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a10      	ldr	r2, [pc, #64]	; (8001934 <HAL_TIM_MspPostInit+0x6c>)
 80018f4:	f043 0310 	orr.w	r3, r3, #16
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <HAL_TIM_MspPostInit+0x6c>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_BUZZER_Pin|TIM1_CH2_RGB_RED_Pin|TIM1_CH3_RGB_BLUE_Pin|TIM1_CH4_RGB_GREEN_Pin;
 8001906:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800190a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001918:	2301      	movs	r3, #1
 800191a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	4619      	mov	r1, r3
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <HAL_TIM_MspPostInit+0x70>)
 8001924:	f002 f9d4 	bl	8003cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001928:	bf00      	nop
 800192a:	3720      	adds	r7, #32
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40010000 	.word	0x40010000
 8001934:	40023800 	.word	0x40023800
 8001938:	40021000 	.word	0x40021000

0800193c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08e      	sub	sp, #56	; 0x38
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a51      	ldr	r2, [pc, #324]	; (8001aa0 <HAL_UART_MspInit+0x164>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d14b      	bne.n	80019f6 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	623b      	str	r3, [r7, #32]
 8001962:	4b50      	ldr	r3, [pc, #320]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a4f      	ldr	r2, [pc, #316]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001968:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b4d      	ldr	r3, [pc, #308]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001976:	623b      	str	r3, [r7, #32]
 8001978:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	4b49      	ldr	r3, [pc, #292]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a48      	ldr	r2, [pc, #288]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b46      	ldr	r3, [pc, #280]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	61fb      	str	r3, [r7, #28]
 8001994:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
 800199a:	4b42      	ldr	r3, [pc, #264]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a41      	ldr	r2, [pc, #260]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 80019a0:	f043 0304 	orr.w	r3, r3, #4
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b3f      	ldr	r3, [pc, #252]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	61bb      	str	r3, [r7, #24]
 80019b0:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = DYH_UART4_TX_GPIO0_Pin;
 80019b2:	2301      	movs	r3, #1
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019c2:	2308      	movs	r3, #8
 80019c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DYH_UART4_TX_GPIO0_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ca:	4619      	mov	r1, r3
 80019cc:	4836      	ldr	r0, [pc, #216]	; (8001aa8 <HAL_UART_MspInit+0x16c>)
 80019ce:	f002 f97f 	bl	8003cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DYH_UART4_RX_GPIO1_Pin;
 80019d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019e4:	2308      	movs	r3, #8
 80019e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DYH_UART4_RX_GPIO1_GPIO_Port, &GPIO_InitStruct);
 80019e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ec:	4619      	mov	r1, r3
 80019ee:	482f      	ldr	r0, [pc, #188]	; (8001aac <HAL_UART_MspInit+0x170>)
 80019f0:	f002 f96e 	bl	8003cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80019f4:	e04f      	b.n	8001a96 <HAL_UART_MspInit+0x15a>
  else if(huart->Instance==UART5)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a2d      	ldr	r2, [pc, #180]	; (8001ab0 <HAL_UART_MspInit+0x174>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d14a      	bne.n	8001a96 <HAL_UART_MspInit+0x15a>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	4a26      	ldr	r2, [pc, #152]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001a0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a10:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	4a1f      	ldr	r2, [pc, #124]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001a26:	f043 0304 	orr.w	r3, r3, #4
 8001a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	4a18      	ldr	r2, [pc, #96]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001a42:	f043 0308 	orr.w	r3, r3, #8
 8001a46:	6313      	str	r3, [r2, #48]	; 0x30
 8001a48:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DEBUG_UART5_TX_Pin;
 8001a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a62:	2303      	movs	r3, #3
 8001a64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001a66:	2308      	movs	r3, #8
 8001a68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8001a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480e      	ldr	r0, [pc, #56]	; (8001aac <HAL_UART_MspInit+0x170>)
 8001a72:	f002 f92d 	bl	8003cd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DEBUG_UART5_RX_Pin;
 8001a76:	2304      	movs	r3, #4
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001a86:	2308      	movs	r3, #8
 8001a88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_UART5_RX_GPIO_Port, &GPIO_InitStruct);
 8001a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4808      	ldr	r0, [pc, #32]	; (8001ab4 <HAL_UART_MspInit+0x178>)
 8001a92:	f002 f91d 	bl	8003cd0 <HAL_GPIO_Init>
}
 8001a96:	bf00      	nop
 8001a98:	3738      	adds	r7, #56	; 0x38
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40004c00 	.word	0x40004c00
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	40020800 	.word	0x40020800
 8001ab0:	40005000 	.word	0x40005000
 8001ab4:	40020c00 	.word	0x40020c00

08001ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <NMI_Handler+0x4>

08001abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac2:	e7fe      	b.n	8001ac2 <HardFault_Handler+0x4>

08001ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <MemManage_Handler+0x4>

08001aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ace:	e7fe      	b.n	8001ace <BusFault_Handler+0x4>

08001ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <UsageFault_Handler+0x4>

08001ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae8:	f000 fde4 	bl	80026b4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001aec:	f006 fec2 	bl	8008874 <xTaskGetSchedulerState>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d001      	beq.n	8001afa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001af6:	f007 fe5f 	bl	80097b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}

08001afe <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI0_IGN_KEY_Pin);
 8001b02:	2001      	movs	r0, #1
 8001b04:	f002 fa92 	bl	800402c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI3_SX1262_DIO2_Pin);
 8001b10:	2008      	movs	r0, #8
 8001b12:	f002 fa8b 	bl	800402c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI4_SX1262_DIO1_Pin);
 8001b1e:	2010      	movs	r0, #16
 8001b20:	f002 fa84 	bl	800402c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
__WEAK void CAN1_TX_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b2c:	4802      	ldr	r0, [pc, #8]	; (8001b38 <CAN1_TX_IRQHandler+0x10>)
 8001b2e:	f001 fd67 	bl	8003600 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200010dc 	.word	0x200010dc

08001b3c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
__WEAK void CAN1_RX1_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <CAN1_RX1_IRQHandler+0x10>)
 8001b42:	f001 fd5d 	bl	8003600 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200010dc 	.word	0x200010dc

08001b50 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
__WEAK void CAN1_SCE_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <CAN1_SCE_IRQHandler+0x10>)
 8001b56:	f001 fd53 	bl	8003600 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200010dc 	.word	0x200010dc

08001b64 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI7_MPU6050_GYRO2_Pin);
 8001b68:	2080      	movs	r0, #128	; 0x80
 8001b6a:	f002 fa5f 	bl	800402c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI8_RIGHTARM_Pin);
 8001b6e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b72:	f002 fa5b 	bl	800402c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI9_MPU6050_GYRO1_Pin);
 8001b76:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b7a:	f002 fa57 	bl	800402c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT11_MPU5060_GYRORIGHT_Pin);
 8001b86:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001b8a:	f002 fa4f 	bl	800402c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI13_MPU6050_GYROLEFT_Pin);
 8001b8e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b92:	f002 fa4b 	bl	800402c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ba4:	4a14      	ldr	r2, [pc, #80]	; (8001bf8 <_sbrk+0x5c>)
 8001ba6:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <_sbrk+0x60>)
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb0:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <_sbrk+0x64>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d102      	bne.n	8001bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <_sbrk+0x64>)
 8001bba:	4a12      	ldr	r2, [pc, #72]	; (8001c04 <_sbrk+0x68>)
 8001bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <_sbrk+0x64>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d207      	bcs.n	8001bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bcc:	f009 feca 	bl	800b964 <__errno>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	220c      	movs	r2, #12
 8001bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bda:	e009      	b.n	8001bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <_sbrk+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <_sbrk+0x64>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	4a05      	ldr	r2, [pc, #20]	; (8001c00 <_sbrk+0x64>)
 8001bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bee:	68fb      	ldr	r3, [r7, #12]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20020000 	.word	0x20020000
 8001bfc:	00004000 	.word	0x00004000
 8001c00:	200013d8 	.word	0x200013d8
 8001c04:	2000c288 	.word	0x2000c288

08001c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <SystemInit+0x20>)
 8001c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c12:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <SystemInit+0x20>)
 8001c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c30:	480d      	ldr	r0, [pc, #52]	; (8001c68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c32:	490e      	ldr	r1, [pc, #56]	; (8001c6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c34:	4a0e      	ldr	r2, [pc, #56]	; (8001c70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c38:	e002      	b.n	8001c40 <LoopCopyDataInit>

08001c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3e:	3304      	adds	r3, #4

08001c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c44:	d3f9      	bcc.n	8001c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c46:	4a0b      	ldr	r2, [pc, #44]	; (8001c74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c48:	4c0b      	ldr	r4, [pc, #44]	; (8001c78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c4c:	e001      	b.n	8001c52 <LoopFillZerobss>

08001c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c50:	3204      	adds	r2, #4

08001c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c54:	d3fb      	bcc.n	8001c4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c56:	f7ff ffd7 	bl	8001c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c5a:	f009 fe89 	bl	800b970 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c5e:	f7fe fca9 	bl	80005b4 <main>
  bx  lr    
 8001c62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c6c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001c70:	0800c73c 	.word	0x0800c73c
  ldr r2, =_sbss
 8001c74:	20001030 	.word	0x20001030
  ldr r4, =_ebss
 8001c78:	2000c288 	.word	0x2000c288

08001c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c7c:	e7fe      	b.n	8001c7c <ADC_IRQHandler>
	...

08001c80 <CAN1_RX0_IRQHandler>:
 * @NOTICE: Dont forget to get __WEAK IRQ Handler in order to defined in it.c file which created by CubeMX
 */
#if (defined(STM32F446xx) || defined(STM32F407xx) && defined(BXCAN_Protocol))

void CAN1_RX0_IRQHandler(void)
{
 8001c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c82:	b087      	sub	sp, #28
 8001c84:	af06      	add	r7, sp, #24

  HAL_CAN_IRQHandler(&protocol.obj.bxHandle.hbxcanHandle);
 8001c86:	4816      	ldr	r0, [pc, #88]	; (8001ce0 <CAN1_RX0_IRQHandler+0x60>)
 8001c88:	f001 fcba 	bl	8003600 <HAL_CAN_IRQHandler>

  if( HAL_CAN_GetRxMessage( &protocol.obj.bxHandle.hbxcanHandle ,
 8001c8c:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <CAN1_RX0_IRQHandler+0x64>)
 8001c8e:	4a16      	ldr	r2, [pc, #88]	; (8001ce8 <CAN1_RX0_IRQHandler+0x68>)
 8001c90:	2100      	movs	r1, #0
 8001c92:	4813      	ldr	r0, [pc, #76]	; (8001ce0 <CAN1_RX0_IRQHandler+0x60>)
 8001c94:	f001 fb7c 	bl	8003390 <HAL_CAN_GetRxMessage>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <CAN1_RX0_IRQHandler+0x22>
		  	  	  	        CAN_RX_FIFO0						,
							&protocol.obj.bxHandle.rxHeader 	,
							&protocol.obj.bxHandle.rxData[0] 	) != HAL_OK )
  {
	  Error_Handler();
 8001c9e:	f7ff fa0b 	bl	80010b8 <Error_Handler>
  }

  protocol.ops.EEM_RX( &protocol.obj.canPacket  			,
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <CAN1_RX0_IRQHandler+0x60>)
 8001ca4:	f8d3 61b0 	ldr.w	r6, [r3, #432]	; 0x1b0
 8001ca8:	4d0d      	ldr	r5, [pc, #52]	; (8001ce0 <CAN1_RX0_IRQHandler+0x60>)
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <CAN1_RX0_IRQHandler+0x64>)
 8001cac:	9304      	str	r3, [sp, #16]
 8001cae:	466c      	mov	r4, sp
 8001cb0:	f105 0378 	add.w	r3, r5, #120	; 0x78
 8001cb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001cba:	f105 036c 	add.w	r3, r5, #108	; 0x6c
 8001cbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cc0:	480a      	ldr	r0, [pc, #40]	; (8001cec <CAN1_RX0_IRQHandler+0x6c>)
 8001cc2:	47b0      	blx	r6
      				   protocol.obj.bxHandle.rxHeader		,
  					   &protocol.obj.bxHandle.rxData[0]	    );

  if( HAL_CAN_ActivateNotification(&protocol.obj.bxHandle.hbxcanHandle, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK )
 8001cc4:	2102      	movs	r1, #2
 8001cc6:	4806      	ldr	r0, [pc, #24]	; (8001ce0 <CAN1_RX0_IRQHandler+0x60>)
 8001cc8:	f001 fc74 	bl	80035b4 <HAL_CAN_ActivateNotification>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <CAN1_RX0_IRQHandler+0x56>
  {
	  Error_Handler();
 8001cd2:	f7ff f9f1 	bl	80010b8 <Error_Handler>
  }

}
 8001cd6:	bf00      	nop
 8001cd8:	3704      	adds	r7, #4
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	2000bfb4 	.word	0x2000bfb4
 8001ce4:	2000c048 	.word	0x2000c048
 8001ce8:	2000c020 	.word	0x2000c020
 8001cec:	2000c050 	.word	0x2000c050

08001cf0 <EEM_BXCAN_PeriphBase_CTOR>:
	 @return  : void
	 @date	  : 22.02.2023
	 @INFO	  :	Constructur function for BxCAN Periph Class
********************************************************************************/
void EEM_BXCAN_PeriphBase_CTOR(EEM_bxCAN_PeriphBase_st* param , CAN_HandleTypeDef* _can)
{
 8001cf0:	b5b0      	push	{r4, r5, r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
	param->hbxcanHandle = *_can;
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	4614      	mov	r4, r2
 8001d00:	461d      	mov	r5, r3
 8001d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d0e:	e884 0003 	stmia.w	r4, {r0, r1}

	memset(&param->sFilterConfig , 0x00 , sizeof(CAN_FilterTypeDef) );
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3328      	adds	r3, #40	; 0x28
 8001d16:	2228      	movs	r2, #40	; 0x28
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f009 fe5a 	bl	800b9d4 <memset>

	memset(&param->txHeader , 0x00 , sizeof(CAN_TxHeaderTypeDef) );
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3350      	adds	r3, #80	; 0x50
 8001d24:	2218      	movs	r2, #24
 8001d26:	2100      	movs	r1, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f009 fe53 	bl	800b9d4 <memset>
	param->txMailBox = 0 ;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	669a      	str	r2, [r3, #104]	; 0x68

	memset(&param->rxHeader , 0x00 , sizeof(CAN_RxHeaderTypeDef) );
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	336c      	adds	r3, #108	; 0x6c
 8001d38:	221c      	movs	r2, #28
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f009 fe49 	bl	800b9d4 <memset>
	param->rxMailBox = 0 ;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	memset(&param->txData[0] , 0x00 , sizeof(param->txData) );
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	338c      	adds	r3, #140	; 0x8c
 8001d4e:	2208      	movs	r2, #8
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f009 fe3e 	bl	800b9d4 <memset>
	memset(&param->rxData[0] , 0x00 , sizeof(param->rxData) );
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3394      	adds	r3, #148	; 0x94
 8001d5c:	2208      	movs	r2, #8
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f009 fe37 	bl	800b9d4 <memset>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bdb0      	pop	{r4, r5, r7, pc}

08001d6e <EEM_CTOR>:
	, FDCAN_HandleTypeDef* _fdcan
#else
/* Only works for spi2can */
#endif
)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b084      	sub	sp, #16
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	4638      	mov	r0, r7
 8001d78:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	/* Construct methods */
	param->ops = _ops ;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001d82:	463a      	mov	r2, r7
 8001d84:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d86:	e883 0007 	stmia.w	r3, {r0, r1, r2}

#if (defined(STM32F446xx) || defined(STM32F407xx) && defined(BXCAN_Protocol))

	EEM_BXCAN_PeriphBase_CTOR(&param->obj.bxHandle , _can);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	69b9      	ldr	r1, [r7, #24]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff ffae 	bl	8001cf0 <EEM_BXCAN_PeriphBase_CTOR>
//ERROR
#endif
#endif

	/* Construct other objects */
	memset(&param->obj.canPacket , 0x00 , sizeof(EEM_CAN_Packet_st));
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	339c      	adds	r3, #156	; 0x9c
 8001d98:	2214      	movs	r2, #20
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f009 fe19 	bl	800b9d4 <memset>
	memset(&param->obj.ringBuffer , 0x00 , sizeof(EEM_RING_Buffer_st));
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	33b0      	adds	r3, #176	; 0xb0
 8001da6:	22f8      	movs	r2, #248	; 0xf8
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f009 fe12 	bl	800b9d4 <memset>

}
 8001db0:	bf00      	nop
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <EEM_INIT>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
EEM_ERR_T EEM_INIT( EEM_Protocol_obj_st*  param )
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08c      	sub	sp, #48	; 0x30
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	
	EEM_ERR_T result = EEM_EOK;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

#ifdef EEM_DEBUG_EN

	debug.uartHandle.Instance 			= USART2;
 8001dc6:	4b50      	ldr	r3, [pc, #320]	; (8001f08 <EEM_INIT+0x150>)
 8001dc8:	4a50      	ldr	r2, [pc, #320]	; (8001f0c <EEM_INIT+0x154>)
 8001dca:	601a      	str	r2, [r3, #0]
	debug.uartHandle.Init.BaudRate 		= 115200;
 8001dcc:	4b4e      	ldr	r3, [pc, #312]	; (8001f08 <EEM_INIT+0x150>)
 8001dce:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dd2:	605a      	str	r2, [r3, #4]
	debug.uartHandle.Init.WordLength 	= UART_WORDLENGTH_8B;
 8001dd4:	4b4c      	ldr	r3, [pc, #304]	; (8001f08 <EEM_INIT+0x150>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
	debug.uartHandle.Init.StopBits 		= UART_STOPBITS_1;
 8001dda:	4b4b      	ldr	r3, [pc, #300]	; (8001f08 <EEM_INIT+0x150>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	60da      	str	r2, [r3, #12]
	debug.uartHandle.Init.Parity 		= UART_PARITY_NONE;
 8001de0:	4b49      	ldr	r3, [pc, #292]	; (8001f08 <EEM_INIT+0x150>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	611a      	str	r2, [r3, #16]
	debug.uartHandle.Init.Mode 			= UART_MODE_TX_RX;
 8001de6:	4b48      	ldr	r3, [pc, #288]	; (8001f08 <EEM_INIT+0x150>)
 8001de8:	220c      	movs	r2, #12
 8001dea:	615a      	str	r2, [r3, #20]
	debug.uartHandle.Init.HwFlowCtl 	= UART_HWCONTROL_NONE;
 8001dec:	4b46      	ldr	r3, [pc, #280]	; (8001f08 <EEM_INIT+0x150>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	619a      	str	r2, [r3, #24]
	debug.uartHandle.Init.OverSampling 	= UART_OVERSAMPLING_16;
 8001df2:	4b45      	ldr	r3, [pc, #276]	; (8001f08 <EEM_INIT+0x150>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	61da      	str	r2, [r3, #28]

	if(HAL_UART_Init(&debug.uartHandle) != HAL_OK)
 8001df8:	4843      	ldr	r0, [pc, #268]	; (8001f08 <EEM_INIT+0x150>)
 8001dfa:	f004 fa79 	bl	80062f0 <HAL_UART_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <EEM_INIT+0x50>
	{
	  return EEM_ERROR;
 8001e04:	2300      	movs	r3, #0
 8001e06:	e07b      	b.n	8001f00 <EEM_INIT+0x148>
	}

#ifdef EEM_DEBUG_EN
	EEM_DEBUG_PRINT(&debug , "EEM PROTOCOL CAN STACK \n");
 8001e08:	4941      	ldr	r1, [pc, #260]	; (8001f10 <EEM_INIT+0x158>)
 8001e0a:	483f      	ldr	r0, [pc, #252]	; (8001f08 <EEM_INIT+0x150>)
 8001e0c:	f000 f93a 	bl	8002084 <EEM_DEBUG_PRINT>
#endif

#endif
/* Ring Buffer Init Sequance */

	param->ringBuffer.head = 0;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
	param->ringBuffer.tail = 0;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5
	param->ringBuffer.full = EEM_FALSE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 21a6 	strb.w	r2, [r3, #422]	; 0x1a6

#if (defined(STM32F446xx) || defined(STM32F407xx) && defined(BXCAN_Protocol))
	
	param->bxHandle.hbxcanHandle.Instance					= CAN1;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a3a      	ldr	r2, [pc, #232]	; (8001f14 <EEM_INIT+0x15c>)
 8001e2c:	601a      	str	r2, [r3, #0]
	param->bxHandle.hbxcanHandle.Init.Prescaler 			= 12;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	220c      	movs	r2, #12
 8001e32:	605a      	str	r2, [r3, #4]
	param->bxHandle.hbxcanHandle.Init.Mode 					= CAN_MODE_LOOPBACK;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e3a:	609a      	str	r2, [r3, #8]
	param->bxHandle.hbxcanHandle.Init.SyncJumpWidth 		= CAN_SJW_1TQ;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	60da      	str	r2, [r3, #12]
	param->bxHandle.hbxcanHandle.Init.TimeSeg1 				= CAN_BS1_11TQ;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8001e48:	611a      	str	r2, [r3, #16]
	param->bxHandle.hbxcanHandle.Init.TimeSeg2 				= CAN_BS2_2TQ;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e50:	615a      	str	r2, [r3, #20]
	param->bxHandle.hbxcanHandle.Init.TimeTriggeredMode 	= DISABLE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	761a      	strb	r2, [r3, #24]
	param->bxHandle.hbxcanHandle.Init.AutoBusOff 			= DISABLE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	765a      	strb	r2, [r3, #25]
	param->bxHandle.hbxcanHandle.Init.AutoWakeUp 			= DISABLE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	769a      	strb	r2, [r3, #26]
	param->bxHandle.hbxcanHandle.Init.AutoRetransmission 	= ENABLE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	76da      	strb	r2, [r3, #27]
	param->bxHandle.hbxcanHandle.Init.ReceiveFifoLocked	 	= DISABLE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	771a      	strb	r2, [r3, #28]
	param->bxHandle.hbxcanHandle.Init.TransmitFifoPriority 	= DISABLE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	775a      	strb	r2, [r3, #29]
	
	if (HAL_CAN_Init(&param->bxHandle.hbxcanHandle) != HAL_OK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f001 f86f 	bl	8002f5c <HAL_CAN_Init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <EEM_INIT+0xd0>
	{
		return EEM_ERROR;
 8001e84:	2300      	movs	r3, #0
 8001e86:	e03b      	b.n	8001f00 <EEM_INIT+0x148>
	}
	
#ifdef EEM_DEBUG_EN
	EEM_DEBUG_PRINT(&debug , "BXCAN PERIPH CONFIG DONE ! \n");
 8001e88:	4923      	ldr	r1, [pc, #140]	; (8001f18 <EEM_INIT+0x160>)
 8001e8a:	481f      	ldr	r0, [pc, #124]	; (8001f08 <EEM_INIT+0x150>)
 8001e8c:	f000 f8fa 	bl	8002084 <EEM_DEBUG_PRINT>

#endif

	/* Filtering Configurations */

	EEM_SET_IDENTIFIERS();
 8001e90:	f000 f914 	bl	80020bc <EEM_SET_IDENTIFIERS>
#else
	/* No Filter */
#endif

#ifdef EEM_DEBUG_EN
	EEM_DEBUG_PRINT(&debug , "EEM PROTOCOL FILTERING DONE ! \n");
 8001e94:	4921      	ldr	r1, [pc, #132]	; (8001f1c <EEM_INIT+0x164>)
 8001e96:	481c      	ldr	r0, [pc, #112]	; (8001f08 <EEM_INIT+0x150>)
 8001e98:	f000 f8f4 	bl	8002084 <EEM_DEBUG_PRINT>
#endif

#if (defined(STM32F446xx) || defined(STM32F407xx) && defined(BXCAN_Protocol))

	if( HAL_CAN_Start(&param->bxHandle.hbxcanHandle) != HAL_OK )
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f001 f957 	bl	8003152 <HAL_CAN_Start>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <EEM_INIT+0xf6>
	{
		return EEM_ERROR;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	e028      	b.n	8001f00 <EEM_INIT+0x148>
	}
	if( HAL_CAN_ActivateNotification(&param->bxHandle.hbxcanHandle, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK )
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2102      	movs	r1, #2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f001 fb7e 	bl	80035b4 <HAL_CAN_ActivateNotification>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <EEM_INIT+0x10a>
	{
		return EEM_ERROR;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e01e      	b.n	8001f00 <EEM_INIT+0x148>

	/* TEST MESSAGE FOR BX CAN LINE */
	/*******************************************************************************/
	CAN_TxHeaderTypeDef   	TestTxHeader;
	EEM_U32					TestTxMailBox;
	EEM_U8               	TestTxData[8] = { 0xEE , EEM_VERSION , 0xEE , EEM_SUBVERSION , 0xEE , EEM_REVISION , 0xEE , 0xEE};
 8001ec2:	4a17      	ldr	r2, [pc, #92]	; (8001f20 <EEM_INIT+0x168>)
 8001ec4:	f107 0308 	add.w	r3, r7, #8
 8001ec8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ecc:	e883 0003 	stmia.w	r3, {r0, r1}
	TestTxHeader.DLC		= EEM_MAX_SIZE 	;
 8001ed0:	2308      	movs	r3, #8
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
	TestTxHeader.IDE		= CAN_ID_EXT   	;
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	61fb      	str	r3, [r7, #28]
	TestTxHeader.RTR		= CAN_RTR_DATA	;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	623b      	str	r3, [r7, #32]
	TestTxHeader.ExtId		= 0x0EE00EE0;
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <EEM_INIT+0x16c>)
 8001ede:	61bb      	str	r3, [r7, #24]
	if( HAL_CAN_AddTxMessage(&param->bxHandle.hbxcanHandle  ,
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f107 0310 	add.w	r3, r7, #16
 8001ee6:	f107 0208 	add.w	r2, r7, #8
 8001eea:	f107 0114 	add.w	r1, r7, #20
 8001eee:	f001 f974 	bl	80031da <HAL_CAN_AddTxMessage>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <EEM_INIT+0x144>
		        			 &TestTxHeader				,
							 &TestTxData 	     		,
							 &TestTxMailBox 	 			) != HAL_OK )
	{
		return EEM_ERROR;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	e001      	b.n	8001f00 <EEM_INIT+0x148>
#error /* failed define */
#endif

#endif

	return result;
 8001efc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3730      	adds	r7, #48	; 0x30
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20001518 	.word	0x20001518
 8001f0c:	40004400 	.word	0x40004400
 8001f10:	0800c2c8 	.word	0x0800c2c8
 8001f14:	40006400 	.word	0x40006400
 8001f18:	0800c2e4 	.word	0x0800c2e4
 8001f1c:	0800c304 	.word	0x0800c304
 8001f20:	0800c324 	.word	0x0800c324
 8001f24:	0ee00ee0 	.word	0x0ee00ee0

08001f28 <EEM_PUSH>:
	 @return  : 
	 @date	  : 
	 @INFO	  :
********************************************************************************/
void   EEM_PUSH( EEM_RING_Buffer_st* ringBuf , EEM_CAN_Packet_st* param)
{
 8001f28:	b490      	push	{r4, r7}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
	EEM_U8 loopVal = 0 ;
 8001f32:	2300      	movs	r3, #0
 8001f34:	73fb      	strb	r3, [r7, #15]

	for(loopVal = 0 ; loopVal < 8 ; loopVal++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	73fb      	strb	r3, [r7, #15]
 8001f3a:	e011      	b.n	8001f60 <EEM_PUSH+0x38>
	{
		ringBuf->data[ ringBuf->tail ][ loopVal ] = param->DATA[ loopVal ];
 8001f3c:	7bfa      	ldrb	r2, [r7, #15]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8001f44:	461c      	mov	r4, r3
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	6839      	ldr	r1, [r7, #0]
 8001f4a:	440a      	add	r2, r1
 8001f4c:	7910      	ldrb	r0, [r2, #4]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	00e2      	lsls	r2, r4, #3
 8001f52:	440a      	add	r2, r1
 8001f54:	4413      	add	r3, r2
 8001f56:	4602      	mov	r2, r0
 8001f58:	701a      	strb	r2, [r3, #0]
	for(loopVal = 0 ; loopVal < 8 ; loopVal++)
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	2b07      	cmp	r3, #7
 8001f64:	d9ea      	bls.n	8001f3c <EEM_PUSH+0x14>
	}
	ringBuf->id[ ringBuf->tail ].identifier = param->EXTENDED_ID.identifier;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	6819      	ldr	r1, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3228      	adds	r2, #40	; 0x28
 8001f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	ringBuf->byte_count++;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	ringBuf->tail = ( ringBuf->tail + 1 ) % EEM_BUFFER_SIZE ;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <EEM_PUSH+0xa8>)
 8001f92:	fb83 1302 	smull	r1, r3, r3, r2
 8001f96:	10d9      	asrs	r1, r3, #3
 8001f98:	17d3      	asrs	r3, r2, #31
 8001f9a:	1ac9      	subs	r1, r1, r3
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	1ad1      	subs	r1, r2, r3
 8001fa6:	b2ca      	uxtb	r2, r1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
	
	if( ringBuf->tail == ringBuf->head )
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 20f5 	ldrb.w	r2, [r3, #245]	; 0xf5
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d103      	bne.n	8001fc6 <EEM_PUSH+0x9e>
	{
		ringBuf->full = EEM_TRUE ;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
	}
	
}
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc90      	pop	{r4, r7}
 8001fce:	4770      	bx	lr
 8001fd0:	66666667 	.word	0x66666667

08001fd4 <EEM_TX>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
EEM_ERR_T 		EEM_TX( EEM_CAN_Packet_st* param, EEM_U32 period )
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
	EEM_ERR_T result = EEM_EOK;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]

#if (defined(STM32F446xx) || defined(STM32F407xx) && defined(BXCAN_Protocol))

	memcpy(&protocol.obj.bxHandle.txData , &param->DATA[0] , EEM_MAX_SIZE );
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	1d1a      	adds	r2, r3, #4
 8001fe6:	4b11      	ldr	r3, [pc, #68]	; (800202c <EEM_TX+0x58>)
 8001fe8:	338c      	adds	r3, #140	; 0x8c
 8001fea:	6810      	ldr	r0, [r2, #0]
 8001fec:	6851      	ldr	r1, [r2, #4]
 8001fee:	c303      	stmia	r3!, {r0, r1}

	protocol.obj.bxHandle.txHeader.DLC   = EEM_MAX_SIZE ; /* 8 BYTE */
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	; (800202c <EEM_TX+0x58>)
 8001ff2:	2208      	movs	r2, #8
 8001ff4:	661a      	str	r2, [r3, #96]	; 0x60
	protocol.obj.bxHandle.txHeader.IDE   = CAN_ID_EXT   ;
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	; (800202c <EEM_TX+0x58>)
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	659a      	str	r2, [r3, #88]	; 0x58
	protocol.obj.bxHandle.txHeader.RTR   = CAN_RTR_DATA ;
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <EEM_TX+0x58>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	65da      	str	r2, [r3, #92]	; 0x5c
	protocol.obj.bxHandle.txHeader.ExtId = param->EXTENDED_ID.identifier ;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a09      	ldr	r2, [pc, #36]	; (800202c <EEM_TX+0x58>)
 8002008:	6553      	str	r3, [r2, #84]	; 0x54

	if( HAL_CAN_AddTxMessage(&protocol.obj.bxHandle.hbxcanHandle ,
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <EEM_TX+0x5c>)
 800200c:	4a09      	ldr	r2, [pc, #36]	; (8002034 <EEM_TX+0x60>)
 800200e:	490a      	ldr	r1, [pc, #40]	; (8002038 <EEM_TX+0x64>)
 8002010:	4806      	ldr	r0, [pc, #24]	; (800202c <EEM_TX+0x58>)
 8002012:	f001 f8e2 	bl	80031da <HAL_CAN_AddTxMessage>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <EEM_TX+0x4c>
	        				 &protocol.obj.bxHandle.txHeader	 ,
	        				 &protocol.obj.bxHandle.txData 	     ,
	        				 &protocol.obj.bxHandle.txMailBox 	 ) != HAL_OK )
	{
		return EEM_ERROR;
 800201c:	2300      	movs	r3, #0
 800201e:	e000      	b.n	8002022 <EEM_TX+0x4e>

#endif

#endif

	return result;
 8002020:	7bfb      	ldrb	r3, [r7, #15]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	2000bfb4 	.word	0x2000bfb4
 8002030:	2000c01c 	.word	0x2000c01c
 8002034:	2000c040 	.word	0x2000c040
 8002038:	2000c004 	.word	0x2000c004

0800203c <EEM_RX>:
#if defined(SPI2CAN_Protocol)
						uCAN_MSG*			rxPacked      ,
#endif
#endif
						EEM_U8*				rxData	  	   )
{
 800203c:	b084      	sub	sp, #16
 800203e:	b580      	push	{r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	f107 001c 	add.w	r0, r7, #28
 800204a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	EEM_ERR_T result = EEM_EOK;
 800204e:	2301      	movs	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]

#if ( defined(STM32F446xx) || defined(STM32F407xx) ) && defined(BXCAN_Protocol)

	memcpy( &param->DATA[0] , &rxData[0] , EEM_MAX_SIZE );
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3304      	adds	r3, #4
 8002056:	2208      	movs	r2, #8
 8002058:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800205a:	4618      	mov	r0, r3
 800205c:	f009 fcac 	bl	800b9b8 <memcpy>
	param->EXTENDED_ID.identifier = rxHeader.ExtId;
 8002060:	6a3a      	ldr	r2, [r7, #32]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	601a      	str	r2, [r3, #0]
#endif

#endif

	/* Received Data Handled Push Ring Buffer */
	EEM_PUSH( &protocol.obj.ringBuffer , param);
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4805      	ldr	r0, [pc, #20]	; (8002080 <EEM_RX+0x44>)
 800206a:	f7ff ff5d 	bl	8001f28 <EEM_PUSH>

	return result;
 800206e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800207a:	b004      	add	sp, #16
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	2000c064 	.word	0x2000c064

08002084 <EEM_DEBUG_PRINT>:
	 @return  :
	 @date	  :
	 @INFO	  :
********************************************************************************/
void	EEM_DEBUG_PRINT(EEM_Debug_st* debugParam, char* msg)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
	memset( &debug.message[0] , 0x00 , DEBUG_MESSAGE_SIZE );
 800208e:	2232      	movs	r2, #50	; 0x32
 8002090:	2100      	movs	r1, #0
 8002092:	4808      	ldr	r0, [pc, #32]	; (80020b4 <EEM_DEBUG_PRINT+0x30>)
 8002094:	f009 fc9e 	bl	800b9d4 <memset>
	sprintf( &debug.message[0], msg);
 8002098:	6839      	ldr	r1, [r7, #0]
 800209a:	4806      	ldr	r0, [pc, #24]	; (80020b4 <EEM_DEBUG_PRINT+0x30>)
 800209c:	f009 fca2 	bl	800b9e4 <siprintf>
	HAL_UART_Transmit(&debug.uartHandle, (const EEM_U8*)&debug.message[0], DEBUG_MESSAGE_SIZE, 10);
 80020a0:	230a      	movs	r3, #10
 80020a2:	2232      	movs	r2, #50	; 0x32
 80020a4:	4903      	ldr	r1, [pc, #12]	; (80020b4 <EEM_DEBUG_PRINT+0x30>)
 80020a6:	4804      	ldr	r0, [pc, #16]	; (80020b8 <EEM_DEBUG_PRINT+0x34>)
 80020a8:	f004 f96f 	bl	800638a <HAL_UART_Transmit>
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20001570 	.word	0x20001570
 80020b8:	20001518 	.word	0x20001518

080020bc <EEM_SET_IDENTIFIERS>:
	 @return  : void
	 @date	  : 7.02.2023
	 @INFO	  :	Set All Identifiers
********************************************************************************/
void EEM_SET_IDENTIFIERS(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b09a      	sub	sp, #104	; 0x68
 80020c0:	af00      	add	r7, sp, #0
	/* Message Identifier Handler */
	EEM_CAN_ID_st ID[SIZE_OF_MSG] = {0};
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	2264      	movs	r2, #100	; 0x64
 80020c6:	2100      	movs	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f009 fc83 	bl	800b9d4 <memset>

	ID[MSG01_INDEX].Pages.priority 		= PRIORITY_010 ;
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	2202      	movs	r2, #2
 80020d2:	f362 0384 	bfi	r3, r2, #2, #3
 80020d6:	71fb      	strb	r3, [r7, #7]
	ID[MSG01_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	f36f 0341 	bfc	r3, #1, #1
 80020de:	71fb      	strb	r3, [r7, #7]
	ID[MSG01_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	f36f 0300 	bfc	r3, #0, #1
 80020e6:	71fb      	strb	r3, [r7, #7]
	ID[MSG01_INDEX].Pages.messageID 	= MESSAGE01 ;
 80020e8:	2301      	movs	r3, #1
 80020ea:	71bb      	strb	r3, [r7, #6]
	ID[MSG01_INDEX].Pages.DA 			= BCM_NODE;
 80020ec:	2311      	movs	r3, #17
 80020ee:	717b      	strb	r3, [r7, #5]
	ID[MSG01_INDEX].Pages.SA 			= HVAC_NODE ;
 80020f0:	2322      	movs	r3, #34	; 0x22
 80020f2:	713b      	strb	r3, [r7, #4]
	HVAC_MSG.Message01_ID = ID[MSG01_INDEX].identifier ;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4ae5      	ldr	r2, [pc, #916]	; (800248c <EEM_SET_IDENTIFIERS+0x3d0>)
 80020f8:	6013      	str	r3, [r2, #0]

	ID[MSG02_INDEX].Pages.priority 		= PRIORITY_010 ;
 80020fa:	7afb      	ldrb	r3, [r7, #11]
 80020fc:	2202      	movs	r2, #2
 80020fe:	f362 0384 	bfi	r3, r2, #2, #3
 8002102:	72fb      	strb	r3, [r7, #11]
	ID[MSG02_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002104:	7afb      	ldrb	r3, [r7, #11]
 8002106:	f36f 0341 	bfc	r3, #1, #1
 800210a:	72fb      	strb	r3, [r7, #11]
	ID[MSG02_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800210c:	7afb      	ldrb	r3, [r7, #11]
 800210e:	f36f 0300 	bfc	r3, #0, #1
 8002112:	72fb      	strb	r3, [r7, #11]
	ID[MSG02_INDEX].Pages.messageID 	= MESSAGE02 ;
 8002114:	2302      	movs	r3, #2
 8002116:	72bb      	strb	r3, [r7, #10]
	ID[MSG02_INDEX].Pages.DA 			= BCM_NODE;
 8002118:	2311      	movs	r3, #17
 800211a:	727b      	strb	r3, [r7, #9]
	ID[MSG02_INDEX].Pages.SA 			= HVAC_NODE ;
 800211c:	2322      	movs	r3, #34	; 0x22
 800211e:	723b      	strb	r3, [r7, #8]
	HVAC_MSG.Message02_ID = ID[MSG02_INDEX].identifier ;
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4ada      	ldr	r2, [pc, #872]	; (800248c <EEM_SET_IDENTIFIERS+0x3d0>)
 8002124:	6113      	str	r3, [r2, #16]

	ID[MSG03_INDEX].Pages.priority 		= PRIORITY_100 ;
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	2204      	movs	r2, #4
 800212a:	f362 0384 	bfi	r3, r2, #2, #3
 800212e:	73fb      	strb	r3, [r7, #15]
	ID[MSG03_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	f36f 0341 	bfc	r3, #1, #1
 8002136:	73fb      	strb	r3, [r7, #15]
	ID[MSG03_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	f36f 0300 	bfc	r3, #0, #1
 800213e:	73fb      	strb	r3, [r7, #15]
	ID[MSG03_INDEX].Pages.messageID 	= MESSAGE03 ;
 8002140:	2303      	movs	r3, #3
 8002142:	73bb      	strb	r3, [r7, #14]
	ID[MSG03_INDEX].Pages.DA 			= TLM_NODE;
 8002144:	2388      	movs	r3, #136	; 0x88
 8002146:	737b      	strb	r3, [r7, #13]
	ID[MSG03_INDEX].Pages.SA 			= BCM_NODE;
 8002148:	2311      	movs	r3, #17
 800214a:	733b      	strb	r3, [r7, #12]
	BCM_MSG.Message03_ID = ID[MSG03_INDEX].identifier ;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4ad0      	ldr	r2, [pc, #832]	; (8002490 <EEM_SET_IDENTIFIERS+0x3d4>)
 8002150:	6013      	str	r3, [r2, #0]

	ID[MSG04_INDEX].Pages.priority 		= PRIORITY_100 ;
 8002152:	7cfb      	ldrb	r3, [r7, #19]
 8002154:	2204      	movs	r2, #4
 8002156:	f362 0384 	bfi	r3, r2, #2, #3
 800215a:	74fb      	strb	r3, [r7, #19]
	ID[MSG04_INDEX].Pages.reserved 		= NOT_RESERVED ;
 800215c:	7cfb      	ldrb	r3, [r7, #19]
 800215e:	f36f 0341 	bfc	r3, #1, #1
 8002162:	74fb      	strb	r3, [r7, #19]
	ID[MSG04_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002164:	7cfb      	ldrb	r3, [r7, #19]
 8002166:	f36f 0300 	bfc	r3, #0, #1
 800216a:	74fb      	strb	r3, [r7, #19]
	ID[MSG04_INDEX].Pages.messageID 	= MESSAGE04 ;
 800216c:	2304      	movs	r3, #4
 800216e:	74bb      	strb	r3, [r7, #18]
	ID[MSG04_INDEX].Pages.DA 			= SCB_NODE;
 8002170:	2333      	movs	r3, #51	; 0x33
 8002172:	747b      	strb	r3, [r7, #17]
	ID[MSG04_INDEX].Pages.SA 			= BCM_NODE;
 8002174:	2311      	movs	r3, #17
 8002176:	743b      	strb	r3, [r7, #16]
	BCM_MSG.Message04_ID = ID[MSG04_INDEX].identifier ;
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4ac5      	ldr	r2, [pc, #788]	; (8002490 <EEM_SET_IDENTIFIERS+0x3d4>)
 800217c:	60d3      	str	r3, [r2, #12]

	ID[MSG05_INDEX].Pages.priority 		= PRIORITY_100 ;
 800217e:	7dfb      	ldrb	r3, [r7, #23]
 8002180:	2204      	movs	r2, #4
 8002182:	f362 0384 	bfi	r3, r2, #2, #3
 8002186:	75fb      	strb	r3, [r7, #23]
	ID[MSG05_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002188:	7dfb      	ldrb	r3, [r7, #23]
 800218a:	f36f 0341 	bfc	r3, #1, #1
 800218e:	75fb      	strb	r3, [r7, #23]
	ID[MSG05_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002190:	7dfb      	ldrb	r3, [r7, #23]
 8002192:	f36f 0300 	bfc	r3, #0, #1
 8002196:	75fb      	strb	r3, [r7, #23]
	ID[MSG05_INDEX].Pages.messageID 	= MESSAGE05 ;
 8002198:	2305      	movs	r3, #5
 800219a:	75bb      	strb	r3, [r7, #22]
	ID[MSG05_INDEX].Pages.DA 			= SCB_NODE;
 800219c:	2333      	movs	r3, #51	; 0x33
 800219e:	757b      	strb	r3, [r7, #21]
	ID[MSG05_INDEX].Pages.SA 			= BCM_NODE;
 80021a0:	2311      	movs	r3, #17
 80021a2:	753b      	strb	r3, [r7, #20]
	BCM_MSG.Message05_ID = ID[MSG05_INDEX].identifier ;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	4aba      	ldr	r2, [pc, #744]	; (8002490 <EEM_SET_IDENTIFIERS+0x3d4>)
 80021a8:	61d3      	str	r3, [r2, #28]

	ID[MSG06_INDEX].Pages.priority 		= PRIORITY_100 ;
 80021aa:	7efb      	ldrb	r3, [r7, #27]
 80021ac:	2204      	movs	r2, #4
 80021ae:	f362 0384 	bfi	r3, r2, #2, #3
 80021b2:	76fb      	strb	r3, [r7, #27]
	ID[MSG06_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80021b4:	7efb      	ldrb	r3, [r7, #27]
 80021b6:	f36f 0341 	bfc	r3, #1, #1
 80021ba:	76fb      	strb	r3, [r7, #27]
	ID[MSG06_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80021bc:	7efb      	ldrb	r3, [r7, #27]
 80021be:	f36f 0300 	bfc	r3, #0, #1
 80021c2:	76fb      	strb	r3, [r7, #27]
	ID[MSG06_INDEX].Pages.messageID 	= MESSAGE06 ;
 80021c4:	2306      	movs	r3, #6
 80021c6:	76bb      	strb	r3, [r7, #26]
	ID[MSG06_INDEX].Pages.DA 			= SCB_NODE;
 80021c8:	2333      	movs	r3, #51	; 0x33
 80021ca:	767b      	strb	r3, [r7, #25]
	ID[MSG06_INDEX].Pages.SA 			= BMS_NODE;
 80021cc:	2344      	movs	r3, #68	; 0x44
 80021ce:	763b      	strb	r3, [r7, #24]
	BMS_MSG.Message06_ID = ID[MSG06_INDEX].identifier ;
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	4ab0      	ldr	r2, [pc, #704]	; (8002494 <EEM_SET_IDENTIFIERS+0x3d8>)
 80021d4:	6013      	str	r3, [r2, #0]

	ID[MSG07_INDEX].Pages.priority 		= PRIORITY_100 ;
 80021d6:	7ffb      	ldrb	r3, [r7, #31]
 80021d8:	2204      	movs	r2, #4
 80021da:	f362 0384 	bfi	r3, r2, #2, #3
 80021de:	77fb      	strb	r3, [r7, #31]
	ID[MSG07_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80021e0:	7ffb      	ldrb	r3, [r7, #31]
 80021e2:	f36f 0341 	bfc	r3, #1, #1
 80021e6:	77fb      	strb	r3, [r7, #31]
	ID[MSG07_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80021e8:	7ffb      	ldrb	r3, [r7, #31]
 80021ea:	f36f 0300 	bfc	r3, #0, #1
 80021ee:	77fb      	strb	r3, [r7, #31]
	ID[MSG07_INDEX].Pages.messageID 	= MESSAGE07 ;
 80021f0:	2307      	movs	r3, #7
 80021f2:	77bb      	strb	r3, [r7, #30]
	ID[MSG07_INDEX].Pages.DA 			= SCB_NODE;
 80021f4:	2333      	movs	r3, #51	; 0x33
 80021f6:	777b      	strb	r3, [r7, #29]
	ID[MSG07_INDEX].Pages.SA 			= BMS_NODE;
 80021f8:	2344      	movs	r3, #68	; 0x44
 80021fa:	773b      	strb	r3, [r7, #28]
	BMS_MSG.Message07_ID = ID[MSG07_INDEX].identifier ;
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	4aa5      	ldr	r2, [pc, #660]	; (8002494 <EEM_SET_IDENTIFIERS+0x3d8>)
 8002200:	60d3      	str	r3, [r2, #12]

	ID[MSG08_INDEX].Pages.priority 		= PRIORITY_100 ;
 8002202:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002206:	2204      	movs	r2, #4
 8002208:	f362 0384 	bfi	r3, r2, #2, #3
 800220c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ID[MSG08_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002210:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002214:	f36f 0341 	bfc	r3, #1, #1
 8002218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ID[MSG08_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800221c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002220:	f36f 0300 	bfc	r3, #0, #1
 8002224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ID[MSG08_INDEX].Pages.messageID 	= MESSAGE08 ;
 8002228:	2308      	movs	r3, #8
 800222a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	ID[MSG08_INDEX].Pages.DA 			= SCB_NODE;
 800222e:	2333      	movs	r3, #51	; 0x33
 8002230:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	ID[MSG08_INDEX].Pages.SA 			= BMS_NODE;
 8002234:	2344      	movs	r3, #68	; 0x44
 8002236:	f887 3020 	strb.w	r3, [r7, #32]
	BMS_MSG.Message08_ID = ID[MSG08_INDEX].identifier ;
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	4a95      	ldr	r2, [pc, #596]	; (8002494 <EEM_SET_IDENTIFIERS+0x3d8>)
 800223e:	6193      	str	r3, [r2, #24]

	ID[MSG09_INDEX].Pages.priority 		= PRIORITY_100 ;
 8002240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002244:	2204      	movs	r2, #4
 8002246:	f362 0384 	bfi	r3, r2, #2, #3
 800224a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ID[MSG09_INDEX].Pages.reserved 		= NOT_RESERVED ;
 800224e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002252:	f36f 0341 	bfc	r3, #1, #1
 8002256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ID[MSG09_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800225a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800225e:	f36f 0300 	bfc	r3, #0, #1
 8002262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ID[MSG09_INDEX].Pages.messageID 	= MESSAGE09 ;
 8002266:	2309      	movs	r3, #9
 8002268:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	ID[MSG09_INDEX].Pages.DA 			= SCB_NODE;
 800226c:	2333      	movs	r3, #51	; 0x33
 800226e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	ID[MSG09_INDEX].Pages.SA 			= BMS_NODE;
 8002272:	2344      	movs	r3, #68	; 0x44
 8002274:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	BMS_MSG.Message09_ID = ID[MSG09_INDEX].identifier ;
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	4a86      	ldr	r2, [pc, #536]	; (8002494 <EEM_SET_IDENTIFIERS+0x3d8>)
 800227c:	6253      	str	r3, [r2, #36]	; 0x24

	ID[MSG10_INDEX].Pages.priority 		= PRIORITY_100 ;
 800227e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002282:	2204      	movs	r2, #4
 8002284:	f362 0384 	bfi	r3, r2, #2, #3
 8002288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	ID[MSG10_INDEX].Pages.reserved 		= NOT_RESERVED ;
 800228c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002290:	f36f 0341 	bfc	r3, #1, #1
 8002294:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	ID[MSG10_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002298:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800229c:	f36f 0300 	bfc	r3, #0, #1
 80022a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	ID[MSG10_INDEX].Pages.messageID 	= MESSAGE10 ;
 80022a4:	2310      	movs	r3, #16
 80022a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	ID[MSG10_INDEX].Pages.DA 			= SCB_NODE;
 80022aa:	2333      	movs	r3, #51	; 0x33
 80022ac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	ID[MSG10_INDEX].Pages.SA 			= BMS_NODE;
 80022b0:	2344      	movs	r3, #68	; 0x44
 80022b2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	BMS_MSG.Message10_ID = ID[MSG10_INDEX].identifier ;
 80022b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b8:	4a76      	ldr	r2, [pc, #472]	; (8002494 <EEM_SET_IDENTIFIERS+0x3d8>)
 80022ba:	6313      	str	r3, [r2, #48]	; 0x30

	ID[MSG11_INDEX].Pages.priority 		= PRIORITY_001 ;
 80022bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022c0:	2201      	movs	r2, #1
 80022c2:	f362 0384 	bfi	r3, r2, #2, #3
 80022c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ID[MSG11_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80022ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022ce:	f36f 0341 	bfc	r3, #1, #1
 80022d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ID[MSG11_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80022d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022da:	f36f 0300 	bfc	r3, #0, #1
 80022de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ID[MSG11_INDEX].Pages.messageID 	= MESSAGE11 ;
 80022e2:	2311      	movs	r3, #17
 80022e4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	ID[MSG11_INDEX].Pages.DA 			= MS1_NODE;
 80022e8:	2355      	movs	r3, #85	; 0x55
 80022ea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	ID[MSG11_INDEX].Pages.SA 			= BCM_NODE ;
 80022ee:	2311      	movs	r3, #17
 80022f0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	BCM_MSG.Message11_ID = ID[MSG11_INDEX].identifier ;
 80022f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f6:	4a66      	ldr	r2, [pc, #408]	; (8002490 <EEM_SET_IDENTIFIERS+0x3d4>)
 80022f8:	6293      	str	r3, [r2, #40]	; 0x28

	ID[MSG12_INDEX].Pages.priority 		= PRIORITY_001 ;
 80022fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022fe:	2201      	movs	r2, #1
 8002300:	f362 0384 	bfi	r3, r2, #2, #3
 8002304:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	ID[MSG12_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002308:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800230c:	f36f 0341 	bfc	r3, #1, #1
 8002310:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	ID[MSG12_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002314:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002318:	f36f 0300 	bfc	r3, #0, #1
 800231c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	ID[MSG12_INDEX].Pages.messageID 	= MESSAGE12 ;
 8002320:	2312      	movs	r3, #18
 8002322:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	ID[MSG12_INDEX].Pages.DA 			= MS2_NODE;
 8002326:	2366      	movs	r3, #102	; 0x66
 8002328:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	ID[MSG12_INDEX].Pages.SA 			= BCM_NODE ;
 800232c:	2311      	movs	r3, #17
 800232e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	BCM_MSG.Message12_ID = ID[MSG12_INDEX].identifier ;
 8002332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002334:	4a56      	ldr	r2, [pc, #344]	; (8002490 <EEM_SET_IDENTIFIERS+0x3d4>)
 8002336:	6393      	str	r3, [r2, #56]	; 0x38

	ID[MSG13_INDEX].Pages.priority 		= PRIORITY_001 ;
 8002338:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800233c:	2201      	movs	r2, #1
 800233e:	f362 0384 	bfi	r3, r2, #2, #3
 8002342:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	ID[MSG13_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002346:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800234a:	f36f 0341 	bfc	r3, #1, #1
 800234e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	ID[MSG13_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002352:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002356:	f36f 0300 	bfc	r3, #0, #1
 800235a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	ID[MSG13_INDEX].Pages.messageID 	= MESSAGE13 ;
 800235e:	2313      	movs	r3, #19
 8002360:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	ID[MSG13_INDEX].Pages.DA 			= BCM_NODE ;
 8002364:	2311      	movs	r3, #17
 8002366:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	ID[MSG13_INDEX].Pages.SA 			= MS1_NODE ;
 800236a:	2355      	movs	r3, #85	; 0x55
 800236c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	MS1_MSG.Message13_ID = ID[MSG13_INDEX].identifier ;
 8002370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002372:	4a49      	ldr	r2, [pc, #292]	; (8002498 <EEM_SET_IDENTIFIERS+0x3dc>)
 8002374:	6013      	str	r3, [r2, #0]

	ID[MSG14_INDEX].Pages.priority 		= PRIORITY_001 ;
 8002376:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800237a:	2201      	movs	r2, #1
 800237c:	f362 0384 	bfi	r3, r2, #2, #3
 8002380:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	ID[MSG14_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002384:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002388:	f36f 0341 	bfc	r3, #1, #1
 800238c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	ID[MSG14_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002390:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002394:	f36f 0300 	bfc	r3, #0, #1
 8002398:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	ID[MSG14_INDEX].Pages.messageID 	= MESSAGE14 ;
 800239c:	2314      	movs	r3, #20
 800239e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	ID[MSG14_INDEX].Pages.DA 			= BCM_NODE ;
 80023a2:	2311      	movs	r3, #17
 80023a4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	ID[MSG14_INDEX].Pages.SA 			= MS1_NODE ;
 80023a8:	2355      	movs	r3, #85	; 0x55
 80023aa:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	MS1_MSG.Message14_ID = ID[MSG14_INDEX].identifier ;
 80023ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b0:	4a39      	ldr	r2, [pc, #228]	; (8002498 <EEM_SET_IDENTIFIERS+0x3dc>)
 80023b2:	60d3      	str	r3, [r2, #12]

	ID[MSG15_INDEX].Pages.priority 		= PRIORITY_001 ;
 80023b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023b8:	2201      	movs	r2, #1
 80023ba:	f362 0384 	bfi	r3, r2, #2, #3
 80023be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	ID[MSG15_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80023c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023c6:	f36f 0341 	bfc	r3, #1, #1
 80023ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	ID[MSG15_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80023ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023d2:	f36f 0300 	bfc	r3, #0, #1
 80023d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	ID[MSG15_INDEX].Pages.messageID 	= MESSAGE15 ;
 80023da:	2315      	movs	r3, #21
 80023dc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	ID[MSG15_INDEX].Pages.DA 			= BCM_NODE ;
 80023e0:	2311      	movs	r3, #17
 80023e2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	ID[MSG15_INDEX].Pages.SA 			= MS1_NODE ;
 80023e6:	2355      	movs	r3, #85	; 0x55
 80023e8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	MS1_MSG.Message15_ID = ID[MSG15_INDEX].identifier ;
 80023ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ee:	4a2a      	ldr	r2, [pc, #168]	; (8002498 <EEM_SET_IDENTIFIERS+0x3dc>)
 80023f0:	6193      	str	r3, [r2, #24]

	ID[MSG16_INDEX].Pages.priority 		= PRIORITY_001 ;
 80023f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80023f6:	2201      	movs	r2, #1
 80023f8:	f362 0384 	bfi	r3, r2, #2, #3
 80023fc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	ID[MSG16_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002400:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002404:	f36f 0341 	bfc	r3, #1, #1
 8002408:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	ID[MSG16_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800240c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002410:	f36f 0300 	bfc	r3, #0, #1
 8002414:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	ID[MSG16_INDEX].Pages.messageID 	= MESSAGE16 ;
 8002418:	2316      	movs	r3, #22
 800241a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	ID[MSG16_INDEX].Pages.DA 			= BCM_NODE ;
 800241e:	2311      	movs	r3, #17
 8002420:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	ID[MSG16_INDEX].Pages.SA 			= MS2_NODE ;
 8002424:	2366      	movs	r3, #102	; 0x66
 8002426:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	MS2_MSG.Message16_ID = ID[MSG16_INDEX].identifier ;
 800242a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800242c:	4a1b      	ldr	r2, [pc, #108]	; (800249c <EEM_SET_IDENTIFIERS+0x3e0>)
 800242e:	6013      	str	r3, [r2, #0]

	ID[MSG17_INDEX].Pages.priority 		= PRIORITY_001 ;
 8002430:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002434:	2201      	movs	r2, #1
 8002436:	f362 0384 	bfi	r3, r2, #2, #3
 800243a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	ID[MSG17_INDEX].Pages.reserved 		= NOT_RESERVED ;
 800243e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002442:	f36f 0341 	bfc	r3, #1, #1
 8002446:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	ID[MSG17_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800244a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800244e:	f36f 0300 	bfc	r3, #0, #1
 8002452:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	ID[MSG17_INDEX].Pages.messageID 	= MESSAGE17 ;
 8002456:	2317      	movs	r3, #23
 8002458:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	ID[MSG17_INDEX].Pages.DA 			= BCM_NODE ;
 800245c:	2311      	movs	r3, #17
 800245e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	ID[MSG17_INDEX].Pages.SA 			= MS2_NODE ;
 8002462:	2366      	movs	r3, #102	; 0x66
 8002464:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	MS2_MSG.Message17_ID = ID[MSG17_INDEX].identifier ;
 8002468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800246a:	4a0c      	ldr	r2, [pc, #48]	; (800249c <EEM_SET_IDENTIFIERS+0x3e0>)
 800246c:	60d3      	str	r3, [r2, #12]

	ID[MSG18_INDEX].Pages.priority 		= PRIORITY_001 ;
 800246e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002472:	2201      	movs	r2, #1
 8002474:	f362 0384 	bfi	r3, r2, #2, #3
 8002478:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	ID[MSG18_INDEX].Pages.reserved 		= NOT_RESERVED ;
 800247c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002480:	f36f 0341 	bfc	r3, #1, #1
 8002484:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8002488:	e00a      	b.n	80024a0 <EEM_SET_IDENTIFIERS+0x3e4>
 800248a:	bf00      	nop
 800248c:	20001448 	.word	0x20001448
 8002490:	200013e0 	.word	0x200013e0
 8002494:	20001474 	.word	0x20001474
 8002498:	200014b0 	.word	0x200014b0
 800249c:	200014d8 	.word	0x200014d8
	ID[MSG18_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80024a0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80024a4:	f36f 0300 	bfc	r3, #0, #1
 80024a8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	ID[MSG18_INDEX].Pages.messageID 	= MESSAGE18 ;
 80024ac:	2318      	movs	r3, #24
 80024ae:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	ID[MSG18_INDEX].Pages.DA 			= BCM_NODE ;
 80024b2:	2311      	movs	r3, #17
 80024b4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	ID[MSG18_INDEX].Pages.SA 			= MS2_NODE ;
 80024b8:	2366      	movs	r3, #102	; 0x66
 80024ba:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MS2_MSG.Message18_ID = ID[MSG18_INDEX].identifier ;
 80024be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024c0:	4a4f      	ldr	r2, [pc, #316]	; (8002600 <EEM_SET_IDENTIFIERS+0x544>)
 80024c2:	6193      	str	r3, [r2, #24]

	ID[MSG19_INDEX].Pages.priority 		= PRIORITY_001 ;
 80024c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80024c8:	2201      	movs	r2, #1
 80024ca:	f362 0384 	bfi	r3, r2, #2, #3
 80024ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	ID[MSG19_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80024d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80024d6:	f36f 0341 	bfc	r3, #1, #1
 80024da:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	ID[MSG19_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80024de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80024e2:	f36f 0300 	bfc	r3, #0, #1
 80024e6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	ID[MSG19_INDEX].Pages.messageID 	= MESSAGE19 ;
 80024ea:	2319      	movs	r3, #25
 80024ec:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	ID[MSG19_INDEX].Pages.DA 			= BCM_NODE ;
 80024f0:	2311      	movs	r3, #17
 80024f2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	ID[MSG19_INDEX].Pages.SA 			= MS1_NODE ;
 80024f6:	2355      	movs	r3, #85	; 0x55
 80024f8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	BCM_MSG.Message19_ID = ID[MSG19_INDEX].identifier ;
 80024fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024fe:	4a41      	ldr	r2, [pc, #260]	; (8002604 <EEM_SET_IDENTIFIERS+0x548>)
 8002500:	6493      	str	r3, [r2, #72]	; 0x48

	ID[MSG20_INDEX].Pages.priority 		= PRIORITY_001 ;
 8002502:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002506:	2201      	movs	r2, #1
 8002508:	f362 0384 	bfi	r3, r2, #2, #3
 800250c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	ID[MSG20_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002510:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002514:	f36f 0341 	bfc	r3, #1, #1
 8002518:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	ID[MSG20_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800251c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002520:	f36f 0300 	bfc	r3, #0, #1
 8002524:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	ID[MSG20_INDEX].Pages.messageID 	= MESSAGE20 ;
 8002528:	2320      	movs	r3, #32
 800252a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	ID[MSG20_INDEX].Pages.DA 			= BCM_NODE ;
 800252e:	2311      	movs	r3, #17
 8002530:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	ID[MSG20_INDEX].Pages.SA 			= MS2_NODE ;
 8002534:	2366      	movs	r3, #102	; 0x66
 8002536:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	BCM_MSG.Message20_ID = ID[MSG20_INDEX].identifier ;
 800253a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800253c:	4a31      	ldr	r2, [pc, #196]	; (8002604 <EEM_SET_IDENTIFIERS+0x548>)
 800253e:	6593      	str	r3, [r2, #88]	; 0x58

	ID[MSG21_INDEX].Pages.priority 		= PRIORITY_011 ;
 8002540:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002544:	2203      	movs	r2, #3
 8002546:	f362 0384 	bfi	r3, r2, #2, #3
 800254a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	ID[MSG21_INDEX].Pages.reserved 		= NOT_RESERVED ;
 800254e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002552:	f36f 0341 	bfc	r3, #1, #1
 8002556:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	ID[MSG21_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800255a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800255e:	f36f 0300 	bfc	r3, #0, #1
 8002562:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	ID[MSG21_INDEX].Pages.messageID 	= MESSAGE21 ;
 8002566:	2321      	movs	r3, #33	; 0x21
 8002568:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	ID[MSG21_INDEX].Pages.DA 			= BCM_NODE;
 800256c:	2311      	movs	r3, #17
 800256e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	ID[MSG21_INDEX].Pages.SA 			= SCB_NODE;
 8002572:	2333      	movs	r3, #51	; 0x33
 8002574:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	SCB_MSG.Message21_ID = ID[MSG21_INDEX].identifier ;
 8002578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800257a:	4a23      	ldr	r2, [pc, #140]	; (8002608 <EEM_SET_IDENTIFIERS+0x54c>)
 800257c:	6013      	str	r3, [r2, #0]

	ID[MSG22_INDEX].Pages.priority 		= PRIORITY_111 ;
 800257e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002582:	f043 031c 	orr.w	r3, r3, #28
 8002586:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	ID[MSG22_INDEX].Pages.reserved 		= NOT_RESERVED ;
 800258a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800258e:	f36f 0341 	bfc	r3, #1, #1
 8002592:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	ID[MSG22_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002596:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800259a:	f36f 0300 	bfc	r3, #0, #1
 800259e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	ID[MSG22_INDEX].Pages.messageID 	= MESSAGE22 ;
 80025a2:	2322      	movs	r3, #34	; 0x22
 80025a4:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	ID[MSG22_INDEX].Pages.DA 			= BCM_NODE;
 80025a8:	2311      	movs	r3, #17
 80025aa:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	ID[MSG22_INDEX].Pages.SA 			= TLM_NODE;
 80025ae:	2388      	movs	r3, #136	; 0x88
 80025b0:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	TLM_MSG.Message22_ID = 	ID[MSG22_INDEX].identifier ;
 80025b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025b6:	4a15      	ldr	r2, [pc, #84]	; (800260c <EEM_SET_IDENTIFIERS+0x550>)
 80025b8:	6013      	str	r3, [r2, #0]

	ID[MSG23_INDEX].Pages.priority 		= PRIORITY_111 ;
 80025ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80025be:	f043 031c 	orr.w	r3, r3, #28
 80025c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	ID[MSG23_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80025c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80025ca:	f36f 0341 	bfc	r3, #1, #1
 80025ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	ID[MSG23_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80025d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80025d6:	f36f 0300 	bfc	r3, #0, #1
 80025da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	ID[MSG23_INDEX].Pages.messageID 	= MESSAGE23 ;
 80025de:	2323      	movs	r3, #35	; 0x23
 80025e0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	ID[MSG23_INDEX].Pages.DA 			= BCM_NODE;
 80025e4:	2311      	movs	r3, #17
 80025e6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	ID[MSG23_INDEX].Pages.SA 			= TLM_NODE;
 80025ea:	2388      	movs	r3, #136	; 0x88
 80025ec:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	TLM_MSG.Message23_ID = 	ID[MSG23_INDEX].identifier ;
 80025f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025f2:	4a06      	ldr	r2, [pc, #24]	; (800260c <EEM_SET_IDENTIFIERS+0x550>)
 80025f4:	60d3      	str	r3, [r2, #12]


}
 80025f6:	bf00      	nop
 80025f8:	3768      	adds	r7, #104	; 0x68
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	200014d8 	.word	0x200014d8
 8002604:	200013e0 	.word	0x200013e0
 8002608:	20001468 	.word	0x20001468
 800260c:	20001500 	.word	0x20001500

08002610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002614:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <HAL_Init+0x40>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a0d      	ldr	r2, [pc, #52]	; (8002650 <HAL_Init+0x40>)
 800261a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800261e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_Init+0x40>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <HAL_Init+0x40>)
 8002626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800262a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <HAL_Init+0x40>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a07      	ldr	r2, [pc, #28]	; (8002650 <HAL_Init+0x40>)
 8002632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002636:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002638:	2003      	movs	r0, #3
 800263a:	f001 faeb 	bl	8003c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800263e:	200f      	movs	r0, #15
 8002640:	f000 f808 	bl	8002654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002644:	f7fe fd3e 	bl	80010c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40023c00 	.word	0x40023c00

08002654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800265c:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_InitTick+0x54>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_InitTick+0x58>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	4619      	mov	r1, r3
 8002666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800266a:	fbb3 f3f1 	udiv	r3, r3, r1
 800266e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002672:	4618      	mov	r0, r3
 8002674:	f001 fb03 	bl	8003c7e <HAL_SYSTICK_Config>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e00e      	b.n	80026a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b0f      	cmp	r3, #15
 8002686:	d80a      	bhi.n	800269e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002688:	2200      	movs	r2, #0
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	f04f 30ff 	mov.w	r0, #4294967295
 8002690:	f001 facb 	bl	8003c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002694:	4a06      	ldr	r2, [pc, #24]	; (80026b0 <HAL_InitTick+0x5c>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	e000      	b.n	80026a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000000 	.word	0x20000000
 80026ac:	20000008 	.word	0x20000008
 80026b0:	20000004 	.word	0x20000004

080026b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <HAL_IncTick+0x20>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_IncTick+0x24>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4413      	add	r3, r2
 80026c4:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <HAL_IncTick+0x24>)
 80026c6:	6013      	str	r3, [r2, #0]
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000008 	.word	0x20000008
 80026d8:	200015a4 	.word	0x200015a4

080026dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  return uwTick;
 80026e0:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <HAL_GetTick+0x14>)
 80026e2:	681b      	ldr	r3, [r3, #0]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	200015a4 	.word	0x200015a4

080026f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026fc:	f7ff ffee 	bl	80026dc <HAL_GetTick>
 8002700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270c:	d005      	beq.n	800271a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800270e:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <HAL_Delay+0x44>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4413      	add	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800271a:	bf00      	nop
 800271c:	f7ff ffde 	bl	80026dc <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	429a      	cmp	r2, r3
 800272a:	d8f7      	bhi.n	800271c <HAL_Delay+0x28>
  {
  }
}
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000008 	.word	0x20000008

0800273c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e033      	b.n	80027ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	d109      	bne.n	800276e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7fe fcde 	bl	800111c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	2b00      	cmp	r3, #0
 8002778:	d118      	bne.n	80027ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002782:	f023 0302 	bic.w	r3, r3, #2
 8002786:	f043 0202 	orr.w	r2, r3, #2
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 fae8 	bl	8002d64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f023 0303 	bic.w	r3, r3, #3
 80027a2:	f043 0201 	orr.w	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40
 80027aa:	e001      	b.n	80027b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_ADC_Start+0x1a>
 80027da:	2302      	movs	r3, #2
 80027dc:	e0b2      	b.n	8002944 <HAL_ADC_Start+0x180>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d018      	beq.n	8002826 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002804:	4b52      	ldr	r3, [pc, #328]	; (8002950 <HAL_ADC_Start+0x18c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a52      	ldr	r2, [pc, #328]	; (8002954 <HAL_ADC_Start+0x190>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	0c9a      	lsrs	r2, r3, #18
 8002810:	4613      	mov	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002818:	e002      	b.n	8002820 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	3b01      	subs	r3, #1
 800281e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f9      	bne.n	800281a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	d17a      	bne.n	800292a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800283c:	f023 0301 	bic.w	r3, r3, #1
 8002840:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002852:	2b00      	cmp	r3, #0
 8002854:	d007      	beq.n	8002866 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800285e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800286e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002872:	d106      	bne.n	8002882 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002878:	f023 0206 	bic.w	r2, r3, #6
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	645a      	str	r2, [r3, #68]	; 0x44
 8002880:	e002      	b.n	8002888 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002890:	4b31      	ldr	r3, [pc, #196]	; (8002958 <HAL_ADC_Start+0x194>)
 8002892:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800289c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 031f 	and.w	r3, r3, #31
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d12a      	bne.n	8002900 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a2b      	ldr	r2, [pc, #172]	; (800295c <HAL_ADC_Start+0x198>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d015      	beq.n	80028e0 <HAL_ADC_Start+0x11c>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a29      	ldr	r2, [pc, #164]	; (8002960 <HAL_ADC_Start+0x19c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d105      	bne.n	80028ca <HAL_ADC_Start+0x106>
 80028be:	4b26      	ldr	r3, [pc, #152]	; (8002958 <HAL_ADC_Start+0x194>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 031f 	and.w	r3, r3, #31
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a25      	ldr	r2, [pc, #148]	; (8002964 <HAL_ADC_Start+0x1a0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d136      	bne.n	8002942 <HAL_ADC_Start+0x17e>
 80028d4:	4b20      	ldr	r3, [pc, #128]	; (8002958 <HAL_ADC_Start+0x194>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d130      	bne.n	8002942 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d129      	bne.n	8002942 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028fc:	609a      	str	r2, [r3, #8]
 80028fe:	e020      	b.n	8002942 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a15      	ldr	r2, [pc, #84]	; (800295c <HAL_ADC_Start+0x198>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d11b      	bne.n	8002942 <HAL_ADC_Start+0x17e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d114      	bne.n	8002942 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	e00b      	b.n	8002942 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f043 0210 	orr.w	r2, r3, #16
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	f043 0201 	orr.w	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	20000000 	.word	0x20000000
 8002954:	431bde83 	.word	0x431bde83
 8002958:	40012300 	.word	0x40012300
 800295c:	40012000 	.word	0x40012000
 8002960:	40012100 	.word	0x40012100
 8002964:	40012200 	.word	0x40012200

08002968 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_ADC_Stop+0x16>
 800297a:	2302      	movs	r3, #2
 800297c:	e021      	b.n	80029c2 <HAL_ADC_Stop+0x5a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0201 	bic.w	r2, r2, #1
 8002994:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d109      	bne.n	80029b8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029ac:	f023 0301 	bic.w	r3, r3, #1
 80029b0:	f043 0201 	orr.w	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b084      	sub	sp, #16
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ea:	d113      	bne.n	8002a14 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80029f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029fa:	d10b      	bne.n	8002a14 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	f043 0220 	orr.w	r2, r3, #32
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e063      	b.n	8002adc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002a14:	f7ff fe62 	bl	80026dc <HAL_GetTick>
 8002a18:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a1a:	e021      	b.n	8002a60 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a22:	d01d      	beq.n	8002a60 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d007      	beq.n	8002a3a <HAL_ADC_PollForConversion+0x6c>
 8002a2a:	f7ff fe57 	bl	80026dc <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d212      	bcs.n	8002a60 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d00b      	beq.n	8002a60 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	f043 0204 	orr.w	r2, r3, #4
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e03d      	b.n	8002adc <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d1d6      	bne.n	8002a1c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f06f 0212 	mvn.w	r2, #18
 8002a76:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d123      	bne.n	8002ada <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d11f      	bne.n	8002ada <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d006      	beq.n	8002ab6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d111      	bne.n	8002ada <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d105      	bne.n	8002ada <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f043 0201 	orr.w	r2, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x1c>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e113      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x244>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b09      	cmp	r3, #9
 8002b2a:	d925      	bls.n	8002b78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68d9      	ldr	r1, [r3, #12]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	4413      	add	r3, r2
 8002b40:	3b1e      	subs	r3, #30
 8002b42:	2207      	movs	r2, #7
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43da      	mvns	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	400a      	ands	r2, r1
 8002b50:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68d9      	ldr	r1, [r3, #12]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	4618      	mov	r0, r3
 8002b64:	4603      	mov	r3, r0
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	4403      	add	r3, r0
 8002b6a:	3b1e      	subs	r3, #30
 8002b6c:	409a      	lsls	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	e022      	b.n	8002bbe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6919      	ldr	r1, [r3, #16]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	4613      	mov	r3, r2
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4413      	add	r3, r2
 8002b8c:	2207      	movs	r2, #7
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43da      	mvns	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	400a      	ands	r2, r1
 8002b9a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6919      	ldr	r1, [r3, #16]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	4618      	mov	r0, r3
 8002bae:	4603      	mov	r3, r0
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	4403      	add	r3, r0
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b06      	cmp	r3, #6
 8002bc4:	d824      	bhi.n	8002c10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3b05      	subs	r3, #5
 8002bd8:	221f      	movs	r2, #31
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43da      	mvns	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	400a      	ands	r2, r1
 8002be6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	3b05      	subs	r3, #5
 8002c02:	fa00 f203 	lsl.w	r2, r0, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c0e:	e04c      	b.n	8002caa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b0c      	cmp	r3, #12
 8002c16:	d824      	bhi.n	8002c62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	3b23      	subs	r3, #35	; 0x23
 8002c2a:	221f      	movs	r2, #31
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43da      	mvns	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	400a      	ands	r2, r1
 8002c38:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	4618      	mov	r0, r3
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	3b23      	subs	r3, #35	; 0x23
 8002c54:	fa00 f203 	lsl.w	r2, r0, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	631a      	str	r2, [r3, #48]	; 0x30
 8002c60:	e023      	b.n	8002caa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	3b41      	subs	r3, #65	; 0x41
 8002c74:	221f      	movs	r2, #31
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43da      	mvns	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	400a      	ands	r2, r1
 8002c82:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	4618      	mov	r0, r3
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3b41      	subs	r3, #65	; 0x41
 8002c9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002caa:	4b29      	ldr	r3, [pc, #164]	; (8002d50 <HAL_ADC_ConfigChannel+0x250>)
 8002cac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a28      	ldr	r2, [pc, #160]	; (8002d54 <HAL_ADC_ConfigChannel+0x254>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d10f      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x1d8>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b12      	cmp	r3, #18
 8002cbe:	d10b      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a1d      	ldr	r2, [pc, #116]	; (8002d54 <HAL_ADC_ConfigChannel+0x254>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d12b      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x23a>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a1c      	ldr	r2, [pc, #112]	; (8002d58 <HAL_ADC_ConfigChannel+0x258>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d003      	beq.n	8002cf4 <HAL_ADC_ConfigChannel+0x1f4>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b11      	cmp	r3, #17
 8002cf2:	d122      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a11      	ldr	r2, [pc, #68]	; (8002d58 <HAL_ADC_ConfigChannel+0x258>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d111      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d16:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <HAL_ADC_ConfigChannel+0x25c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a11      	ldr	r2, [pc, #68]	; (8002d60 <HAL_ADC_ConfigChannel+0x260>)
 8002d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d20:	0c9a      	lsrs	r2, r3, #18
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d2c:	e002      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	3b01      	subs	r3, #1
 8002d32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f9      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	40012300 	.word	0x40012300
 8002d54:	40012000 	.word	0x40012000
 8002d58:	10000012 	.word	0x10000012
 8002d5c:	20000000 	.word	0x20000000
 8002d60:	431bde83 	.word	0x431bde83

08002d64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d6c:	4b79      	ldr	r3, [pc, #484]	; (8002f54 <ADC_Init+0x1f0>)
 8002d6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	431a      	orrs	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6859      	ldr	r1, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	021a      	lsls	r2, r3, #8
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002dbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6899      	ldr	r1, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df6:	4a58      	ldr	r2, [pc, #352]	; (8002f58 <ADC_Init+0x1f4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d022      	beq.n	8002e42 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6899      	ldr	r1, [r3, #8]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6899      	ldr	r1, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	e00f      	b.n	8002e62 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0202 	bic.w	r2, r2, #2
 8002e70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6899      	ldr	r1, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	7e1b      	ldrb	r3, [r3, #24]
 8002e7c:	005a      	lsls	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d01b      	beq.n	8002ec8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002eae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6859      	ldr	r1, [r3, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	035a      	lsls	r2, r3, #13
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	e007      	b.n	8002ed8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ed6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	051a      	lsls	r2, r3, #20
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6899      	ldr	r1, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f1a:	025a      	lsls	r2, r3, #9
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6899      	ldr	r1, [r3, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	029a      	lsls	r2, r3, #10
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	609a      	str	r2, [r3, #8]
}
 8002f48:	bf00      	nop
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	40012300 	.word	0x40012300
 8002f58:	0f000001 	.word	0x0f000001

08002f5c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e0ed      	b.n	800314a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d102      	bne.n	8002f80 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7fe f9b0 	bl	80012e0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f90:	f7ff fba4 	bl	80026dc <HAL_GetTick>
 8002f94:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f96:	e012      	b.n	8002fbe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f98:	f7ff fba0 	bl	80026dc <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b0a      	cmp	r3, #10
 8002fa4:	d90b      	bls.n	8002fbe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2205      	movs	r2, #5
 8002fb6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e0c5      	b.n	800314a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0e5      	beq.n	8002f98 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0202 	bic.w	r2, r2, #2
 8002fda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fdc:	f7ff fb7e 	bl	80026dc <HAL_GetTick>
 8002fe0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002fe2:	e012      	b.n	800300a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002fe4:	f7ff fb7a 	bl	80026dc <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b0a      	cmp	r3, #10
 8002ff0:	d90b      	bls.n	800300a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2205      	movs	r2, #5
 8003002:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e09f      	b.n	800314a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1e5      	bne.n	8002fe4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	7e1b      	ldrb	r3, [r3, #24]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d108      	bne.n	8003032 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	e007      	b.n	8003042 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003040:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	7e5b      	ldrb	r3, [r3, #25]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d108      	bne.n	800305c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	e007      	b.n	800306c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800306a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	7e9b      	ldrb	r3, [r3, #26]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d108      	bne.n	8003086 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0220 	orr.w	r2, r2, #32
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	e007      	b.n	8003096 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0220 	bic.w	r2, r2, #32
 8003094:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	7edb      	ldrb	r3, [r3, #27]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d108      	bne.n	80030b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0210 	bic.w	r2, r2, #16
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	e007      	b.n	80030c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0210 	orr.w	r2, r2, #16
 80030be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	7f1b      	ldrb	r3, [r3, #28]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d108      	bne.n	80030da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0208 	orr.w	r2, r2, #8
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	e007      	b.n	80030ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0208 	bic.w	r2, r2, #8
 80030e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	7f5b      	ldrb	r3, [r3, #29]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d108      	bne.n	8003104 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f042 0204 	orr.w	r2, r2, #4
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	e007      	b.n	8003114 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0204 	bic.w	r2, r2, #4
 8003112:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	ea42 0103 	orr.w	r1, r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	1e5a      	subs	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b01      	cmp	r3, #1
 8003164:	d12e      	bne.n	80031c4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2202      	movs	r2, #2
 800316a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0201 	bic.w	r2, r2, #1
 800317c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800317e:	f7ff faad 	bl	80026dc <HAL_GetTick>
 8003182:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003184:	e012      	b.n	80031ac <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003186:	f7ff faa9 	bl	80026dc <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b0a      	cmp	r3, #10
 8003192:	d90b      	bls.n	80031ac <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2205      	movs	r2, #5
 80031a4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e012      	b.n	80031d2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1e5      	bne.n	8003186 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	e006      	b.n	80031d2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
  }
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80031da:	b480      	push	{r7}
 80031dc:	b089      	sub	sp, #36	; 0x24
 80031de:	af00      	add	r7, sp, #0
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	607a      	str	r2, [r7, #4]
 80031e6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80031f8:	7ffb      	ldrb	r3, [r7, #31]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d003      	beq.n	8003206 <HAL_CAN_AddTxMessage+0x2c>
 80031fe:	7ffb      	ldrb	r3, [r7, #31]
 8003200:	2b02      	cmp	r3, #2
 8003202:	f040 80b8 	bne.w	8003376 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10a      	bne.n	8003226 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003216:	2b00      	cmp	r3, #0
 8003218:	d105      	bne.n	8003226 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80a0 	beq.w	8003366 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	0e1b      	lsrs	r3, r3, #24
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d907      	bls.n	8003246 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e09e      	b.n	8003384 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003246:	2201      	movs	r2, #1
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	409a      	lsls	r2, r3
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10d      	bne.n	8003274 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003262:	68f9      	ldr	r1, [r7, #12]
 8003264:	6809      	ldr	r1, [r1, #0]
 8003266:	431a      	orrs	r2, r3
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	3318      	adds	r3, #24
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	440b      	add	r3, r1
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	e00f      	b.n	8003294 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800327e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003284:	68f9      	ldr	r1, [r7, #12]
 8003286:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003288:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	3318      	adds	r3, #24
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	440b      	add	r3, r1
 8003292:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6819      	ldr	r1, [r3, #0]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	3318      	adds	r3, #24
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	440b      	add	r3, r1
 80032a4:	3304      	adds	r3, #4
 80032a6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	7d1b      	ldrb	r3, [r3, #20]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d111      	bne.n	80032d4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	3318      	adds	r3, #24
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	4413      	add	r3, r2
 80032bc:	3304      	adds	r3, #4
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	6811      	ldr	r1, [r2, #0]
 80032c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	3318      	adds	r3, #24
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	440b      	add	r3, r1
 80032d0:	3304      	adds	r3, #4
 80032d2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3307      	adds	r3, #7
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	061a      	lsls	r2, r3, #24
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3306      	adds	r3, #6
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	041b      	lsls	r3, r3, #16
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3305      	adds	r3, #5
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	4313      	orrs	r3, r2
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	3204      	adds	r2, #4
 80032f4:	7812      	ldrb	r2, [r2, #0]
 80032f6:	4610      	mov	r0, r2
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	6811      	ldr	r1, [r2, #0]
 80032fc:	ea43 0200 	orr.w	r2, r3, r0
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	440b      	add	r3, r1
 8003306:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800330a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3303      	adds	r3, #3
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	061a      	lsls	r2, r3, #24
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3302      	adds	r3, #2
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	041b      	lsls	r3, r3, #16
 800331c:	431a      	orrs	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3301      	adds	r3, #1
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	021b      	lsls	r3, r3, #8
 8003326:	4313      	orrs	r3, r2
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	7812      	ldrb	r2, [r2, #0]
 800332c:	4610      	mov	r0, r2
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	6811      	ldr	r1, [r2, #0]
 8003332:	ea43 0200 	orr.w	r2, r3, r0
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	440b      	add	r3, r1
 800333c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003340:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	3318      	adds	r3, #24
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	4413      	add	r3, r2
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	6811      	ldr	r1, [r2, #0]
 8003354:	f043 0201 	orr.w	r2, r3, #1
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	3318      	adds	r3, #24
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	440b      	add	r3, r1
 8003360:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	e00e      	b.n	8003384 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e006      	b.n	8003384 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
  }
}
 8003384:	4618      	mov	r0, r3
 8003386:	3724      	adds	r7, #36	; 0x24
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033a4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80033a6:	7dfb      	ldrb	r3, [r7, #23]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d003      	beq.n	80033b4 <HAL_CAN_GetRxMessage+0x24>
 80033ac:	7dfb      	ldrb	r3, [r7, #23]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	f040 80f3 	bne.w	800359a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10e      	bne.n	80033d8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d116      	bne.n	80033f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0e7      	b.n	80035a8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d107      	bne.n	80033f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e0d8      	b.n	80035a8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	331b      	adds	r3, #27
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	4413      	add	r3, r2
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0204 	and.w	r2, r3, #4
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10c      	bne.n	800342e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	331b      	adds	r3, #27
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	4413      	add	r3, r2
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	0d5b      	lsrs	r3, r3, #21
 8003424:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	e00b      	b.n	8003446 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	331b      	adds	r3, #27
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	4413      	add	r3, r2
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	08db      	lsrs	r3, r3, #3
 800343e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	331b      	adds	r3, #27
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	4413      	add	r3, r2
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0202 	and.w	r2, r3, #2
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	331b      	adds	r3, #27
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	4413      	add	r3, r2
 8003468:	3304      	adds	r3, #4
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 020f 	and.w	r2, r3, #15
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	331b      	adds	r3, #27
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	4413      	add	r3, r2
 8003480:	3304      	adds	r3, #4
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	0a1b      	lsrs	r3, r3, #8
 8003486:	b2da      	uxtb	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	331b      	adds	r3, #27
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	4413      	add	r3, r2
 8003498:	3304      	adds	r3, #4
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	0c1b      	lsrs	r3, r3, #16
 800349e:	b29a      	uxth	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	0a1a      	lsrs	r2, r3, #8
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	3301      	adds	r3, #1
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	4413      	add	r3, r2
 80034de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	0c1a      	lsrs	r2, r3, #16
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	3302      	adds	r3, #2
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	0e1a      	lsrs	r2, r3, #24
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	3303      	adds	r3, #3
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	4413      	add	r3, r2
 8003512:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	3304      	adds	r3, #4
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	4413      	add	r3, r2
 800352a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	0a1a      	lsrs	r2, r3, #8
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	3305      	adds	r3, #5
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	4413      	add	r3, r2
 8003544:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	0c1a      	lsrs	r2, r3, #16
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	3306      	adds	r3, #6
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	4413      	add	r3, r2
 800355e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	0e1a      	lsrs	r2, r3, #24
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	3307      	adds	r3, #7
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d108      	bne.n	8003586 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0220 	orr.w	r2, r2, #32
 8003582:	60da      	str	r2, [r3, #12]
 8003584:	e007      	b.n	8003596 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0220 	orr.w	r2, r2, #32
 8003594:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	e006      	b.n	80035a8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
  }
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	371c      	adds	r7, #28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035c4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80035c6:	7bfb      	ldrb	r3, [r7, #15]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d002      	beq.n	80035d2 <HAL_CAN_ActivateNotification+0x1e>
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d109      	bne.n	80035e6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6959      	ldr	r1, [r3, #20]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80035e2:	2300      	movs	r3, #0
 80035e4:	e006      	b.n	80035f4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
  }
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3714      	adds	r7, #20
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08a      	sub	sp, #40	; 0x28
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003608:	2300      	movs	r3, #0
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d07c      	beq.n	8003740 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d023      	beq.n	8003698 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2201      	movs	r2, #1
 8003656:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f983 	bl	800396e <HAL_CAN_TxMailbox0CompleteCallback>
 8003668:	e016      	b.n	8003698 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d004      	beq.n	800367e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800367a:	627b      	str	r3, [r7, #36]	; 0x24
 800367c:	e00c      	b.n	8003698 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b00      	cmp	r3, #0
 8003686:	d004      	beq.n	8003692 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
 8003690:	e002      	b.n	8003698 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f989 	bl	80039aa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d024      	beq.n	80036ec <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f963 	bl	8003982 <HAL_CAN_TxMailbox1CompleteCallback>
 80036bc:	e016      	b.n	80036ec <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d004      	beq.n	80036d2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
 80036d0:	e00c      	b.n	80036ec <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d004      	beq.n	80036e6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
 80036e4:	e002      	b.n	80036ec <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f969 	bl	80039be <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d024      	beq.n	8003740 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80036fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f943 	bl	8003996 <HAL_CAN_TxMailbox2CompleteCallback>
 8003710:	e016      	b.n	8003740 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d004      	beq.n	8003726 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
 8003724:	e00c      	b.n	8003740 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d004      	beq.n	800373a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003736:	627b      	str	r3, [r7, #36]	; 0x24
 8003738:	e002      	b.n	8003740 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f949 	bl	80039d2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00c      	beq.n	8003764 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	2b00      	cmp	r3, #0
 8003752:	d007      	beq.n	8003764 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800375a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2210      	movs	r2, #16
 8003762:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00b      	beq.n	8003786 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	2b00      	cmp	r3, #0
 8003776:	d006      	beq.n	8003786 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2208      	movs	r2, #8
 800377e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f93a 	bl	80039fa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d009      	beq.n	80037a4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f921 	bl	80039e6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00c      	beq.n	80037c8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d007      	beq.n	80037c8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2210      	movs	r2, #16
 80037c6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	f003 0320 	and.w	r3, r3, #32
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00b      	beq.n	80037ea <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d006      	beq.n	80037ea <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2208      	movs	r2, #8
 80037e2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f91c 	bl	8003a22 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	f003 0310 	and.w	r3, r3, #16
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d009      	beq.n	8003808 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d002      	beq.n	8003808 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f903 	bl	8003a0e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00b      	beq.n	800382a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f003 0310 	and.w	r3, r3, #16
 8003818:	2b00      	cmp	r3, #0
 800381a:	d006      	beq.n	800382a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2210      	movs	r2, #16
 8003822:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f906 	bl	8003a36 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00b      	beq.n	800384c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d006      	beq.n	800384c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2208      	movs	r2, #8
 8003844:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f8ff 	bl	8003a4a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d07b      	beq.n	800394e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	d072      	beq.n	8003946 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003866:	2b00      	cmp	r3, #0
 8003868:	d008      	beq.n	800387c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003882:	2b00      	cmp	r3, #0
 8003884:	d008      	beq.n	8003898 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	f043 0302 	orr.w	r3, r3, #2
 8003896:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d008      	beq.n	80038b4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	f043 0304 	orr.w	r3, r3, #4
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d043      	beq.n	8003946 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d03e      	beq.n	8003946 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038ce:	2b60      	cmp	r3, #96	; 0x60
 80038d0:	d02b      	beq.n	800392a <HAL_CAN_IRQHandler+0x32a>
 80038d2:	2b60      	cmp	r3, #96	; 0x60
 80038d4:	d82e      	bhi.n	8003934 <HAL_CAN_IRQHandler+0x334>
 80038d6:	2b50      	cmp	r3, #80	; 0x50
 80038d8:	d022      	beq.n	8003920 <HAL_CAN_IRQHandler+0x320>
 80038da:	2b50      	cmp	r3, #80	; 0x50
 80038dc:	d82a      	bhi.n	8003934 <HAL_CAN_IRQHandler+0x334>
 80038de:	2b40      	cmp	r3, #64	; 0x40
 80038e0:	d019      	beq.n	8003916 <HAL_CAN_IRQHandler+0x316>
 80038e2:	2b40      	cmp	r3, #64	; 0x40
 80038e4:	d826      	bhi.n	8003934 <HAL_CAN_IRQHandler+0x334>
 80038e6:	2b30      	cmp	r3, #48	; 0x30
 80038e8:	d010      	beq.n	800390c <HAL_CAN_IRQHandler+0x30c>
 80038ea:	2b30      	cmp	r3, #48	; 0x30
 80038ec:	d822      	bhi.n	8003934 <HAL_CAN_IRQHandler+0x334>
 80038ee:	2b10      	cmp	r3, #16
 80038f0:	d002      	beq.n	80038f8 <HAL_CAN_IRQHandler+0x2f8>
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d005      	beq.n	8003902 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80038f6:	e01d      	b.n	8003934 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	f043 0308 	orr.w	r3, r3, #8
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003900:	e019      	b.n	8003936 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	f043 0310 	orr.w	r3, r3, #16
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800390a:	e014      	b.n	8003936 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	f043 0320 	orr.w	r3, r3, #32
 8003912:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003914:	e00f      	b.n	8003936 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800391e:	e00a      	b.n	8003936 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003928:	e005      	b.n	8003936 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003932:	e000      	b.n	8003936 <HAL_CAN_IRQHandler+0x336>
            break;
 8003934:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699a      	ldr	r2, [r3, #24]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003944:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2204      	movs	r2, #4
 800394c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f87c 	bl	8003a5e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003966:	bf00      	nop
 8003968:	3728      	adds	r7, #40	; 0x28
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
	...

08003a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a84:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a90:	4013      	ands	r3, r2
 8003a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aa6:	4a04      	ldr	r2, [pc, #16]	; (8003ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	60d3      	str	r3, [r2, #12]
}
 8003aac:	bf00      	nop
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	e000ed00 	.word	0xe000ed00

08003abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ac0:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	0a1b      	lsrs	r3, r3, #8
 8003ac6:	f003 0307 	and.w	r3, r3, #7
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	e000ed00 	.word	0xe000ed00

08003ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	db0b      	blt.n	8003b02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aea:	79fb      	ldrb	r3, [r7, #7]
 8003aec:	f003 021f 	and.w	r2, r3, #31
 8003af0:	4907      	ldr	r1, [pc, #28]	; (8003b10 <__NVIC_EnableIRQ+0x38>)
 8003af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	2001      	movs	r0, #1
 8003afa:	fa00 f202 	lsl.w	r2, r0, r2
 8003afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	e000e100 	.word	0xe000e100

08003b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	6039      	str	r1, [r7, #0]
 8003b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	db0a      	blt.n	8003b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	490c      	ldr	r1, [pc, #48]	; (8003b60 <__NVIC_SetPriority+0x4c>)
 8003b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b32:	0112      	lsls	r2, r2, #4
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	440b      	add	r3, r1
 8003b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b3c:	e00a      	b.n	8003b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	4908      	ldr	r1, [pc, #32]	; (8003b64 <__NVIC_SetPriority+0x50>)
 8003b44:	79fb      	ldrb	r3, [r7, #7]
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	3b04      	subs	r3, #4
 8003b4c:	0112      	lsls	r2, r2, #4
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	440b      	add	r3, r1
 8003b52:	761a      	strb	r2, [r3, #24]
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	e000e100 	.word	0xe000e100
 8003b64:	e000ed00 	.word	0xe000ed00

08003b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b089      	sub	sp, #36	; 0x24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f1c3 0307 	rsb	r3, r3, #7
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	bf28      	it	cs
 8003b86:	2304      	movcs	r3, #4
 8003b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	2b06      	cmp	r3, #6
 8003b90:	d902      	bls.n	8003b98 <NVIC_EncodePriority+0x30>
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	3b03      	subs	r3, #3
 8003b96:	e000      	b.n	8003b9a <NVIC_EncodePriority+0x32>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43da      	mvns	r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	401a      	ands	r2, r3
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bba:	43d9      	mvns	r1, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc0:	4313      	orrs	r3, r2
         );
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3724      	adds	r7, #36	; 0x24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
	...

08003bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003be0:	d301      	bcc.n	8003be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003be2:	2301      	movs	r3, #1
 8003be4:	e00f      	b.n	8003c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003be6:	4a0a      	ldr	r2, [pc, #40]	; (8003c10 <SysTick_Config+0x40>)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bee:	210f      	movs	r1, #15
 8003bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf4:	f7ff ff8e 	bl	8003b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bf8:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <SysTick_Config+0x40>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bfe:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <SysTick_Config+0x40>)
 8003c00:	2207      	movs	r2, #7
 8003c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	e000e010 	.word	0xe000e010

08003c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7ff ff29 	bl	8003a74 <__NVIC_SetPriorityGrouping>
}
 8003c22:	bf00      	nop
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b086      	sub	sp, #24
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	4603      	mov	r3, r0
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	607a      	str	r2, [r7, #4]
 8003c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c3c:	f7ff ff3e 	bl	8003abc <__NVIC_GetPriorityGrouping>
 8003c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	68b9      	ldr	r1, [r7, #8]
 8003c46:	6978      	ldr	r0, [r7, #20]
 8003c48:	f7ff ff8e 	bl	8003b68 <NVIC_EncodePriority>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c52:	4611      	mov	r1, r2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff ff5d 	bl	8003b14 <__NVIC_SetPriority>
}
 8003c5a:	bf00      	nop
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b082      	sub	sp, #8
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	4603      	mov	r3, r0
 8003c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff ff31 	bl	8003ad8 <__NVIC_EnableIRQ>
}
 8003c76:	bf00      	nop
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b082      	sub	sp, #8
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7ff ffa2 	bl	8003bd0 <SysTick_Config>
 8003c8c:	4603      	mov	r3, r0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e00e      	b.n	8003cc6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	795b      	ldrb	r3, [r3, #5]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d105      	bne.n	8003cbe <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7fd fbd3 	bl	8001464 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b089      	sub	sp, #36	; 0x24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	e165      	b.n	8003fb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cec:	2201      	movs	r2, #1
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	f040 8154 	bne.w	8003fb2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d005      	beq.n	8003d22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d130      	bne.n	8003d84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	43db      	mvns	r3, r3
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	4013      	ands	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	fa02 f303 	lsl.w	r3, r2, r3
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d58:	2201      	movs	r2, #1
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	43db      	mvns	r3, r3
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	4013      	ands	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	091b      	lsrs	r3, r3, #4
 8003d6e:	f003 0201 	and.w	r2, r3, #1
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 0303 	and.w	r3, r3, #3
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d017      	beq.n	8003dc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	2203      	movs	r2, #3
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4013      	ands	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 0303 	and.w	r3, r3, #3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d123      	bne.n	8003e14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	08da      	lsrs	r2, r3, #3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3208      	adds	r2, #8
 8003dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	220f      	movs	r2, #15
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	43db      	mvns	r3, r3
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	4013      	ands	r3, r2
 8003dee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	08da      	lsrs	r2, r3, #3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3208      	adds	r2, #8
 8003e0e:	69b9      	ldr	r1, [r7, #24]
 8003e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	2203      	movs	r2, #3
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	43db      	mvns	r3, r3
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f003 0203 	and.w	r2, r3, #3
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 80ae 	beq.w	8003fb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	4b5d      	ldr	r3, [pc, #372]	; (8003fd0 <HAL_GPIO_Init+0x300>)
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5e:	4a5c      	ldr	r2, [pc, #368]	; (8003fd0 <HAL_GPIO_Init+0x300>)
 8003e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e64:	6453      	str	r3, [r2, #68]	; 0x44
 8003e66:	4b5a      	ldr	r3, [pc, #360]	; (8003fd0 <HAL_GPIO_Init+0x300>)
 8003e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e72:	4a58      	ldr	r2, [pc, #352]	; (8003fd4 <HAL_GPIO_Init+0x304>)
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	089b      	lsrs	r3, r3, #2
 8003e78:	3302      	adds	r3, #2
 8003e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	220f      	movs	r2, #15
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4013      	ands	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a4f      	ldr	r2, [pc, #316]	; (8003fd8 <HAL_GPIO_Init+0x308>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d025      	beq.n	8003eea <HAL_GPIO_Init+0x21a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a4e      	ldr	r2, [pc, #312]	; (8003fdc <HAL_GPIO_Init+0x30c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d01f      	beq.n	8003ee6 <HAL_GPIO_Init+0x216>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a4d      	ldr	r2, [pc, #308]	; (8003fe0 <HAL_GPIO_Init+0x310>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d019      	beq.n	8003ee2 <HAL_GPIO_Init+0x212>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a4c      	ldr	r2, [pc, #304]	; (8003fe4 <HAL_GPIO_Init+0x314>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d013      	beq.n	8003ede <HAL_GPIO_Init+0x20e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a4b      	ldr	r2, [pc, #300]	; (8003fe8 <HAL_GPIO_Init+0x318>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00d      	beq.n	8003eda <HAL_GPIO_Init+0x20a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a4a      	ldr	r2, [pc, #296]	; (8003fec <HAL_GPIO_Init+0x31c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d007      	beq.n	8003ed6 <HAL_GPIO_Init+0x206>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a49      	ldr	r2, [pc, #292]	; (8003ff0 <HAL_GPIO_Init+0x320>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d101      	bne.n	8003ed2 <HAL_GPIO_Init+0x202>
 8003ece:	2306      	movs	r3, #6
 8003ed0:	e00c      	b.n	8003eec <HAL_GPIO_Init+0x21c>
 8003ed2:	2307      	movs	r3, #7
 8003ed4:	e00a      	b.n	8003eec <HAL_GPIO_Init+0x21c>
 8003ed6:	2305      	movs	r3, #5
 8003ed8:	e008      	b.n	8003eec <HAL_GPIO_Init+0x21c>
 8003eda:	2304      	movs	r3, #4
 8003edc:	e006      	b.n	8003eec <HAL_GPIO_Init+0x21c>
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e004      	b.n	8003eec <HAL_GPIO_Init+0x21c>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e002      	b.n	8003eec <HAL_GPIO_Init+0x21c>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <HAL_GPIO_Init+0x21c>
 8003eea:	2300      	movs	r3, #0
 8003eec:	69fa      	ldr	r2, [r7, #28]
 8003eee:	f002 0203 	and.w	r2, r2, #3
 8003ef2:	0092      	lsls	r2, r2, #2
 8003ef4:	4093      	lsls	r3, r2
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003efc:	4935      	ldr	r1, [pc, #212]	; (8003fd4 <HAL_GPIO_Init+0x304>)
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	089b      	lsrs	r3, r3, #2
 8003f02:	3302      	adds	r3, #2
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f0a:	4b3a      	ldr	r3, [pc, #232]	; (8003ff4 <HAL_GPIO_Init+0x324>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	43db      	mvns	r3, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4013      	ands	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f2e:	4a31      	ldr	r2, [pc, #196]	; (8003ff4 <HAL_GPIO_Init+0x324>)
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f34:	4b2f      	ldr	r3, [pc, #188]	; (8003ff4 <HAL_GPIO_Init+0x324>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4013      	ands	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f58:	4a26      	ldr	r2, [pc, #152]	; (8003ff4 <HAL_GPIO_Init+0x324>)
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f5e:	4b25      	ldr	r3, [pc, #148]	; (8003ff4 <HAL_GPIO_Init+0x324>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	43db      	mvns	r3, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f82:	4a1c      	ldr	r2, [pc, #112]	; (8003ff4 <HAL_GPIO_Init+0x324>)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f88:	4b1a      	ldr	r3, [pc, #104]	; (8003ff4 <HAL_GPIO_Init+0x324>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	43db      	mvns	r3, r3
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	4013      	ands	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fac:	4a11      	ldr	r2, [pc, #68]	; (8003ff4 <HAL_GPIO_Init+0x324>)
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	61fb      	str	r3, [r7, #28]
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	2b0f      	cmp	r3, #15
 8003fbc:	f67f ae96 	bls.w	8003cec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fc0:	bf00      	nop
 8003fc2:	bf00      	nop
 8003fc4:	3724      	adds	r7, #36	; 0x24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	40013800 	.word	0x40013800
 8003fd8:	40020000 	.word	0x40020000
 8003fdc:	40020400 	.word	0x40020400
 8003fe0:	40020800 	.word	0x40020800
 8003fe4:	40020c00 	.word	0x40020c00
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	40021400 	.word	0x40021400
 8003ff0:	40021800 	.word	0x40021800
 8003ff4:	40013c00 	.word	0x40013c00

08003ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	807b      	strh	r3, [r7, #2]
 8004004:	4613      	mov	r3, r2
 8004006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004008:	787b      	ldrb	r3, [r7, #1]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800400e:	887a      	ldrh	r2, [r7, #2]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004014:	e003      	b.n	800401e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004016:	887b      	ldrh	r3, [r7, #2]
 8004018:	041a      	lsls	r2, r3, #16
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	619a      	str	r2, [r3, #24]
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
	...

0800402c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004036:	4b08      	ldr	r3, [pc, #32]	; (8004058 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004038:	695a      	ldr	r2, [r3, #20]
 800403a:	88fb      	ldrh	r3, [r7, #6]
 800403c:	4013      	ands	r3, r2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d006      	beq.n	8004050 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004042:	4a05      	ldr	r2, [pc, #20]	; (8004058 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004044:	88fb      	ldrh	r3, [r7, #6]
 8004046:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004048:	88fb      	ldrh	r3, [r7, #6]
 800404a:	4618      	mov	r0, r3
 800404c:	f000 f806 	bl	800405c <HAL_GPIO_EXTI_Callback>
  }
}
 8004050:	bf00      	nop
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40013c00 	.word	0x40013c00

0800405c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
	...

08004074 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e12b      	b.n	80042de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d106      	bne.n	80040a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fd fa04 	bl	80014a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2224      	movs	r2, #36	; 0x24
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0201 	bic.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040d8:	f000 fa02 	bl	80044e0 <HAL_RCC_GetPCLK1Freq>
 80040dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	4a81      	ldr	r2, [pc, #516]	; (80042e8 <HAL_I2C_Init+0x274>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d807      	bhi.n	80040f8 <HAL_I2C_Init+0x84>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4a80      	ldr	r2, [pc, #512]	; (80042ec <HAL_I2C_Init+0x278>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	bf94      	ite	ls
 80040f0:	2301      	movls	r3, #1
 80040f2:	2300      	movhi	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	e006      	b.n	8004106 <HAL_I2C_Init+0x92>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4a7d      	ldr	r2, [pc, #500]	; (80042f0 <HAL_I2C_Init+0x27c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	bf94      	ite	ls
 8004100:	2301      	movls	r3, #1
 8004102:	2300      	movhi	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e0e7      	b.n	80042de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4a78      	ldr	r2, [pc, #480]	; (80042f4 <HAL_I2C_Init+0x280>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	0c9b      	lsrs	r3, r3, #18
 8004118:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	430a      	orrs	r2, r1
 800412c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	4a6a      	ldr	r2, [pc, #424]	; (80042e8 <HAL_I2C_Init+0x274>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d802      	bhi.n	8004148 <HAL_I2C_Init+0xd4>
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	3301      	adds	r3, #1
 8004146:	e009      	b.n	800415c <HAL_I2C_Init+0xe8>
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800414e:	fb02 f303 	mul.w	r3, r2, r3
 8004152:	4a69      	ldr	r2, [pc, #420]	; (80042f8 <HAL_I2C_Init+0x284>)
 8004154:	fba2 2303 	umull	r2, r3, r2, r3
 8004158:	099b      	lsrs	r3, r3, #6
 800415a:	3301      	adds	r3, #1
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	430b      	orrs	r3, r1
 8004162:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800416e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	495c      	ldr	r1, [pc, #368]	; (80042e8 <HAL_I2C_Init+0x274>)
 8004178:	428b      	cmp	r3, r1
 800417a:	d819      	bhi.n	80041b0 <HAL_I2C_Init+0x13c>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	1e59      	subs	r1, r3, #1
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	fbb1 f3f3 	udiv	r3, r1, r3
 800418a:	1c59      	adds	r1, r3, #1
 800418c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004190:	400b      	ands	r3, r1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <HAL_I2C_Init+0x138>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	1e59      	subs	r1, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80041a4:	3301      	adds	r3, #1
 80041a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041aa:	e051      	b.n	8004250 <HAL_I2C_Init+0x1dc>
 80041ac:	2304      	movs	r3, #4
 80041ae:	e04f      	b.n	8004250 <HAL_I2C_Init+0x1dc>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d111      	bne.n	80041dc <HAL_I2C_Init+0x168>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	1e58      	subs	r0, r3, #1
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6859      	ldr	r1, [r3, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	440b      	add	r3, r1
 80041c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ca:	3301      	adds	r3, #1
 80041cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	bf0c      	ite	eq
 80041d4:	2301      	moveq	r3, #1
 80041d6:	2300      	movne	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	e012      	b.n	8004202 <HAL_I2C_Init+0x18e>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	1e58      	subs	r0, r3, #1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6859      	ldr	r1, [r3, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	0099      	lsls	r1, r3, #2
 80041ec:	440b      	add	r3, r1
 80041ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80041f2:	3301      	adds	r3, #1
 80041f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	bf0c      	ite	eq
 80041fc:	2301      	moveq	r3, #1
 80041fe:	2300      	movne	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_I2C_Init+0x196>
 8004206:	2301      	movs	r3, #1
 8004208:	e022      	b.n	8004250 <HAL_I2C_Init+0x1dc>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10e      	bne.n	8004230 <HAL_I2C_Init+0x1bc>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	1e58      	subs	r0, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6859      	ldr	r1, [r3, #4]
 800421a:	460b      	mov	r3, r1
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	440b      	add	r3, r1
 8004220:	fbb0 f3f3 	udiv	r3, r0, r3
 8004224:	3301      	adds	r3, #1
 8004226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800422a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800422e:	e00f      	b.n	8004250 <HAL_I2C_Init+0x1dc>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	1e58      	subs	r0, r3, #1
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6859      	ldr	r1, [r3, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	0099      	lsls	r1, r3, #2
 8004240:	440b      	add	r3, r1
 8004242:	fbb0 f3f3 	udiv	r3, r0, r3
 8004246:	3301      	adds	r3, #1
 8004248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800424c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	6809      	ldr	r1, [r1, #0]
 8004254:	4313      	orrs	r3, r2
 8004256:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69da      	ldr	r2, [r3, #28]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800427e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6911      	ldr	r1, [r2, #16]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	68d2      	ldr	r2, [r2, #12]
 800428a:	4311      	orrs	r1, r2
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6812      	ldr	r2, [r2, #0]
 8004290:	430b      	orrs	r3, r1
 8004292:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	695a      	ldr	r2, [r3, #20]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2220      	movs	r2, #32
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	000186a0 	.word	0x000186a0
 80042ec:	001e847f 	.word	0x001e847f
 80042f0:	003d08ff 	.word	0x003d08ff
 80042f4:	431bde83 	.word	0x431bde83
 80042f8:	10624dd3 	.word	0x10624dd3

080042fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0cc      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004310:	4b68      	ldr	r3, [pc, #416]	; (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 030f 	and.w	r3, r3, #15
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d90c      	bls.n	8004338 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431e:	4b65      	ldr	r3, [pc, #404]	; (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004326:	4b63      	ldr	r3, [pc, #396]	; (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d001      	beq.n	8004338 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e0b8      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d020      	beq.n	8004386 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004350:	4b59      	ldr	r3, [pc, #356]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	4a58      	ldr	r2, [pc, #352]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004356:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800435a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004368:	4b53      	ldr	r3, [pc, #332]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	4a52      	ldr	r2, [pc, #328]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004372:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004374:	4b50      	ldr	r3, [pc, #320]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	494d      	ldr	r1, [pc, #308]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004382:	4313      	orrs	r3, r2
 8004384:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d044      	beq.n	800441c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d107      	bne.n	80043aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439a:	4b47      	ldr	r3, [pc, #284]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d119      	bne.n	80043da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e07f      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d003      	beq.n	80043ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	d107      	bne.n	80043ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ba:	4b3f      	ldr	r3, [pc, #252]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e06f      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ca:	4b3b      	ldr	r3, [pc, #236]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e067      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043da:	4b37      	ldr	r3, [pc, #220]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f023 0203 	bic.w	r2, r3, #3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	4934      	ldr	r1, [pc, #208]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043ec:	f7fe f976 	bl	80026dc <HAL_GetTick>
 80043f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043f2:	e00a      	b.n	800440a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f4:	f7fe f972 	bl	80026dc <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e04f      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800440a:	4b2b      	ldr	r3, [pc, #172]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 020c 	and.w	r2, r3, #12
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	429a      	cmp	r2, r3
 800441a:	d1eb      	bne.n	80043f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800441c:	4b25      	ldr	r3, [pc, #148]	; (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d20c      	bcs.n	8004444 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442a:	4b22      	ldr	r3, [pc, #136]	; (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004432:	4b20      	ldr	r3, [pc, #128]	; (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d001      	beq.n	8004444 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e032      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004450:	4b19      	ldr	r3, [pc, #100]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	4916      	ldr	r1, [pc, #88]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	4313      	orrs	r3, r2
 8004460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d009      	beq.n	8004482 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800446e:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	490e      	ldr	r1, [pc, #56]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	4313      	orrs	r3, r2
 8004480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004482:	f000 fb7f 	bl	8004b84 <HAL_RCC_GetSysClockFreq>
 8004486:	4602      	mov	r2, r0
 8004488:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	091b      	lsrs	r3, r3, #4
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	490a      	ldr	r1, [pc, #40]	; (80044bc <HAL_RCC_ClockConfig+0x1c0>)
 8004494:	5ccb      	ldrb	r3, [r1, r3]
 8004496:	fa22 f303 	lsr.w	r3, r2, r3
 800449a:	4a09      	ldr	r2, [pc, #36]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 800449c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800449e:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <HAL_RCC_ClockConfig+0x1c8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fe f8d6 	bl	8002654 <HAL_InitTick>

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40023c00 	.word	0x40023c00
 80044b8:	40023800 	.word	0x40023800
 80044bc:	0800c644 	.word	0x0800c644
 80044c0:	20000000 	.word	0x20000000
 80044c4:	20000004 	.word	0x20000004

080044c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044cc:	4b03      	ldr	r3, [pc, #12]	; (80044dc <HAL_RCC_GetHCLKFreq+0x14>)
 80044ce:	681b      	ldr	r3, [r3, #0]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	20000000 	.word	0x20000000

080044e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044e4:	f7ff fff0 	bl	80044c8 <HAL_RCC_GetHCLKFreq>
 80044e8:	4602      	mov	r2, r0
 80044ea:	4b05      	ldr	r3, [pc, #20]	; (8004500 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	0a9b      	lsrs	r3, r3, #10
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	4903      	ldr	r1, [pc, #12]	; (8004504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044f6:	5ccb      	ldrb	r3, [r1, r3]
 80044f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40023800 	.word	0x40023800
 8004504:	0800c654 	.word	0x0800c654

08004508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800450c:	f7ff ffdc 	bl	80044c8 <HAL_RCC_GetHCLKFreq>
 8004510:	4602      	mov	r2, r0
 8004512:	4b05      	ldr	r3, [pc, #20]	; (8004528 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	0b5b      	lsrs	r3, r3, #13
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	4903      	ldr	r1, [pc, #12]	; (800452c <HAL_RCC_GetPCLK2Freq+0x24>)
 800451e:	5ccb      	ldrb	r3, [r1, r3]
 8004520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004524:	4618      	mov	r0, r3
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40023800 	.word	0x40023800
 800452c:	0800c654 	.word	0x0800c654

08004530 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08c      	sub	sp, #48	; 0x30
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d010      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004568:	4b6f      	ldr	r3, [pc, #444]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800456a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800456e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	496c      	ldr	r1, [pc, #432]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004578:	4313      	orrs	r3, r2
 800457a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004586:	2301      	movs	r3, #1
 8004588:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d010      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004596:	4b64      	ldr	r3, [pc, #400]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800459c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a4:	4960      	ldr	r1, [pc, #384]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80045b4:	2301      	movs	r3, #1
 80045b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d017      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045c4:	4b58      	ldr	r3, [pc, #352]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	4955      	ldr	r1, [pc, #340]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045e2:	d101      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80045e4:	2301      	movs	r3, #1
 80045e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80045f0:	2301      	movs	r3, #1
 80045f2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d017      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004600:	4b49      	ldr	r3, [pc, #292]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004606:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460e:	4946      	ldr	r1, [pc, #280]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800461e:	d101      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004620:	2301      	movs	r3, #1
 8004622:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800462c:	2301      	movs	r3, #1
 800462e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0320 	and.w	r3, r3, #32
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 808a 	beq.w	8004752 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800463e:	2300      	movs	r3, #0
 8004640:	60bb      	str	r3, [r7, #8]
 8004642:	4b39      	ldr	r3, [pc, #228]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	4a38      	ldr	r2, [pc, #224]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800464c:	6413      	str	r3, [r2, #64]	; 0x40
 800464e:	4b36      	ldr	r3, [pc, #216]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004656:	60bb      	str	r3, [r7, #8]
 8004658:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800465a:	4b34      	ldr	r3, [pc, #208]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a33      	ldr	r2, [pc, #204]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004664:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004666:	f7fe f839 	bl	80026dc <HAL_GetTick>
 800466a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800466c:	e008      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800466e:	f7fe f835 	bl	80026dc <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e278      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004680:	4b2a      	ldr	r3, [pc, #168]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0f0      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800468c:	4b26      	ldr	r3, [pc, #152]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800468e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004690:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004694:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d02f      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a4:	6a3a      	ldr	r2, [r7, #32]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d028      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046aa:	4b1f      	ldr	r3, [pc, #124]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046b4:	4b1e      	ldr	r3, [pc, #120]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80046b6:	2201      	movs	r2, #1
 80046b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046ba:	4b1d      	ldr	r3, [pc, #116]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046c0:	4a19      	ldr	r2, [pc, #100]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046c6:	4b18      	ldr	r3, [pc, #96]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d114      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80046d2:	f7fe f803 	bl	80026dc <HAL_GetTick>
 80046d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d8:	e00a      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046da:	f7fd ffff 	bl	80026dc <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e240      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f0:	4b0d      	ldr	r3, [pc, #52]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0ee      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004704:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004708:	d114      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800470a:	4b07      	ldr	r3, [pc, #28]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800471a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800471e:	4902      	ldr	r1, [pc, #8]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004720:	4313      	orrs	r3, r2
 8004722:	608b      	str	r3, [r1, #8]
 8004724:	e00c      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004726:	bf00      	nop
 8004728:	40023800 	.word	0x40023800
 800472c:	40007000 	.word	0x40007000
 8004730:	42470e40 	.word	0x42470e40
 8004734:	4b4a      	ldr	r3, [pc, #296]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	4a49      	ldr	r2, [pc, #292]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800473a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800473e:	6093      	str	r3, [r2, #8]
 8004740:	4b47      	ldr	r3, [pc, #284]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004742:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800474c:	4944      	ldr	r1, [pc, #272]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800474e:	4313      	orrs	r3, r2
 8004750:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0310 	and.w	r3, r3, #16
 800475a:	2b00      	cmp	r3, #0
 800475c:	d004      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004764:	4b3f      	ldr	r3, [pc, #252]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004766:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004774:	4b3a      	ldr	r3, [pc, #232]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800477a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004782:	4937      	ldr	r1, [pc, #220]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004796:	4b32      	ldr	r3, [pc, #200]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004798:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800479c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a4:	492e      	ldr	r1, [pc, #184]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d011      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80047b8:	4b29      	ldr	r3, [pc, #164]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047be:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c6:	4926      	ldr	r1, [pc, #152]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047d6:	d101      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80047d8:	2301      	movs	r3, #1
 80047da:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00a      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80047e8:	4b1d      	ldr	r3, [pc, #116]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f6:	491a      	ldr	r1, [pc, #104]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004806:	2b00      	cmp	r3, #0
 8004808:	d011      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800480a:	4b15      	ldr	r3, [pc, #84]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800480c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004810:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004818:	4911      	ldr	r1, [pc, #68]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004828:	d101      	bne.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800482a:	2301      	movs	r3, #1
 800482c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800482e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004830:	2b01      	cmp	r3, #1
 8004832:	d005      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800483c:	f040 80ff 	bne.w	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004840:	4b09      	ldr	r3, [pc, #36]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004846:	f7fd ff49 	bl	80026dc <HAL_GetTick>
 800484a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800484c:	e00e      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800484e:	f7fd ff45 	bl	80026dc <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d907      	bls.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e188      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004860:	40023800 	.word	0x40023800
 8004864:	424711e0 	.word	0x424711e0
 8004868:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800486c:	4b7e      	ldr	r3, [pc, #504]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1ea      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004888:	2b00      	cmp	r3, #0
 800488a:	d009      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004894:	2b00      	cmp	r3, #0
 8004896:	d028      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489c:	2b00      	cmp	r3, #0
 800489e:	d124      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80048a0:	4b71      	ldr	r3, [pc, #452]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a6:	0c1b      	lsrs	r3, r3, #16
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	3301      	adds	r3, #1
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048b2:	4b6d      	ldr	r3, [pc, #436]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b8:	0e1b      	lsrs	r3, r3, #24
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	019b      	lsls	r3, r3, #6
 80048ca:	431a      	orrs	r2, r3
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	085b      	lsrs	r3, r3, #1
 80048d0:	3b01      	subs	r3, #1
 80048d2:	041b      	lsls	r3, r3, #16
 80048d4:	431a      	orrs	r2, r3
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	061b      	lsls	r3, r3, #24
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	071b      	lsls	r3, r3, #28
 80048e2:	4961      	ldr	r1, [pc, #388]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0304 	and.w	r3, r3, #4
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d004      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048fe:	d00a      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004908:	2b00      	cmp	r3, #0
 800490a:	d035      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004910:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004914:	d130      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004916:	4b54      	ldr	r3, [pc, #336]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800491c:	0c1b      	lsrs	r3, r3, #16
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	3301      	adds	r3, #1
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004928:	4b4f      	ldr	r3, [pc, #316]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800492a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800492e:	0f1b      	lsrs	r3, r3, #28
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	019b      	lsls	r3, r3, #6
 8004940:	431a      	orrs	r2, r3
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	085b      	lsrs	r3, r3, #1
 8004946:	3b01      	subs	r3, #1
 8004948:	041b      	lsls	r3, r3, #16
 800494a:	431a      	orrs	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	061b      	lsls	r3, r3, #24
 8004952:	431a      	orrs	r2, r3
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	071b      	lsls	r3, r3, #28
 8004958:	4943      	ldr	r1, [pc, #268]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800495a:	4313      	orrs	r3, r2
 800495c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004960:	4b41      	ldr	r3, [pc, #260]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004966:	f023 021f 	bic.w	r2, r3, #31
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496e:	3b01      	subs	r3, #1
 8004970:	493d      	ldr	r1, [pc, #244]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004972:	4313      	orrs	r3, r2
 8004974:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004980:	2b00      	cmp	r3, #0
 8004982:	d029      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800498c:	d124      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800498e:	4b36      	ldr	r3, [pc, #216]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004994:	0c1b      	lsrs	r3, r3, #16
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	3301      	adds	r3, #1
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049a0:	4b31      	ldr	r3, [pc, #196]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80049a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a6:	0f1b      	lsrs	r3, r3, #28
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	019b      	lsls	r3, r3, #6
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	085b      	lsrs	r3, r3, #1
 80049c0:	3b01      	subs	r3, #1
 80049c2:	041b      	lsls	r3, r3, #16
 80049c4:	431a      	orrs	r2, r3
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	061b      	lsls	r3, r3, #24
 80049ca:	431a      	orrs	r2, r3
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	071b      	lsls	r3, r3, #28
 80049d0:	4925      	ldr	r1, [pc, #148]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d016      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	019b      	lsls	r3, r3, #6
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	085b      	lsrs	r3, r3, #1
 80049f6:	3b01      	subs	r3, #1
 80049f8:	041b      	lsls	r3, r3, #16
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	061b      	lsls	r3, r3, #24
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	071b      	lsls	r3, r3, #28
 8004a0a:	4917      	ldr	r1, [pc, #92]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a12:	4b16      	ldr	r3, [pc, #88]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004a14:	2201      	movs	r2, #1
 8004a16:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a18:	f7fd fe60 	bl	80026dc <HAL_GetTick>
 8004a1c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a20:	f7fd fe5c 	bl	80026dc <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e09f      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a32:	4b0d      	ldr	r3, [pc, #52]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0f0      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	f040 8095 	bne.w	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a46:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a4c:	f7fd fe46 	bl	80026dc <HAL_GetTick>
 8004a50:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a52:	e00f      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004a54:	f7fd fe42 	bl	80026dc <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d908      	bls.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e085      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004a66:	bf00      	nop
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	42470068 	.word	0x42470068
 8004a70:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a74:	4b41      	ldr	r3, [pc, #260]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a80:	d0e8      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0304 	and.w	r3, r3, #4
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d009      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d02b      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d127      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004aaa:	4b34      	ldr	r3, [pc, #208]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab0:	0c1b      	lsrs	r3, r3, #16
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	699a      	ldr	r2, [r3, #24]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	019b      	lsls	r3, r3, #6
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	085b      	lsrs	r3, r3, #1
 8004acc:	3b01      	subs	r3, #1
 8004ace:	041b      	lsls	r3, r3, #16
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	061b      	lsls	r3, r3, #24
 8004ad8:	4928      	ldr	r1, [pc, #160]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ae0:	4b26      	ldr	r3, [pc, #152]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ae6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aee:	3b01      	subs	r3, #1
 8004af0:	021b      	lsls	r3, r3, #8
 8004af2:	4922      	ldr	r1, [pc, #136]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d01d      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b0e:	d118      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b10:	4b1a      	ldr	r3, [pc, #104]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b16:	0e1b      	lsrs	r3, r3, #24
 8004b18:	f003 030f 	and.w	r3, r3, #15
 8004b1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	019b      	lsls	r3, r3, #6
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	3b01      	subs	r3, #1
 8004b32:	041b      	lsls	r3, r3, #16
 8004b34:	431a      	orrs	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	061b      	lsls	r3, r3, #24
 8004b3a:	4910      	ldr	r1, [pc, #64]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b42:	4b0f      	ldr	r3, [pc, #60]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b48:	f7fd fdc8 	bl	80026dc <HAL_GetTick>
 8004b4c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004b50:	f7fd fdc4 	bl	80026dc <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e007      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b62:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b6e:	d1ef      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3730      	adds	r7, #48	; 0x30
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	42470070 	.word	0x42470070

08004b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b88:	b0a6      	sub	sp, #152	; 0x98
 8004b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004baa:	4bc8      	ldr	r3, [pc, #800]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x348>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 030c 	and.w	r3, r3, #12
 8004bb2:	2b0c      	cmp	r3, #12
 8004bb4:	f200 817e 	bhi.w	8004eb4 <HAL_RCC_GetSysClockFreq+0x330>
 8004bb8:	a201      	add	r2, pc, #4	; (adr r2, 8004bc0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbe:	bf00      	nop
 8004bc0:	08004bf5 	.word	0x08004bf5
 8004bc4:	08004eb5 	.word	0x08004eb5
 8004bc8:	08004eb5 	.word	0x08004eb5
 8004bcc:	08004eb5 	.word	0x08004eb5
 8004bd0:	08004bfd 	.word	0x08004bfd
 8004bd4:	08004eb5 	.word	0x08004eb5
 8004bd8:	08004eb5 	.word	0x08004eb5
 8004bdc:	08004eb5 	.word	0x08004eb5
 8004be0:	08004c05 	.word	0x08004c05
 8004be4:	08004eb5 	.word	0x08004eb5
 8004be8:	08004eb5 	.word	0x08004eb5
 8004bec:	08004eb5 	.word	0x08004eb5
 8004bf0:	08004d6f 	.word	0x08004d6f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bf4:	4bb6      	ldr	r3, [pc, #728]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004bf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8004bfa:	e15f      	b.n	8004ebc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bfc:	4bb5      	ldr	r3, [pc, #724]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x350>)
 8004bfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004c02:	e15b      	b.n	8004ebc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c04:	4bb1      	ldr	r3, [pc, #708]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x348>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c10:	4bae      	ldr	r3, [pc, #696]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x348>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d031      	beq.n	8004c80 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c1c:	4bab      	ldr	r3, [pc, #684]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x348>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	099b      	lsrs	r3, r3, #6
 8004c22:	2200      	movs	r2, #0
 8004c24:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c2e:	663b      	str	r3, [r7, #96]	; 0x60
 8004c30:	2300      	movs	r3, #0
 8004c32:	667b      	str	r3, [r7, #100]	; 0x64
 8004c34:	4ba7      	ldr	r3, [pc, #668]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x350>)
 8004c36:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004c3a:	462a      	mov	r2, r5
 8004c3c:	fb03 f202 	mul.w	r2, r3, r2
 8004c40:	2300      	movs	r3, #0
 8004c42:	4621      	mov	r1, r4
 8004c44:	fb01 f303 	mul.w	r3, r1, r3
 8004c48:	4413      	add	r3, r2
 8004c4a:	4aa2      	ldr	r2, [pc, #648]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x350>)
 8004c4c:	4621      	mov	r1, r4
 8004c4e:	fba1 1202 	umull	r1, r2, r1, r2
 8004c52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c54:	460a      	mov	r2, r1
 8004c56:	67ba      	str	r2, [r7, #120]	; 0x78
 8004c58:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004c5a:	4413      	add	r3, r2
 8004c5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c62:	2200      	movs	r2, #0
 8004c64:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c66:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004c68:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c6c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004c70:	f7fb fb1e 	bl	80002b0 <__aeabi_uldivmod>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4613      	mov	r3, r2
 8004c7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c7e:	e064      	b.n	8004d4a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c80:	4b92      	ldr	r3, [pc, #584]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x348>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	099b      	lsrs	r3, r3, #6
 8004c86:	2200      	movs	r2, #0
 8004c88:	653b      	str	r3, [r7, #80]	; 0x50
 8004c8a:	657a      	str	r2, [r7, #84]	; 0x54
 8004c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c92:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c94:	2300      	movs	r3, #0
 8004c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c98:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004c9c:	4622      	mov	r2, r4
 8004c9e:	462b      	mov	r3, r5
 8004ca0:	f04f 0000 	mov.w	r0, #0
 8004ca4:	f04f 0100 	mov.w	r1, #0
 8004ca8:	0159      	lsls	r1, r3, #5
 8004caa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cae:	0150      	lsls	r0, r2, #5
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4621      	mov	r1, r4
 8004cb6:	1a51      	subs	r1, r2, r1
 8004cb8:	6139      	str	r1, [r7, #16]
 8004cba:	4629      	mov	r1, r5
 8004cbc:	eb63 0301 	sbc.w	r3, r3, r1
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cce:	4659      	mov	r1, fp
 8004cd0:	018b      	lsls	r3, r1, #6
 8004cd2:	4651      	mov	r1, sl
 8004cd4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cd8:	4651      	mov	r1, sl
 8004cda:	018a      	lsls	r2, r1, #6
 8004cdc:	4651      	mov	r1, sl
 8004cde:	ebb2 0801 	subs.w	r8, r2, r1
 8004ce2:	4659      	mov	r1, fp
 8004ce4:	eb63 0901 	sbc.w	r9, r3, r1
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cf4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cf8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cfc:	4690      	mov	r8, r2
 8004cfe:	4699      	mov	r9, r3
 8004d00:	4623      	mov	r3, r4
 8004d02:	eb18 0303 	adds.w	r3, r8, r3
 8004d06:	60bb      	str	r3, [r7, #8]
 8004d08:	462b      	mov	r3, r5
 8004d0a:	eb49 0303 	adc.w	r3, r9, r3
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d1c:	4629      	mov	r1, r5
 8004d1e:	028b      	lsls	r3, r1, #10
 8004d20:	4621      	mov	r1, r4
 8004d22:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d26:	4621      	mov	r1, r4
 8004d28:	028a      	lsls	r2, r1, #10
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d32:	2200      	movs	r2, #0
 8004d34:	643b      	str	r3, [r7, #64]	; 0x40
 8004d36:	647a      	str	r2, [r7, #68]	; 0x44
 8004d38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d3c:	f7fb fab8 	bl	80002b0 <__aeabi_uldivmod>
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4613      	mov	r3, r2
 8004d46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d4a:	4b60      	ldr	r3, [pc, #384]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x348>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	0c1b      	lsrs	r3, r3, #16
 8004d50:	f003 0303 	and.w	r3, r3, #3
 8004d54:	3301      	adds	r3, #1
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8004d5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004d6c:	e0a6      	b.n	8004ebc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d6e:	4b57      	ldr	r3, [pc, #348]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x348>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d7a:	4b54      	ldr	r3, [pc, #336]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x348>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d02a      	beq.n	8004ddc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d86:	4b51      	ldr	r3, [pc, #324]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x348>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	099b      	lsrs	r3, r3, #6
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d98:	2100      	movs	r1, #0
 8004d9a:	4b4e      	ldr	r3, [pc, #312]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x350>)
 8004d9c:	fb03 f201 	mul.w	r2, r3, r1
 8004da0:	2300      	movs	r3, #0
 8004da2:	fb00 f303 	mul.w	r3, r0, r3
 8004da6:	4413      	add	r3, r2
 8004da8:	4a4a      	ldr	r2, [pc, #296]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x350>)
 8004daa:	fba0 1202 	umull	r1, r2, r0, r2
 8004dae:	677a      	str	r2, [r7, #116]	; 0x74
 8004db0:	460a      	mov	r2, r1
 8004db2:	673a      	str	r2, [r7, #112]	; 0x70
 8004db4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004db6:	4413      	add	r3, r2
 8004db8:	677b      	str	r3, [r7, #116]	; 0x74
 8004dba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	633b      	str	r3, [r7, #48]	; 0x30
 8004dc2:	637a      	str	r2, [r7, #52]	; 0x34
 8004dc4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004dc8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004dcc:	f7fb fa70 	bl	80002b0 <__aeabi_uldivmod>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004dda:	e05b      	b.n	8004e94 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ddc:	4b3b      	ldr	r3, [pc, #236]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x348>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	099b      	lsrs	r3, r3, #6
 8004de2:	2200      	movs	r2, #0
 8004de4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004de6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dee:	623b      	str	r3, [r7, #32]
 8004df0:	2300      	movs	r3, #0
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
 8004df4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004df8:	4642      	mov	r2, r8
 8004dfa:	464b      	mov	r3, r9
 8004dfc:	f04f 0000 	mov.w	r0, #0
 8004e00:	f04f 0100 	mov.w	r1, #0
 8004e04:	0159      	lsls	r1, r3, #5
 8004e06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e0a:	0150      	lsls	r0, r2, #5
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4641      	mov	r1, r8
 8004e12:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e16:	4649      	mov	r1, r9
 8004e18:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e1c:	f04f 0200 	mov.w	r2, #0
 8004e20:	f04f 0300 	mov.w	r3, #0
 8004e24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e30:	ebb2 040a 	subs.w	r4, r2, sl
 8004e34:	eb63 050b 	sbc.w	r5, r3, fp
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	00eb      	lsls	r3, r5, #3
 8004e42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e46:	00e2      	lsls	r2, r4, #3
 8004e48:	4614      	mov	r4, r2
 8004e4a:	461d      	mov	r5, r3
 8004e4c:	4643      	mov	r3, r8
 8004e4e:	18e3      	adds	r3, r4, r3
 8004e50:	603b      	str	r3, [r7, #0]
 8004e52:	464b      	mov	r3, r9
 8004e54:	eb45 0303 	adc.w	r3, r5, r3
 8004e58:	607b      	str	r3, [r7, #4]
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e66:	4629      	mov	r1, r5
 8004e68:	028b      	lsls	r3, r1, #10
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e70:	4621      	mov	r1, r4
 8004e72:	028a      	lsls	r2, r1, #10
 8004e74:	4610      	mov	r0, r2
 8004e76:	4619      	mov	r1, r3
 8004e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	61bb      	str	r3, [r7, #24]
 8004e80:	61fa      	str	r2, [r7, #28]
 8004e82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e86:	f7fb fa13 	bl	80002b0 <__aeabi_uldivmod>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4613      	mov	r3, r2
 8004e90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e94:	4b0d      	ldr	r3, [pc, #52]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x348>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	0f1b      	lsrs	r3, r3, #28
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8004ea2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ea6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004eb2:	e003      	b.n	8004ebc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004eb4:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004eb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004eba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ebc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3798      	adds	r7, #152	; 0x98
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eca:	bf00      	nop
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	00f42400 	.word	0x00f42400
 8004ed4:	017d7840 	.word	0x017d7840

08004ed8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e28d      	b.n	8005406 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 8083 	beq.w	8004ffe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ef8:	4b94      	ldr	r3, [pc, #592]	; (800514c <HAL_RCC_OscConfig+0x274>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f003 030c 	and.w	r3, r3, #12
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d019      	beq.n	8004f38 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f04:	4b91      	ldr	r3, [pc, #580]	; (800514c <HAL_RCC_OscConfig+0x274>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d106      	bne.n	8004f1e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f10:	4b8e      	ldr	r3, [pc, #568]	; (800514c <HAL_RCC_OscConfig+0x274>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f1c:	d00c      	beq.n	8004f38 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f1e:	4b8b      	ldr	r3, [pc, #556]	; (800514c <HAL_RCC_OscConfig+0x274>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f26:	2b0c      	cmp	r3, #12
 8004f28:	d112      	bne.n	8004f50 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f2a:	4b88      	ldr	r3, [pc, #544]	; (800514c <HAL_RCC_OscConfig+0x274>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f36:	d10b      	bne.n	8004f50 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f38:	4b84      	ldr	r3, [pc, #528]	; (800514c <HAL_RCC_OscConfig+0x274>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d05b      	beq.n	8004ffc <HAL_RCC_OscConfig+0x124>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d157      	bne.n	8004ffc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e25a      	b.n	8005406 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f58:	d106      	bne.n	8004f68 <HAL_RCC_OscConfig+0x90>
 8004f5a:	4b7c      	ldr	r3, [pc, #496]	; (800514c <HAL_RCC_OscConfig+0x274>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a7b      	ldr	r2, [pc, #492]	; (800514c <HAL_RCC_OscConfig+0x274>)
 8004f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	e01d      	b.n	8004fa4 <HAL_RCC_OscConfig+0xcc>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f70:	d10c      	bne.n	8004f8c <HAL_RCC_OscConfig+0xb4>
 8004f72:	4b76      	ldr	r3, [pc, #472]	; (800514c <HAL_RCC_OscConfig+0x274>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a75      	ldr	r2, [pc, #468]	; (800514c <HAL_RCC_OscConfig+0x274>)
 8004f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f7c:	6013      	str	r3, [r2, #0]
 8004f7e:	4b73      	ldr	r3, [pc, #460]	; (800514c <HAL_RCC_OscConfig+0x274>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a72      	ldr	r2, [pc, #456]	; (800514c <HAL_RCC_OscConfig+0x274>)
 8004f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f88:	6013      	str	r3, [r2, #0]
 8004f8a:	e00b      	b.n	8004fa4 <HAL_RCC_OscConfig+0xcc>
 8004f8c:	4b6f      	ldr	r3, [pc, #444]	; (800514c <HAL_RCC_OscConfig+0x274>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a6e      	ldr	r2, [pc, #440]	; (800514c <HAL_RCC_OscConfig+0x274>)
 8004f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f96:	6013      	str	r3, [r2, #0]
 8004f98:	4b6c      	ldr	r3, [pc, #432]	; (800514c <HAL_RCC_OscConfig+0x274>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a6b      	ldr	r2, [pc, #428]	; (800514c <HAL_RCC_OscConfig+0x274>)
 8004f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d013      	beq.n	8004fd4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fac:	f7fd fb96 	bl	80026dc <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fb4:	f7fd fb92 	bl	80026dc <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b64      	cmp	r3, #100	; 0x64
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e21f      	b.n	8005406 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fc6:	4b61      	ldr	r3, [pc, #388]	; (800514c <HAL_RCC_OscConfig+0x274>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0f0      	beq.n	8004fb4 <HAL_RCC_OscConfig+0xdc>
 8004fd2:	e014      	b.n	8004ffe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd4:	f7fd fb82 	bl	80026dc <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fdc:	f7fd fb7e 	bl	80026dc <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b64      	cmp	r3, #100	; 0x64
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e20b      	b.n	8005406 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fee:	4b57      	ldr	r3, [pc, #348]	; (800514c <HAL_RCC_OscConfig+0x274>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1f0      	bne.n	8004fdc <HAL_RCC_OscConfig+0x104>
 8004ffa:	e000      	b.n	8004ffe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d06f      	beq.n	80050ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800500a:	4b50      	ldr	r3, [pc, #320]	; (800514c <HAL_RCC_OscConfig+0x274>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 030c 	and.w	r3, r3, #12
 8005012:	2b00      	cmp	r3, #0
 8005014:	d017      	beq.n	8005046 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005016:	4b4d      	ldr	r3, [pc, #308]	; (800514c <HAL_RCC_OscConfig+0x274>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800501e:	2b08      	cmp	r3, #8
 8005020:	d105      	bne.n	800502e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005022:	4b4a      	ldr	r3, [pc, #296]	; (800514c <HAL_RCC_OscConfig+0x274>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00b      	beq.n	8005046 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800502e:	4b47      	ldr	r3, [pc, #284]	; (800514c <HAL_RCC_OscConfig+0x274>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005036:	2b0c      	cmp	r3, #12
 8005038:	d11c      	bne.n	8005074 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800503a:	4b44      	ldr	r3, [pc, #272]	; (800514c <HAL_RCC_OscConfig+0x274>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d116      	bne.n	8005074 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005046:	4b41      	ldr	r3, [pc, #260]	; (800514c <HAL_RCC_OscConfig+0x274>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d005      	beq.n	800505e <HAL_RCC_OscConfig+0x186>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d001      	beq.n	800505e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e1d3      	b.n	8005406 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800505e:	4b3b      	ldr	r3, [pc, #236]	; (800514c <HAL_RCC_OscConfig+0x274>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	4937      	ldr	r1, [pc, #220]	; (800514c <HAL_RCC_OscConfig+0x274>)
 800506e:	4313      	orrs	r3, r2
 8005070:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005072:	e03a      	b.n	80050ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d020      	beq.n	80050be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800507c:	4b34      	ldr	r3, [pc, #208]	; (8005150 <HAL_RCC_OscConfig+0x278>)
 800507e:	2201      	movs	r2, #1
 8005080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005082:	f7fd fb2b 	bl	80026dc <HAL_GetTick>
 8005086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005088:	e008      	b.n	800509c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800508a:	f7fd fb27 	bl	80026dc <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e1b4      	b.n	8005406 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800509c:	4b2b      	ldr	r3, [pc, #172]	; (800514c <HAL_RCC_OscConfig+0x274>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0f0      	beq.n	800508a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a8:	4b28      	ldr	r3, [pc, #160]	; (800514c <HAL_RCC_OscConfig+0x274>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	4925      	ldr	r1, [pc, #148]	; (800514c <HAL_RCC_OscConfig+0x274>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	600b      	str	r3, [r1, #0]
 80050bc:	e015      	b.n	80050ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050be:	4b24      	ldr	r3, [pc, #144]	; (8005150 <HAL_RCC_OscConfig+0x278>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c4:	f7fd fb0a 	bl	80026dc <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050cc:	f7fd fb06 	bl	80026dc <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e193      	b.n	8005406 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050de:	4b1b      	ldr	r3, [pc, #108]	; (800514c <HAL_RCC_OscConfig+0x274>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1f0      	bne.n	80050cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0308 	and.w	r3, r3, #8
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d036      	beq.n	8005164 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d016      	beq.n	800512c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050fe:	4b15      	ldr	r3, [pc, #84]	; (8005154 <HAL_RCC_OscConfig+0x27c>)
 8005100:	2201      	movs	r2, #1
 8005102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005104:	f7fd faea 	bl	80026dc <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800510c:	f7fd fae6 	bl	80026dc <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e173      	b.n	8005406 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800511e:	4b0b      	ldr	r3, [pc, #44]	; (800514c <HAL_RCC_OscConfig+0x274>)
 8005120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0f0      	beq.n	800510c <HAL_RCC_OscConfig+0x234>
 800512a:	e01b      	b.n	8005164 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800512c:	4b09      	ldr	r3, [pc, #36]	; (8005154 <HAL_RCC_OscConfig+0x27c>)
 800512e:	2200      	movs	r2, #0
 8005130:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005132:	f7fd fad3 	bl	80026dc <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005138:	e00e      	b.n	8005158 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800513a:	f7fd facf 	bl	80026dc <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d907      	bls.n	8005158 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e15c      	b.n	8005406 <HAL_RCC_OscConfig+0x52e>
 800514c:	40023800 	.word	0x40023800
 8005150:	42470000 	.word	0x42470000
 8005154:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005158:	4b8a      	ldr	r3, [pc, #552]	; (8005384 <HAL_RCC_OscConfig+0x4ac>)
 800515a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1ea      	bne.n	800513a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 8097 	beq.w	80052a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005172:	2300      	movs	r3, #0
 8005174:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005176:	4b83      	ldr	r3, [pc, #524]	; (8005384 <HAL_RCC_OscConfig+0x4ac>)
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10f      	bne.n	80051a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005182:	2300      	movs	r3, #0
 8005184:	60bb      	str	r3, [r7, #8]
 8005186:	4b7f      	ldr	r3, [pc, #508]	; (8005384 <HAL_RCC_OscConfig+0x4ac>)
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	4a7e      	ldr	r2, [pc, #504]	; (8005384 <HAL_RCC_OscConfig+0x4ac>)
 800518c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005190:	6413      	str	r3, [r2, #64]	; 0x40
 8005192:	4b7c      	ldr	r3, [pc, #496]	; (8005384 <HAL_RCC_OscConfig+0x4ac>)
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519a:	60bb      	str	r3, [r7, #8]
 800519c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800519e:	2301      	movs	r3, #1
 80051a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a2:	4b79      	ldr	r3, [pc, #484]	; (8005388 <HAL_RCC_OscConfig+0x4b0>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d118      	bne.n	80051e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ae:	4b76      	ldr	r3, [pc, #472]	; (8005388 <HAL_RCC_OscConfig+0x4b0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a75      	ldr	r2, [pc, #468]	; (8005388 <HAL_RCC_OscConfig+0x4b0>)
 80051b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ba:	f7fd fa8f 	bl	80026dc <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c0:	e008      	b.n	80051d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051c2:	f7fd fa8b 	bl	80026dc <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e118      	b.n	8005406 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d4:	4b6c      	ldr	r3, [pc, #432]	; (8005388 <HAL_RCC_OscConfig+0x4b0>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0f0      	beq.n	80051c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d106      	bne.n	80051f6 <HAL_RCC_OscConfig+0x31e>
 80051e8:	4b66      	ldr	r3, [pc, #408]	; (8005384 <HAL_RCC_OscConfig+0x4ac>)
 80051ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ec:	4a65      	ldr	r2, [pc, #404]	; (8005384 <HAL_RCC_OscConfig+0x4ac>)
 80051ee:	f043 0301 	orr.w	r3, r3, #1
 80051f2:	6713      	str	r3, [r2, #112]	; 0x70
 80051f4:	e01c      	b.n	8005230 <HAL_RCC_OscConfig+0x358>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	2b05      	cmp	r3, #5
 80051fc:	d10c      	bne.n	8005218 <HAL_RCC_OscConfig+0x340>
 80051fe:	4b61      	ldr	r3, [pc, #388]	; (8005384 <HAL_RCC_OscConfig+0x4ac>)
 8005200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005202:	4a60      	ldr	r2, [pc, #384]	; (8005384 <HAL_RCC_OscConfig+0x4ac>)
 8005204:	f043 0304 	orr.w	r3, r3, #4
 8005208:	6713      	str	r3, [r2, #112]	; 0x70
 800520a:	4b5e      	ldr	r3, [pc, #376]	; (8005384 <HAL_RCC_OscConfig+0x4ac>)
 800520c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520e:	4a5d      	ldr	r2, [pc, #372]	; (8005384 <HAL_RCC_OscConfig+0x4ac>)
 8005210:	f043 0301 	orr.w	r3, r3, #1
 8005214:	6713      	str	r3, [r2, #112]	; 0x70
 8005216:	e00b      	b.n	8005230 <HAL_RCC_OscConfig+0x358>
 8005218:	4b5a      	ldr	r3, [pc, #360]	; (8005384 <HAL_RCC_OscConfig+0x4ac>)
 800521a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521c:	4a59      	ldr	r2, [pc, #356]	; (8005384 <HAL_RCC_OscConfig+0x4ac>)
 800521e:	f023 0301 	bic.w	r3, r3, #1
 8005222:	6713      	str	r3, [r2, #112]	; 0x70
 8005224:	4b57      	ldr	r3, [pc, #348]	; (8005384 <HAL_RCC_OscConfig+0x4ac>)
 8005226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005228:	4a56      	ldr	r2, [pc, #344]	; (8005384 <HAL_RCC_OscConfig+0x4ac>)
 800522a:	f023 0304 	bic.w	r3, r3, #4
 800522e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d015      	beq.n	8005264 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005238:	f7fd fa50 	bl	80026dc <HAL_GetTick>
 800523c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800523e:	e00a      	b.n	8005256 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005240:	f7fd fa4c 	bl	80026dc <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	f241 3288 	movw	r2, #5000	; 0x1388
 800524e:	4293      	cmp	r3, r2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e0d7      	b.n	8005406 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005256:	4b4b      	ldr	r3, [pc, #300]	; (8005384 <HAL_RCC_OscConfig+0x4ac>)
 8005258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0ee      	beq.n	8005240 <HAL_RCC_OscConfig+0x368>
 8005262:	e014      	b.n	800528e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005264:	f7fd fa3a 	bl	80026dc <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800526a:	e00a      	b.n	8005282 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800526c:	f7fd fa36 	bl	80026dc <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	f241 3288 	movw	r2, #5000	; 0x1388
 800527a:	4293      	cmp	r3, r2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e0c1      	b.n	8005406 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005282:	4b40      	ldr	r3, [pc, #256]	; (8005384 <HAL_RCC_OscConfig+0x4ac>)
 8005284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1ee      	bne.n	800526c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800528e:	7dfb      	ldrb	r3, [r7, #23]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d105      	bne.n	80052a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005294:	4b3b      	ldr	r3, [pc, #236]	; (8005384 <HAL_RCC_OscConfig+0x4ac>)
 8005296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005298:	4a3a      	ldr	r2, [pc, #232]	; (8005384 <HAL_RCC_OscConfig+0x4ac>)
 800529a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800529e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 80ad 	beq.w	8005404 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052aa:	4b36      	ldr	r3, [pc, #216]	; (8005384 <HAL_RCC_OscConfig+0x4ac>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 030c 	and.w	r3, r3, #12
 80052b2:	2b08      	cmp	r3, #8
 80052b4:	d060      	beq.n	8005378 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d145      	bne.n	800534a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052be:	4b33      	ldr	r3, [pc, #204]	; (800538c <HAL_RCC_OscConfig+0x4b4>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c4:	f7fd fa0a 	bl	80026dc <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052cc:	f7fd fa06 	bl	80026dc <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e093      	b.n	8005406 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052de:	4b29      	ldr	r3, [pc, #164]	; (8005384 <HAL_RCC_OscConfig+0x4ac>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1f0      	bne.n	80052cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69da      	ldr	r2, [r3, #28]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	019b      	lsls	r3, r3, #6
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005300:	085b      	lsrs	r3, r3, #1
 8005302:	3b01      	subs	r3, #1
 8005304:	041b      	lsls	r3, r3, #16
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	061b      	lsls	r3, r3, #24
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005314:	071b      	lsls	r3, r3, #28
 8005316:	491b      	ldr	r1, [pc, #108]	; (8005384 <HAL_RCC_OscConfig+0x4ac>)
 8005318:	4313      	orrs	r3, r2
 800531a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800531c:	4b1b      	ldr	r3, [pc, #108]	; (800538c <HAL_RCC_OscConfig+0x4b4>)
 800531e:	2201      	movs	r2, #1
 8005320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005322:	f7fd f9db 	bl	80026dc <HAL_GetTick>
 8005326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800532a:	f7fd f9d7 	bl	80026dc <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e064      	b.n	8005406 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800533c:	4b11      	ldr	r3, [pc, #68]	; (8005384 <HAL_RCC_OscConfig+0x4ac>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0f0      	beq.n	800532a <HAL_RCC_OscConfig+0x452>
 8005348:	e05c      	b.n	8005404 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800534a:	4b10      	ldr	r3, [pc, #64]	; (800538c <HAL_RCC_OscConfig+0x4b4>)
 800534c:	2200      	movs	r2, #0
 800534e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005350:	f7fd f9c4 	bl	80026dc <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005358:	f7fd f9c0 	bl	80026dc <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e04d      	b.n	8005406 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800536a:	4b06      	ldr	r3, [pc, #24]	; (8005384 <HAL_RCC_OscConfig+0x4ac>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1f0      	bne.n	8005358 <HAL_RCC_OscConfig+0x480>
 8005376:	e045      	b.n	8005404 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d107      	bne.n	8005390 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e040      	b.n	8005406 <HAL_RCC_OscConfig+0x52e>
 8005384:	40023800 	.word	0x40023800
 8005388:	40007000 	.word	0x40007000
 800538c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005390:	4b1f      	ldr	r3, [pc, #124]	; (8005410 <HAL_RCC_OscConfig+0x538>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d030      	beq.n	8005400 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d129      	bne.n	8005400 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d122      	bne.n	8005400 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053c0:	4013      	ands	r3, r2
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d119      	bne.n	8005400 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d6:	085b      	lsrs	r3, r3, #1
 80053d8:	3b01      	subs	r3, #1
 80053da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053dc:	429a      	cmp	r2, r3
 80053de:	d10f      	bne.n	8005400 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d107      	bne.n	8005400 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d001      	beq.n	8005404 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e000      	b.n	8005406 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	40023800 	.word	0x40023800

08005414 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e066      	b.n	80054f8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	7f5b      	ldrb	r3, [r3, #29]
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	d105      	bne.n	8005440 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7fc f90a 	bl	8001654 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	22ca      	movs	r2, #202	; 0xca
 800544c:	625a      	str	r2, [r3, #36]	; 0x24
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2253      	movs	r2, #83	; 0x53
 8005454:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f87a 	bl	8005550 <RTC_EnterInitMode>
 800545c:	4603      	mov	r3, r0
 800545e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005460:	7bfb      	ldrb	r3, [r7, #15]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d12c      	bne.n	80054c0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	6812      	ldr	r2, [r2, #0]
 8005470:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005478:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6899      	ldr	r1, [r3, #8]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	430a      	orrs	r2, r1
 8005496:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	68d2      	ldr	r2, [r2, #12]
 80054a0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6919      	ldr	r1, [r3, #16]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	041a      	lsls	r2, r3, #16
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f881 	bl	80055be <RTC_ExitInitMode>
 80054bc:	4603      	mov	r3, r0
 80054be:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d113      	bne.n	80054ee <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054d4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699a      	ldr	r2, [r3, #24]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	22ff      	movs	r2, #255	; 0xff
 80054f4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800551a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800551c:	f7fd f8de 	bl	80026dc <HAL_GetTick>
 8005520:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005522:	e009      	b.n	8005538 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005524:	f7fd f8da 	bl	80026dc <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005532:	d901      	bls.n	8005538 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e007      	b.n	8005548 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0ee      	beq.n	8005524 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800555c:	2300      	movs	r3, #0
 800555e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556a:	2b00      	cmp	r3, #0
 800556c:	d122      	bne.n	80055b4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800557c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800557e:	f7fd f8ad 	bl	80026dc <HAL_GetTick>
 8005582:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005584:	e00c      	b.n	80055a0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005586:	f7fd f8a9 	bl	80026dc <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005594:	d904      	bls.n	80055a0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2204      	movs	r2, #4
 800559a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d102      	bne.n	80055b4 <RTC_EnterInitMode+0x64>
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d1e8      	bne.n	8005586 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68da      	ldr	r2, [r3, #12]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055d8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f003 0320 	and.w	r3, r3, #32
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10a      	bne.n	80055fe <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7ff ff89 	bl	8005500 <HAL_RTC_WaitForSynchro>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d004      	beq.n	80055fe <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2204      	movs	r2, #4
 80055f8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80055fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e07b      	b.n	8005712 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	2b00      	cmp	r3, #0
 8005620:	d108      	bne.n	8005634 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800562a:	d009      	beq.n	8005640 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	61da      	str	r2, [r3, #28]
 8005632:	e005      	b.n	8005640 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d106      	bne.n	8005660 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7fc f824 	bl	80016a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005676:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005688:	431a      	orrs	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005692:	431a      	orrs	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	431a      	orrs	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	431a      	orrs	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056b0:	431a      	orrs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056ba:	431a      	orrs	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c4:	ea42 0103 	orr.w	r1, r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	0c1b      	lsrs	r3, r3, #16
 80056de:	f003 0104 	and.w	r1, r3, #4
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	f003 0210 	and.w	r2, r3, #16
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69da      	ldr	r2, [r3, #28]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005700:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b082      	sub	sp, #8
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e041      	b.n	80057b0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	d106      	bne.n	8005746 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7fc f89f 	bl	8001884 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2202      	movs	r2, #2
 800574a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	3304      	adds	r3, #4
 8005756:	4619      	mov	r1, r3
 8005758:	4610      	mov	r0, r2
 800575a:	f000 fa11 	bl	8005b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e041      	b.n	800584e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d106      	bne.n	80057e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f839 	bl	8005856 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3304      	adds	r3, #4
 80057f4:	4619      	mov	r1, r3
 80057f6:	4610      	mov	r0, r2
 80057f8:	f000 f9c2 	bl	8005b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
	...

0800586c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005878:	2300      	movs	r3, #0
 800587a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005882:	2b01      	cmp	r3, #1
 8005884:	d101      	bne.n	800588a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005886:	2302      	movs	r3, #2
 8005888:	e0ae      	b.n	80059e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b0c      	cmp	r3, #12
 8005896:	f200 809f 	bhi.w	80059d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800589a:	a201      	add	r2, pc, #4	; (adr r2, 80058a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800589c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a0:	080058d5 	.word	0x080058d5
 80058a4:	080059d9 	.word	0x080059d9
 80058a8:	080059d9 	.word	0x080059d9
 80058ac:	080059d9 	.word	0x080059d9
 80058b0:	08005915 	.word	0x08005915
 80058b4:	080059d9 	.word	0x080059d9
 80058b8:	080059d9 	.word	0x080059d9
 80058bc:	080059d9 	.word	0x080059d9
 80058c0:	08005957 	.word	0x08005957
 80058c4:	080059d9 	.word	0x080059d9
 80058c8:	080059d9 	.word	0x080059d9
 80058cc:	080059d9 	.word	0x080059d9
 80058d0:	08005997 	.word	0x08005997
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 f9f0 	bl	8005cc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0208 	orr.w	r2, r2, #8
 80058ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 0204 	bic.w	r2, r2, #4
 80058fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6999      	ldr	r1, [r3, #24]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	691a      	ldr	r2, [r3, #16]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	619a      	str	r2, [r3, #24]
      break;
 8005912:	e064      	b.n	80059de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68b9      	ldr	r1, [r7, #8]
 800591a:	4618      	mov	r0, r3
 800591c:	f000 fa40 	bl	8005da0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699a      	ldr	r2, [r3, #24]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800592e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800593e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6999      	ldr	r1, [r3, #24]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	021a      	lsls	r2, r3, #8
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	619a      	str	r2, [r3, #24]
      break;
 8005954:	e043      	b.n	80059de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68b9      	ldr	r1, [r7, #8]
 800595c:	4618      	mov	r0, r3
 800595e:	f000 fa95 	bl	8005e8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69da      	ldr	r2, [r3, #28]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f042 0208 	orr.w	r2, r2, #8
 8005970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69da      	ldr	r2, [r3, #28]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0204 	bic.w	r2, r2, #4
 8005980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69d9      	ldr	r1, [r3, #28]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	430a      	orrs	r2, r1
 8005992:	61da      	str	r2, [r3, #28]
      break;
 8005994:	e023      	b.n	80059de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68b9      	ldr	r1, [r7, #8]
 800599c:	4618      	mov	r0, r3
 800599e:	f000 fae9 	bl	8005f74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69da      	ldr	r2, [r3, #28]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69da      	ldr	r2, [r3, #28]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69d9      	ldr	r1, [r3, #28]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	021a      	lsls	r2, r3, #8
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	61da      	str	r2, [r3, #28]
      break;
 80059d6:	e002      	b.n	80059de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	75fb      	strb	r3, [r7, #23]
      break;
 80059dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <HAL_TIM_ConfigClockSource+0x1c>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e0b4      	b.n	8005b76 <HAL_TIM_ConfigClockSource+0x186>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a44:	d03e      	beq.n	8005ac4 <HAL_TIM_ConfigClockSource+0xd4>
 8005a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a4a:	f200 8087 	bhi.w	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
 8005a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a52:	f000 8086 	beq.w	8005b62 <HAL_TIM_ConfigClockSource+0x172>
 8005a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a5a:	d87f      	bhi.n	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
 8005a5c:	2b70      	cmp	r3, #112	; 0x70
 8005a5e:	d01a      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0xa6>
 8005a60:	2b70      	cmp	r3, #112	; 0x70
 8005a62:	d87b      	bhi.n	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
 8005a64:	2b60      	cmp	r3, #96	; 0x60
 8005a66:	d050      	beq.n	8005b0a <HAL_TIM_ConfigClockSource+0x11a>
 8005a68:	2b60      	cmp	r3, #96	; 0x60
 8005a6a:	d877      	bhi.n	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
 8005a6c:	2b50      	cmp	r3, #80	; 0x50
 8005a6e:	d03c      	beq.n	8005aea <HAL_TIM_ConfigClockSource+0xfa>
 8005a70:	2b50      	cmp	r3, #80	; 0x50
 8005a72:	d873      	bhi.n	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
 8005a74:	2b40      	cmp	r3, #64	; 0x40
 8005a76:	d058      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0x13a>
 8005a78:	2b40      	cmp	r3, #64	; 0x40
 8005a7a:	d86f      	bhi.n	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
 8005a7c:	2b30      	cmp	r3, #48	; 0x30
 8005a7e:	d064      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x15a>
 8005a80:	2b30      	cmp	r3, #48	; 0x30
 8005a82:	d86b      	bhi.n	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	d060      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x15a>
 8005a88:	2b20      	cmp	r3, #32
 8005a8a:	d867      	bhi.n	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d05c      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x15a>
 8005a90:	2b10      	cmp	r3, #16
 8005a92:	d05a      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x15a>
 8005a94:	e062      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6818      	ldr	r0, [r3, #0]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	6899      	ldr	r1, [r3, #8]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f000 fb35 	bl	8006114 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ab8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	609a      	str	r2, [r3, #8]
      break;
 8005ac2:	e04f      	b.n	8005b64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6818      	ldr	r0, [r3, #0]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	6899      	ldr	r1, [r3, #8]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f000 fb1e 	bl	8006114 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689a      	ldr	r2, [r3, #8]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ae6:	609a      	str	r2, [r3, #8]
      break;
 8005ae8:	e03c      	b.n	8005b64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6818      	ldr	r0, [r3, #0]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	6859      	ldr	r1, [r3, #4]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	461a      	mov	r2, r3
 8005af8:	f000 fa92 	bl	8006020 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2150      	movs	r1, #80	; 0x50
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 faeb 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005b08:	e02c      	b.n	8005b64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6818      	ldr	r0, [r3, #0]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	6859      	ldr	r1, [r3, #4]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	461a      	mov	r2, r3
 8005b18:	f000 fab1 	bl	800607e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2160      	movs	r1, #96	; 0x60
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 fadb 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005b28:	e01c      	b.n	8005b64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6818      	ldr	r0, [r3, #0]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	6859      	ldr	r1, [r3, #4]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	461a      	mov	r2, r3
 8005b38:	f000 fa72 	bl	8006020 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2140      	movs	r1, #64	; 0x40
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 facb 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005b48:	e00c      	b.n	8005b64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4619      	mov	r1, r3
 8005b54:	4610      	mov	r0, r2
 8005b56:	f000 fac2 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005b5a:	e003      	b.n	8005b64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b60:	e000      	b.n	8005b64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a40      	ldr	r2, [pc, #256]	; (8005c94 <TIM_Base_SetConfig+0x114>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d013      	beq.n	8005bc0 <TIM_Base_SetConfig+0x40>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b9e:	d00f      	beq.n	8005bc0 <TIM_Base_SetConfig+0x40>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a3d      	ldr	r2, [pc, #244]	; (8005c98 <TIM_Base_SetConfig+0x118>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d00b      	beq.n	8005bc0 <TIM_Base_SetConfig+0x40>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a3c      	ldr	r2, [pc, #240]	; (8005c9c <TIM_Base_SetConfig+0x11c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d007      	beq.n	8005bc0 <TIM_Base_SetConfig+0x40>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a3b      	ldr	r2, [pc, #236]	; (8005ca0 <TIM_Base_SetConfig+0x120>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d003      	beq.n	8005bc0 <TIM_Base_SetConfig+0x40>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a3a      	ldr	r2, [pc, #232]	; (8005ca4 <TIM_Base_SetConfig+0x124>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d108      	bne.n	8005bd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a2f      	ldr	r2, [pc, #188]	; (8005c94 <TIM_Base_SetConfig+0x114>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d02b      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be0:	d027      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a2c      	ldr	r2, [pc, #176]	; (8005c98 <TIM_Base_SetConfig+0x118>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d023      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a2b      	ldr	r2, [pc, #172]	; (8005c9c <TIM_Base_SetConfig+0x11c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d01f      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a2a      	ldr	r2, [pc, #168]	; (8005ca0 <TIM_Base_SetConfig+0x120>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d01b      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a29      	ldr	r2, [pc, #164]	; (8005ca4 <TIM_Base_SetConfig+0x124>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d017      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a28      	ldr	r2, [pc, #160]	; (8005ca8 <TIM_Base_SetConfig+0x128>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d013      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a27      	ldr	r2, [pc, #156]	; (8005cac <TIM_Base_SetConfig+0x12c>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d00f      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a26      	ldr	r2, [pc, #152]	; (8005cb0 <TIM_Base_SetConfig+0x130>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d00b      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a25      	ldr	r2, [pc, #148]	; (8005cb4 <TIM_Base_SetConfig+0x134>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d007      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a24      	ldr	r2, [pc, #144]	; (8005cb8 <TIM_Base_SetConfig+0x138>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d003      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a23      	ldr	r2, [pc, #140]	; (8005cbc <TIM_Base_SetConfig+0x13c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d108      	bne.n	8005c44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a0a      	ldr	r2, [pc, #40]	; (8005c94 <TIM_Base_SetConfig+0x114>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d003      	beq.n	8005c78 <TIM_Base_SetConfig+0xf8>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a0c      	ldr	r2, [pc, #48]	; (8005ca4 <TIM_Base_SetConfig+0x124>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d103      	bne.n	8005c80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	691a      	ldr	r2, [r3, #16]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	615a      	str	r2, [r3, #20]
}
 8005c86:	bf00      	nop
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	40010000 	.word	0x40010000
 8005c98:	40000400 	.word	0x40000400
 8005c9c:	40000800 	.word	0x40000800
 8005ca0:	40000c00 	.word	0x40000c00
 8005ca4:	40010400 	.word	0x40010400
 8005ca8:	40014000 	.word	0x40014000
 8005cac:	40014400 	.word	0x40014400
 8005cb0:	40014800 	.word	0x40014800
 8005cb4:	40001800 	.word	0x40001800
 8005cb8:	40001c00 	.word	0x40001c00
 8005cbc:	40002000 	.word	0x40002000

08005cc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	f023 0201 	bic.w	r2, r3, #1
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f023 0303 	bic.w	r3, r3, #3
 8005cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f023 0302 	bic.w	r3, r3, #2
 8005d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a20      	ldr	r2, [pc, #128]	; (8005d98 <TIM_OC1_SetConfig+0xd8>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d003      	beq.n	8005d24 <TIM_OC1_SetConfig+0x64>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a1f      	ldr	r2, [pc, #124]	; (8005d9c <TIM_OC1_SetConfig+0xdc>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d10c      	bne.n	8005d3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f023 0308 	bic.w	r3, r3, #8
 8005d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f023 0304 	bic.w	r3, r3, #4
 8005d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a15      	ldr	r2, [pc, #84]	; (8005d98 <TIM_OC1_SetConfig+0xd8>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d003      	beq.n	8005d4e <TIM_OC1_SetConfig+0x8e>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a14      	ldr	r2, [pc, #80]	; (8005d9c <TIM_OC1_SetConfig+0xdc>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d111      	bne.n	8005d72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	621a      	str	r2, [r3, #32]
}
 8005d8c:	bf00      	nop
 8005d8e:	371c      	adds	r7, #28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	40010000 	.word	0x40010000
 8005d9c:	40010400 	.word	0x40010400

08005da0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f023 0210 	bic.w	r2, r3, #16
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	021b      	lsls	r3, r3, #8
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f023 0320 	bic.w	r3, r3, #32
 8005dea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a22      	ldr	r2, [pc, #136]	; (8005e84 <TIM_OC2_SetConfig+0xe4>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d003      	beq.n	8005e08 <TIM_OC2_SetConfig+0x68>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a21      	ldr	r2, [pc, #132]	; (8005e88 <TIM_OC2_SetConfig+0xe8>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d10d      	bne.n	8005e24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	011b      	lsls	r3, r3, #4
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a17      	ldr	r2, [pc, #92]	; (8005e84 <TIM_OC2_SetConfig+0xe4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d003      	beq.n	8005e34 <TIM_OC2_SetConfig+0x94>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a16      	ldr	r2, [pc, #88]	; (8005e88 <TIM_OC2_SetConfig+0xe8>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d113      	bne.n	8005e5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	621a      	str	r2, [r3, #32]
}
 8005e76:	bf00      	nop
 8005e78:	371c      	adds	r7, #28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	40010000 	.word	0x40010000
 8005e88:	40010400 	.word	0x40010400

08005e8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0303 	bic.w	r3, r3, #3
 8005ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	021b      	lsls	r3, r3, #8
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a21      	ldr	r2, [pc, #132]	; (8005f6c <TIM_OC3_SetConfig+0xe0>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d003      	beq.n	8005ef2 <TIM_OC3_SetConfig+0x66>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a20      	ldr	r2, [pc, #128]	; (8005f70 <TIM_OC3_SetConfig+0xe4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d10d      	bne.n	8005f0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	021b      	lsls	r3, r3, #8
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a16      	ldr	r2, [pc, #88]	; (8005f6c <TIM_OC3_SetConfig+0xe0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d003      	beq.n	8005f1e <TIM_OC3_SetConfig+0x92>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a15      	ldr	r2, [pc, #84]	; (8005f70 <TIM_OC3_SetConfig+0xe4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d113      	bne.n	8005f46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	011b      	lsls	r3, r3, #4
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	621a      	str	r2, [r3, #32]
}
 8005f60:	bf00      	nop
 8005f62:	371c      	adds	r7, #28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	40010000 	.word	0x40010000
 8005f70:	40010400 	.word	0x40010400

08005f74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	021b      	lsls	r3, r3, #8
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	031b      	lsls	r3, r3, #12
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a12      	ldr	r2, [pc, #72]	; (8006018 <TIM_OC4_SetConfig+0xa4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d003      	beq.n	8005fdc <TIM_OC4_SetConfig+0x68>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a11      	ldr	r2, [pc, #68]	; (800601c <TIM_OC4_SetConfig+0xa8>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d109      	bne.n	8005ff0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fe2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	019b      	lsls	r3, r3, #6
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	621a      	str	r2, [r3, #32]
}
 800600a:	bf00      	nop
 800600c:	371c      	adds	r7, #28
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	40010000 	.word	0x40010000
 800601c:	40010400 	.word	0x40010400

08006020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	f023 0201 	bic.w	r2, r3, #1
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800604a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	4313      	orrs	r3, r2
 8006054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f023 030a 	bic.w	r3, r3, #10
 800605c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4313      	orrs	r3, r2
 8006064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	621a      	str	r2, [r3, #32]
}
 8006072:	bf00      	nop
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800607e:	b480      	push	{r7}
 8006080:	b087      	sub	sp, #28
 8006082:	af00      	add	r7, sp, #0
 8006084:	60f8      	str	r0, [r7, #12]
 8006086:	60b9      	str	r1, [r7, #8]
 8006088:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	f023 0210 	bic.w	r2, r3, #16
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	031b      	lsls	r3, r3, #12
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	011b      	lsls	r3, r3, #4
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	621a      	str	r2, [r3, #32]
}
 80060d2:	bf00      	nop
 80060d4:	371c      	adds	r7, #28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060de:	b480      	push	{r7}
 80060e0:	b085      	sub	sp, #20
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f043 0307 	orr.w	r3, r3, #7
 8006100:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	609a      	str	r2, [r3, #8]
}
 8006108:	bf00      	nop
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800612e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	021a      	lsls	r2, r3, #8
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	431a      	orrs	r2, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4313      	orrs	r3, r2
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	4313      	orrs	r3, r2
 8006140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	609a      	str	r2, [r3, #8]
}
 8006148:	bf00      	nop
 800614a:	371c      	adds	r7, #28
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006164:	2b01      	cmp	r3, #1
 8006166:	d101      	bne.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006168:	2302      	movs	r3, #2
 800616a:	e05a      	b.n	8006222 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2202      	movs	r2, #2
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006192:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	4313      	orrs	r3, r2
 800619c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a21      	ldr	r2, [pc, #132]	; (8006230 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d022      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b8:	d01d      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a1d      	ldr	r2, [pc, #116]	; (8006234 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d018      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a1b      	ldr	r2, [pc, #108]	; (8006238 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d013      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a1a      	ldr	r2, [pc, #104]	; (800623c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d00e      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a18      	ldr	r2, [pc, #96]	; (8006240 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d009      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a17      	ldr	r2, [pc, #92]	; (8006244 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d004      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a15      	ldr	r2, [pc, #84]	; (8006248 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d10c      	bne.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	4313      	orrs	r3, r2
 8006206:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	40010000 	.word	0x40010000
 8006234:	40000400 	.word	0x40000400
 8006238:	40000800 	.word	0x40000800
 800623c:	40000c00 	.word	0x40000c00
 8006240:	40010400 	.word	0x40010400
 8006244:	40014000 	.word	0x40014000
 8006248:	40001800 	.word	0x40001800

0800624c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006260:	2b01      	cmp	r3, #1
 8006262:	d101      	bne.n	8006268 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006264:	2302      	movs	r3, #2
 8006266:	e03d      	b.n	80062e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	4313      	orrs	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	4313      	orrs	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	4313      	orrs	r3, r2
 8006298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e03f      	b.n	8006382 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d106      	bne.n	800631c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7fb fb10 	bl	800193c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2224      	movs	r2, #36	; 0x24
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68da      	ldr	r2, [r3, #12]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006332:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f929 	bl	800658c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	691a      	ldr	r2, [r3, #16]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006348:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	695a      	ldr	r2, [r3, #20]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006358:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68da      	ldr	r2, [r3, #12]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006368:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2220      	movs	r2, #32
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2220      	movs	r2, #32
 800637c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b08a      	sub	sp, #40	; 0x28
 800638e:	af02      	add	r7, sp, #8
 8006390:	60f8      	str	r0, [r7, #12]
 8006392:	60b9      	str	r1, [r7, #8]
 8006394:	603b      	str	r3, [r7, #0]
 8006396:	4613      	mov	r3, r2
 8006398:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b20      	cmp	r3, #32
 80063a8:	d17c      	bne.n	80064a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <HAL_UART_Transmit+0x2c>
 80063b0:	88fb      	ldrh	r3, [r7, #6]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e075      	b.n	80064a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d101      	bne.n	80063c8 <HAL_UART_Transmit+0x3e>
 80063c4:	2302      	movs	r3, #2
 80063c6:	e06e      	b.n	80064a6 <HAL_UART_Transmit+0x11c>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2221      	movs	r2, #33	; 0x21
 80063da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063de:	f7fc f97d 	bl	80026dc <HAL_GetTick>
 80063e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	88fa      	ldrh	r2, [r7, #6]
 80063e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	88fa      	ldrh	r2, [r7, #6]
 80063ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f8:	d108      	bne.n	800640c <HAL_UART_Transmit+0x82>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d104      	bne.n	800640c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006402:	2300      	movs	r3, #0
 8006404:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	61bb      	str	r3, [r7, #24]
 800640a:	e003      	b.n	8006414 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006410:	2300      	movs	r3, #0
 8006412:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800641c:	e02a      	b.n	8006474 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	2200      	movs	r2, #0
 8006426:	2180      	movs	r1, #128	; 0x80
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 f840 	bl	80064ae <UART_WaitOnFlagUntilTimeout>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e036      	b.n	80064a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10b      	bne.n	8006456 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	881b      	ldrh	r3, [r3, #0]
 8006442:	461a      	mov	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800644c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	3302      	adds	r3, #2
 8006452:	61bb      	str	r3, [r7, #24]
 8006454:	e007      	b.n	8006466 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	781a      	ldrb	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	3301      	adds	r3, #1
 8006464:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800646a:	b29b      	uxth	r3, r3
 800646c:	3b01      	subs	r3, #1
 800646e:	b29a      	uxth	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006478:	b29b      	uxth	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1cf      	bne.n	800641e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2200      	movs	r2, #0
 8006486:	2140      	movs	r1, #64	; 0x40
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 f810 	bl	80064ae <UART_WaitOnFlagUntilTimeout>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e006      	b.n	80064a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2220      	movs	r2, #32
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	e000      	b.n	80064a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80064a4:	2302      	movs	r3, #2
  }
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3720      	adds	r7, #32
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b090      	sub	sp, #64	; 0x40
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	60f8      	str	r0, [r7, #12]
 80064b6:	60b9      	str	r1, [r7, #8]
 80064b8:	603b      	str	r3, [r7, #0]
 80064ba:	4613      	mov	r3, r2
 80064bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064be:	e050      	b.n	8006562 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c6:	d04c      	beq.n	8006562 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80064c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d007      	beq.n	80064de <UART_WaitOnFlagUntilTimeout+0x30>
 80064ce:	f7fc f905 	bl	80026dc <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064da:	429a      	cmp	r2, r3
 80064dc:	d241      	bcs.n	8006562 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	330c      	adds	r3, #12
 80064e4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e8:	e853 3f00 	ldrex	r3, [r3]
 80064ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	330c      	adds	r3, #12
 80064fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064fe:	637a      	str	r2, [r7, #52]	; 0x34
 8006500:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006502:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006504:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006506:	e841 2300 	strex	r3, r2, [r1]
 800650a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800650c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1e5      	bne.n	80064de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	3314      	adds	r3, #20
 8006518:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	e853 3f00 	ldrex	r3, [r3]
 8006520:	613b      	str	r3, [r7, #16]
   return(result);
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	f023 0301 	bic.w	r3, r3, #1
 8006528:	63bb      	str	r3, [r7, #56]	; 0x38
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	3314      	adds	r3, #20
 8006530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006532:	623a      	str	r2, [r7, #32]
 8006534:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006536:	69f9      	ldr	r1, [r7, #28]
 8006538:	6a3a      	ldr	r2, [r7, #32]
 800653a:	e841 2300 	strex	r3, r2, [r1]
 800653e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1e5      	bne.n	8006512 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2220      	movs	r2, #32
 800654a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2220      	movs	r2, #32
 8006552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e00f      	b.n	8006582 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	4013      	ands	r3, r2
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	429a      	cmp	r2, r3
 8006570:	bf0c      	ite	eq
 8006572:	2301      	moveq	r3, #1
 8006574:	2300      	movne	r3, #0
 8006576:	b2db      	uxtb	r3, r3
 8006578:	461a      	mov	r2, r3
 800657a:	79fb      	ldrb	r3, [r7, #7]
 800657c:	429a      	cmp	r2, r3
 800657e:	d09f      	beq.n	80064c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3740      	adds	r7, #64	; 0x40
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
	...

0800658c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800658c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006590:	b0c0      	sub	sp, #256	; 0x100
 8006592:	af00      	add	r7, sp, #0
 8006594:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80065a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a8:	68d9      	ldr	r1, [r3, #12]
 80065aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	ea40 0301 	orr.w	r3, r0, r1
 80065b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ba:	689a      	ldr	r2, [r3, #8]
 80065bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	431a      	orrs	r2, r3
 80065c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	431a      	orrs	r2, r3
 80065cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065e4:	f021 010c 	bic.w	r1, r1, #12
 80065e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065f2:	430b      	orrs	r3, r1
 80065f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006606:	6999      	ldr	r1, [r3, #24]
 8006608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	ea40 0301 	orr.w	r3, r0, r1
 8006612:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	4b8f      	ldr	r3, [pc, #572]	; (8006858 <UART_SetConfig+0x2cc>)
 800661c:	429a      	cmp	r2, r3
 800661e:	d005      	beq.n	800662c <UART_SetConfig+0xa0>
 8006620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	4b8d      	ldr	r3, [pc, #564]	; (800685c <UART_SetConfig+0x2d0>)
 8006628:	429a      	cmp	r2, r3
 800662a:	d104      	bne.n	8006636 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800662c:	f7fd ff6c 	bl	8004508 <HAL_RCC_GetPCLK2Freq>
 8006630:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006634:	e003      	b.n	800663e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006636:	f7fd ff53 	bl	80044e0 <HAL_RCC_GetPCLK1Freq>
 800663a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800663e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006642:	69db      	ldr	r3, [r3, #28]
 8006644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006648:	f040 810c 	bne.w	8006864 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800664c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006650:	2200      	movs	r2, #0
 8006652:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006656:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800665a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800665e:	4622      	mov	r2, r4
 8006660:	462b      	mov	r3, r5
 8006662:	1891      	adds	r1, r2, r2
 8006664:	65b9      	str	r1, [r7, #88]	; 0x58
 8006666:	415b      	adcs	r3, r3
 8006668:	65fb      	str	r3, [r7, #92]	; 0x5c
 800666a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800666e:	4621      	mov	r1, r4
 8006670:	eb12 0801 	adds.w	r8, r2, r1
 8006674:	4629      	mov	r1, r5
 8006676:	eb43 0901 	adc.w	r9, r3, r1
 800667a:	f04f 0200 	mov.w	r2, #0
 800667e:	f04f 0300 	mov.w	r3, #0
 8006682:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006686:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800668a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800668e:	4690      	mov	r8, r2
 8006690:	4699      	mov	r9, r3
 8006692:	4623      	mov	r3, r4
 8006694:	eb18 0303 	adds.w	r3, r8, r3
 8006698:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800669c:	462b      	mov	r3, r5
 800669e:	eb49 0303 	adc.w	r3, r9, r3
 80066a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80066b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80066ba:	460b      	mov	r3, r1
 80066bc:	18db      	adds	r3, r3, r3
 80066be:	653b      	str	r3, [r7, #80]	; 0x50
 80066c0:	4613      	mov	r3, r2
 80066c2:	eb42 0303 	adc.w	r3, r2, r3
 80066c6:	657b      	str	r3, [r7, #84]	; 0x54
 80066c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80066cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80066d0:	f7f9 fdee 	bl	80002b0 <__aeabi_uldivmod>
 80066d4:	4602      	mov	r2, r0
 80066d6:	460b      	mov	r3, r1
 80066d8:	4b61      	ldr	r3, [pc, #388]	; (8006860 <UART_SetConfig+0x2d4>)
 80066da:	fba3 2302 	umull	r2, r3, r3, r2
 80066de:	095b      	lsrs	r3, r3, #5
 80066e0:	011c      	lsls	r4, r3, #4
 80066e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066e6:	2200      	movs	r2, #0
 80066e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80066f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80066f4:	4642      	mov	r2, r8
 80066f6:	464b      	mov	r3, r9
 80066f8:	1891      	adds	r1, r2, r2
 80066fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80066fc:	415b      	adcs	r3, r3
 80066fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006700:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006704:	4641      	mov	r1, r8
 8006706:	eb12 0a01 	adds.w	sl, r2, r1
 800670a:	4649      	mov	r1, r9
 800670c:	eb43 0b01 	adc.w	fp, r3, r1
 8006710:	f04f 0200 	mov.w	r2, #0
 8006714:	f04f 0300 	mov.w	r3, #0
 8006718:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800671c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006720:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006724:	4692      	mov	sl, r2
 8006726:	469b      	mov	fp, r3
 8006728:	4643      	mov	r3, r8
 800672a:	eb1a 0303 	adds.w	r3, sl, r3
 800672e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006732:	464b      	mov	r3, r9
 8006734:	eb4b 0303 	adc.w	r3, fp, r3
 8006738:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800673c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006748:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800674c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006750:	460b      	mov	r3, r1
 8006752:	18db      	adds	r3, r3, r3
 8006754:	643b      	str	r3, [r7, #64]	; 0x40
 8006756:	4613      	mov	r3, r2
 8006758:	eb42 0303 	adc.w	r3, r2, r3
 800675c:	647b      	str	r3, [r7, #68]	; 0x44
 800675e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006762:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006766:	f7f9 fda3 	bl	80002b0 <__aeabi_uldivmod>
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	4611      	mov	r1, r2
 8006770:	4b3b      	ldr	r3, [pc, #236]	; (8006860 <UART_SetConfig+0x2d4>)
 8006772:	fba3 2301 	umull	r2, r3, r3, r1
 8006776:	095b      	lsrs	r3, r3, #5
 8006778:	2264      	movs	r2, #100	; 0x64
 800677a:	fb02 f303 	mul.w	r3, r2, r3
 800677e:	1acb      	subs	r3, r1, r3
 8006780:	00db      	lsls	r3, r3, #3
 8006782:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006786:	4b36      	ldr	r3, [pc, #216]	; (8006860 <UART_SetConfig+0x2d4>)
 8006788:	fba3 2302 	umull	r2, r3, r3, r2
 800678c:	095b      	lsrs	r3, r3, #5
 800678e:	005b      	lsls	r3, r3, #1
 8006790:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006794:	441c      	add	r4, r3
 8006796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800679a:	2200      	movs	r2, #0
 800679c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80067a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80067a8:	4642      	mov	r2, r8
 80067aa:	464b      	mov	r3, r9
 80067ac:	1891      	adds	r1, r2, r2
 80067ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80067b0:	415b      	adcs	r3, r3
 80067b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80067b8:	4641      	mov	r1, r8
 80067ba:	1851      	adds	r1, r2, r1
 80067bc:	6339      	str	r1, [r7, #48]	; 0x30
 80067be:	4649      	mov	r1, r9
 80067c0:	414b      	adcs	r3, r1
 80067c2:	637b      	str	r3, [r7, #52]	; 0x34
 80067c4:	f04f 0200 	mov.w	r2, #0
 80067c8:	f04f 0300 	mov.w	r3, #0
 80067cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80067d0:	4659      	mov	r1, fp
 80067d2:	00cb      	lsls	r3, r1, #3
 80067d4:	4651      	mov	r1, sl
 80067d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067da:	4651      	mov	r1, sl
 80067dc:	00ca      	lsls	r2, r1, #3
 80067de:	4610      	mov	r0, r2
 80067e0:	4619      	mov	r1, r3
 80067e2:	4603      	mov	r3, r0
 80067e4:	4642      	mov	r2, r8
 80067e6:	189b      	adds	r3, r3, r2
 80067e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067ec:	464b      	mov	r3, r9
 80067ee:	460a      	mov	r2, r1
 80067f0:	eb42 0303 	adc.w	r3, r2, r3
 80067f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006804:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006808:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800680c:	460b      	mov	r3, r1
 800680e:	18db      	adds	r3, r3, r3
 8006810:	62bb      	str	r3, [r7, #40]	; 0x28
 8006812:	4613      	mov	r3, r2
 8006814:	eb42 0303 	adc.w	r3, r2, r3
 8006818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800681a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800681e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006822:	f7f9 fd45 	bl	80002b0 <__aeabi_uldivmod>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	4b0d      	ldr	r3, [pc, #52]	; (8006860 <UART_SetConfig+0x2d4>)
 800682c:	fba3 1302 	umull	r1, r3, r3, r2
 8006830:	095b      	lsrs	r3, r3, #5
 8006832:	2164      	movs	r1, #100	; 0x64
 8006834:	fb01 f303 	mul.w	r3, r1, r3
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	00db      	lsls	r3, r3, #3
 800683c:	3332      	adds	r3, #50	; 0x32
 800683e:	4a08      	ldr	r2, [pc, #32]	; (8006860 <UART_SetConfig+0x2d4>)
 8006840:	fba2 2303 	umull	r2, r3, r2, r3
 8006844:	095b      	lsrs	r3, r3, #5
 8006846:	f003 0207 	and.w	r2, r3, #7
 800684a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4422      	add	r2, r4
 8006852:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006854:	e105      	b.n	8006a62 <UART_SetConfig+0x4d6>
 8006856:	bf00      	nop
 8006858:	40011000 	.word	0x40011000
 800685c:	40011400 	.word	0x40011400
 8006860:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006868:	2200      	movs	r2, #0
 800686a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800686e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006872:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006876:	4642      	mov	r2, r8
 8006878:	464b      	mov	r3, r9
 800687a:	1891      	adds	r1, r2, r2
 800687c:	6239      	str	r1, [r7, #32]
 800687e:	415b      	adcs	r3, r3
 8006880:	627b      	str	r3, [r7, #36]	; 0x24
 8006882:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006886:	4641      	mov	r1, r8
 8006888:	1854      	adds	r4, r2, r1
 800688a:	4649      	mov	r1, r9
 800688c:	eb43 0501 	adc.w	r5, r3, r1
 8006890:	f04f 0200 	mov.w	r2, #0
 8006894:	f04f 0300 	mov.w	r3, #0
 8006898:	00eb      	lsls	r3, r5, #3
 800689a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800689e:	00e2      	lsls	r2, r4, #3
 80068a0:	4614      	mov	r4, r2
 80068a2:	461d      	mov	r5, r3
 80068a4:	4643      	mov	r3, r8
 80068a6:	18e3      	adds	r3, r4, r3
 80068a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80068ac:	464b      	mov	r3, r9
 80068ae:	eb45 0303 	adc.w	r3, r5, r3
 80068b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80068c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068c6:	f04f 0200 	mov.w	r2, #0
 80068ca:	f04f 0300 	mov.w	r3, #0
 80068ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80068d2:	4629      	mov	r1, r5
 80068d4:	008b      	lsls	r3, r1, #2
 80068d6:	4621      	mov	r1, r4
 80068d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068dc:	4621      	mov	r1, r4
 80068de:	008a      	lsls	r2, r1, #2
 80068e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80068e4:	f7f9 fce4 	bl	80002b0 <__aeabi_uldivmod>
 80068e8:	4602      	mov	r2, r0
 80068ea:	460b      	mov	r3, r1
 80068ec:	4b60      	ldr	r3, [pc, #384]	; (8006a70 <UART_SetConfig+0x4e4>)
 80068ee:	fba3 2302 	umull	r2, r3, r3, r2
 80068f2:	095b      	lsrs	r3, r3, #5
 80068f4:	011c      	lsls	r4, r3, #4
 80068f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068fa:	2200      	movs	r2, #0
 80068fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006900:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006904:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006908:	4642      	mov	r2, r8
 800690a:	464b      	mov	r3, r9
 800690c:	1891      	adds	r1, r2, r2
 800690e:	61b9      	str	r1, [r7, #24]
 8006910:	415b      	adcs	r3, r3
 8006912:	61fb      	str	r3, [r7, #28]
 8006914:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006918:	4641      	mov	r1, r8
 800691a:	1851      	adds	r1, r2, r1
 800691c:	6139      	str	r1, [r7, #16]
 800691e:	4649      	mov	r1, r9
 8006920:	414b      	adcs	r3, r1
 8006922:	617b      	str	r3, [r7, #20]
 8006924:	f04f 0200 	mov.w	r2, #0
 8006928:	f04f 0300 	mov.w	r3, #0
 800692c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006930:	4659      	mov	r1, fp
 8006932:	00cb      	lsls	r3, r1, #3
 8006934:	4651      	mov	r1, sl
 8006936:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800693a:	4651      	mov	r1, sl
 800693c:	00ca      	lsls	r2, r1, #3
 800693e:	4610      	mov	r0, r2
 8006940:	4619      	mov	r1, r3
 8006942:	4603      	mov	r3, r0
 8006944:	4642      	mov	r2, r8
 8006946:	189b      	adds	r3, r3, r2
 8006948:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800694c:	464b      	mov	r3, r9
 800694e:	460a      	mov	r2, r1
 8006950:	eb42 0303 	adc.w	r3, r2, r3
 8006954:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	67bb      	str	r3, [r7, #120]	; 0x78
 8006962:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006964:	f04f 0200 	mov.w	r2, #0
 8006968:	f04f 0300 	mov.w	r3, #0
 800696c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006970:	4649      	mov	r1, r9
 8006972:	008b      	lsls	r3, r1, #2
 8006974:	4641      	mov	r1, r8
 8006976:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800697a:	4641      	mov	r1, r8
 800697c:	008a      	lsls	r2, r1, #2
 800697e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006982:	f7f9 fc95 	bl	80002b0 <__aeabi_uldivmod>
 8006986:	4602      	mov	r2, r0
 8006988:	460b      	mov	r3, r1
 800698a:	4b39      	ldr	r3, [pc, #228]	; (8006a70 <UART_SetConfig+0x4e4>)
 800698c:	fba3 1302 	umull	r1, r3, r3, r2
 8006990:	095b      	lsrs	r3, r3, #5
 8006992:	2164      	movs	r1, #100	; 0x64
 8006994:	fb01 f303 	mul.w	r3, r1, r3
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	011b      	lsls	r3, r3, #4
 800699c:	3332      	adds	r3, #50	; 0x32
 800699e:	4a34      	ldr	r2, [pc, #208]	; (8006a70 <UART_SetConfig+0x4e4>)
 80069a0:	fba2 2303 	umull	r2, r3, r2, r3
 80069a4:	095b      	lsrs	r3, r3, #5
 80069a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069aa:	441c      	add	r4, r3
 80069ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069b0:	2200      	movs	r2, #0
 80069b2:	673b      	str	r3, [r7, #112]	; 0x70
 80069b4:	677a      	str	r2, [r7, #116]	; 0x74
 80069b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80069ba:	4642      	mov	r2, r8
 80069bc:	464b      	mov	r3, r9
 80069be:	1891      	adds	r1, r2, r2
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	415b      	adcs	r3, r3
 80069c4:	60fb      	str	r3, [r7, #12]
 80069c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069ca:	4641      	mov	r1, r8
 80069cc:	1851      	adds	r1, r2, r1
 80069ce:	6039      	str	r1, [r7, #0]
 80069d0:	4649      	mov	r1, r9
 80069d2:	414b      	adcs	r3, r1
 80069d4:	607b      	str	r3, [r7, #4]
 80069d6:	f04f 0200 	mov.w	r2, #0
 80069da:	f04f 0300 	mov.w	r3, #0
 80069de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069e2:	4659      	mov	r1, fp
 80069e4:	00cb      	lsls	r3, r1, #3
 80069e6:	4651      	mov	r1, sl
 80069e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069ec:	4651      	mov	r1, sl
 80069ee:	00ca      	lsls	r2, r1, #3
 80069f0:	4610      	mov	r0, r2
 80069f2:	4619      	mov	r1, r3
 80069f4:	4603      	mov	r3, r0
 80069f6:	4642      	mov	r2, r8
 80069f8:	189b      	adds	r3, r3, r2
 80069fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80069fc:	464b      	mov	r3, r9
 80069fe:	460a      	mov	r2, r1
 8006a00:	eb42 0303 	adc.w	r3, r2, r3
 8006a04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	663b      	str	r3, [r7, #96]	; 0x60
 8006a10:	667a      	str	r2, [r7, #100]	; 0x64
 8006a12:	f04f 0200 	mov.w	r2, #0
 8006a16:	f04f 0300 	mov.w	r3, #0
 8006a1a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006a1e:	4649      	mov	r1, r9
 8006a20:	008b      	lsls	r3, r1, #2
 8006a22:	4641      	mov	r1, r8
 8006a24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a28:	4641      	mov	r1, r8
 8006a2a:	008a      	lsls	r2, r1, #2
 8006a2c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a30:	f7f9 fc3e 	bl	80002b0 <__aeabi_uldivmod>
 8006a34:	4602      	mov	r2, r0
 8006a36:	460b      	mov	r3, r1
 8006a38:	4b0d      	ldr	r3, [pc, #52]	; (8006a70 <UART_SetConfig+0x4e4>)
 8006a3a:	fba3 1302 	umull	r1, r3, r3, r2
 8006a3e:	095b      	lsrs	r3, r3, #5
 8006a40:	2164      	movs	r1, #100	; 0x64
 8006a42:	fb01 f303 	mul.w	r3, r1, r3
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	011b      	lsls	r3, r3, #4
 8006a4a:	3332      	adds	r3, #50	; 0x32
 8006a4c:	4a08      	ldr	r2, [pc, #32]	; (8006a70 <UART_SetConfig+0x4e4>)
 8006a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a52:	095b      	lsrs	r3, r3, #5
 8006a54:	f003 020f 	and.w	r2, r3, #15
 8006a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4422      	add	r2, r4
 8006a60:	609a      	str	r2, [r3, #8]
}
 8006a62:	bf00      	nop
 8006a64:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a6e:	bf00      	nop
 8006a70:	51eb851f 	.word	0x51eb851f

08006a74 <__NVIC_SetPriority>:
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	6039      	str	r1, [r7, #0]
 8006a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	db0a      	blt.n	8006a9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	490c      	ldr	r1, [pc, #48]	; (8006ac0 <__NVIC_SetPriority+0x4c>)
 8006a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a92:	0112      	lsls	r2, r2, #4
 8006a94:	b2d2      	uxtb	r2, r2
 8006a96:	440b      	add	r3, r1
 8006a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006a9c:	e00a      	b.n	8006ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	4908      	ldr	r1, [pc, #32]	; (8006ac4 <__NVIC_SetPriority+0x50>)
 8006aa4:	79fb      	ldrb	r3, [r7, #7]
 8006aa6:	f003 030f 	and.w	r3, r3, #15
 8006aaa:	3b04      	subs	r3, #4
 8006aac:	0112      	lsls	r2, r2, #4
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	440b      	add	r3, r1
 8006ab2:	761a      	strb	r2, [r3, #24]
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	e000e100 	.word	0xe000e100
 8006ac4:	e000ed00 	.word	0xe000ed00

08006ac8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006acc:	2100      	movs	r1, #0
 8006ace:	f06f 0004 	mvn.w	r0, #4
 8006ad2:	f7ff ffcf 	bl	8006a74 <__NVIC_SetPriority>
#endif
}
 8006ad6:	bf00      	nop
 8006ad8:	bd80      	pop	{r7, pc}
	...

08006adc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ae2:	f3ef 8305 	mrs	r3, IPSR
 8006ae6:	603b      	str	r3, [r7, #0]
  return(result);
 8006ae8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006aee:	f06f 0305 	mvn.w	r3, #5
 8006af2:	607b      	str	r3, [r7, #4]
 8006af4:	e00c      	b.n	8006b10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006af6:	4b0a      	ldr	r3, [pc, #40]	; (8006b20 <osKernelInitialize+0x44>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d105      	bne.n	8006b0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006afe:	4b08      	ldr	r3, [pc, #32]	; (8006b20 <osKernelInitialize+0x44>)
 8006b00:	2201      	movs	r2, #1
 8006b02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006b04:	2300      	movs	r3, #0
 8006b06:	607b      	str	r3, [r7, #4]
 8006b08:	e002      	b.n	8006b10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006b10:	687b      	ldr	r3, [r7, #4]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	200015a8 	.word	0x200015a8

08006b24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b2a:	f3ef 8305 	mrs	r3, IPSR
 8006b2e:	603b      	str	r3, [r7, #0]
  return(result);
 8006b30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006b36:	f06f 0305 	mvn.w	r3, #5
 8006b3a:	607b      	str	r3, [r7, #4]
 8006b3c:	e010      	b.n	8006b60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006b3e:	4b0b      	ldr	r3, [pc, #44]	; (8006b6c <osKernelStart+0x48>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d109      	bne.n	8006b5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006b46:	f7ff ffbf 	bl	8006ac8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006b4a:	4b08      	ldr	r3, [pc, #32]	; (8006b6c <osKernelStart+0x48>)
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006b50:	f001 fa48 	bl	8007fe4 <vTaskStartScheduler>
      stat = osOK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	607b      	str	r3, [r7, #4]
 8006b58:	e002      	b.n	8006b60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006b60:	687b      	ldr	r3, [r7, #4]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	200015a8 	.word	0x200015a8

08006b70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b08e      	sub	sp, #56	; 0x38
 8006b74:	af04      	add	r7, sp, #16
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b80:	f3ef 8305 	mrs	r3, IPSR
 8006b84:	617b      	str	r3, [r7, #20]
  return(result);
 8006b86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d17e      	bne.n	8006c8a <osThreadNew+0x11a>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d07b      	beq.n	8006c8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006b92:	2380      	movs	r3, #128	; 0x80
 8006b94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006b96:	2318      	movs	r3, #24
 8006b98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d045      	beq.n	8006c36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d002      	beq.n	8006bb8 <osThreadNew+0x48>
        name = attr->name;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d002      	beq.n	8006bc6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d008      	beq.n	8006bde <osThreadNew+0x6e>
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	2b38      	cmp	r3, #56	; 0x38
 8006bd0:	d805      	bhi.n	8006bde <osThreadNew+0x6e>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d001      	beq.n	8006be2 <osThreadNew+0x72>
        return (NULL);
 8006bde:	2300      	movs	r3, #0
 8006be0:	e054      	b.n	8006c8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	089b      	lsrs	r3, r3, #2
 8006bf0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00e      	beq.n	8006c18 <osThreadNew+0xa8>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	2b5b      	cmp	r3, #91	; 0x5b
 8006c00:	d90a      	bls.n	8006c18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d006      	beq.n	8006c18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d002      	beq.n	8006c18 <osThreadNew+0xa8>
        mem = 1;
 8006c12:	2301      	movs	r3, #1
 8006c14:	61bb      	str	r3, [r7, #24]
 8006c16:	e010      	b.n	8006c3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10c      	bne.n	8006c3a <osThreadNew+0xca>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d108      	bne.n	8006c3a <osThreadNew+0xca>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d104      	bne.n	8006c3a <osThreadNew+0xca>
          mem = 0;
 8006c30:	2300      	movs	r3, #0
 8006c32:	61bb      	str	r3, [r7, #24]
 8006c34:	e001      	b.n	8006c3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006c36:	2300      	movs	r3, #0
 8006c38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d110      	bne.n	8006c62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c48:	9202      	str	r2, [sp, #8]
 8006c4a:	9301      	str	r3, [sp, #4]
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	6a3a      	ldr	r2, [r7, #32]
 8006c54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f000 ffee 	bl	8007c38 <xTaskCreateStatic>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	613b      	str	r3, [r7, #16]
 8006c60:	e013      	b.n	8006c8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d110      	bne.n	8006c8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006c68:	6a3b      	ldr	r3, [r7, #32]
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	f107 0310 	add.w	r3, r7, #16
 8006c70:	9301      	str	r3, [sp, #4]
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f001 f839 	bl	8007cf2 <xTaskCreate>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d001      	beq.n	8006c8a <osThreadNew+0x11a>
            hTask = NULL;
 8006c86:	2300      	movs	r3, #0
 8006c88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006c8a:	693b      	ldr	r3, [r7, #16]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3728      	adds	r7, #40	; 0x28
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c9c:	f3ef 8305 	mrs	r3, IPSR
 8006ca0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ca2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d003      	beq.n	8006cb0 <osDelay+0x1c>
    stat = osErrorISR;
 8006ca8:	f06f 0305 	mvn.w	r3, #5
 8006cac:	60fb      	str	r3, [r7, #12]
 8006cae:	e007      	b.n	8006cc0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d002      	beq.n	8006cc0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f001 f95e 	bl	8007f7c <vTaskDelay>
    }
  }

  return (stat);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b084      	sub	sp, #16
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f002 fb94 	bl	8009400 <pvTimerGetTimerID>
 8006cd8:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d005      	beq.n	8006cec <TimerCallback+0x22>
    callb->func (callb->arg);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	6852      	ldr	r2, [r2, #4]
 8006ce8:	4610      	mov	r0, r2
 8006cea:	4798      	blx	r3
  }
}
 8006cec:	bf00      	nop
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08c      	sub	sp, #48	; 0x30
 8006cf8:	af02      	add	r7, sp, #8
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	607a      	str	r2, [r7, #4]
 8006cfe:	603b      	str	r3, [r7, #0]
 8006d00:	460b      	mov	r3, r1
 8006d02:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8006d04:	2300      	movs	r3, #0
 8006d06:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d08:	f3ef 8305 	mrs	r3, IPSR
 8006d0c:	613b      	str	r3, [r7, #16]
  return(result);
 8006d0e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d163      	bne.n	8006ddc <osTimerNew+0xe8>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d060      	beq.n	8006ddc <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8006d1a:	2008      	movs	r0, #8
 8006d1c:	f002 fddc 	bl	80098d8 <pvPortMalloc>
 8006d20:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d059      	beq.n	8006ddc <osTimerNew+0xe8>
      callb->func = func;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8006d34:	7afb      	ldrb	r3, [r7, #11]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d102      	bne.n	8006d40 <osTimerNew+0x4c>
        reload = pdFALSE;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	61fb      	str	r3, [r7, #28]
 8006d3e:	e001      	b.n	8006d44 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8006d40:	2301      	movs	r3, #1
 8006d42:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8006d44:	f04f 33ff 	mov.w	r3, #4294967295
 8006d48:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d01c      	beq.n	8006d8e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <osTimerNew+0x6e>
          name = attr->name;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d006      	beq.n	8006d78 <osTimerNew+0x84>
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	2b2b      	cmp	r3, #43	; 0x2b
 8006d70:	d902      	bls.n	8006d78 <osTimerNew+0x84>
          mem = 1;
 8006d72:	2301      	movs	r3, #1
 8006d74:	61bb      	str	r3, [r7, #24]
 8006d76:	e00c      	b.n	8006d92 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d108      	bne.n	8006d92 <osTimerNew+0x9e>
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d104      	bne.n	8006d92 <osTimerNew+0x9e>
            mem = 0;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	61bb      	str	r3, [r7, #24]
 8006d8c:	e001      	b.n	8006d92 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d10c      	bne.n	8006db2 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	9301      	str	r3, [sp, #4]
 8006d9e:	4b12      	ldr	r3, [pc, #72]	; (8006de8 <osTimerNew+0xf4>)
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	69fa      	ldr	r2, [r7, #28]
 8006da6:	2101      	movs	r1, #1
 8006da8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006daa:	f001 ffaa 	bl	8008d02 <xTimerCreateStatic>
 8006dae:	6238      	str	r0, [r7, #32]
 8006db0:	e00b      	b.n	8006dca <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d108      	bne.n	8006dca <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8006db8:	4b0b      	ldr	r3, [pc, #44]	; (8006de8 <osTimerNew+0xf4>)
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	69fa      	ldr	r2, [r7, #28]
 8006dc0:	2101      	movs	r1, #1
 8006dc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006dc4:	f001 ff7c 	bl	8008cc0 <xTimerCreate>
 8006dc8:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d105      	bne.n	8006ddc <osTimerNew+0xe8>
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d002      	beq.n	8006ddc <osTimerNew+0xe8>
        vPortFree (callb);
 8006dd6:	6978      	ldr	r0, [r7, #20]
 8006dd8:	f002 fe4a 	bl	8009a70 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3728      	adds	r7, #40	; 0x28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	08006ccb 	.word	0x08006ccb

08006dec <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b088      	sub	sp, #32
 8006df0:	af02      	add	r7, sp, #8
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dfa:	f3ef 8305 	mrs	r3, IPSR
 8006dfe:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e00:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <osTimerStart+0x22>
    stat = osErrorISR;
 8006e06:	f06f 0305 	mvn.w	r3, #5
 8006e0a:	617b      	str	r3, [r7, #20]
 8006e0c:	e017      	b.n	8006e3e <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d103      	bne.n	8006e1c <osTimerStart+0x30>
    stat = osErrorParameter;
 8006e14:	f06f 0303 	mvn.w	r3, #3
 8006e18:	617b      	str	r3, [r7, #20]
 8006e1a:	e010      	b.n	8006e3e <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	2300      	movs	r3, #0
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	2104      	movs	r1, #4
 8006e26:	6938      	ldr	r0, [r7, #16]
 8006e28:	f001 ffe4 	bl	8008df4 <xTimerGenericCommand>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d102      	bne.n	8006e38 <osTimerStart+0x4c>
      stat = osOK;
 8006e32:	2300      	movs	r3, #0
 8006e34:	617b      	str	r3, [r7, #20]
 8006e36:	e002      	b.n	8006e3e <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8006e38:	f06f 0302 	mvn.w	r3, #2
 8006e3c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006e3e:	697b      	ldr	r3, [r7, #20]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3718      	adds	r7, #24
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4a07      	ldr	r2, [pc, #28]	; (8006e74 <vApplicationGetIdleTaskMemory+0x2c>)
 8006e58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	4a06      	ldr	r2, [pc, #24]	; (8006e78 <vApplicationGetIdleTaskMemory+0x30>)
 8006e5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2280      	movs	r2, #128	; 0x80
 8006e64:	601a      	str	r2, [r3, #0]
}
 8006e66:	bf00      	nop
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	200015ac 	.word	0x200015ac
 8006e78:	20001608 	.word	0x20001608

08006e7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4a07      	ldr	r2, [pc, #28]	; (8006ea8 <vApplicationGetTimerTaskMemory+0x2c>)
 8006e8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	4a06      	ldr	r2, [pc, #24]	; (8006eac <vApplicationGetTimerTaskMemory+0x30>)
 8006e92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e9a:	601a      	str	r2, [r3, #0]
}
 8006e9c:	bf00      	nop
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	20001808 	.word	0x20001808
 8006eac:	20001864 	.word	0x20001864

08006eb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f103 0208 	add.w	r2, r3, #8
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f103 0208 	add.w	r2, r3, #8
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f103 0208 	add.w	r2, r3, #8
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006efe:	bf00      	nop
 8006f00:	370c      	adds	r7, #12
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b085      	sub	sp, #20
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	689a      	ldr	r2, [r3, #8]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	1c5a      	adds	r2, r3, #1
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	601a      	str	r2, [r3, #0]
}
 8006f46:	bf00      	nop
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f52:	b480      	push	{r7}
 8006f54:	b085      	sub	sp, #20
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f68:	d103      	bne.n	8006f72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	e00c      	b.n	8006f8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	3308      	adds	r3, #8
 8006f76:	60fb      	str	r3, [r7, #12]
 8006f78:	e002      	b.n	8006f80 <vListInsert+0x2e>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d2f6      	bcs.n	8006f7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	685a      	ldr	r2, [r3, #4]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	1c5a      	adds	r2, r3, #1
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	601a      	str	r2, [r3, #0]
}
 8006fb8:	bf00      	nop
 8006fba:	3714      	adds	r7, #20
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	6892      	ldr	r2, [r2, #8]
 8006fda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	6852      	ldr	r2, [r2, #4]
 8006fe4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d103      	bne.n	8006ff8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689a      	ldr	r2, [r3, #8]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	1e5a      	subs	r2, r3, #1
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3714      	adds	r7, #20
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10a      	bne.n	8007042 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800703e:	bf00      	nop
 8007040:	e7fe      	b.n	8007040 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007042:	f002 fb27 	bl	8009694 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704e:	68f9      	ldr	r1, [r7, #12]
 8007050:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007052:	fb01 f303 	mul.w	r3, r1, r3
 8007056:	441a      	add	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007072:	3b01      	subs	r3, #1
 8007074:	68f9      	ldr	r1, [r7, #12]
 8007076:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007078:	fb01 f303 	mul.w	r3, r1, r3
 800707c:	441a      	add	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	22ff      	movs	r2, #255	; 0xff
 8007086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	22ff      	movs	r2, #255	; 0xff
 800708e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d114      	bne.n	80070c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d01a      	beq.n	80070d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	3310      	adds	r3, #16
 80070a4:	4618      	mov	r0, r3
 80070a6:	f001 fa27 	bl	80084f8 <xTaskRemoveFromEventList>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d012      	beq.n	80070d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80070b0:	4b0c      	ldr	r3, [pc, #48]	; (80070e4 <xQueueGenericReset+0xcc>)
 80070b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	e009      	b.n	80070d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	3310      	adds	r3, #16
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7ff fef2 	bl	8006eb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	3324      	adds	r3, #36	; 0x24
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7ff feed 	bl	8006eb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80070d6:	f002 fb0d 	bl	80096f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80070da:	2301      	movs	r3, #1
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	e000ed04 	.word	0xe000ed04

080070e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b08e      	sub	sp, #56	; 0x38
 80070ec:	af02      	add	r7, sp, #8
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
 80070f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10a      	bne.n	8007112 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800710e:	bf00      	nop
 8007110:	e7fe      	b.n	8007110 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10a      	bne.n	800712e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	627b      	str	r3, [r7, #36]	; 0x24
}
 800712a:	bf00      	nop
 800712c:	e7fe      	b.n	800712c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d002      	beq.n	800713a <xQueueGenericCreateStatic+0x52>
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <xQueueGenericCreateStatic+0x56>
 800713a:	2301      	movs	r3, #1
 800713c:	e000      	b.n	8007140 <xQueueGenericCreateStatic+0x58>
 800713e:	2300      	movs	r3, #0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10a      	bne.n	800715a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007148:	f383 8811 	msr	BASEPRI, r3
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	623b      	str	r3, [r7, #32]
}
 8007156:	bf00      	nop
 8007158:	e7fe      	b.n	8007158 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d102      	bne.n	8007166 <xQueueGenericCreateStatic+0x7e>
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <xQueueGenericCreateStatic+0x82>
 8007166:	2301      	movs	r3, #1
 8007168:	e000      	b.n	800716c <xQueueGenericCreateStatic+0x84>
 800716a:	2300      	movs	r3, #0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10a      	bne.n	8007186 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	61fb      	str	r3, [r7, #28]
}
 8007182:	bf00      	nop
 8007184:	e7fe      	b.n	8007184 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007186:	2350      	movs	r3, #80	; 0x50
 8007188:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2b50      	cmp	r3, #80	; 0x50
 800718e:	d00a      	beq.n	80071a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	61bb      	str	r3, [r7, #24]
}
 80071a2:	bf00      	nop
 80071a4:	e7fe      	b.n	80071a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80071a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80071ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00d      	beq.n	80071ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80071b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80071ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80071be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	4613      	mov	r3, r2
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	68b9      	ldr	r1, [r7, #8]
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f000 f805 	bl	80071d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80071ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3730      	adds	r7, #48	; 0x30
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
 80071e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d103      	bne.n	80071f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	601a      	str	r2, [r3, #0]
 80071f2:	e002      	b.n	80071fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	68ba      	ldr	r2, [r7, #8]
 8007204:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007206:	2101      	movs	r1, #1
 8007208:	69b8      	ldr	r0, [r7, #24]
 800720a:	f7ff ff05 	bl	8007018 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	78fa      	ldrb	r2, [r7, #3]
 8007212:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007216:	bf00      	nop
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
	...

08007220 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b08e      	sub	sp, #56	; 0x38
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800722e:	2300      	movs	r3, #0
 8007230:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10a      	bne.n	8007252 <xQueueGenericSend+0x32>
	__asm volatile
 800723c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007240:	f383 8811 	msr	BASEPRI, r3
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800724e:	bf00      	nop
 8007250:	e7fe      	b.n	8007250 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d103      	bne.n	8007260 <xQueueGenericSend+0x40>
 8007258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <xQueueGenericSend+0x44>
 8007260:	2301      	movs	r3, #1
 8007262:	e000      	b.n	8007266 <xQueueGenericSend+0x46>
 8007264:	2300      	movs	r3, #0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10a      	bne.n	8007280 <xQueueGenericSend+0x60>
	__asm volatile
 800726a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726e:	f383 8811 	msr	BASEPRI, r3
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800727c:	bf00      	nop
 800727e:	e7fe      	b.n	800727e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	2b02      	cmp	r3, #2
 8007284:	d103      	bne.n	800728e <xQueueGenericSend+0x6e>
 8007286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800728a:	2b01      	cmp	r3, #1
 800728c:	d101      	bne.n	8007292 <xQueueGenericSend+0x72>
 800728e:	2301      	movs	r3, #1
 8007290:	e000      	b.n	8007294 <xQueueGenericSend+0x74>
 8007292:	2300      	movs	r3, #0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10a      	bne.n	80072ae <xQueueGenericSend+0x8e>
	__asm volatile
 8007298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729c:	f383 8811 	msr	BASEPRI, r3
 80072a0:	f3bf 8f6f 	isb	sy
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	623b      	str	r3, [r7, #32]
}
 80072aa:	bf00      	nop
 80072ac:	e7fe      	b.n	80072ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072ae:	f001 fae1 	bl	8008874 <xTaskGetSchedulerState>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d102      	bne.n	80072be <xQueueGenericSend+0x9e>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <xQueueGenericSend+0xa2>
 80072be:	2301      	movs	r3, #1
 80072c0:	e000      	b.n	80072c4 <xQueueGenericSend+0xa4>
 80072c2:	2300      	movs	r3, #0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10a      	bne.n	80072de <xQueueGenericSend+0xbe>
	__asm volatile
 80072c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072cc:	f383 8811 	msr	BASEPRI, r3
 80072d0:	f3bf 8f6f 	isb	sy
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	61fb      	str	r3, [r7, #28]
}
 80072da:	bf00      	nop
 80072dc:	e7fe      	b.n	80072dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072de:	f002 f9d9 	bl	8009694 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d302      	bcc.n	80072f4 <xQueueGenericSend+0xd4>
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d129      	bne.n	8007348 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072f4:	683a      	ldr	r2, [r7, #0]
 80072f6:	68b9      	ldr	r1, [r7, #8]
 80072f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072fa:	f000 fb2f 	bl	800795c <prvCopyDataToQueue>
 80072fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	2b00      	cmp	r3, #0
 8007306:	d010      	beq.n	800732a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730a:	3324      	adds	r3, #36	; 0x24
 800730c:	4618      	mov	r0, r3
 800730e:	f001 f8f3 	bl	80084f8 <xTaskRemoveFromEventList>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d013      	beq.n	8007340 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007318:	4b3f      	ldr	r3, [pc, #252]	; (8007418 <xQueueGenericSend+0x1f8>)
 800731a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	e00a      	b.n	8007340 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800732a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732c:	2b00      	cmp	r3, #0
 800732e:	d007      	beq.n	8007340 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007330:	4b39      	ldr	r3, [pc, #228]	; (8007418 <xQueueGenericSend+0x1f8>)
 8007332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007336:	601a      	str	r2, [r3, #0]
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007340:	f002 f9d8 	bl	80096f4 <vPortExitCritical>
				return pdPASS;
 8007344:	2301      	movs	r3, #1
 8007346:	e063      	b.n	8007410 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d103      	bne.n	8007356 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800734e:	f002 f9d1 	bl	80096f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007352:	2300      	movs	r3, #0
 8007354:	e05c      	b.n	8007410 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007358:	2b00      	cmp	r3, #0
 800735a:	d106      	bne.n	800736a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800735c:	f107 0314 	add.w	r3, r7, #20
 8007360:	4618      	mov	r0, r3
 8007362:	f001 f92d 	bl	80085c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007366:	2301      	movs	r3, #1
 8007368:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800736a:	f002 f9c3 	bl	80096f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800736e:	f000 fe9f 	bl	80080b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007372:	f002 f98f 	bl	8009694 <vPortEnterCritical>
 8007376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007378:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800737c:	b25b      	sxtb	r3, r3
 800737e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007382:	d103      	bne.n	800738c <xQueueGenericSend+0x16c>
 8007384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007386:	2200      	movs	r2, #0
 8007388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007392:	b25b      	sxtb	r3, r3
 8007394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007398:	d103      	bne.n	80073a2 <xQueueGenericSend+0x182>
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073a2:	f002 f9a7 	bl	80096f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073a6:	1d3a      	adds	r2, r7, #4
 80073a8:	f107 0314 	add.w	r3, r7, #20
 80073ac:	4611      	mov	r1, r2
 80073ae:	4618      	mov	r0, r3
 80073b0:	f001 f91c 	bl	80085ec <xTaskCheckForTimeOut>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d124      	bne.n	8007404 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80073ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073bc:	f000 fbc6 	bl	8007b4c <prvIsQueueFull>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d018      	beq.n	80073f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	3310      	adds	r3, #16
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	4611      	mov	r1, r2
 80073ce:	4618      	mov	r0, r3
 80073d0:	f001 f842 	bl	8008458 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80073d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073d6:	f000 fb51 	bl	8007a7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80073da:	f000 fe77 	bl	80080cc <xTaskResumeAll>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f47f af7c 	bne.w	80072de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80073e6:	4b0c      	ldr	r3, [pc, #48]	; (8007418 <xQueueGenericSend+0x1f8>)
 80073e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	e772      	b.n	80072de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80073f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073fa:	f000 fb3f 	bl	8007a7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073fe:	f000 fe65 	bl	80080cc <xTaskResumeAll>
 8007402:	e76c      	b.n	80072de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007406:	f000 fb39 	bl	8007a7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800740a:	f000 fe5f 	bl	80080cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800740e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007410:	4618      	mov	r0, r3
 8007412:	3738      	adds	r7, #56	; 0x38
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	e000ed04 	.word	0xe000ed04

0800741c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b090      	sub	sp, #64	; 0x40
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
 8007428:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800742e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10a      	bne.n	800744a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007438:	f383 8811 	msr	BASEPRI, r3
 800743c:	f3bf 8f6f 	isb	sy
 8007440:	f3bf 8f4f 	dsb	sy
 8007444:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007446:	bf00      	nop
 8007448:	e7fe      	b.n	8007448 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d103      	bne.n	8007458 <xQueueGenericSendFromISR+0x3c>
 8007450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <xQueueGenericSendFromISR+0x40>
 8007458:	2301      	movs	r3, #1
 800745a:	e000      	b.n	800745e <xQueueGenericSendFromISR+0x42>
 800745c:	2300      	movs	r3, #0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10a      	bne.n	8007478 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007474:	bf00      	nop
 8007476:	e7fe      	b.n	8007476 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2b02      	cmp	r3, #2
 800747c:	d103      	bne.n	8007486 <xQueueGenericSendFromISR+0x6a>
 800747e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007482:	2b01      	cmp	r3, #1
 8007484:	d101      	bne.n	800748a <xQueueGenericSendFromISR+0x6e>
 8007486:	2301      	movs	r3, #1
 8007488:	e000      	b.n	800748c <xQueueGenericSendFromISR+0x70>
 800748a:	2300      	movs	r3, #0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10a      	bne.n	80074a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	623b      	str	r3, [r7, #32]
}
 80074a2:	bf00      	nop
 80074a4:	e7fe      	b.n	80074a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074a6:	f002 f9d7 	bl	8009858 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80074aa:	f3ef 8211 	mrs	r2, BASEPRI
 80074ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	61fa      	str	r2, [r7, #28]
 80074c0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80074c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d302      	bcc.n	80074d8 <xQueueGenericSendFromISR+0xbc>
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d12f      	bne.n	8007538 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80074d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074e8:	683a      	ldr	r2, [r7, #0]
 80074ea:	68b9      	ldr	r1, [r7, #8]
 80074ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80074ee:	f000 fa35 	bl	800795c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80074f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80074f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fa:	d112      	bne.n	8007522 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007500:	2b00      	cmp	r3, #0
 8007502:	d016      	beq.n	8007532 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007506:	3324      	adds	r3, #36	; 0x24
 8007508:	4618      	mov	r0, r3
 800750a:	f000 fff5 	bl	80084f8 <xTaskRemoveFromEventList>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00e      	beq.n	8007532 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00b      	beq.n	8007532 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	601a      	str	r2, [r3, #0]
 8007520:	e007      	b.n	8007532 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007522:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007526:	3301      	adds	r3, #1
 8007528:	b2db      	uxtb	r3, r3
 800752a:	b25a      	sxtb	r2, r3
 800752c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007532:	2301      	movs	r3, #1
 8007534:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007536:	e001      	b.n	800753c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007538:	2300      	movs	r3, #0
 800753a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800753c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800753e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007546:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800754a:	4618      	mov	r0, r3
 800754c:	3740      	adds	r7, #64	; 0x40
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
	...

08007554 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b08c      	sub	sp, #48	; 0x30
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007560:	2300      	movs	r3, #0
 8007562:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10a      	bne.n	8007584 <xQueueReceive+0x30>
	__asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	623b      	str	r3, [r7, #32]
}
 8007580:	bf00      	nop
 8007582:	e7fe      	b.n	8007582 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d103      	bne.n	8007592 <xQueueReceive+0x3e>
 800758a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <xQueueReceive+0x42>
 8007592:	2301      	movs	r3, #1
 8007594:	e000      	b.n	8007598 <xQueueReceive+0x44>
 8007596:	2300      	movs	r3, #0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d10a      	bne.n	80075b2 <xQueueReceive+0x5e>
	__asm volatile
 800759c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a0:	f383 8811 	msr	BASEPRI, r3
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	f3bf 8f4f 	dsb	sy
 80075ac:	61fb      	str	r3, [r7, #28]
}
 80075ae:	bf00      	nop
 80075b0:	e7fe      	b.n	80075b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075b2:	f001 f95f 	bl	8008874 <xTaskGetSchedulerState>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d102      	bne.n	80075c2 <xQueueReceive+0x6e>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <xQueueReceive+0x72>
 80075c2:	2301      	movs	r3, #1
 80075c4:	e000      	b.n	80075c8 <xQueueReceive+0x74>
 80075c6:	2300      	movs	r3, #0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d10a      	bne.n	80075e2 <xQueueReceive+0x8e>
	__asm volatile
 80075cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	61bb      	str	r3, [r7, #24]
}
 80075de:	bf00      	nop
 80075e0:	e7fe      	b.n	80075e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075e2:	f002 f857 	bl	8009694 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d01f      	beq.n	8007632 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80075f2:	68b9      	ldr	r1, [r7, #8]
 80075f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075f6:	f000 fa1b 	bl	8007a30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	1e5a      	subs	r2, r3, #1
 80075fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007600:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00f      	beq.n	800762a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800760a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760c:	3310      	adds	r3, #16
 800760e:	4618      	mov	r0, r3
 8007610:	f000 ff72 	bl	80084f8 <xTaskRemoveFromEventList>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d007      	beq.n	800762a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800761a:	4b3d      	ldr	r3, [pc, #244]	; (8007710 <xQueueReceive+0x1bc>)
 800761c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007620:	601a      	str	r2, [r3, #0]
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800762a:	f002 f863 	bl	80096f4 <vPortExitCritical>
				return pdPASS;
 800762e:	2301      	movs	r3, #1
 8007630:	e069      	b.n	8007706 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d103      	bne.n	8007640 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007638:	f002 f85c 	bl	80096f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800763c:	2300      	movs	r3, #0
 800763e:	e062      	b.n	8007706 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007642:	2b00      	cmp	r3, #0
 8007644:	d106      	bne.n	8007654 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007646:	f107 0310 	add.w	r3, r7, #16
 800764a:	4618      	mov	r0, r3
 800764c:	f000 ffb8 	bl	80085c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007650:	2301      	movs	r3, #1
 8007652:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007654:	f002 f84e 	bl	80096f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007658:	f000 fd2a 	bl	80080b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800765c:	f002 f81a 	bl	8009694 <vPortEnterCritical>
 8007660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007662:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007666:	b25b      	sxtb	r3, r3
 8007668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766c:	d103      	bne.n	8007676 <xQueueReceive+0x122>
 800766e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007670:	2200      	movs	r2, #0
 8007672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007678:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800767c:	b25b      	sxtb	r3, r3
 800767e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007682:	d103      	bne.n	800768c <xQueueReceive+0x138>
 8007684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007686:	2200      	movs	r2, #0
 8007688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800768c:	f002 f832 	bl	80096f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007690:	1d3a      	adds	r2, r7, #4
 8007692:	f107 0310 	add.w	r3, r7, #16
 8007696:	4611      	mov	r1, r2
 8007698:	4618      	mov	r0, r3
 800769a:	f000 ffa7 	bl	80085ec <xTaskCheckForTimeOut>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d123      	bne.n	80076ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076a6:	f000 fa3b 	bl	8007b20 <prvIsQueueEmpty>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d017      	beq.n	80076e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80076b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b2:	3324      	adds	r3, #36	; 0x24
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	4611      	mov	r1, r2
 80076b8:	4618      	mov	r0, r3
 80076ba:	f000 fecd 	bl	8008458 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80076be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076c0:	f000 f9dc 	bl	8007a7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80076c4:	f000 fd02 	bl	80080cc <xTaskResumeAll>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d189      	bne.n	80075e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80076ce:	4b10      	ldr	r3, [pc, #64]	; (8007710 <xQueueReceive+0x1bc>)
 80076d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076d4:	601a      	str	r2, [r3, #0]
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	e780      	b.n	80075e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80076e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076e2:	f000 f9cb 	bl	8007a7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076e6:	f000 fcf1 	bl	80080cc <xTaskResumeAll>
 80076ea:	e77a      	b.n	80075e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80076ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076ee:	f000 f9c5 	bl	8007a7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076f2:	f000 fceb 	bl	80080cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076f8:	f000 fa12 	bl	8007b20 <prvIsQueueEmpty>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f43f af6f 	beq.w	80075e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007704:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007706:	4618      	mov	r0, r3
 8007708:	3730      	adds	r7, #48	; 0x30
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	e000ed04 	.word	0xe000ed04

08007714 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b08e      	sub	sp, #56	; 0x38
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800771e:	2300      	movs	r3, #0
 8007720:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007726:	2300      	movs	r3, #0
 8007728:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10a      	bne.n	8007746 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007734:	f383 8811 	msr	BASEPRI, r3
 8007738:	f3bf 8f6f 	isb	sy
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	623b      	str	r3, [r7, #32]
}
 8007742:	bf00      	nop
 8007744:	e7fe      	b.n	8007744 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00a      	beq.n	8007764 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	61fb      	str	r3, [r7, #28]
}
 8007760:	bf00      	nop
 8007762:	e7fe      	b.n	8007762 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007764:	f001 f886 	bl	8008874 <xTaskGetSchedulerState>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d102      	bne.n	8007774 <xQueueSemaphoreTake+0x60>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <xQueueSemaphoreTake+0x64>
 8007774:	2301      	movs	r3, #1
 8007776:	e000      	b.n	800777a <xQueueSemaphoreTake+0x66>
 8007778:	2300      	movs	r3, #0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10a      	bne.n	8007794 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	61bb      	str	r3, [r7, #24]
}
 8007790:	bf00      	nop
 8007792:	e7fe      	b.n	8007792 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007794:	f001 ff7e 	bl	8009694 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800779e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d024      	beq.n	80077ee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80077a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a6:	1e5a      	subs	r2, r3, #1
 80077a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077aa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d104      	bne.n	80077be <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80077b4:	f001 f9d4 	bl	8008b60 <pvTaskIncrementMutexHeldCount>
 80077b8:	4602      	mov	r2, r0
 80077ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077bc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00f      	beq.n	80077e6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c8:	3310      	adds	r3, #16
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 fe94 	bl	80084f8 <xTaskRemoveFromEventList>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d007      	beq.n	80077e6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80077d6:	4b54      	ldr	r3, [pc, #336]	; (8007928 <xQueueSemaphoreTake+0x214>)
 80077d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80077e6:	f001 ff85 	bl	80096f4 <vPortExitCritical>
				return pdPASS;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e097      	b.n	800791e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d111      	bne.n	8007818 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80077f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00a      	beq.n	8007810 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	617b      	str	r3, [r7, #20]
}
 800780c:	bf00      	nop
 800780e:	e7fe      	b.n	800780e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007810:	f001 ff70 	bl	80096f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007814:	2300      	movs	r3, #0
 8007816:	e082      	b.n	800791e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781a:	2b00      	cmp	r3, #0
 800781c:	d106      	bne.n	800782c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800781e:	f107 030c 	add.w	r3, r7, #12
 8007822:	4618      	mov	r0, r3
 8007824:	f000 fecc 	bl	80085c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007828:	2301      	movs	r3, #1
 800782a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800782c:	f001 ff62 	bl	80096f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007830:	f000 fc3e 	bl	80080b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007834:	f001 ff2e 	bl	8009694 <vPortEnterCritical>
 8007838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800783e:	b25b      	sxtb	r3, r3
 8007840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007844:	d103      	bne.n	800784e <xQueueSemaphoreTake+0x13a>
 8007846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007848:	2200      	movs	r2, #0
 800784a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800784e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007854:	b25b      	sxtb	r3, r3
 8007856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785a:	d103      	bne.n	8007864 <xQueueSemaphoreTake+0x150>
 800785c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785e:	2200      	movs	r2, #0
 8007860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007864:	f001 ff46 	bl	80096f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007868:	463a      	mov	r2, r7
 800786a:	f107 030c 	add.w	r3, r7, #12
 800786e:	4611      	mov	r1, r2
 8007870:	4618      	mov	r0, r3
 8007872:	f000 febb 	bl	80085ec <xTaskCheckForTimeOut>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d132      	bne.n	80078e2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800787c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800787e:	f000 f94f 	bl	8007b20 <prvIsQueueEmpty>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d026      	beq.n	80078d6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d109      	bne.n	80078a4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007890:	f001 ff00 	bl	8009694 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	4618      	mov	r0, r3
 800789a:	f001 f809 	bl	80088b0 <xTaskPriorityInherit>
 800789e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80078a0:	f001 ff28 	bl	80096f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a6:	3324      	adds	r3, #36	; 0x24
 80078a8:	683a      	ldr	r2, [r7, #0]
 80078aa:	4611      	mov	r1, r2
 80078ac:	4618      	mov	r0, r3
 80078ae:	f000 fdd3 	bl	8008458 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078b4:	f000 f8e2 	bl	8007a7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078b8:	f000 fc08 	bl	80080cc <xTaskResumeAll>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f47f af68 	bne.w	8007794 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80078c4:	4b18      	ldr	r3, [pc, #96]	; (8007928 <xQueueSemaphoreTake+0x214>)
 80078c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ca:	601a      	str	r2, [r3, #0]
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	e75e      	b.n	8007794 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80078d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078d8:	f000 f8d0 	bl	8007a7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078dc:	f000 fbf6 	bl	80080cc <xTaskResumeAll>
 80078e0:	e758      	b.n	8007794 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80078e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078e4:	f000 f8ca 	bl	8007a7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078e8:	f000 fbf0 	bl	80080cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078ee:	f000 f917 	bl	8007b20 <prvIsQueueEmpty>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f43f af4d 	beq.w	8007794 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80078fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00d      	beq.n	800791c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007900:	f001 fec8 	bl	8009694 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007904:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007906:	f000 f811 	bl	800792c <prvGetDisinheritPriorityAfterTimeout>
 800790a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800790c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007912:	4618      	mov	r0, r3
 8007914:	f001 f8a2 	bl	8008a5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007918:	f001 feec 	bl	80096f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800791c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800791e:	4618      	mov	r0, r3
 8007920:	3738      	adds	r7, #56	; 0x38
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	e000ed04 	.word	0xe000ed04

0800792c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007938:	2b00      	cmp	r3, #0
 800793a:	d006      	beq.n	800794a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007946:	60fb      	str	r3, [r7, #12]
 8007948:	e001      	b.n	800794e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800794a:	2300      	movs	r3, #0
 800794c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800794e:	68fb      	ldr	r3, [r7, #12]
	}
 8007950:	4618      	mov	r0, r3
 8007952:	3714      	adds	r7, #20
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007968:	2300      	movs	r3, #0
 800796a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007970:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007976:	2b00      	cmp	r3, #0
 8007978:	d10d      	bne.n	8007996 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d14d      	bne.n	8007a1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	4618      	mov	r0, r3
 8007988:	f000 fffa 	bl	8008980 <xTaskPriorityDisinherit>
 800798c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	609a      	str	r2, [r3, #8]
 8007994:	e043      	b.n	8007a1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d119      	bne.n	80079d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6858      	ldr	r0, [r3, #4]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a4:	461a      	mov	r2, r3
 80079a6:	68b9      	ldr	r1, [r7, #8]
 80079a8:	f004 f806 	bl	800b9b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b4:	441a      	add	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	685a      	ldr	r2, [r3, #4]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d32b      	bcc.n	8007a1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	605a      	str	r2, [r3, #4]
 80079ce:	e026      	b.n	8007a1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	68d8      	ldr	r0, [r3, #12]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d8:	461a      	mov	r2, r3
 80079da:	68b9      	ldr	r1, [r7, #8]
 80079dc:	f003 ffec 	bl	800b9b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	68da      	ldr	r2, [r3, #12]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e8:	425b      	negs	r3, r3
 80079ea:	441a      	add	r2, r3
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	68da      	ldr	r2, [r3, #12]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d207      	bcs.n	8007a0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	689a      	ldr	r2, [r3, #8]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a04:	425b      	negs	r3, r3
 8007a06:	441a      	add	r2, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d105      	bne.n	8007a1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d002      	beq.n	8007a1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	1c5a      	adds	r2, r3, #1
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007a26:	697b      	ldr	r3, [r7, #20]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3718      	adds	r7, #24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d018      	beq.n	8007a74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68da      	ldr	r2, [r3, #12]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4a:	441a      	add	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	68da      	ldr	r2, [r3, #12]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d303      	bcc.n	8007a64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	68d9      	ldr	r1, [r3, #12]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	6838      	ldr	r0, [r7, #0]
 8007a70:	f003 ffa2 	bl	800b9b8 <memcpy>
	}
}
 8007a74:	bf00      	nop
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a84:	f001 fe06 	bl	8009694 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a90:	e011      	b.n	8007ab6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d012      	beq.n	8007ac0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	3324      	adds	r3, #36	; 0x24
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 fd2a 	bl	80084f8 <xTaskRemoveFromEventList>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d001      	beq.n	8007aae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007aaa:	f000 fe01 	bl	80086b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007aae:	7bfb      	ldrb	r3, [r7, #15]
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	dce9      	bgt.n	8007a92 <prvUnlockQueue+0x16>
 8007abe:	e000      	b.n	8007ac2 <prvUnlockQueue+0x46>
					break;
 8007ac0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	22ff      	movs	r2, #255	; 0xff
 8007ac6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007aca:	f001 fe13 	bl	80096f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007ace:	f001 fde1 	bl	8009694 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ad8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ada:	e011      	b.n	8007b00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d012      	beq.n	8007b0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	3310      	adds	r3, #16
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f000 fd05 	bl	80084f8 <xTaskRemoveFromEventList>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007af4:	f000 fddc 	bl	80086b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007af8:	7bbb      	ldrb	r3, [r7, #14]
 8007afa:	3b01      	subs	r3, #1
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	dce9      	bgt.n	8007adc <prvUnlockQueue+0x60>
 8007b08:	e000      	b.n	8007b0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007b0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	22ff      	movs	r2, #255	; 0xff
 8007b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007b14:	f001 fdee 	bl	80096f4 <vPortExitCritical>
}
 8007b18:	bf00      	nop
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b28:	f001 fdb4 	bl	8009694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d102      	bne.n	8007b3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b34:	2301      	movs	r3, #1
 8007b36:	60fb      	str	r3, [r7, #12]
 8007b38:	e001      	b.n	8007b3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b3e:	f001 fdd9 	bl	80096f4 <vPortExitCritical>

	return xReturn;
 8007b42:	68fb      	ldr	r3, [r7, #12]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3710      	adds	r7, #16
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b54:	f001 fd9e 	bl	8009694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d102      	bne.n	8007b6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b64:	2301      	movs	r3, #1
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	e001      	b.n	8007b6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b6e:	f001 fdc1 	bl	80096f4 <vPortExitCritical>

	return xReturn;
 8007b72:	68fb      	ldr	r3, [r7, #12]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b86:	2300      	movs	r3, #0
 8007b88:	60fb      	str	r3, [r7, #12]
 8007b8a:	e014      	b.n	8007bb6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007b8c:	4a0f      	ldr	r2, [pc, #60]	; (8007bcc <vQueueAddToRegistry+0x50>)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10b      	bne.n	8007bb0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007b98:	490c      	ldr	r1, [pc, #48]	; (8007bcc <vQueueAddToRegistry+0x50>)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	683a      	ldr	r2, [r7, #0]
 8007b9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007ba2:	4a0a      	ldr	r2, [pc, #40]	; (8007bcc <vQueueAddToRegistry+0x50>)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	00db      	lsls	r3, r3, #3
 8007ba8:	4413      	add	r3, r2
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007bae:	e006      	b.n	8007bbe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	60fb      	str	r3, [r7, #12]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2b07      	cmp	r3, #7
 8007bba:	d9e7      	bls.n	8007b8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007bbc:	bf00      	nop
 8007bbe:	bf00      	nop
 8007bc0:	3714      	adds	r7, #20
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	20001c64 	.word	0x20001c64

08007bd0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007be0:	f001 fd58 	bl	8009694 <vPortEnterCritical>
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bea:	b25b      	sxtb	r3, r3
 8007bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf0:	d103      	bne.n	8007bfa <vQueueWaitForMessageRestricted+0x2a>
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c00:	b25b      	sxtb	r3, r3
 8007c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c06:	d103      	bne.n	8007c10 <vQueueWaitForMessageRestricted+0x40>
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c10:	f001 fd70 	bl	80096f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d106      	bne.n	8007c2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	3324      	adds	r3, #36	; 0x24
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	68b9      	ldr	r1, [r7, #8]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f000 fc3b 	bl	80084a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007c2a:	6978      	ldr	r0, [r7, #20]
 8007c2c:	f7ff ff26 	bl	8007a7c <prvUnlockQueue>
	}
 8007c30:	bf00      	nop
 8007c32:	3718      	adds	r7, #24
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b08e      	sub	sp, #56	; 0x38
 8007c3c:	af04      	add	r7, sp, #16
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
 8007c44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10a      	bne.n	8007c62 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	623b      	str	r3, [r7, #32]
}
 8007c5e:	bf00      	nop
 8007c60:	e7fe      	b.n	8007c60 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10a      	bne.n	8007c7e <xTaskCreateStatic+0x46>
	__asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	61fb      	str	r3, [r7, #28]
}
 8007c7a:	bf00      	nop
 8007c7c:	e7fe      	b.n	8007c7c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007c7e:	235c      	movs	r3, #92	; 0x5c
 8007c80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	2b5c      	cmp	r3, #92	; 0x5c
 8007c86:	d00a      	beq.n	8007c9e <xTaskCreateStatic+0x66>
	__asm volatile
 8007c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8c:	f383 8811 	msr	BASEPRI, r3
 8007c90:	f3bf 8f6f 	isb	sy
 8007c94:	f3bf 8f4f 	dsb	sy
 8007c98:	61bb      	str	r3, [r7, #24]
}
 8007c9a:	bf00      	nop
 8007c9c:	e7fe      	b.n	8007c9c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007c9e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d01e      	beq.n	8007ce4 <xTaskCreateStatic+0xac>
 8007ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d01b      	beq.n	8007ce4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cb4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb8:	2202      	movs	r2, #2
 8007cba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	9303      	str	r3, [sp, #12]
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc4:	9302      	str	r3, [sp, #8]
 8007cc6:	f107 0314 	add.w	r3, r7, #20
 8007cca:	9301      	str	r3, [sp, #4]
 8007ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	68b9      	ldr	r1, [r7, #8]
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f000 f850 	bl	8007d7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007cdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cde:	f000 f8dd 	bl	8007e9c <prvAddNewTaskToReadyList>
 8007ce2:	e001      	b.n	8007ce8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ce8:	697b      	ldr	r3, [r7, #20]
	}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3728      	adds	r7, #40	; 0x28
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b08c      	sub	sp, #48	; 0x30
 8007cf6:	af04      	add	r7, sp, #16
 8007cf8:	60f8      	str	r0, [r7, #12]
 8007cfa:	60b9      	str	r1, [r7, #8]
 8007cfc:	603b      	str	r3, [r7, #0]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d02:	88fb      	ldrh	r3, [r7, #6]
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4618      	mov	r0, r3
 8007d08:	f001 fde6 	bl	80098d8 <pvPortMalloc>
 8007d0c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00e      	beq.n	8007d32 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d14:	205c      	movs	r0, #92	; 0x5c
 8007d16:	f001 fddf 	bl	80098d8 <pvPortMalloc>
 8007d1a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	697a      	ldr	r2, [r7, #20]
 8007d26:	631a      	str	r2, [r3, #48]	; 0x30
 8007d28:	e005      	b.n	8007d36 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d2a:	6978      	ldr	r0, [r7, #20]
 8007d2c:	f001 fea0 	bl	8009a70 <vPortFree>
 8007d30:	e001      	b.n	8007d36 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d32:	2300      	movs	r3, #0
 8007d34:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d017      	beq.n	8007d6c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d44:	88fa      	ldrh	r2, [r7, #6]
 8007d46:	2300      	movs	r3, #0
 8007d48:	9303      	str	r3, [sp, #12]
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	9302      	str	r3, [sp, #8]
 8007d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d50:	9301      	str	r3, [sp, #4]
 8007d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	68b9      	ldr	r1, [r7, #8]
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f000 f80e 	bl	8007d7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d60:	69f8      	ldr	r0, [r7, #28]
 8007d62:	f000 f89b 	bl	8007e9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007d66:	2301      	movs	r3, #1
 8007d68:	61bb      	str	r3, [r7, #24]
 8007d6a:	e002      	b.n	8007d72 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007d72:	69bb      	ldr	r3, [r7, #24]
	}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3720      	adds	r7, #32
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b088      	sub	sp, #32
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
 8007d88:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	461a      	mov	r2, r3
 8007d94:	21a5      	movs	r1, #165	; 0xa5
 8007d96:	f003 fe1d 	bl	800b9d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007da4:	3b01      	subs	r3, #1
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	4413      	add	r3, r2
 8007daa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	f023 0307 	bic.w	r3, r3, #7
 8007db2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	f003 0307 	and.w	r3, r3, #7
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00a      	beq.n	8007dd4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	617b      	str	r3, [r7, #20]
}
 8007dd0:	bf00      	nop
 8007dd2:	e7fe      	b.n	8007dd2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d01f      	beq.n	8007e1a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007dda:	2300      	movs	r3, #0
 8007ddc:	61fb      	str	r3, [r7, #28]
 8007dde:	e012      	b.n	8007e06 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	4413      	add	r3, r2
 8007de6:	7819      	ldrb	r1, [r3, #0]
 8007de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	4413      	add	r3, r2
 8007dee:	3334      	adds	r3, #52	; 0x34
 8007df0:	460a      	mov	r2, r1
 8007df2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	4413      	add	r3, r2
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d006      	beq.n	8007e0e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	3301      	adds	r3, #1
 8007e04:	61fb      	str	r3, [r7, #28]
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	2b0f      	cmp	r3, #15
 8007e0a:	d9e9      	bls.n	8007de0 <prvInitialiseNewTask+0x64>
 8007e0c:	e000      	b.n	8007e10 <prvInitialiseNewTask+0x94>
			{
				break;
 8007e0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e18:	e003      	b.n	8007e22 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e24:	2b37      	cmp	r3, #55	; 0x37
 8007e26:	d901      	bls.n	8007e2c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e28:	2337      	movs	r3, #55	; 0x37
 8007e2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e36:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e40:	3304      	adds	r3, #4
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7ff f854 	bl	8006ef0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4a:	3318      	adds	r3, #24
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7ff f84f 	bl	8006ef0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	68f9      	ldr	r1, [r7, #12]
 8007e7a:	69b8      	ldr	r0, [r7, #24]
 8007e7c:	f001 fae0 	bl	8009440 <pxPortInitialiseStack>
 8007e80:	4602      	mov	r2, r0
 8007e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d002      	beq.n	8007e92 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e92:	bf00      	nop
 8007e94:	3720      	adds	r7, #32
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
	...

08007e9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ea4:	f001 fbf6 	bl	8009694 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ea8:	4b2d      	ldr	r3, [pc, #180]	; (8007f60 <prvAddNewTaskToReadyList+0xc4>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	3301      	adds	r3, #1
 8007eae:	4a2c      	ldr	r2, [pc, #176]	; (8007f60 <prvAddNewTaskToReadyList+0xc4>)
 8007eb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007eb2:	4b2c      	ldr	r3, [pc, #176]	; (8007f64 <prvAddNewTaskToReadyList+0xc8>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d109      	bne.n	8007ece <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007eba:	4a2a      	ldr	r2, [pc, #168]	; (8007f64 <prvAddNewTaskToReadyList+0xc8>)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ec0:	4b27      	ldr	r3, [pc, #156]	; (8007f60 <prvAddNewTaskToReadyList+0xc4>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d110      	bne.n	8007eea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ec8:	f000 fc16 	bl	80086f8 <prvInitialiseTaskLists>
 8007ecc:	e00d      	b.n	8007eea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007ece:	4b26      	ldr	r3, [pc, #152]	; (8007f68 <prvAddNewTaskToReadyList+0xcc>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d109      	bne.n	8007eea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ed6:	4b23      	ldr	r3, [pc, #140]	; (8007f64 <prvAddNewTaskToReadyList+0xc8>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d802      	bhi.n	8007eea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ee4:	4a1f      	ldr	r2, [pc, #124]	; (8007f64 <prvAddNewTaskToReadyList+0xc8>)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007eea:	4b20      	ldr	r3, [pc, #128]	; (8007f6c <prvAddNewTaskToReadyList+0xd0>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	4a1e      	ldr	r2, [pc, #120]	; (8007f6c <prvAddNewTaskToReadyList+0xd0>)
 8007ef2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ef4:	4b1d      	ldr	r3, [pc, #116]	; (8007f6c <prvAddNewTaskToReadyList+0xd0>)
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f00:	4b1b      	ldr	r3, [pc, #108]	; (8007f70 <prvAddNewTaskToReadyList+0xd4>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d903      	bls.n	8007f10 <prvAddNewTaskToReadyList+0x74>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0c:	4a18      	ldr	r2, [pc, #96]	; (8007f70 <prvAddNewTaskToReadyList+0xd4>)
 8007f0e:	6013      	str	r3, [r2, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f14:	4613      	mov	r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4a15      	ldr	r2, [pc, #84]	; (8007f74 <prvAddNewTaskToReadyList+0xd8>)
 8007f1e:	441a      	add	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	3304      	adds	r3, #4
 8007f24:	4619      	mov	r1, r3
 8007f26:	4610      	mov	r0, r2
 8007f28:	f7fe ffef 	bl	8006f0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f2c:	f001 fbe2 	bl	80096f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f30:	4b0d      	ldr	r3, [pc, #52]	; (8007f68 <prvAddNewTaskToReadyList+0xcc>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00e      	beq.n	8007f56 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f38:	4b0a      	ldr	r3, [pc, #40]	; (8007f64 <prvAddNewTaskToReadyList+0xc8>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d207      	bcs.n	8007f56 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f46:	4b0c      	ldr	r3, [pc, #48]	; (8007f78 <prvAddNewTaskToReadyList+0xdc>)
 8007f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f4c:	601a      	str	r2, [r3, #0]
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f56:	bf00      	nop
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	20002178 	.word	0x20002178
 8007f64:	20001ca4 	.word	0x20001ca4
 8007f68:	20002184 	.word	0x20002184
 8007f6c:	20002194 	.word	0x20002194
 8007f70:	20002180 	.word	0x20002180
 8007f74:	20001ca8 	.word	0x20001ca8
 8007f78:	e000ed04 	.word	0xe000ed04

08007f7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007f84:	2300      	movs	r3, #0
 8007f86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d017      	beq.n	8007fbe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007f8e:	4b13      	ldr	r3, [pc, #76]	; (8007fdc <vTaskDelay+0x60>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00a      	beq.n	8007fac <vTaskDelay+0x30>
	__asm volatile
 8007f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9a:	f383 8811 	msr	BASEPRI, r3
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f3bf 8f4f 	dsb	sy
 8007fa6:	60bb      	str	r3, [r7, #8]
}
 8007fa8:	bf00      	nop
 8007faa:	e7fe      	b.n	8007faa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007fac:	f000 f880 	bl	80080b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fde8 	bl	8008b88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007fb8:	f000 f888 	bl	80080cc <xTaskResumeAll>
 8007fbc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d107      	bne.n	8007fd4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007fc4:	4b06      	ldr	r3, [pc, #24]	; (8007fe0 <vTaskDelay+0x64>)
 8007fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fca:	601a      	str	r2, [r3, #0]
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007fd4:	bf00      	nop
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	200021a0 	.word	0x200021a0
 8007fe0:	e000ed04 	.word	0xe000ed04

08007fe4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b08a      	sub	sp, #40	; 0x28
 8007fe8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007fea:	2300      	movs	r3, #0
 8007fec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007ff2:	463a      	mov	r2, r7
 8007ff4:	1d39      	adds	r1, r7, #4
 8007ff6:	f107 0308 	add.w	r3, r7, #8
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fe ff24 	bl	8006e48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	9202      	str	r2, [sp, #8]
 8008008:	9301      	str	r3, [sp, #4]
 800800a:	2300      	movs	r3, #0
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	2300      	movs	r3, #0
 8008010:	460a      	mov	r2, r1
 8008012:	4921      	ldr	r1, [pc, #132]	; (8008098 <vTaskStartScheduler+0xb4>)
 8008014:	4821      	ldr	r0, [pc, #132]	; (800809c <vTaskStartScheduler+0xb8>)
 8008016:	f7ff fe0f 	bl	8007c38 <xTaskCreateStatic>
 800801a:	4603      	mov	r3, r0
 800801c:	4a20      	ldr	r2, [pc, #128]	; (80080a0 <vTaskStartScheduler+0xbc>)
 800801e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008020:	4b1f      	ldr	r3, [pc, #124]	; (80080a0 <vTaskStartScheduler+0xbc>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d002      	beq.n	800802e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008028:	2301      	movs	r3, #1
 800802a:	617b      	str	r3, [r7, #20]
 800802c:	e001      	b.n	8008032 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800802e:	2300      	movs	r3, #0
 8008030:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d102      	bne.n	800803e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008038:	f000 fdfa 	bl	8008c30 <xTimerCreateTimerTask>
 800803c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d116      	bne.n	8008072 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008048:	f383 8811 	msr	BASEPRI, r3
 800804c:	f3bf 8f6f 	isb	sy
 8008050:	f3bf 8f4f 	dsb	sy
 8008054:	613b      	str	r3, [r7, #16]
}
 8008056:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008058:	4b12      	ldr	r3, [pc, #72]	; (80080a4 <vTaskStartScheduler+0xc0>)
 800805a:	f04f 32ff 	mov.w	r2, #4294967295
 800805e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008060:	4b11      	ldr	r3, [pc, #68]	; (80080a8 <vTaskStartScheduler+0xc4>)
 8008062:	2201      	movs	r2, #1
 8008064:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008066:	4b11      	ldr	r3, [pc, #68]	; (80080ac <vTaskStartScheduler+0xc8>)
 8008068:	2200      	movs	r2, #0
 800806a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800806c:	f001 fa70 	bl	8009550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008070:	e00e      	b.n	8008090 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008078:	d10a      	bne.n	8008090 <vTaskStartScheduler+0xac>
	__asm volatile
 800807a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	60fb      	str	r3, [r7, #12]
}
 800808c:	bf00      	nop
 800808e:	e7fe      	b.n	800808e <vTaskStartScheduler+0xaa>
}
 8008090:	bf00      	nop
 8008092:	3718      	adds	r7, #24
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	0800c364 	.word	0x0800c364
 800809c:	080086c9 	.word	0x080086c9
 80080a0:	2000219c 	.word	0x2000219c
 80080a4:	20002198 	.word	0x20002198
 80080a8:	20002184 	.word	0x20002184
 80080ac:	2000217c 	.word	0x2000217c

080080b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80080b0:	b480      	push	{r7}
 80080b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80080b4:	4b04      	ldr	r3, [pc, #16]	; (80080c8 <vTaskSuspendAll+0x18>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	3301      	adds	r3, #1
 80080ba:	4a03      	ldr	r2, [pc, #12]	; (80080c8 <vTaskSuspendAll+0x18>)
 80080bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80080be:	bf00      	nop
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	200021a0 	.word	0x200021a0

080080cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80080d2:	2300      	movs	r3, #0
 80080d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80080d6:	2300      	movs	r3, #0
 80080d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80080da:	4b42      	ldr	r3, [pc, #264]	; (80081e4 <xTaskResumeAll+0x118>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10a      	bne.n	80080f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80080e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	603b      	str	r3, [r7, #0]
}
 80080f4:	bf00      	nop
 80080f6:	e7fe      	b.n	80080f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80080f8:	f001 facc 	bl	8009694 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80080fc:	4b39      	ldr	r3, [pc, #228]	; (80081e4 <xTaskResumeAll+0x118>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	3b01      	subs	r3, #1
 8008102:	4a38      	ldr	r2, [pc, #224]	; (80081e4 <xTaskResumeAll+0x118>)
 8008104:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008106:	4b37      	ldr	r3, [pc, #220]	; (80081e4 <xTaskResumeAll+0x118>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d162      	bne.n	80081d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800810e:	4b36      	ldr	r3, [pc, #216]	; (80081e8 <xTaskResumeAll+0x11c>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d05e      	beq.n	80081d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008116:	e02f      	b.n	8008178 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008118:	4b34      	ldr	r3, [pc, #208]	; (80081ec <xTaskResumeAll+0x120>)
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	3318      	adds	r3, #24
 8008124:	4618      	mov	r0, r3
 8008126:	f7fe ff4d 	bl	8006fc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3304      	adds	r3, #4
 800812e:	4618      	mov	r0, r3
 8008130:	f7fe ff48 	bl	8006fc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008138:	4b2d      	ldr	r3, [pc, #180]	; (80081f0 <xTaskResumeAll+0x124>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	429a      	cmp	r2, r3
 800813e:	d903      	bls.n	8008148 <xTaskResumeAll+0x7c>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008144:	4a2a      	ldr	r2, [pc, #168]	; (80081f0 <xTaskResumeAll+0x124>)
 8008146:	6013      	str	r3, [r2, #0]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800814c:	4613      	mov	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4a27      	ldr	r2, [pc, #156]	; (80081f4 <xTaskResumeAll+0x128>)
 8008156:	441a      	add	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	3304      	adds	r3, #4
 800815c:	4619      	mov	r1, r3
 800815e:	4610      	mov	r0, r2
 8008160:	f7fe fed3 	bl	8006f0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008168:	4b23      	ldr	r3, [pc, #140]	; (80081f8 <xTaskResumeAll+0x12c>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816e:	429a      	cmp	r2, r3
 8008170:	d302      	bcc.n	8008178 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008172:	4b22      	ldr	r3, [pc, #136]	; (80081fc <xTaskResumeAll+0x130>)
 8008174:	2201      	movs	r2, #1
 8008176:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008178:	4b1c      	ldr	r3, [pc, #112]	; (80081ec <xTaskResumeAll+0x120>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1cb      	bne.n	8008118 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008186:	f000 fb55 	bl	8008834 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800818a:	4b1d      	ldr	r3, [pc, #116]	; (8008200 <xTaskResumeAll+0x134>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d010      	beq.n	80081b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008196:	f000 f847 	bl	8008228 <xTaskIncrementTick>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d002      	beq.n	80081a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80081a0:	4b16      	ldr	r3, [pc, #88]	; (80081fc <xTaskResumeAll+0x130>)
 80081a2:	2201      	movs	r2, #1
 80081a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	3b01      	subs	r3, #1
 80081aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1f1      	bne.n	8008196 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80081b2:	4b13      	ldr	r3, [pc, #76]	; (8008200 <xTaskResumeAll+0x134>)
 80081b4:	2200      	movs	r2, #0
 80081b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80081b8:	4b10      	ldr	r3, [pc, #64]	; (80081fc <xTaskResumeAll+0x130>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d009      	beq.n	80081d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80081c0:	2301      	movs	r3, #1
 80081c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80081c4:	4b0f      	ldr	r3, [pc, #60]	; (8008204 <xTaskResumeAll+0x138>)
 80081c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ca:	601a      	str	r2, [r3, #0]
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081d4:	f001 fa8e 	bl	80096f4 <vPortExitCritical>

	return xAlreadyYielded;
 80081d8:	68bb      	ldr	r3, [r7, #8]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	200021a0 	.word	0x200021a0
 80081e8:	20002178 	.word	0x20002178
 80081ec:	20002138 	.word	0x20002138
 80081f0:	20002180 	.word	0x20002180
 80081f4:	20001ca8 	.word	0x20001ca8
 80081f8:	20001ca4 	.word	0x20001ca4
 80081fc:	2000218c 	.word	0x2000218c
 8008200:	20002188 	.word	0x20002188
 8008204:	e000ed04 	.word	0xe000ed04

08008208 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800820e:	4b05      	ldr	r3, [pc, #20]	; (8008224 <xTaskGetTickCount+0x1c>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008214:	687b      	ldr	r3, [r7, #4]
}
 8008216:	4618      	mov	r0, r3
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	2000217c 	.word	0x2000217c

08008228 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800822e:	2300      	movs	r3, #0
 8008230:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008232:	4b4f      	ldr	r3, [pc, #316]	; (8008370 <xTaskIncrementTick+0x148>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	f040 808f 	bne.w	800835a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800823c:	4b4d      	ldr	r3, [pc, #308]	; (8008374 <xTaskIncrementTick+0x14c>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	3301      	adds	r3, #1
 8008242:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008244:	4a4b      	ldr	r2, [pc, #300]	; (8008374 <xTaskIncrementTick+0x14c>)
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d120      	bne.n	8008292 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008250:	4b49      	ldr	r3, [pc, #292]	; (8008378 <xTaskIncrementTick+0x150>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00a      	beq.n	8008270 <xTaskIncrementTick+0x48>
	__asm volatile
 800825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	603b      	str	r3, [r7, #0]
}
 800826c:	bf00      	nop
 800826e:	e7fe      	b.n	800826e <xTaskIncrementTick+0x46>
 8008270:	4b41      	ldr	r3, [pc, #260]	; (8008378 <xTaskIncrementTick+0x150>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	60fb      	str	r3, [r7, #12]
 8008276:	4b41      	ldr	r3, [pc, #260]	; (800837c <xTaskIncrementTick+0x154>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a3f      	ldr	r2, [pc, #252]	; (8008378 <xTaskIncrementTick+0x150>)
 800827c:	6013      	str	r3, [r2, #0]
 800827e:	4a3f      	ldr	r2, [pc, #252]	; (800837c <xTaskIncrementTick+0x154>)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6013      	str	r3, [r2, #0]
 8008284:	4b3e      	ldr	r3, [pc, #248]	; (8008380 <xTaskIncrementTick+0x158>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	3301      	adds	r3, #1
 800828a:	4a3d      	ldr	r2, [pc, #244]	; (8008380 <xTaskIncrementTick+0x158>)
 800828c:	6013      	str	r3, [r2, #0]
 800828e:	f000 fad1 	bl	8008834 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008292:	4b3c      	ldr	r3, [pc, #240]	; (8008384 <xTaskIncrementTick+0x15c>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	693a      	ldr	r2, [r7, #16]
 8008298:	429a      	cmp	r2, r3
 800829a:	d349      	bcc.n	8008330 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800829c:	4b36      	ldr	r3, [pc, #216]	; (8008378 <xTaskIncrementTick+0x150>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d104      	bne.n	80082b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082a6:	4b37      	ldr	r3, [pc, #220]	; (8008384 <xTaskIncrementTick+0x15c>)
 80082a8:	f04f 32ff 	mov.w	r2, #4294967295
 80082ac:	601a      	str	r2, [r3, #0]
					break;
 80082ae:	e03f      	b.n	8008330 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082b0:	4b31      	ldr	r3, [pc, #196]	; (8008378 <xTaskIncrementTick+0x150>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d203      	bcs.n	80082d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80082c8:	4a2e      	ldr	r2, [pc, #184]	; (8008384 <xTaskIncrementTick+0x15c>)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80082ce:	e02f      	b.n	8008330 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	3304      	adds	r3, #4
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fe fe75 	bl	8006fc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d004      	beq.n	80082ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	3318      	adds	r3, #24
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7fe fe6c 	bl	8006fc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f0:	4b25      	ldr	r3, [pc, #148]	; (8008388 <xTaskIncrementTick+0x160>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d903      	bls.n	8008300 <xTaskIncrementTick+0xd8>
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fc:	4a22      	ldr	r2, [pc, #136]	; (8008388 <xTaskIncrementTick+0x160>)
 80082fe:	6013      	str	r3, [r2, #0]
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008304:	4613      	mov	r3, r2
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4413      	add	r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4a1f      	ldr	r2, [pc, #124]	; (800838c <xTaskIncrementTick+0x164>)
 800830e:	441a      	add	r2, r3
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	3304      	adds	r3, #4
 8008314:	4619      	mov	r1, r3
 8008316:	4610      	mov	r0, r2
 8008318:	f7fe fdf7 	bl	8006f0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008320:	4b1b      	ldr	r3, [pc, #108]	; (8008390 <xTaskIncrementTick+0x168>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008326:	429a      	cmp	r2, r3
 8008328:	d3b8      	bcc.n	800829c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800832a:	2301      	movs	r3, #1
 800832c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800832e:	e7b5      	b.n	800829c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008330:	4b17      	ldr	r3, [pc, #92]	; (8008390 <xTaskIncrementTick+0x168>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008336:	4915      	ldr	r1, [pc, #84]	; (800838c <xTaskIncrementTick+0x164>)
 8008338:	4613      	mov	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4413      	add	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	440b      	add	r3, r1
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d901      	bls.n	800834c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008348:	2301      	movs	r3, #1
 800834a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800834c:	4b11      	ldr	r3, [pc, #68]	; (8008394 <xTaskIncrementTick+0x16c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d007      	beq.n	8008364 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008354:	2301      	movs	r3, #1
 8008356:	617b      	str	r3, [r7, #20]
 8008358:	e004      	b.n	8008364 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800835a:	4b0f      	ldr	r3, [pc, #60]	; (8008398 <xTaskIncrementTick+0x170>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3301      	adds	r3, #1
 8008360:	4a0d      	ldr	r2, [pc, #52]	; (8008398 <xTaskIncrementTick+0x170>)
 8008362:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008364:	697b      	ldr	r3, [r7, #20]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3718      	adds	r7, #24
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	200021a0 	.word	0x200021a0
 8008374:	2000217c 	.word	0x2000217c
 8008378:	20002130 	.word	0x20002130
 800837c:	20002134 	.word	0x20002134
 8008380:	20002190 	.word	0x20002190
 8008384:	20002198 	.word	0x20002198
 8008388:	20002180 	.word	0x20002180
 800838c:	20001ca8 	.word	0x20001ca8
 8008390:	20001ca4 	.word	0x20001ca4
 8008394:	2000218c 	.word	0x2000218c
 8008398:	20002188 	.word	0x20002188

0800839c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80083a2:	4b28      	ldr	r3, [pc, #160]	; (8008444 <vTaskSwitchContext+0xa8>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80083aa:	4b27      	ldr	r3, [pc, #156]	; (8008448 <vTaskSwitchContext+0xac>)
 80083ac:	2201      	movs	r2, #1
 80083ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80083b0:	e041      	b.n	8008436 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80083b2:	4b25      	ldr	r3, [pc, #148]	; (8008448 <vTaskSwitchContext+0xac>)
 80083b4:	2200      	movs	r2, #0
 80083b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083b8:	4b24      	ldr	r3, [pc, #144]	; (800844c <vTaskSwitchContext+0xb0>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	60fb      	str	r3, [r7, #12]
 80083be:	e010      	b.n	80083e2 <vTaskSwitchContext+0x46>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10a      	bne.n	80083dc <vTaskSwitchContext+0x40>
	__asm volatile
 80083c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ca:	f383 8811 	msr	BASEPRI, r3
 80083ce:	f3bf 8f6f 	isb	sy
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	607b      	str	r3, [r7, #4]
}
 80083d8:	bf00      	nop
 80083da:	e7fe      	b.n	80083da <vTaskSwitchContext+0x3e>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	3b01      	subs	r3, #1
 80083e0:	60fb      	str	r3, [r7, #12]
 80083e2:	491b      	ldr	r1, [pc, #108]	; (8008450 <vTaskSwitchContext+0xb4>)
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	4613      	mov	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	440b      	add	r3, r1
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d0e4      	beq.n	80083c0 <vTaskSwitchContext+0x24>
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	4613      	mov	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4a13      	ldr	r2, [pc, #76]	; (8008450 <vTaskSwitchContext+0xb4>)
 8008402:	4413      	add	r3, r2
 8008404:	60bb      	str	r3, [r7, #8]
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	605a      	str	r2, [r3, #4]
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	685a      	ldr	r2, [r3, #4]
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	3308      	adds	r3, #8
 8008418:	429a      	cmp	r2, r3
 800841a:	d104      	bne.n	8008426 <vTaskSwitchContext+0x8a>
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	685a      	ldr	r2, [r3, #4]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	605a      	str	r2, [r3, #4]
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	4a09      	ldr	r2, [pc, #36]	; (8008454 <vTaskSwitchContext+0xb8>)
 800842e:	6013      	str	r3, [r2, #0]
 8008430:	4a06      	ldr	r2, [pc, #24]	; (800844c <vTaskSwitchContext+0xb0>)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6013      	str	r3, [r2, #0]
}
 8008436:	bf00      	nop
 8008438:	3714      	adds	r7, #20
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	200021a0 	.word	0x200021a0
 8008448:	2000218c 	.word	0x2000218c
 800844c:	20002180 	.word	0x20002180
 8008450:	20001ca8 	.word	0x20001ca8
 8008454:	20001ca4 	.word	0x20001ca4

08008458 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10a      	bne.n	800847e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846c:	f383 8811 	msr	BASEPRI, r3
 8008470:	f3bf 8f6f 	isb	sy
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	60fb      	str	r3, [r7, #12]
}
 800847a:	bf00      	nop
 800847c:	e7fe      	b.n	800847c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800847e:	4b07      	ldr	r3, [pc, #28]	; (800849c <vTaskPlaceOnEventList+0x44>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	3318      	adds	r3, #24
 8008484:	4619      	mov	r1, r3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f7fe fd63 	bl	8006f52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800848c:	2101      	movs	r1, #1
 800848e:	6838      	ldr	r0, [r7, #0]
 8008490:	f000 fb7a 	bl	8008b88 <prvAddCurrentTaskToDelayedList>
}
 8008494:	bf00      	nop
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	20001ca4 	.word	0x20001ca4

080084a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b086      	sub	sp, #24
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10a      	bne.n	80084c8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80084b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b6:	f383 8811 	msr	BASEPRI, r3
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	617b      	str	r3, [r7, #20]
}
 80084c4:	bf00      	nop
 80084c6:	e7fe      	b.n	80084c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084c8:	4b0a      	ldr	r3, [pc, #40]	; (80084f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	3318      	adds	r3, #24
 80084ce:	4619      	mov	r1, r3
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f7fe fd1a 	bl	8006f0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d002      	beq.n	80084e2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80084dc:	f04f 33ff 	mov.w	r3, #4294967295
 80084e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80084e2:	6879      	ldr	r1, [r7, #4]
 80084e4:	68b8      	ldr	r0, [r7, #8]
 80084e6:	f000 fb4f 	bl	8008b88 <prvAddCurrentTaskToDelayedList>
	}
 80084ea:	bf00      	nop
 80084ec:	3718      	adds	r7, #24
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	20001ca4 	.word	0x20001ca4

080084f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10a      	bne.n	8008524 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	60fb      	str	r3, [r7, #12]
}
 8008520:	bf00      	nop
 8008522:	e7fe      	b.n	8008522 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	3318      	adds	r3, #24
 8008528:	4618      	mov	r0, r3
 800852a:	f7fe fd4b 	bl	8006fc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800852e:	4b1e      	ldr	r3, [pc, #120]	; (80085a8 <xTaskRemoveFromEventList+0xb0>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d11d      	bne.n	8008572 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	3304      	adds	r3, #4
 800853a:	4618      	mov	r0, r3
 800853c:	f7fe fd42 	bl	8006fc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008544:	4b19      	ldr	r3, [pc, #100]	; (80085ac <xTaskRemoveFromEventList+0xb4>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	429a      	cmp	r2, r3
 800854a:	d903      	bls.n	8008554 <xTaskRemoveFromEventList+0x5c>
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008550:	4a16      	ldr	r2, [pc, #88]	; (80085ac <xTaskRemoveFromEventList+0xb4>)
 8008552:	6013      	str	r3, [r2, #0]
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008558:	4613      	mov	r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4413      	add	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	4a13      	ldr	r2, [pc, #76]	; (80085b0 <xTaskRemoveFromEventList+0xb8>)
 8008562:	441a      	add	r2, r3
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	3304      	adds	r3, #4
 8008568:	4619      	mov	r1, r3
 800856a:	4610      	mov	r0, r2
 800856c:	f7fe fccd 	bl	8006f0a <vListInsertEnd>
 8008570:	e005      	b.n	800857e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	3318      	adds	r3, #24
 8008576:	4619      	mov	r1, r3
 8008578:	480e      	ldr	r0, [pc, #56]	; (80085b4 <xTaskRemoveFromEventList+0xbc>)
 800857a:	f7fe fcc6 	bl	8006f0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008582:	4b0d      	ldr	r3, [pc, #52]	; (80085b8 <xTaskRemoveFromEventList+0xc0>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008588:	429a      	cmp	r2, r3
 800858a:	d905      	bls.n	8008598 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800858c:	2301      	movs	r3, #1
 800858e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008590:	4b0a      	ldr	r3, [pc, #40]	; (80085bc <xTaskRemoveFromEventList+0xc4>)
 8008592:	2201      	movs	r2, #1
 8008594:	601a      	str	r2, [r3, #0]
 8008596:	e001      	b.n	800859c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008598:	2300      	movs	r3, #0
 800859a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800859c:	697b      	ldr	r3, [r7, #20]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3718      	adds	r7, #24
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	200021a0 	.word	0x200021a0
 80085ac:	20002180 	.word	0x20002180
 80085b0:	20001ca8 	.word	0x20001ca8
 80085b4:	20002138 	.word	0x20002138
 80085b8:	20001ca4 	.word	0x20001ca4
 80085bc:	2000218c 	.word	0x2000218c

080085c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80085c8:	4b06      	ldr	r3, [pc, #24]	; (80085e4 <vTaskInternalSetTimeOutState+0x24>)
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80085d0:	4b05      	ldr	r3, [pc, #20]	; (80085e8 <vTaskInternalSetTimeOutState+0x28>)
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	605a      	str	r2, [r3, #4]
}
 80085d8:	bf00      	nop
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr
 80085e4:	20002190 	.word	0x20002190
 80085e8:	2000217c 	.word	0x2000217c

080085ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b088      	sub	sp, #32
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10a      	bne.n	8008612 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	613b      	str	r3, [r7, #16]
}
 800860e:	bf00      	nop
 8008610:	e7fe      	b.n	8008610 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d10a      	bne.n	800862e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861c:	f383 8811 	msr	BASEPRI, r3
 8008620:	f3bf 8f6f 	isb	sy
 8008624:	f3bf 8f4f 	dsb	sy
 8008628:	60fb      	str	r3, [r7, #12]
}
 800862a:	bf00      	nop
 800862c:	e7fe      	b.n	800862c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800862e:	f001 f831 	bl	8009694 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008632:	4b1d      	ldr	r3, [pc, #116]	; (80086a8 <xTaskCheckForTimeOut+0xbc>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	69ba      	ldr	r2, [r7, #24]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800864a:	d102      	bne.n	8008652 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800864c:	2300      	movs	r3, #0
 800864e:	61fb      	str	r3, [r7, #28]
 8008650:	e023      	b.n	800869a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	4b15      	ldr	r3, [pc, #84]	; (80086ac <xTaskCheckForTimeOut+0xc0>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	429a      	cmp	r2, r3
 800865c:	d007      	beq.n	800866e <xTaskCheckForTimeOut+0x82>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	69ba      	ldr	r2, [r7, #24]
 8008664:	429a      	cmp	r2, r3
 8008666:	d302      	bcc.n	800866e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008668:	2301      	movs	r3, #1
 800866a:	61fb      	str	r3, [r7, #28]
 800866c:	e015      	b.n	800869a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	429a      	cmp	r2, r3
 8008676:	d20b      	bcs.n	8008690 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	1ad2      	subs	r2, r2, r3
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f7ff ff9b 	bl	80085c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800868a:	2300      	movs	r3, #0
 800868c:	61fb      	str	r3, [r7, #28]
 800868e:	e004      	b.n	800869a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	2200      	movs	r2, #0
 8008694:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008696:	2301      	movs	r3, #1
 8008698:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800869a:	f001 f82b 	bl	80096f4 <vPortExitCritical>

	return xReturn;
 800869e:	69fb      	ldr	r3, [r7, #28]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3720      	adds	r7, #32
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	2000217c 	.word	0x2000217c
 80086ac:	20002190 	.word	0x20002190

080086b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80086b0:	b480      	push	{r7}
 80086b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80086b4:	4b03      	ldr	r3, [pc, #12]	; (80086c4 <vTaskMissedYield+0x14>)
 80086b6:	2201      	movs	r2, #1
 80086b8:	601a      	str	r2, [r3, #0]
}
 80086ba:	bf00      	nop
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr
 80086c4:	2000218c 	.word	0x2000218c

080086c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80086d0:	f000 f852 	bl	8008778 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80086d4:	4b06      	ldr	r3, [pc, #24]	; (80086f0 <prvIdleTask+0x28>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d9f9      	bls.n	80086d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80086dc:	4b05      	ldr	r3, [pc, #20]	; (80086f4 <prvIdleTask+0x2c>)
 80086de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80086ec:	e7f0      	b.n	80086d0 <prvIdleTask+0x8>
 80086ee:	bf00      	nop
 80086f0:	20001ca8 	.word	0x20001ca8
 80086f4:	e000ed04 	.word	0xe000ed04

080086f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086fe:	2300      	movs	r3, #0
 8008700:	607b      	str	r3, [r7, #4]
 8008702:	e00c      	b.n	800871e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	4613      	mov	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4a12      	ldr	r2, [pc, #72]	; (8008758 <prvInitialiseTaskLists+0x60>)
 8008710:	4413      	add	r3, r2
 8008712:	4618      	mov	r0, r3
 8008714:	f7fe fbcc 	bl	8006eb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3301      	adds	r3, #1
 800871c:	607b      	str	r3, [r7, #4]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b37      	cmp	r3, #55	; 0x37
 8008722:	d9ef      	bls.n	8008704 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008724:	480d      	ldr	r0, [pc, #52]	; (800875c <prvInitialiseTaskLists+0x64>)
 8008726:	f7fe fbc3 	bl	8006eb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800872a:	480d      	ldr	r0, [pc, #52]	; (8008760 <prvInitialiseTaskLists+0x68>)
 800872c:	f7fe fbc0 	bl	8006eb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008730:	480c      	ldr	r0, [pc, #48]	; (8008764 <prvInitialiseTaskLists+0x6c>)
 8008732:	f7fe fbbd 	bl	8006eb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008736:	480c      	ldr	r0, [pc, #48]	; (8008768 <prvInitialiseTaskLists+0x70>)
 8008738:	f7fe fbba 	bl	8006eb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800873c:	480b      	ldr	r0, [pc, #44]	; (800876c <prvInitialiseTaskLists+0x74>)
 800873e:	f7fe fbb7 	bl	8006eb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008742:	4b0b      	ldr	r3, [pc, #44]	; (8008770 <prvInitialiseTaskLists+0x78>)
 8008744:	4a05      	ldr	r2, [pc, #20]	; (800875c <prvInitialiseTaskLists+0x64>)
 8008746:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008748:	4b0a      	ldr	r3, [pc, #40]	; (8008774 <prvInitialiseTaskLists+0x7c>)
 800874a:	4a05      	ldr	r2, [pc, #20]	; (8008760 <prvInitialiseTaskLists+0x68>)
 800874c:	601a      	str	r2, [r3, #0]
}
 800874e:	bf00      	nop
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	20001ca8 	.word	0x20001ca8
 800875c:	20002108 	.word	0x20002108
 8008760:	2000211c 	.word	0x2000211c
 8008764:	20002138 	.word	0x20002138
 8008768:	2000214c 	.word	0x2000214c
 800876c:	20002164 	.word	0x20002164
 8008770:	20002130 	.word	0x20002130
 8008774:	20002134 	.word	0x20002134

08008778 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800877e:	e019      	b.n	80087b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008780:	f000 ff88 	bl	8009694 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008784:	4b10      	ldr	r3, [pc, #64]	; (80087c8 <prvCheckTasksWaitingTermination+0x50>)
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	3304      	adds	r3, #4
 8008790:	4618      	mov	r0, r3
 8008792:	f7fe fc17 	bl	8006fc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008796:	4b0d      	ldr	r3, [pc, #52]	; (80087cc <prvCheckTasksWaitingTermination+0x54>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	3b01      	subs	r3, #1
 800879c:	4a0b      	ldr	r2, [pc, #44]	; (80087cc <prvCheckTasksWaitingTermination+0x54>)
 800879e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80087a0:	4b0b      	ldr	r3, [pc, #44]	; (80087d0 <prvCheckTasksWaitingTermination+0x58>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	3b01      	subs	r3, #1
 80087a6:	4a0a      	ldr	r2, [pc, #40]	; (80087d0 <prvCheckTasksWaitingTermination+0x58>)
 80087a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80087aa:	f000 ffa3 	bl	80096f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f810 	bl	80087d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087b4:	4b06      	ldr	r3, [pc, #24]	; (80087d0 <prvCheckTasksWaitingTermination+0x58>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1e1      	bne.n	8008780 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80087bc:	bf00      	nop
 80087be:	bf00      	nop
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	2000214c 	.word	0x2000214c
 80087cc:	20002178 	.word	0x20002178
 80087d0:	20002160 	.word	0x20002160

080087d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d108      	bne.n	80087f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ea:	4618      	mov	r0, r3
 80087ec:	f001 f940 	bl	8009a70 <vPortFree>
				vPortFree( pxTCB );
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f001 f93d 	bl	8009a70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80087f6:	e018      	b.n	800882a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d103      	bne.n	800880a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f001 f934 	bl	8009a70 <vPortFree>
	}
 8008808:	e00f      	b.n	800882a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008810:	2b02      	cmp	r3, #2
 8008812:	d00a      	beq.n	800882a <prvDeleteTCB+0x56>
	__asm volatile
 8008814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008818:	f383 8811 	msr	BASEPRI, r3
 800881c:	f3bf 8f6f 	isb	sy
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	60fb      	str	r3, [r7, #12]
}
 8008826:	bf00      	nop
 8008828:	e7fe      	b.n	8008828 <prvDeleteTCB+0x54>
	}
 800882a:	bf00      	nop
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
	...

08008834 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800883a:	4b0c      	ldr	r3, [pc, #48]	; (800886c <prvResetNextTaskUnblockTime+0x38>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d104      	bne.n	800884e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008844:	4b0a      	ldr	r3, [pc, #40]	; (8008870 <prvResetNextTaskUnblockTime+0x3c>)
 8008846:	f04f 32ff 	mov.w	r2, #4294967295
 800884a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800884c:	e008      	b.n	8008860 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800884e:	4b07      	ldr	r3, [pc, #28]	; (800886c <prvResetNextTaskUnblockTime+0x38>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	4a04      	ldr	r2, [pc, #16]	; (8008870 <prvResetNextTaskUnblockTime+0x3c>)
 800885e:	6013      	str	r3, [r2, #0]
}
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr
 800886c:	20002130 	.word	0x20002130
 8008870:	20002198 	.word	0x20002198

08008874 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800887a:	4b0b      	ldr	r3, [pc, #44]	; (80088a8 <xTaskGetSchedulerState+0x34>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d102      	bne.n	8008888 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008882:	2301      	movs	r3, #1
 8008884:	607b      	str	r3, [r7, #4]
 8008886:	e008      	b.n	800889a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008888:	4b08      	ldr	r3, [pc, #32]	; (80088ac <xTaskGetSchedulerState+0x38>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d102      	bne.n	8008896 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008890:	2302      	movs	r3, #2
 8008892:	607b      	str	r3, [r7, #4]
 8008894:	e001      	b.n	800889a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008896:	2300      	movs	r3, #0
 8008898:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800889a:	687b      	ldr	r3, [r7, #4]
	}
 800889c:	4618      	mov	r0, r3
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr
 80088a8:	20002184 	.word	0x20002184
 80088ac:	200021a0 	.word	0x200021a0

080088b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80088bc:	2300      	movs	r3, #0
 80088be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d051      	beq.n	800896a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ca:	4b2a      	ldr	r3, [pc, #168]	; (8008974 <xTaskPriorityInherit+0xc4>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d241      	bcs.n	8008958 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	db06      	blt.n	80088ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088dc:	4b25      	ldr	r3, [pc, #148]	; (8008974 <xTaskPriorityInherit+0xc4>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	6959      	ldr	r1, [r3, #20]
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f2:	4613      	mov	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4413      	add	r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4a1f      	ldr	r2, [pc, #124]	; (8008978 <xTaskPriorityInherit+0xc8>)
 80088fc:	4413      	add	r3, r2
 80088fe:	4299      	cmp	r1, r3
 8008900:	d122      	bne.n	8008948 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	3304      	adds	r3, #4
 8008906:	4618      	mov	r0, r3
 8008908:	f7fe fb5c 	bl	8006fc4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800890c:	4b19      	ldr	r3, [pc, #100]	; (8008974 <xTaskPriorityInherit+0xc4>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800891a:	4b18      	ldr	r3, [pc, #96]	; (800897c <xTaskPriorityInherit+0xcc>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	429a      	cmp	r2, r3
 8008920:	d903      	bls.n	800892a <xTaskPriorityInherit+0x7a>
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008926:	4a15      	ldr	r2, [pc, #84]	; (800897c <xTaskPriorityInherit+0xcc>)
 8008928:	6013      	str	r3, [r2, #0]
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800892e:	4613      	mov	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	4a10      	ldr	r2, [pc, #64]	; (8008978 <xTaskPriorityInherit+0xc8>)
 8008938:	441a      	add	r2, r3
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	3304      	adds	r3, #4
 800893e:	4619      	mov	r1, r3
 8008940:	4610      	mov	r0, r2
 8008942:	f7fe fae2 	bl	8006f0a <vListInsertEnd>
 8008946:	e004      	b.n	8008952 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008948:	4b0a      	ldr	r3, [pc, #40]	; (8008974 <xTaskPriorityInherit+0xc4>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008952:	2301      	movs	r3, #1
 8008954:	60fb      	str	r3, [r7, #12]
 8008956:	e008      	b.n	800896a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800895c:	4b05      	ldr	r3, [pc, #20]	; (8008974 <xTaskPriorityInherit+0xc4>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008962:	429a      	cmp	r2, r3
 8008964:	d201      	bcs.n	800896a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008966:	2301      	movs	r3, #1
 8008968:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800896a:	68fb      	ldr	r3, [r7, #12]
	}
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	20001ca4 	.word	0x20001ca4
 8008978:	20001ca8 	.word	0x20001ca8
 800897c:	20002180 	.word	0x20002180

08008980 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800898c:	2300      	movs	r3, #0
 800898e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d056      	beq.n	8008a44 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008996:	4b2e      	ldr	r3, [pc, #184]	; (8008a50 <xTaskPriorityDisinherit+0xd0>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	693a      	ldr	r2, [r7, #16]
 800899c:	429a      	cmp	r2, r3
 800899e:	d00a      	beq.n	80089b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	60fb      	str	r3, [r7, #12]
}
 80089b2:	bf00      	nop
 80089b4:	e7fe      	b.n	80089b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10a      	bne.n	80089d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80089be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	60bb      	str	r3, [r7, #8]
}
 80089d0:	bf00      	nop
 80089d2:	e7fe      	b.n	80089d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089d8:	1e5a      	subs	r2, r3, #1
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d02c      	beq.n	8008a44 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d128      	bne.n	8008a44 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	3304      	adds	r3, #4
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fe fae4 	bl	8006fc4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a14:	4b0f      	ldr	r3, [pc, #60]	; (8008a54 <xTaskPriorityDisinherit+0xd4>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d903      	bls.n	8008a24 <xTaskPriorityDisinherit+0xa4>
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a20:	4a0c      	ldr	r2, [pc, #48]	; (8008a54 <xTaskPriorityDisinherit+0xd4>)
 8008a22:	6013      	str	r3, [r2, #0]
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a28:	4613      	mov	r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4413      	add	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4a09      	ldr	r2, [pc, #36]	; (8008a58 <xTaskPriorityDisinherit+0xd8>)
 8008a32:	441a      	add	r2, r3
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	3304      	adds	r3, #4
 8008a38:	4619      	mov	r1, r3
 8008a3a:	4610      	mov	r0, r2
 8008a3c:	f7fe fa65 	bl	8006f0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a40:	2301      	movs	r3, #1
 8008a42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a44:	697b      	ldr	r3, [r7, #20]
	}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3718      	adds	r7, #24
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	20001ca4 	.word	0x20001ca4
 8008a54:	20002180 	.word	0x20002180
 8008a58:	20001ca8 	.word	0x20001ca8

08008a5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b088      	sub	sp, #32
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d06a      	beq.n	8008b4a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10a      	bne.n	8008a92 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a80:	f383 8811 	msr	BASEPRI, r3
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	60fb      	str	r3, [r7, #12]
}
 8008a8e:	bf00      	nop
 8008a90:	e7fe      	b.n	8008a90 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a96:	683a      	ldr	r2, [r7, #0]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d902      	bls.n	8008aa2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	61fb      	str	r3, [r7, #28]
 8008aa0:	e002      	b.n	8008aa8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aa6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aac:	69fa      	ldr	r2, [r7, #28]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d04b      	beq.n	8008b4a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d146      	bne.n	8008b4a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008abc:	4b25      	ldr	r3, [pc, #148]	; (8008b54 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	69ba      	ldr	r2, [r7, #24]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d10a      	bne.n	8008adc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aca:	f383 8811 	msr	BASEPRI, r3
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f3bf 8f4f 	dsb	sy
 8008ad6:	60bb      	str	r3, [r7, #8]
}
 8008ad8:	bf00      	nop
 8008ada:	e7fe      	b.n	8008ada <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	69fa      	ldr	r2, [r7, #28]
 8008ae6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	699b      	ldr	r3, [r3, #24]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	db04      	blt.n	8008afa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	6959      	ldr	r1, [r3, #20]
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	4613      	mov	r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4413      	add	r3, r2
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	4a13      	ldr	r2, [pc, #76]	; (8008b58 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008b0a:	4413      	add	r3, r2
 8008b0c:	4299      	cmp	r1, r3
 8008b0e:	d11c      	bne.n	8008b4a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	3304      	adds	r3, #4
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7fe fa55 	bl	8006fc4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b1e:	4b0f      	ldr	r3, [pc, #60]	; (8008b5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d903      	bls.n	8008b2e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2a:	4a0c      	ldr	r2, [pc, #48]	; (8008b5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008b2c:	6013      	str	r3, [r2, #0]
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b32:	4613      	mov	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4413      	add	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4a07      	ldr	r2, [pc, #28]	; (8008b58 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008b3c:	441a      	add	r2, r3
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	3304      	adds	r3, #4
 8008b42:	4619      	mov	r1, r3
 8008b44:	4610      	mov	r0, r2
 8008b46:	f7fe f9e0 	bl	8006f0a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b4a:	bf00      	nop
 8008b4c:	3720      	adds	r7, #32
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	20001ca4 	.word	0x20001ca4
 8008b58:	20001ca8 	.word	0x20001ca8
 8008b5c:	20002180 	.word	0x20002180

08008b60 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008b60:	b480      	push	{r7}
 8008b62:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008b64:	4b07      	ldr	r3, [pc, #28]	; (8008b84 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d004      	beq.n	8008b76 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008b6c:	4b05      	ldr	r3, [pc, #20]	; (8008b84 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b72:	3201      	adds	r2, #1
 8008b74:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008b76:	4b03      	ldr	r3, [pc, #12]	; (8008b84 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b78:	681b      	ldr	r3, [r3, #0]
	}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr
 8008b84:	20001ca4 	.word	0x20001ca4

08008b88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b92:	4b21      	ldr	r3, [pc, #132]	; (8008c18 <prvAddCurrentTaskToDelayedList+0x90>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b98:	4b20      	ldr	r3, [pc, #128]	; (8008c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	3304      	adds	r3, #4
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fe fa10 	bl	8006fc4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008baa:	d10a      	bne.n	8008bc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d007      	beq.n	8008bc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bb2:	4b1a      	ldr	r3, [pc, #104]	; (8008c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	3304      	adds	r3, #4
 8008bb8:	4619      	mov	r1, r3
 8008bba:	4819      	ldr	r0, [pc, #100]	; (8008c20 <prvAddCurrentTaskToDelayedList+0x98>)
 8008bbc:	f7fe f9a5 	bl	8006f0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008bc0:	e026      	b.n	8008c10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008bca:	4b14      	ldr	r3, [pc, #80]	; (8008c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68ba      	ldr	r2, [r7, #8]
 8008bd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d209      	bcs.n	8008bee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bda:	4b12      	ldr	r3, [pc, #72]	; (8008c24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	4b0f      	ldr	r3, [pc, #60]	; (8008c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	3304      	adds	r3, #4
 8008be4:	4619      	mov	r1, r3
 8008be6:	4610      	mov	r0, r2
 8008be8:	f7fe f9b3 	bl	8006f52 <vListInsert>
}
 8008bec:	e010      	b.n	8008c10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bee:	4b0e      	ldr	r3, [pc, #56]	; (8008c28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	4b0a      	ldr	r3, [pc, #40]	; (8008c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	3304      	adds	r3, #4
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	4610      	mov	r0, r2
 8008bfc:	f7fe f9a9 	bl	8006f52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c00:	4b0a      	ldr	r3, [pc, #40]	; (8008c2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d202      	bcs.n	8008c10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008c0a:	4a08      	ldr	r2, [pc, #32]	; (8008c2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	6013      	str	r3, [r2, #0]
}
 8008c10:	bf00      	nop
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	2000217c 	.word	0x2000217c
 8008c1c:	20001ca4 	.word	0x20001ca4
 8008c20:	20002164 	.word	0x20002164
 8008c24:	20002134 	.word	0x20002134
 8008c28:	20002130 	.word	0x20002130
 8008c2c:	20002198 	.word	0x20002198

08008c30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b08a      	sub	sp, #40	; 0x28
 8008c34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008c36:	2300      	movs	r3, #0
 8008c38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008c3a:	f000 fba1 	bl	8009380 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008c3e:	4b1c      	ldr	r3, [pc, #112]	; (8008cb0 <xTimerCreateTimerTask+0x80>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d021      	beq.n	8008c8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c46:	2300      	movs	r3, #0
 8008c48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c4e:	1d3a      	adds	r2, r7, #4
 8008c50:	f107 0108 	add.w	r1, r7, #8
 8008c54:	f107 030c 	add.w	r3, r7, #12
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fe f90f 	bl	8006e7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c5e:	6879      	ldr	r1, [r7, #4]
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	9202      	str	r2, [sp, #8]
 8008c66:	9301      	str	r3, [sp, #4]
 8008c68:	2302      	movs	r3, #2
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	460a      	mov	r2, r1
 8008c70:	4910      	ldr	r1, [pc, #64]	; (8008cb4 <xTimerCreateTimerTask+0x84>)
 8008c72:	4811      	ldr	r0, [pc, #68]	; (8008cb8 <xTimerCreateTimerTask+0x88>)
 8008c74:	f7fe ffe0 	bl	8007c38 <xTaskCreateStatic>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	4a10      	ldr	r2, [pc, #64]	; (8008cbc <xTimerCreateTimerTask+0x8c>)
 8008c7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c7e:	4b0f      	ldr	r3, [pc, #60]	; (8008cbc <xTimerCreateTimerTask+0x8c>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c86:	2301      	movs	r3, #1
 8008c88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10a      	bne.n	8008ca6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	613b      	str	r3, [r7, #16]
}
 8008ca2:	bf00      	nop
 8008ca4:	e7fe      	b.n	8008ca4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008ca6:	697b      	ldr	r3, [r7, #20]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3718      	adds	r7, #24
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	200021d4 	.word	0x200021d4
 8008cb4:	0800c36c 	.word	0x0800c36c
 8008cb8:	08008f29 	.word	0x08008f29
 8008cbc:	200021d8 	.word	0x200021d8

08008cc0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b088      	sub	sp, #32
 8008cc4:	af02      	add	r7, sp, #8
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
 8008ccc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008cce:	202c      	movs	r0, #44	; 0x2c
 8008cd0:	f000 fe02 	bl	80098d8 <pvPortMalloc>
 8008cd4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00d      	beq.n	8008cf8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	9301      	str	r3, [sp, #4]
 8008ce8:	6a3b      	ldr	r3, [r7, #32]
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	68b9      	ldr	r1, [r7, #8]
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f000 f843 	bl	8008d7e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008cf8:	697b      	ldr	r3, [r7, #20]
	}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3718      	adds	r7, #24
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b08a      	sub	sp, #40	; 0x28
 8008d06:	af02      	add	r7, sp, #8
 8008d08:	60f8      	str	r0, [r7, #12]
 8008d0a:	60b9      	str	r1, [r7, #8]
 8008d0c:	607a      	str	r2, [r7, #4]
 8008d0e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008d10:	232c      	movs	r3, #44	; 0x2c
 8008d12:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	2b2c      	cmp	r3, #44	; 0x2c
 8008d18:	d00a      	beq.n	8008d30 <xTimerCreateStatic+0x2e>
	__asm volatile
 8008d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1e:	f383 8811 	msr	BASEPRI, r3
 8008d22:	f3bf 8f6f 	isb	sy
 8008d26:	f3bf 8f4f 	dsb	sy
 8008d2a:	61bb      	str	r3, [r7, #24]
}
 8008d2c:	bf00      	nop
 8008d2e:	e7fe      	b.n	8008d2e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008d30:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8008d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d10a      	bne.n	8008d4e <xTimerCreateStatic+0x4c>
	__asm volatile
 8008d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3c:	f383 8811 	msr	BASEPRI, r3
 8008d40:	f3bf 8f6f 	isb	sy
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	617b      	str	r3, [r7, #20]
}
 8008d4a:	bf00      	nop
 8008d4c:	e7fe      	b.n	8008d4c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8008d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d50:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00d      	beq.n	8008d74 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	2202      	movs	r2, #2
 8008d5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	9301      	str	r3, [sp, #4]
 8008d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	68b9      	ldr	r1, [r7, #8]
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f000 f805 	bl	8008d7e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008d74:	69fb      	ldr	r3, [r7, #28]
	}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3720      	adds	r7, #32
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b086      	sub	sp, #24
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	60f8      	str	r0, [r7, #12]
 8008d86:	60b9      	str	r1, [r7, #8]
 8008d88:	607a      	str	r2, [r7, #4]
 8008d8a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10a      	bne.n	8008da8 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8008d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d96:	f383 8811 	msr	BASEPRI, r3
 8008d9a:	f3bf 8f6f 	isb	sy
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	617b      	str	r3, [r7, #20]
}
 8008da4:	bf00      	nop
 8008da6:	e7fe      	b.n	8008da6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8008da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d01e      	beq.n	8008dec <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008dae:	f000 fae7 	bl	8009380 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc0:	683a      	ldr	r2, [r7, #0]
 8008dc2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc6:	6a3a      	ldr	r2, [r7, #32]
 8008dc8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dcc:	3304      	adds	r3, #4
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fe f88e 	bl	8006ef0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d008      	beq.n	8008dec <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008de0:	f043 0304 	orr.w	r3, r3, #4
 8008de4:	b2da      	uxtb	r2, r3
 8008de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008dec:	bf00      	nop
 8008dee:	3718      	adds	r7, #24
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b08a      	sub	sp, #40	; 0x28
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]
 8008e00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008e02:	2300      	movs	r3, #0
 8008e04:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d10a      	bne.n	8008e22 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e10:	f383 8811 	msr	BASEPRI, r3
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	623b      	str	r3, [r7, #32]
}
 8008e1e:	bf00      	nop
 8008e20:	e7fe      	b.n	8008e20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e22:	4b1a      	ldr	r3, [pc, #104]	; (8008e8c <xTimerGenericCommand+0x98>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d02a      	beq.n	8008e80 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	2b05      	cmp	r3, #5
 8008e3a:	dc18      	bgt.n	8008e6e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e3c:	f7ff fd1a 	bl	8008874 <xTaskGetSchedulerState>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	d109      	bne.n	8008e5a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e46:	4b11      	ldr	r3, [pc, #68]	; (8008e8c <xTimerGenericCommand+0x98>)
 8008e48:	6818      	ldr	r0, [r3, #0]
 8008e4a:	f107 0110 	add.w	r1, r7, #16
 8008e4e:	2300      	movs	r3, #0
 8008e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e52:	f7fe f9e5 	bl	8007220 <xQueueGenericSend>
 8008e56:	6278      	str	r0, [r7, #36]	; 0x24
 8008e58:	e012      	b.n	8008e80 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e5a:	4b0c      	ldr	r3, [pc, #48]	; (8008e8c <xTimerGenericCommand+0x98>)
 8008e5c:	6818      	ldr	r0, [r3, #0]
 8008e5e:	f107 0110 	add.w	r1, r7, #16
 8008e62:	2300      	movs	r3, #0
 8008e64:	2200      	movs	r2, #0
 8008e66:	f7fe f9db 	bl	8007220 <xQueueGenericSend>
 8008e6a:	6278      	str	r0, [r7, #36]	; 0x24
 8008e6c:	e008      	b.n	8008e80 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e6e:	4b07      	ldr	r3, [pc, #28]	; (8008e8c <xTimerGenericCommand+0x98>)
 8008e70:	6818      	ldr	r0, [r3, #0]
 8008e72:	f107 0110 	add.w	r1, r7, #16
 8008e76:	2300      	movs	r3, #0
 8008e78:	683a      	ldr	r2, [r7, #0]
 8008e7a:	f7fe facf 	bl	800741c <xQueueGenericSendFromISR>
 8008e7e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3728      	adds	r7, #40	; 0x28
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	200021d4 	.word	0x200021d4

08008e90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b088      	sub	sp, #32
 8008e94:	af02      	add	r7, sp, #8
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e9a:	4b22      	ldr	r3, [pc, #136]	; (8008f24 <prvProcessExpiredTimer+0x94>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	3304      	adds	r3, #4
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7fe f88b 	bl	8006fc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008eb4:	f003 0304 	and.w	r3, r3, #4
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d022      	beq.n	8008f02 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	699a      	ldr	r2, [r3, #24]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	18d1      	adds	r1, r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	683a      	ldr	r2, [r7, #0]
 8008ec8:	6978      	ldr	r0, [r7, #20]
 8008eca:	f000 f8d1 	bl	8009070 <prvInsertTimerInActiveList>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d01f      	beq.n	8008f14 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	2300      	movs	r3, #0
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	2100      	movs	r1, #0
 8008ede:	6978      	ldr	r0, [r7, #20]
 8008ee0:	f7ff ff88 	bl	8008df4 <xTimerGenericCommand>
 8008ee4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d113      	bne.n	8008f14 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef0:	f383 8811 	msr	BASEPRI, r3
 8008ef4:	f3bf 8f6f 	isb	sy
 8008ef8:	f3bf 8f4f 	dsb	sy
 8008efc:	60fb      	str	r3, [r7, #12]
}
 8008efe:	bf00      	nop
 8008f00:	e7fe      	b.n	8008f00 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f08:	f023 0301 	bic.w	r3, r3, #1
 8008f0c:	b2da      	uxtb	r2, r3
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	6978      	ldr	r0, [r7, #20]
 8008f1a:	4798      	blx	r3
}
 8008f1c:	bf00      	nop
 8008f1e:	3718      	adds	r7, #24
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	200021cc 	.word	0x200021cc

08008f28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f30:	f107 0308 	add.w	r3, r7, #8
 8008f34:	4618      	mov	r0, r3
 8008f36:	f000 f857 	bl	8008fe8 <prvGetNextExpireTime>
 8008f3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	4619      	mov	r1, r3
 8008f40:	68f8      	ldr	r0, [r7, #12]
 8008f42:	f000 f803 	bl	8008f4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f46:	f000 f8d5 	bl	80090f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f4a:	e7f1      	b.n	8008f30 <prvTimerTask+0x8>

08008f4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f56:	f7ff f8ab 	bl	80080b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f5a:	f107 0308 	add.w	r3, r7, #8
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f000 f866 	bl	8009030 <prvSampleTimeNow>
 8008f64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d130      	bne.n	8008fce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10a      	bne.n	8008f88 <prvProcessTimerOrBlockTask+0x3c>
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d806      	bhi.n	8008f88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008f7a:	f7ff f8a7 	bl	80080cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008f7e:	68f9      	ldr	r1, [r7, #12]
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7ff ff85 	bl	8008e90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008f86:	e024      	b.n	8008fd2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d008      	beq.n	8008fa0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008f8e:	4b13      	ldr	r3, [pc, #76]	; (8008fdc <prvProcessTimerOrBlockTask+0x90>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d101      	bne.n	8008f9c <prvProcessTimerOrBlockTask+0x50>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e000      	b.n	8008f9e <prvProcessTimerOrBlockTask+0x52>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008fa0:	4b0f      	ldr	r3, [pc, #60]	; (8008fe0 <prvProcessTimerOrBlockTask+0x94>)
 8008fa2:	6818      	ldr	r0, [r3, #0]
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	683a      	ldr	r2, [r7, #0]
 8008fac:	4619      	mov	r1, r3
 8008fae:	f7fe fe0f 	bl	8007bd0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008fb2:	f7ff f88b 	bl	80080cc <xTaskResumeAll>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d10a      	bne.n	8008fd2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008fbc:	4b09      	ldr	r3, [pc, #36]	; (8008fe4 <prvProcessTimerOrBlockTask+0x98>)
 8008fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fc2:	601a      	str	r2, [r3, #0]
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	f3bf 8f6f 	isb	sy
}
 8008fcc:	e001      	b.n	8008fd2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008fce:	f7ff f87d 	bl	80080cc <xTaskResumeAll>
}
 8008fd2:	bf00      	nop
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	200021d0 	.word	0x200021d0
 8008fe0:	200021d4 	.word	0x200021d4
 8008fe4:	e000ed04 	.word	0xe000ed04

08008fe8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ff0:	4b0e      	ldr	r3, [pc, #56]	; (800902c <prvGetNextExpireTime+0x44>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d101      	bne.n	8008ffe <prvGetNextExpireTime+0x16>
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	e000      	b.n	8009000 <prvGetNextExpireTime+0x18>
 8008ffe:	2200      	movs	r2, #0
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d105      	bne.n	8009018 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800900c:	4b07      	ldr	r3, [pc, #28]	; (800902c <prvGetNextExpireTime+0x44>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	60fb      	str	r3, [r7, #12]
 8009016:	e001      	b.n	800901c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009018:	2300      	movs	r3, #0
 800901a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800901c:	68fb      	ldr	r3, [r7, #12]
}
 800901e:	4618      	mov	r0, r3
 8009020:	3714      	adds	r7, #20
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	200021cc 	.word	0x200021cc

08009030 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009038:	f7ff f8e6 	bl	8008208 <xTaskGetTickCount>
 800903c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800903e:	4b0b      	ldr	r3, [pc, #44]	; (800906c <prvSampleTimeNow+0x3c>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	429a      	cmp	r2, r3
 8009046:	d205      	bcs.n	8009054 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009048:	f000 f936 	bl	80092b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2201      	movs	r2, #1
 8009050:	601a      	str	r2, [r3, #0]
 8009052:	e002      	b.n	800905a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800905a:	4a04      	ldr	r2, [pc, #16]	; (800906c <prvSampleTimeNow+0x3c>)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009060:	68fb      	ldr	r3, [r7, #12]
}
 8009062:	4618      	mov	r0, r3
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	200021dc 	.word	0x200021dc

08009070 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
 800907c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800907e:	2300      	movs	r3, #0
 8009080:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	429a      	cmp	r2, r3
 8009094:	d812      	bhi.n	80090bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	1ad2      	subs	r2, r2, r3
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	699b      	ldr	r3, [r3, #24]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d302      	bcc.n	80090aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80090a4:	2301      	movs	r3, #1
 80090a6:	617b      	str	r3, [r7, #20]
 80090a8:	e01b      	b.n	80090e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80090aa:	4b10      	ldr	r3, [pc, #64]	; (80090ec <prvInsertTimerInActiveList+0x7c>)
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	3304      	adds	r3, #4
 80090b2:	4619      	mov	r1, r3
 80090b4:	4610      	mov	r0, r2
 80090b6:	f7fd ff4c 	bl	8006f52 <vListInsert>
 80090ba:	e012      	b.n	80090e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d206      	bcs.n	80090d2 <prvInsertTimerInActiveList+0x62>
 80090c4:	68ba      	ldr	r2, [r7, #8]
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d302      	bcc.n	80090d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80090cc:	2301      	movs	r3, #1
 80090ce:	617b      	str	r3, [r7, #20]
 80090d0:	e007      	b.n	80090e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090d2:	4b07      	ldr	r3, [pc, #28]	; (80090f0 <prvInsertTimerInActiveList+0x80>)
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	3304      	adds	r3, #4
 80090da:	4619      	mov	r1, r3
 80090dc:	4610      	mov	r0, r2
 80090de:	f7fd ff38 	bl	8006f52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80090e2:	697b      	ldr	r3, [r7, #20]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3718      	adds	r7, #24
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	200021d0 	.word	0x200021d0
 80090f0:	200021cc 	.word	0x200021cc

080090f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b08e      	sub	sp, #56	; 0x38
 80090f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090fa:	e0ca      	b.n	8009292 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	da18      	bge.n	8009134 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009102:	1d3b      	adds	r3, r7, #4
 8009104:	3304      	adds	r3, #4
 8009106:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910a:	2b00      	cmp	r3, #0
 800910c:	d10a      	bne.n	8009124 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800910e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009112:	f383 8811 	msr	BASEPRI, r3
 8009116:	f3bf 8f6f 	isb	sy
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	61fb      	str	r3, [r7, #28]
}
 8009120:	bf00      	nop
 8009122:	e7fe      	b.n	8009122 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800912a:	6850      	ldr	r0, [r2, #4]
 800912c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800912e:	6892      	ldr	r2, [r2, #8]
 8009130:	4611      	mov	r1, r2
 8009132:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	f2c0 80aa 	blt.w	8009290 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009142:	695b      	ldr	r3, [r3, #20]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d004      	beq.n	8009152 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914a:	3304      	adds	r3, #4
 800914c:	4618      	mov	r0, r3
 800914e:	f7fd ff39 	bl	8006fc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009152:	463b      	mov	r3, r7
 8009154:	4618      	mov	r0, r3
 8009156:	f7ff ff6b 	bl	8009030 <prvSampleTimeNow>
 800915a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2b09      	cmp	r3, #9
 8009160:	f200 8097 	bhi.w	8009292 <prvProcessReceivedCommands+0x19e>
 8009164:	a201      	add	r2, pc, #4	; (adr r2, 800916c <prvProcessReceivedCommands+0x78>)
 8009166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916a:	bf00      	nop
 800916c:	08009195 	.word	0x08009195
 8009170:	08009195 	.word	0x08009195
 8009174:	08009195 	.word	0x08009195
 8009178:	08009209 	.word	0x08009209
 800917c:	0800921d 	.word	0x0800921d
 8009180:	08009267 	.word	0x08009267
 8009184:	08009195 	.word	0x08009195
 8009188:	08009195 	.word	0x08009195
 800918c:	08009209 	.word	0x08009209
 8009190:	0800921d 	.word	0x0800921d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009196:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800919a:	f043 0301 	orr.w	r3, r3, #1
 800919e:	b2da      	uxtb	r2, r3
 80091a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091aa:	699b      	ldr	r3, [r3, #24]
 80091ac:	18d1      	adds	r1, r2, r3
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091b4:	f7ff ff5c 	bl	8009070 <prvInsertTimerInActiveList>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d069      	beq.n	8009292 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c0:	6a1b      	ldr	r3, [r3, #32]
 80091c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091cc:	f003 0304 	and.w	r3, r3, #4
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d05e      	beq.n	8009292 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	441a      	add	r2, r3
 80091dc:	2300      	movs	r3, #0
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	2300      	movs	r3, #0
 80091e2:	2100      	movs	r1, #0
 80091e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091e6:	f7ff fe05 	bl	8008df4 <xTimerGenericCommand>
 80091ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d14f      	bne.n	8009292 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80091f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f6:	f383 8811 	msr	BASEPRI, r3
 80091fa:	f3bf 8f6f 	isb	sy
 80091fe:	f3bf 8f4f 	dsb	sy
 8009202:	61bb      	str	r3, [r7, #24]
}
 8009204:	bf00      	nop
 8009206:	e7fe      	b.n	8009206 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800920e:	f023 0301 	bic.w	r3, r3, #1
 8009212:	b2da      	uxtb	r2, r3
 8009214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009216:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800921a:	e03a      	b.n	8009292 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800921c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009222:	f043 0301 	orr.w	r3, r3, #1
 8009226:	b2da      	uxtb	r2, r3
 8009228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009232:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d10a      	bne.n	8009252 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800923c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009240:	f383 8811 	msr	BASEPRI, r3
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	f3bf 8f4f 	dsb	sy
 800924c:	617b      	str	r3, [r7, #20]
}
 800924e:	bf00      	nop
 8009250:	e7fe      	b.n	8009250 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009254:	699a      	ldr	r2, [r3, #24]
 8009256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009258:	18d1      	adds	r1, r2, r3
 800925a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800925e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009260:	f7ff ff06 	bl	8009070 <prvInsertTimerInActiveList>
					break;
 8009264:	e015      	b.n	8009292 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800926c:	f003 0302 	and.w	r3, r3, #2
 8009270:	2b00      	cmp	r3, #0
 8009272:	d103      	bne.n	800927c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009276:	f000 fbfb 	bl	8009a70 <vPortFree>
 800927a:	e00a      	b.n	8009292 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800927c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009282:	f023 0301 	bic.w	r3, r3, #1
 8009286:	b2da      	uxtb	r2, r3
 8009288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800928e:	e000      	b.n	8009292 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009290:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009292:	4b08      	ldr	r3, [pc, #32]	; (80092b4 <prvProcessReceivedCommands+0x1c0>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	1d39      	adds	r1, r7, #4
 8009298:	2200      	movs	r2, #0
 800929a:	4618      	mov	r0, r3
 800929c:	f7fe f95a 	bl	8007554 <xQueueReceive>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f47f af2a 	bne.w	80090fc <prvProcessReceivedCommands+0x8>
	}
}
 80092a8:	bf00      	nop
 80092aa:	bf00      	nop
 80092ac:	3730      	adds	r7, #48	; 0x30
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	200021d4 	.word	0x200021d4

080092b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b088      	sub	sp, #32
 80092bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80092be:	e048      	b.n	8009352 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092c0:	4b2d      	ldr	r3, [pc, #180]	; (8009378 <prvSwitchTimerLists+0xc0>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092ca:	4b2b      	ldr	r3, [pc, #172]	; (8009378 <prvSwitchTimerLists+0xc0>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	3304      	adds	r3, #4
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fd fe73 	bl	8006fc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6a1b      	ldr	r3, [r3, #32]
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092ec:	f003 0304 	and.w	r3, r3, #4
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d02e      	beq.n	8009352 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	693a      	ldr	r2, [r7, #16]
 80092fa:	4413      	add	r3, r2
 80092fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80092fe:	68ba      	ldr	r2, [r7, #8]
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	429a      	cmp	r2, r3
 8009304:	d90e      	bls.n	8009324 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	68ba      	ldr	r2, [r7, #8]
 800930a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009312:	4b19      	ldr	r3, [pc, #100]	; (8009378 <prvSwitchTimerLists+0xc0>)
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	3304      	adds	r3, #4
 800931a:	4619      	mov	r1, r3
 800931c:	4610      	mov	r0, r2
 800931e:	f7fd fe18 	bl	8006f52 <vListInsert>
 8009322:	e016      	b.n	8009352 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009324:	2300      	movs	r3, #0
 8009326:	9300      	str	r3, [sp, #0]
 8009328:	2300      	movs	r3, #0
 800932a:	693a      	ldr	r2, [r7, #16]
 800932c:	2100      	movs	r1, #0
 800932e:	68f8      	ldr	r0, [r7, #12]
 8009330:	f7ff fd60 	bl	8008df4 <xTimerGenericCommand>
 8009334:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d10a      	bne.n	8009352 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800933c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009340:	f383 8811 	msr	BASEPRI, r3
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	603b      	str	r3, [r7, #0]
}
 800934e:	bf00      	nop
 8009350:	e7fe      	b.n	8009350 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009352:	4b09      	ldr	r3, [pc, #36]	; (8009378 <prvSwitchTimerLists+0xc0>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1b1      	bne.n	80092c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800935c:	4b06      	ldr	r3, [pc, #24]	; (8009378 <prvSwitchTimerLists+0xc0>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009362:	4b06      	ldr	r3, [pc, #24]	; (800937c <prvSwitchTimerLists+0xc4>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a04      	ldr	r2, [pc, #16]	; (8009378 <prvSwitchTimerLists+0xc0>)
 8009368:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800936a:	4a04      	ldr	r2, [pc, #16]	; (800937c <prvSwitchTimerLists+0xc4>)
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	6013      	str	r3, [r2, #0]
}
 8009370:	bf00      	nop
 8009372:	3718      	adds	r7, #24
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	200021cc 	.word	0x200021cc
 800937c:	200021d0 	.word	0x200021d0

08009380 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009386:	f000 f985 	bl	8009694 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800938a:	4b15      	ldr	r3, [pc, #84]	; (80093e0 <prvCheckForValidListAndQueue+0x60>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d120      	bne.n	80093d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009392:	4814      	ldr	r0, [pc, #80]	; (80093e4 <prvCheckForValidListAndQueue+0x64>)
 8009394:	f7fd fd8c 	bl	8006eb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009398:	4813      	ldr	r0, [pc, #76]	; (80093e8 <prvCheckForValidListAndQueue+0x68>)
 800939a:	f7fd fd89 	bl	8006eb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800939e:	4b13      	ldr	r3, [pc, #76]	; (80093ec <prvCheckForValidListAndQueue+0x6c>)
 80093a0:	4a10      	ldr	r2, [pc, #64]	; (80093e4 <prvCheckForValidListAndQueue+0x64>)
 80093a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80093a4:	4b12      	ldr	r3, [pc, #72]	; (80093f0 <prvCheckForValidListAndQueue+0x70>)
 80093a6:	4a10      	ldr	r2, [pc, #64]	; (80093e8 <prvCheckForValidListAndQueue+0x68>)
 80093a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80093aa:	2300      	movs	r3, #0
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	4b11      	ldr	r3, [pc, #68]	; (80093f4 <prvCheckForValidListAndQueue+0x74>)
 80093b0:	4a11      	ldr	r2, [pc, #68]	; (80093f8 <prvCheckForValidListAndQueue+0x78>)
 80093b2:	2110      	movs	r1, #16
 80093b4:	200a      	movs	r0, #10
 80093b6:	f7fd fe97 	bl	80070e8 <xQueueGenericCreateStatic>
 80093ba:	4603      	mov	r3, r0
 80093bc:	4a08      	ldr	r2, [pc, #32]	; (80093e0 <prvCheckForValidListAndQueue+0x60>)
 80093be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80093c0:	4b07      	ldr	r3, [pc, #28]	; (80093e0 <prvCheckForValidListAndQueue+0x60>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d005      	beq.n	80093d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80093c8:	4b05      	ldr	r3, [pc, #20]	; (80093e0 <prvCheckForValidListAndQueue+0x60>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	490b      	ldr	r1, [pc, #44]	; (80093fc <prvCheckForValidListAndQueue+0x7c>)
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fe fbd4 	bl	8007b7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093d4:	f000 f98e 	bl	80096f4 <vPortExitCritical>
}
 80093d8:	bf00      	nop
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	200021d4 	.word	0x200021d4
 80093e4:	200021a4 	.word	0x200021a4
 80093e8:	200021b8 	.word	0x200021b8
 80093ec:	200021cc 	.word	0x200021cc
 80093f0:	200021d0 	.word	0x200021d0
 80093f4:	20002280 	.word	0x20002280
 80093f8:	200021e0 	.word	0x200021e0
 80093fc:	0800c374 	.word	0x0800c374

08009400 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b086      	sub	sp, #24
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10a      	bne.n	8009428 <pvTimerGetTimerID+0x28>
	__asm volatile
 8009412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009416:	f383 8811 	msr	BASEPRI, r3
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	60fb      	str	r3, [r7, #12]
}
 8009424:	bf00      	nop
 8009426:	e7fe      	b.n	8009426 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8009428:	f000 f934 	bl	8009694 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	69db      	ldr	r3, [r3, #28]
 8009430:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8009432:	f000 f95f 	bl	80096f4 <vPortExitCritical>

	return pvReturn;
 8009436:	693b      	ldr	r3, [r7, #16]
}
 8009438:	4618      	mov	r0, r3
 800943a:	3718      	adds	r7, #24
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	3b04      	subs	r3, #4
 8009450:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009458:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	3b04      	subs	r3, #4
 800945e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	f023 0201 	bic.w	r2, r3, #1
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	3b04      	subs	r3, #4
 800946e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009470:	4a0c      	ldr	r2, [pc, #48]	; (80094a4 <pxPortInitialiseStack+0x64>)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	3b14      	subs	r3, #20
 800947a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	3b04      	subs	r3, #4
 8009486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f06f 0202 	mvn.w	r2, #2
 800948e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	3b20      	subs	r3, #32
 8009494:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009496:	68fb      	ldr	r3, [r7, #12]
}
 8009498:	4618      	mov	r0, r3
 800949a:	3714      	adds	r7, #20
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr
 80094a4:	080094a9 	.word	0x080094a9

080094a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80094ae:	2300      	movs	r3, #0
 80094b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80094b2:	4b12      	ldr	r3, [pc, #72]	; (80094fc <prvTaskExitError+0x54>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ba:	d00a      	beq.n	80094d2 <prvTaskExitError+0x2a>
	__asm volatile
 80094bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	60fb      	str	r3, [r7, #12]
}
 80094ce:	bf00      	nop
 80094d0:	e7fe      	b.n	80094d0 <prvTaskExitError+0x28>
	__asm volatile
 80094d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d6:	f383 8811 	msr	BASEPRI, r3
 80094da:	f3bf 8f6f 	isb	sy
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	60bb      	str	r3, [r7, #8]
}
 80094e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80094e6:	bf00      	nop
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d0fc      	beq.n	80094e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80094ee:	bf00      	nop
 80094f0:	bf00      	nop
 80094f2:	3714      	adds	r7, #20
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr
 80094fc:	2000000c 	.word	0x2000000c

08009500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009500:	4b07      	ldr	r3, [pc, #28]	; (8009520 <pxCurrentTCBConst2>)
 8009502:	6819      	ldr	r1, [r3, #0]
 8009504:	6808      	ldr	r0, [r1, #0]
 8009506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800950a:	f380 8809 	msr	PSP, r0
 800950e:	f3bf 8f6f 	isb	sy
 8009512:	f04f 0000 	mov.w	r0, #0
 8009516:	f380 8811 	msr	BASEPRI, r0
 800951a:	4770      	bx	lr
 800951c:	f3af 8000 	nop.w

08009520 <pxCurrentTCBConst2>:
 8009520:	20001ca4 	.word	0x20001ca4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009524:	bf00      	nop
 8009526:	bf00      	nop

08009528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009528:	4808      	ldr	r0, [pc, #32]	; (800954c <prvPortStartFirstTask+0x24>)
 800952a:	6800      	ldr	r0, [r0, #0]
 800952c:	6800      	ldr	r0, [r0, #0]
 800952e:	f380 8808 	msr	MSP, r0
 8009532:	f04f 0000 	mov.w	r0, #0
 8009536:	f380 8814 	msr	CONTROL, r0
 800953a:	b662      	cpsie	i
 800953c:	b661      	cpsie	f
 800953e:	f3bf 8f4f 	dsb	sy
 8009542:	f3bf 8f6f 	isb	sy
 8009546:	df00      	svc	0
 8009548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800954a:	bf00      	nop
 800954c:	e000ed08 	.word	0xe000ed08

08009550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b086      	sub	sp, #24
 8009554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009556:	4b46      	ldr	r3, [pc, #280]	; (8009670 <xPortStartScheduler+0x120>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a46      	ldr	r2, [pc, #280]	; (8009674 <xPortStartScheduler+0x124>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d10a      	bne.n	8009576 <xPortStartScheduler+0x26>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	613b      	str	r3, [r7, #16]
}
 8009572:	bf00      	nop
 8009574:	e7fe      	b.n	8009574 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009576:	4b3e      	ldr	r3, [pc, #248]	; (8009670 <xPortStartScheduler+0x120>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a3f      	ldr	r2, [pc, #252]	; (8009678 <xPortStartScheduler+0x128>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d10a      	bne.n	8009596 <xPortStartScheduler+0x46>
	__asm volatile
 8009580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009584:	f383 8811 	msr	BASEPRI, r3
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	60fb      	str	r3, [r7, #12]
}
 8009592:	bf00      	nop
 8009594:	e7fe      	b.n	8009594 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009596:	4b39      	ldr	r3, [pc, #228]	; (800967c <xPortStartScheduler+0x12c>)
 8009598:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	22ff      	movs	r2, #255	; 0xff
 80095a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80095b0:	78fb      	ldrb	r3, [r7, #3]
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80095b8:	b2da      	uxtb	r2, r3
 80095ba:	4b31      	ldr	r3, [pc, #196]	; (8009680 <xPortStartScheduler+0x130>)
 80095bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80095be:	4b31      	ldr	r3, [pc, #196]	; (8009684 <xPortStartScheduler+0x134>)
 80095c0:	2207      	movs	r2, #7
 80095c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095c4:	e009      	b.n	80095da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80095c6:	4b2f      	ldr	r3, [pc, #188]	; (8009684 <xPortStartScheduler+0x134>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	3b01      	subs	r3, #1
 80095cc:	4a2d      	ldr	r2, [pc, #180]	; (8009684 <xPortStartScheduler+0x134>)
 80095ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80095d0:	78fb      	ldrb	r3, [r7, #3]
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	005b      	lsls	r3, r3, #1
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095da:	78fb      	ldrb	r3, [r7, #3]
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095e2:	2b80      	cmp	r3, #128	; 0x80
 80095e4:	d0ef      	beq.n	80095c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80095e6:	4b27      	ldr	r3, [pc, #156]	; (8009684 <xPortStartScheduler+0x134>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f1c3 0307 	rsb	r3, r3, #7
 80095ee:	2b04      	cmp	r3, #4
 80095f0:	d00a      	beq.n	8009608 <xPortStartScheduler+0xb8>
	__asm volatile
 80095f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f6:	f383 8811 	msr	BASEPRI, r3
 80095fa:	f3bf 8f6f 	isb	sy
 80095fe:	f3bf 8f4f 	dsb	sy
 8009602:	60bb      	str	r3, [r7, #8]
}
 8009604:	bf00      	nop
 8009606:	e7fe      	b.n	8009606 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009608:	4b1e      	ldr	r3, [pc, #120]	; (8009684 <xPortStartScheduler+0x134>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	021b      	lsls	r3, r3, #8
 800960e:	4a1d      	ldr	r2, [pc, #116]	; (8009684 <xPortStartScheduler+0x134>)
 8009610:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009612:	4b1c      	ldr	r3, [pc, #112]	; (8009684 <xPortStartScheduler+0x134>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800961a:	4a1a      	ldr	r2, [pc, #104]	; (8009684 <xPortStartScheduler+0x134>)
 800961c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	b2da      	uxtb	r2, r3
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009626:	4b18      	ldr	r3, [pc, #96]	; (8009688 <xPortStartScheduler+0x138>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a17      	ldr	r2, [pc, #92]	; (8009688 <xPortStartScheduler+0x138>)
 800962c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009630:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009632:	4b15      	ldr	r3, [pc, #84]	; (8009688 <xPortStartScheduler+0x138>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a14      	ldr	r2, [pc, #80]	; (8009688 <xPortStartScheduler+0x138>)
 8009638:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800963c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800963e:	f000 f8dd 	bl	80097fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009642:	4b12      	ldr	r3, [pc, #72]	; (800968c <xPortStartScheduler+0x13c>)
 8009644:	2200      	movs	r2, #0
 8009646:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009648:	f000 f8fc 	bl	8009844 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800964c:	4b10      	ldr	r3, [pc, #64]	; (8009690 <xPortStartScheduler+0x140>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a0f      	ldr	r2, [pc, #60]	; (8009690 <xPortStartScheduler+0x140>)
 8009652:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009656:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009658:	f7ff ff66 	bl	8009528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800965c:	f7fe fe9e 	bl	800839c <vTaskSwitchContext>
	prvTaskExitError();
 8009660:	f7ff ff22 	bl	80094a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3718      	adds	r7, #24
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	e000ed00 	.word	0xe000ed00
 8009674:	410fc271 	.word	0x410fc271
 8009678:	410fc270 	.word	0x410fc270
 800967c:	e000e400 	.word	0xe000e400
 8009680:	200022d0 	.word	0x200022d0
 8009684:	200022d4 	.word	0x200022d4
 8009688:	e000ed20 	.word	0xe000ed20
 800968c:	2000000c 	.word	0x2000000c
 8009690:	e000ef34 	.word	0xe000ef34

08009694 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
	__asm volatile
 800969a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969e:	f383 8811 	msr	BASEPRI, r3
 80096a2:	f3bf 8f6f 	isb	sy
 80096a6:	f3bf 8f4f 	dsb	sy
 80096aa:	607b      	str	r3, [r7, #4]
}
 80096ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80096ae:	4b0f      	ldr	r3, [pc, #60]	; (80096ec <vPortEnterCritical+0x58>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	3301      	adds	r3, #1
 80096b4:	4a0d      	ldr	r2, [pc, #52]	; (80096ec <vPortEnterCritical+0x58>)
 80096b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80096b8:	4b0c      	ldr	r3, [pc, #48]	; (80096ec <vPortEnterCritical+0x58>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d10f      	bne.n	80096e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80096c0:	4b0b      	ldr	r3, [pc, #44]	; (80096f0 <vPortEnterCritical+0x5c>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00a      	beq.n	80096e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80096ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ce:	f383 8811 	msr	BASEPRI, r3
 80096d2:	f3bf 8f6f 	isb	sy
 80096d6:	f3bf 8f4f 	dsb	sy
 80096da:	603b      	str	r3, [r7, #0]
}
 80096dc:	bf00      	nop
 80096de:	e7fe      	b.n	80096de <vPortEnterCritical+0x4a>
	}
}
 80096e0:	bf00      	nop
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr
 80096ec:	2000000c 	.word	0x2000000c
 80096f0:	e000ed04 	.word	0xe000ed04

080096f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80096fa:	4b12      	ldr	r3, [pc, #72]	; (8009744 <vPortExitCritical+0x50>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d10a      	bne.n	8009718 <vPortExitCritical+0x24>
	__asm volatile
 8009702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009706:	f383 8811 	msr	BASEPRI, r3
 800970a:	f3bf 8f6f 	isb	sy
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	607b      	str	r3, [r7, #4]
}
 8009714:	bf00      	nop
 8009716:	e7fe      	b.n	8009716 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009718:	4b0a      	ldr	r3, [pc, #40]	; (8009744 <vPortExitCritical+0x50>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	3b01      	subs	r3, #1
 800971e:	4a09      	ldr	r2, [pc, #36]	; (8009744 <vPortExitCritical+0x50>)
 8009720:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009722:	4b08      	ldr	r3, [pc, #32]	; (8009744 <vPortExitCritical+0x50>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d105      	bne.n	8009736 <vPortExitCritical+0x42>
 800972a:	2300      	movs	r3, #0
 800972c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	f383 8811 	msr	BASEPRI, r3
}
 8009734:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009736:	bf00      	nop
 8009738:	370c      	adds	r7, #12
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	2000000c 	.word	0x2000000c
	...

08009750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009750:	f3ef 8009 	mrs	r0, PSP
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	4b15      	ldr	r3, [pc, #84]	; (80097b0 <pxCurrentTCBConst>)
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	f01e 0f10 	tst.w	lr, #16
 8009760:	bf08      	it	eq
 8009762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976a:	6010      	str	r0, [r2, #0]
 800976c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009770:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009774:	f380 8811 	msr	BASEPRI, r0
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	f3bf 8f6f 	isb	sy
 8009780:	f7fe fe0c 	bl	800839c <vTaskSwitchContext>
 8009784:	f04f 0000 	mov.w	r0, #0
 8009788:	f380 8811 	msr	BASEPRI, r0
 800978c:	bc09      	pop	{r0, r3}
 800978e:	6819      	ldr	r1, [r3, #0]
 8009790:	6808      	ldr	r0, [r1, #0]
 8009792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009796:	f01e 0f10 	tst.w	lr, #16
 800979a:	bf08      	it	eq
 800979c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80097a0:	f380 8809 	msr	PSP, r0
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	f3af 8000 	nop.w

080097b0 <pxCurrentTCBConst>:
 80097b0:	20001ca4 	.word	0x20001ca4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80097b4:	bf00      	nop
 80097b6:	bf00      	nop

080097b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
	__asm volatile
 80097be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c2:	f383 8811 	msr	BASEPRI, r3
 80097c6:	f3bf 8f6f 	isb	sy
 80097ca:	f3bf 8f4f 	dsb	sy
 80097ce:	607b      	str	r3, [r7, #4]
}
 80097d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80097d2:	f7fe fd29 	bl	8008228 <xTaskIncrementTick>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d003      	beq.n	80097e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80097dc:	4b06      	ldr	r3, [pc, #24]	; (80097f8 <xPortSysTickHandler+0x40>)
 80097de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097e2:	601a      	str	r2, [r3, #0]
 80097e4:	2300      	movs	r3, #0
 80097e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	f383 8811 	msr	BASEPRI, r3
}
 80097ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80097f0:	bf00      	nop
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	e000ed04 	.word	0xe000ed04

080097fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80097fc:	b480      	push	{r7}
 80097fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009800:	4b0b      	ldr	r3, [pc, #44]	; (8009830 <vPortSetupTimerInterrupt+0x34>)
 8009802:	2200      	movs	r2, #0
 8009804:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009806:	4b0b      	ldr	r3, [pc, #44]	; (8009834 <vPortSetupTimerInterrupt+0x38>)
 8009808:	2200      	movs	r2, #0
 800980a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800980c:	4b0a      	ldr	r3, [pc, #40]	; (8009838 <vPortSetupTimerInterrupt+0x3c>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a0a      	ldr	r2, [pc, #40]	; (800983c <vPortSetupTimerInterrupt+0x40>)
 8009812:	fba2 2303 	umull	r2, r3, r2, r3
 8009816:	099b      	lsrs	r3, r3, #6
 8009818:	4a09      	ldr	r2, [pc, #36]	; (8009840 <vPortSetupTimerInterrupt+0x44>)
 800981a:	3b01      	subs	r3, #1
 800981c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800981e:	4b04      	ldr	r3, [pc, #16]	; (8009830 <vPortSetupTimerInterrupt+0x34>)
 8009820:	2207      	movs	r2, #7
 8009822:	601a      	str	r2, [r3, #0]
}
 8009824:	bf00      	nop
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop
 8009830:	e000e010 	.word	0xe000e010
 8009834:	e000e018 	.word	0xe000e018
 8009838:	20000000 	.word	0x20000000
 800983c:	10624dd3 	.word	0x10624dd3
 8009840:	e000e014 	.word	0xe000e014

08009844 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009844:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009854 <vPortEnableVFP+0x10>
 8009848:	6801      	ldr	r1, [r0, #0]
 800984a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800984e:	6001      	str	r1, [r0, #0]
 8009850:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009852:	bf00      	nop
 8009854:	e000ed88 	.word	0xe000ed88

08009858 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800985e:	f3ef 8305 	mrs	r3, IPSR
 8009862:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2b0f      	cmp	r3, #15
 8009868:	d914      	bls.n	8009894 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800986a:	4a17      	ldr	r2, [pc, #92]	; (80098c8 <vPortValidateInterruptPriority+0x70>)
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	4413      	add	r3, r2
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009874:	4b15      	ldr	r3, [pc, #84]	; (80098cc <vPortValidateInterruptPriority+0x74>)
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	7afa      	ldrb	r2, [r7, #11]
 800987a:	429a      	cmp	r2, r3
 800987c:	d20a      	bcs.n	8009894 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800987e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009882:	f383 8811 	msr	BASEPRI, r3
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	607b      	str	r3, [r7, #4]
}
 8009890:	bf00      	nop
 8009892:	e7fe      	b.n	8009892 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009894:	4b0e      	ldr	r3, [pc, #56]	; (80098d0 <vPortValidateInterruptPriority+0x78>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800989c:	4b0d      	ldr	r3, [pc, #52]	; (80098d4 <vPortValidateInterruptPriority+0x7c>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d90a      	bls.n	80098ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80098a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a8:	f383 8811 	msr	BASEPRI, r3
 80098ac:	f3bf 8f6f 	isb	sy
 80098b0:	f3bf 8f4f 	dsb	sy
 80098b4:	603b      	str	r3, [r7, #0]
}
 80098b6:	bf00      	nop
 80098b8:	e7fe      	b.n	80098b8 <vPortValidateInterruptPriority+0x60>
	}
 80098ba:	bf00      	nop
 80098bc:	3714      	adds	r7, #20
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop
 80098c8:	e000e3f0 	.word	0xe000e3f0
 80098cc:	200022d0 	.word	0x200022d0
 80098d0:	e000ed0c 	.word	0xe000ed0c
 80098d4:	200022d4 	.word	0x200022d4

080098d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b08a      	sub	sp, #40	; 0x28
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80098e0:	2300      	movs	r3, #0
 80098e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80098e4:	f7fe fbe4 	bl	80080b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80098e8:	4b5b      	ldr	r3, [pc, #364]	; (8009a58 <pvPortMalloc+0x180>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d101      	bne.n	80098f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80098f0:	f000 f920 	bl	8009b34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80098f4:	4b59      	ldr	r3, [pc, #356]	; (8009a5c <pvPortMalloc+0x184>)
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4013      	ands	r3, r2
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f040 8093 	bne.w	8009a28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d01d      	beq.n	8009944 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009908:	2208      	movs	r2, #8
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4413      	add	r3, r2
 800990e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f003 0307 	and.w	r3, r3, #7
 8009916:	2b00      	cmp	r3, #0
 8009918:	d014      	beq.n	8009944 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f023 0307 	bic.w	r3, r3, #7
 8009920:	3308      	adds	r3, #8
 8009922:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f003 0307 	and.w	r3, r3, #7
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00a      	beq.n	8009944 <pvPortMalloc+0x6c>
	__asm volatile
 800992e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009932:	f383 8811 	msr	BASEPRI, r3
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	f3bf 8f4f 	dsb	sy
 800993e:	617b      	str	r3, [r7, #20]
}
 8009940:	bf00      	nop
 8009942:	e7fe      	b.n	8009942 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d06e      	beq.n	8009a28 <pvPortMalloc+0x150>
 800994a:	4b45      	ldr	r3, [pc, #276]	; (8009a60 <pvPortMalloc+0x188>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	429a      	cmp	r2, r3
 8009952:	d869      	bhi.n	8009a28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009954:	4b43      	ldr	r3, [pc, #268]	; (8009a64 <pvPortMalloc+0x18c>)
 8009956:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009958:	4b42      	ldr	r3, [pc, #264]	; (8009a64 <pvPortMalloc+0x18c>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800995e:	e004      	b.n	800996a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009962:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800996a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	429a      	cmp	r2, r3
 8009972:	d903      	bls.n	800997c <pvPortMalloc+0xa4>
 8009974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d1f1      	bne.n	8009960 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800997c:	4b36      	ldr	r3, [pc, #216]	; (8009a58 <pvPortMalloc+0x180>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009982:	429a      	cmp	r2, r3
 8009984:	d050      	beq.n	8009a28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009986:	6a3b      	ldr	r3, [r7, #32]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2208      	movs	r2, #8
 800998c:	4413      	add	r3, r2
 800998e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	6a3b      	ldr	r3, [r7, #32]
 8009996:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999a:	685a      	ldr	r2, [r3, #4]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	1ad2      	subs	r2, r2, r3
 80099a0:	2308      	movs	r3, #8
 80099a2:	005b      	lsls	r3, r3, #1
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d91f      	bls.n	80099e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80099a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4413      	add	r3, r2
 80099ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	f003 0307 	and.w	r3, r3, #7
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d00a      	beq.n	80099d0 <pvPortMalloc+0xf8>
	__asm volatile
 80099ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099be:	f383 8811 	msr	BASEPRI, r3
 80099c2:	f3bf 8f6f 	isb	sy
 80099c6:	f3bf 8f4f 	dsb	sy
 80099ca:	613b      	str	r3, [r7, #16]
}
 80099cc:	bf00      	nop
 80099ce:	e7fe      	b.n	80099ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80099d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d2:	685a      	ldr	r2, [r3, #4]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	1ad2      	subs	r2, r2, r3
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80099dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80099e2:	69b8      	ldr	r0, [r7, #24]
 80099e4:	f000 f908 	bl	8009bf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80099e8:	4b1d      	ldr	r3, [pc, #116]	; (8009a60 <pvPortMalloc+0x188>)
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	1ad3      	subs	r3, r2, r3
 80099f2:	4a1b      	ldr	r2, [pc, #108]	; (8009a60 <pvPortMalloc+0x188>)
 80099f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80099f6:	4b1a      	ldr	r3, [pc, #104]	; (8009a60 <pvPortMalloc+0x188>)
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	4b1b      	ldr	r3, [pc, #108]	; (8009a68 <pvPortMalloc+0x190>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d203      	bcs.n	8009a0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a02:	4b17      	ldr	r3, [pc, #92]	; (8009a60 <pvPortMalloc+0x188>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a18      	ldr	r2, [pc, #96]	; (8009a68 <pvPortMalloc+0x190>)
 8009a08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0c:	685a      	ldr	r2, [r3, #4]
 8009a0e:	4b13      	ldr	r3, [pc, #76]	; (8009a5c <pvPortMalloc+0x184>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	431a      	orrs	r2, r3
 8009a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009a1e:	4b13      	ldr	r3, [pc, #76]	; (8009a6c <pvPortMalloc+0x194>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	3301      	adds	r3, #1
 8009a24:	4a11      	ldr	r2, [pc, #68]	; (8009a6c <pvPortMalloc+0x194>)
 8009a26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a28:	f7fe fb50 	bl	80080cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a2c:	69fb      	ldr	r3, [r7, #28]
 8009a2e:	f003 0307 	and.w	r3, r3, #7
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d00a      	beq.n	8009a4c <pvPortMalloc+0x174>
	__asm volatile
 8009a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3a:	f383 8811 	msr	BASEPRI, r3
 8009a3e:	f3bf 8f6f 	isb	sy
 8009a42:	f3bf 8f4f 	dsb	sy
 8009a46:	60fb      	str	r3, [r7, #12]
}
 8009a48:	bf00      	nop
 8009a4a:	e7fe      	b.n	8009a4a <pvPortMalloc+0x172>
	return pvReturn;
 8009a4c:	69fb      	ldr	r3, [r7, #28]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3728      	adds	r7, #40	; 0x28
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	20005ee0 	.word	0x20005ee0
 8009a5c:	20005ef4 	.word	0x20005ef4
 8009a60:	20005ee4 	.word	0x20005ee4
 8009a64:	20005ed8 	.word	0x20005ed8
 8009a68:	20005ee8 	.word	0x20005ee8
 8009a6c:	20005eec 	.word	0x20005eec

08009a70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d04d      	beq.n	8009b1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a82:	2308      	movs	r3, #8
 8009a84:	425b      	negs	r3, r3
 8009a86:	697a      	ldr	r2, [r7, #20]
 8009a88:	4413      	add	r3, r2
 8009a8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	685a      	ldr	r2, [r3, #4]
 8009a94:	4b24      	ldr	r3, [pc, #144]	; (8009b28 <vPortFree+0xb8>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4013      	ands	r3, r2
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d10a      	bne.n	8009ab4 <vPortFree+0x44>
	__asm volatile
 8009a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa2:	f383 8811 	msr	BASEPRI, r3
 8009aa6:	f3bf 8f6f 	isb	sy
 8009aaa:	f3bf 8f4f 	dsb	sy
 8009aae:	60fb      	str	r3, [r7, #12]
}
 8009ab0:	bf00      	nop
 8009ab2:	e7fe      	b.n	8009ab2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00a      	beq.n	8009ad2 <vPortFree+0x62>
	__asm volatile
 8009abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac0:	f383 8811 	msr	BASEPRI, r3
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	60bb      	str	r3, [r7, #8]
}
 8009ace:	bf00      	nop
 8009ad0:	e7fe      	b.n	8009ad0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	685a      	ldr	r2, [r3, #4]
 8009ad6:	4b14      	ldr	r3, [pc, #80]	; (8009b28 <vPortFree+0xb8>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4013      	ands	r3, r2
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d01e      	beq.n	8009b1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d11a      	bne.n	8009b1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	685a      	ldr	r2, [r3, #4]
 8009aec:	4b0e      	ldr	r3, [pc, #56]	; (8009b28 <vPortFree+0xb8>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	43db      	mvns	r3, r3
 8009af2:	401a      	ands	r2, r3
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009af8:	f7fe fada 	bl	80080b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	685a      	ldr	r2, [r3, #4]
 8009b00:	4b0a      	ldr	r3, [pc, #40]	; (8009b2c <vPortFree+0xbc>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4413      	add	r3, r2
 8009b06:	4a09      	ldr	r2, [pc, #36]	; (8009b2c <vPortFree+0xbc>)
 8009b08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b0a:	6938      	ldr	r0, [r7, #16]
 8009b0c:	f000 f874 	bl	8009bf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009b10:	4b07      	ldr	r3, [pc, #28]	; (8009b30 <vPortFree+0xc0>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	3301      	adds	r3, #1
 8009b16:	4a06      	ldr	r2, [pc, #24]	; (8009b30 <vPortFree+0xc0>)
 8009b18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009b1a:	f7fe fad7 	bl	80080cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b1e:	bf00      	nop
 8009b20:	3718      	adds	r7, #24
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	20005ef4 	.word	0x20005ef4
 8009b2c:	20005ee4 	.word	0x20005ee4
 8009b30:	20005ef0 	.word	0x20005ef0

08009b34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009b3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b40:	4b27      	ldr	r3, [pc, #156]	; (8009be0 <prvHeapInit+0xac>)
 8009b42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f003 0307 	and.w	r3, r3, #7
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00c      	beq.n	8009b68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	3307      	adds	r3, #7
 8009b52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f023 0307 	bic.w	r3, r3, #7
 8009b5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b5c:	68ba      	ldr	r2, [r7, #8]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	4a1f      	ldr	r2, [pc, #124]	; (8009be0 <prvHeapInit+0xac>)
 8009b64:	4413      	add	r3, r2
 8009b66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b6c:	4a1d      	ldr	r2, [pc, #116]	; (8009be4 <prvHeapInit+0xb0>)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b72:	4b1c      	ldr	r3, [pc, #112]	; (8009be4 <prvHeapInit+0xb0>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	68ba      	ldr	r2, [r7, #8]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009b80:	2208      	movs	r2, #8
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	1a9b      	subs	r3, r3, r2
 8009b86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f023 0307 	bic.w	r3, r3, #7
 8009b8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	4a15      	ldr	r2, [pc, #84]	; (8009be8 <prvHeapInit+0xb4>)
 8009b94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b96:	4b14      	ldr	r3, [pc, #80]	; (8009be8 <prvHeapInit+0xb4>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b9e:	4b12      	ldr	r3, [pc, #72]	; (8009be8 <prvHeapInit+0xb4>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	1ad2      	subs	r2, r2, r3
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009bb4:	4b0c      	ldr	r3, [pc, #48]	; (8009be8 <prvHeapInit+0xb4>)
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	4a0a      	ldr	r2, [pc, #40]	; (8009bec <prvHeapInit+0xb8>)
 8009bc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	4a09      	ldr	r2, [pc, #36]	; (8009bf0 <prvHeapInit+0xbc>)
 8009bca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009bcc:	4b09      	ldr	r3, [pc, #36]	; (8009bf4 <prvHeapInit+0xc0>)
 8009bce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009bd2:	601a      	str	r2, [r3, #0]
}
 8009bd4:	bf00      	nop
 8009bd6:	3714      	adds	r7, #20
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr
 8009be0:	200022d8 	.word	0x200022d8
 8009be4:	20005ed8 	.word	0x20005ed8
 8009be8:	20005ee0 	.word	0x20005ee0
 8009bec:	20005ee8 	.word	0x20005ee8
 8009bf0:	20005ee4 	.word	0x20005ee4
 8009bf4:	20005ef4 	.word	0x20005ef4

08009bf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c00:	4b28      	ldr	r3, [pc, #160]	; (8009ca4 <prvInsertBlockIntoFreeList+0xac>)
 8009c02:	60fb      	str	r3, [r7, #12]
 8009c04:	e002      	b.n	8009c0c <prvInsertBlockIntoFreeList+0x14>
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	60fb      	str	r3, [r7, #12]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d8f7      	bhi.n	8009c06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	68ba      	ldr	r2, [r7, #8]
 8009c20:	4413      	add	r3, r2
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d108      	bne.n	8009c3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	685a      	ldr	r2, [r3, #4]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	441a      	add	r2, r3
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	68ba      	ldr	r2, [r7, #8]
 8009c44:	441a      	add	r2, r3
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d118      	bne.n	8009c80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	4b15      	ldr	r3, [pc, #84]	; (8009ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d00d      	beq.n	8009c76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	685a      	ldr	r2, [r3, #4]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	441a      	add	r2, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	601a      	str	r2, [r3, #0]
 8009c74:	e008      	b.n	8009c88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c76:	4b0c      	ldr	r3, [pc, #48]	; (8009ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	601a      	str	r2, [r3, #0]
 8009c7e:	e003      	b.n	8009c88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009c88:	68fa      	ldr	r2, [r7, #12]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d002      	beq.n	8009c96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c96:	bf00      	nop
 8009c98:	3714      	adds	r7, #20
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop
 8009ca4:	20005ed8 	.word	0x20005ed8
 8009ca8:	20005ee0 	.word	0x20005ee0

08009cac <APP_timeoutTimerIRQHandler>:
/********************************************************************************/

#if 1 /* Software Timer IRQ Handlers */

void APP_timeoutTimerIRQHandler(void* param)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]

}
 8009cb4:	bf00      	nop
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <APP_periodicTimerIRQHandler>:

void APP_periodicTimerIRQHandler(void* param)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
	/* msg Tick Counter inc every 10ms */
	__GL.can.msgTickCounter_u32++;
 8009cc8:	4b17      	ldr	r3, [pc, #92]	; (8009d28 <APP_periodicTimerIRQHandler+0x68>)
 8009cca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009cce:	3301      	adds	r3, #1
 8009cd0:	4a15      	ldr	r2, [pc, #84]	; (8009d28 <APP_periodicTimerIRQHandler+0x68>)
 8009cd2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

	static U8 adcSequance;

	adcSequance = __GL.can.msgTickCounter_u32 % 6 ;
 8009cd6:	4b14      	ldr	r3, [pc, #80]	; (8009d28 <APP_periodicTimerIRQHandler+0x68>)
 8009cd8:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
 8009cdc:	4b13      	ldr	r3, [pc, #76]	; (8009d2c <APP_periodicTimerIRQHandler+0x6c>)
 8009cde:	fba3 2301 	umull	r2, r3, r3, r1
 8009ce2:	089a      	lsrs	r2, r3, #2
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	005b      	lsls	r3, r3, #1
 8009ce8:	4413      	add	r3, r2
 8009cea:	005b      	lsls	r3, r3, #1
 8009cec:	1aca      	subs	r2, r1, r3
 8009cee:	b2d2      	uxtb	r2, r2
 8009cf0:	4b0f      	ldr	r3, [pc, #60]	; (8009d30 <APP_periodicTimerIRQHandler+0x70>)
 8009cf2:	701a      	strb	r2, [r3, #0]
	if( adcSequance == 0 )
 8009cf4:	4b0e      	ldr	r3, [pc, #56]	; (8009d30 <APP_periodicTimerIRQHandler+0x70>)
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d107      	bne.n	8009d0c <APP_periodicTimerIRQHandler+0x4c>
	{
		__GL.mainState.flag.adc = TRUE;
 8009cfc:	4a0a      	ldr	r2, [pc, #40]	; (8009d28 <APP_periodicTimerIRQHandler+0x68>)
 8009cfe:	f892 3a02 	ldrb.w	r3, [r2, #2562]	; 0xa02
 8009d02:	f043 0301 	orr.w	r3, r3, #1
 8009d06:	f882 3a02 	strb.w	r3, [r2, #2562]	; 0xa02
	else
	{
		__GL.mainState.flag.adc = FALSE;
	}

}
 8009d0a:	e006      	b.n	8009d1a <APP_periodicTimerIRQHandler+0x5a>
		__GL.mainState.flag.adc = FALSE;
 8009d0c:	4a06      	ldr	r2, [pc, #24]	; (8009d28 <APP_periodicTimerIRQHandler+0x68>)
 8009d0e:	f892 3a02 	ldrb.w	r3, [r2, #2562]	; 0xa02
 8009d12:	f36f 0300 	bfc	r3, #0, #1
 8009d16:	f882 3a02 	strb.w	r3, [r2, #2562]	; 0xa02
}
 8009d1a:	bf00      	nop
 8009d1c:	370c      	adds	r7, #12
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	20000074 	.word	0x20000074
 8009d2c:	aaaaaaab 	.word	0xaaaaaaab
 8009d30:	2000bfb0 	.word	0x2000bfb0

08009d34 <APP_broadcast01TimerIRQHandler>:


/* BroadCast Timers IRQ Handlers */
//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
void APP_broadcast01TimerIRQHandler(void* param)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
	__GL.can.msgSelect.Flag.ID01 = TRUE;
 8009d3c:	4a06      	ldr	r2, [pc, #24]	; (8009d58 <APP_broadcast01TimerIRQHandler+0x24>)
 8009d3e:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 8009d42:	f043 0301 	orr.w	r3, r3, #1
 8009d46:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304
	Process_CAN_Run();
 8009d4a:	f000 fbe7 	bl	800a51c <Process_CAN_Run>
}
 8009d4e:	bf00      	nop
 8009d50:	3708      	adds	r7, #8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	20000074 	.word	0x20000074

08009d5c <APP_broadcast02TimerIRQHandler>:
void APP_broadcast02TimerIRQHandler(void* param)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
	__GL.can.msgSelect.Flag.ID02 = TRUE;
 8009d64:	4a06      	ldr	r2, [pc, #24]	; (8009d80 <APP_broadcast02TimerIRQHandler+0x24>)
 8009d66:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 8009d6a:	f043 0302 	orr.w	r3, r3, #2
 8009d6e:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304
	Process_CAN_Run();
 8009d72:	f000 fbd3 	bl	800a51c <Process_CAN_Run>
}
 8009d76:	bf00      	nop
 8009d78:	3708      	adds	r7, #8
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	20000074 	.word	0x20000074

08009d84 <APP_broadcast03TimerIRQHandler>:
void APP_broadcast03TimerIRQHandler(void* param)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
	__GL.can.msgSelect.Flag.ID03 = TRUE;
 8009d8c:	4a06      	ldr	r2, [pc, #24]	; (8009da8 <APP_broadcast03TimerIRQHandler+0x24>)
 8009d8e:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 8009d92:	f043 0304 	orr.w	r3, r3, #4
 8009d96:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304
	Process_CAN_Run();
 8009d9a:	f000 fbbf 	bl	800a51c <Process_CAN_Run>
}
 8009d9e:	bf00      	nop
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	20000074 	.word	0x20000074

08009dac <APP_broadcast04TimerIRQHandler>:
void APP_broadcast04TimerIRQHandler(void* param)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
	__GL.can.msgSelect.Flag.ID04 = TRUE;
 8009db4:	4a06      	ldr	r2, [pc, #24]	; (8009dd0 <APP_broadcast04TimerIRQHandler+0x24>)
 8009db6:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 8009dba:	f043 0308 	orr.w	r3, r3, #8
 8009dbe:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304
	Process_CAN_Run();
 8009dc2:	f000 fbab 	bl	800a51c <Process_CAN_Run>
}
 8009dc6:	bf00      	nop
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	20000074 	.word	0x20000074

08009dd4 <APP_broadcast05TimerIRQHandler>:
void APP_broadcast05TimerIRQHandler(void* param)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
	__GL.can.msgSelect.Flag.ID05 = TRUE;
 8009ddc:	4a06      	ldr	r2, [pc, #24]	; (8009df8 <APP_broadcast05TimerIRQHandler+0x24>)
 8009dde:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 8009de2:	f043 0310 	orr.w	r3, r3, #16
 8009de6:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304
	Process_CAN_Run();
 8009dea:	f000 fb97 	bl	800a51c <Process_CAN_Run>
}
 8009dee:	bf00      	nop
 8009df0:	3708      	adds	r7, #8
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	20000074 	.word	0x20000074

08009dfc <APP_broadcast06TimerIRQHandler>:
void APP_broadcast06TimerIRQHandler(void* param)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
	__GL.can.msgSelect.Flag.ID06 = TRUE;
 8009e04:	4a06      	ldr	r2, [pc, #24]	; (8009e20 <APP_broadcast06TimerIRQHandler+0x24>)
 8009e06:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 8009e0a:	f043 0320 	orr.w	r3, r3, #32
 8009e0e:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304
	Process_CAN_Run();
 8009e12:	f000 fb83 	bl	800a51c <Process_CAN_Run>
}
 8009e16:	bf00      	nop
 8009e18:	3708      	adds	r7, #8
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	20000074 	.word	0x20000074

08009e24 <APP_broadcast07TimerIRQHandler>:
void APP_broadcast07TimerIRQHandler(void* param)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
	__GL.can.msgSelect.Flag.ID07 = TRUE;
 8009e2c:	4a06      	ldr	r2, [pc, #24]	; (8009e48 <APP_broadcast07TimerIRQHandler+0x24>)
 8009e2e:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 8009e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e36:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304
	Process_CAN_Run();
 8009e3a:	f000 fb6f 	bl	800a51c <Process_CAN_Run>
}
 8009e3e:	bf00      	nop
 8009e40:	3708      	adds	r7, #8
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	20000074 	.word	0x20000074

08009e4c <DEBUG_printThread>:

#endif

#ifdef DEBUG_THREAD
void    DEBUG_printThread(char *threadName, char *threadStatus)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b090      	sub	sp, #64	; 0x40
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]

    char console_message[50] = {0};
 8009e56:	2300      	movs	r3, #0
 8009e58:	60fb      	str	r3, [r7, #12]
 8009e5a:	f107 0310 	add.w	r3, r7, #16
 8009e5e:	222e      	movs	r2, #46	; 0x2e
 8009e60:	2100      	movs	r1, #0
 8009e62:	4618      	mov	r0, r3
 8009e64:	f001 fdb6 	bl	800b9d4 <memset>

    sprintf(&console_message[0], "%s is %s. \n", &threadName[0], &threadStatus[0]);
 8009e68:	f107 000c 	add.w	r0, r7, #12
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	4906      	ldr	r1, [pc, #24]	; (8009e8c <DEBUG_printThread+0x40>)
 8009e72:	f001 fdb7 	bl	800b9e4 <siprintf>

    HAL_UART_Transmit(&DEBUG_UART, (U8 *)&console_message[0], sizeof(console_message), 10);
 8009e76:	f107 010c 	add.w	r1, r7, #12
 8009e7a:	230a      	movs	r3, #10
 8009e7c:	2232      	movs	r2, #50	; 0x32
 8009e7e:	4804      	ldr	r0, [pc, #16]	; (8009e90 <DEBUG_printThread+0x44>)
 8009e80:	f7fc fa83 	bl	800638a <HAL_UART_Transmit>
    return;
 8009e84:	bf00      	nop

}
 8009e86:	3740      	adds	r7, #64	; 0x40
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	0800c468 	.word	0x0800c468
 8009e90:	2000138c 	.word	0x2000138c

08009e94 <Initilialise_App>:
#endif


void Initilialise_App(void)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af04      	add	r7, sp, #16
	/***************** Create Static Threads ******************************/

#ifdef BSP_PROCESS_BODYCONTROLMAIN
	xHandle.Process_BodyControlMAIN = xTaskCreateStatic
 8009e9a:	4bac      	ldr	r3, [pc, #688]	; (800a14c <Initilialise_App+0x2b8>)
 8009e9c:	9302      	str	r3, [sp, #8]
 8009e9e:	4bac      	ldr	r3, [pc, #688]	; (800a150 <Initilialise_App+0x2bc>)
 8009ea0:	9301      	str	r3, [sp, #4]
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	9300      	str	r3, [sp, #0]
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009eac:	49a9      	ldr	r1, [pc, #676]	; (800a154 <Initilialise_App+0x2c0>)
 8009eae:	48aa      	ldr	r0, [pc, #680]	; (800a158 <Initilialise_App+0x2c4>)
 8009eb0:	f7fd fec2 	bl	8007c38 <xTaskCreateStatic>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	4aa9      	ldr	r2, [pc, #676]	; (800a15c <Initilialise_App+0x2c8>)
 8009eb8:	6013      	str	r3, [r2, #0]
										);
#endif


#ifdef BSP_PROCESS_ADC
	xHandle.Process_ADC = xTaskCreateStatic
 8009eba:	4ba9      	ldr	r3, [pc, #676]	; (800a160 <Initilialise_App+0x2cc>)
 8009ebc:	9302      	str	r3, [sp, #8]
 8009ebe:	4ba9      	ldr	r3, [pc, #676]	; (800a164 <Initilialise_App+0x2d0>)
 8009ec0:	9301      	str	r3, [sp, #4]
 8009ec2:	2306      	movs	r3, #6
 8009ec4:	9300      	str	r3, [sp, #0]
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ecc:	49a6      	ldr	r1, [pc, #664]	; (800a168 <Initilialise_App+0x2d4>)
 8009ece:	48a7      	ldr	r0, [pc, #668]	; (800a16c <Initilialise_App+0x2d8>)
 8009ed0:	f7fd feb2 	bl	8007c38 <xTaskCreateStatic>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	4aa1      	ldr	r2, [pc, #644]	; (800a15c <Initilialise_App+0x2c8>)
 8009ed8:	6053      	str	r3, [r2, #4]
										&xTaskBuffer.Process_ADC
										);
#endif

#ifdef BSP_PROCESS_AUDIO
	xHandle.Process_AUDIO = xTaskCreateStatic
 8009eda:	4ba5      	ldr	r3, [pc, #660]	; (800a170 <Initilialise_App+0x2dc>)
 8009edc:	9302      	str	r3, [sp, #8]
 8009ede:	4ba5      	ldr	r3, [pc, #660]	; (800a174 <Initilialise_App+0x2e0>)
 8009ee0:	9301      	str	r3, [sp, #4]
 8009ee2:	230a      	movs	r3, #10
 8009ee4:	9300      	str	r3, [sp, #0]
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009eec:	49a2      	ldr	r1, [pc, #648]	; (800a178 <Initilialise_App+0x2e4>)
 8009eee:	48a3      	ldr	r0, [pc, #652]	; (800a17c <Initilialise_App+0x2e8>)
 8009ef0:	f7fd fea2 	bl	8007c38 <xTaskCreateStatic>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	4a99      	ldr	r2, [pc, #612]	; (800a15c <Initilialise_App+0x2c8>)
 8009ef8:	6093      	str	r3, [r2, #8]
										&xTaskBuffer.Process_AUDIO
										);
#endif

#ifdef BSP_PROCESS_CAN
	xHandle.Process_CAN = xTaskCreateStatic
 8009efa:	4ba1      	ldr	r3, [pc, #644]	; (800a180 <Initilialise_App+0x2ec>)
 8009efc:	9302      	str	r3, [sp, #8]
 8009efe:	4ba1      	ldr	r3, [pc, #644]	; (800a184 <Initilialise_App+0x2f0>)
 8009f00:	9301      	str	r3, [sp, #4]
 8009f02:	2305      	movs	r3, #5
 8009f04:	9300      	str	r3, [sp, #0]
 8009f06:	2301      	movs	r3, #1
 8009f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f0c:	499e      	ldr	r1, [pc, #632]	; (800a188 <Initilialise_App+0x2f4>)
 8009f0e:	489f      	ldr	r0, [pc, #636]	; (800a18c <Initilialise_App+0x2f8>)
 8009f10:	f7fd fe92 	bl	8007c38 <xTaskCreateStatic>
 8009f14:	4603      	mov	r3, r0
 8009f16:	4a91      	ldr	r2, [pc, #580]	; (800a15c <Initilialise_App+0x2c8>)
 8009f18:	60d3      	str	r3, [r2, #12]
										&xTaskBuffer.Process_CAN
										);
#endif

#ifdef BSP_PROCESS_CONTROL
	xHandle.Process_CONTROL = xTaskCreateStatic
 8009f1a:	4b9d      	ldr	r3, [pc, #628]	; (800a190 <Initilialise_App+0x2fc>)
 8009f1c:	9302      	str	r3, [sp, #8]
 8009f1e:	4b9d      	ldr	r3, [pc, #628]	; (800a194 <Initilialise_App+0x300>)
 8009f20:	9301      	str	r3, [sp, #4]
 8009f22:	2304      	movs	r3, #4
 8009f24:	9300      	str	r3, [sp, #0]
 8009f26:	2301      	movs	r3, #1
 8009f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f2c:	499a      	ldr	r1, [pc, #616]	; (800a198 <Initilialise_App+0x304>)
 8009f2e:	489b      	ldr	r0, [pc, #620]	; (800a19c <Initilialise_App+0x308>)
 8009f30:	f7fd fe82 	bl	8007c38 <xTaskCreateStatic>
 8009f34:	4603      	mov	r3, r0
 8009f36:	4a89      	ldr	r2, [pc, #548]	; (800a15c <Initilialise_App+0x2c8>)
 8009f38:	6113      	str	r3, [r2, #16]
										&xTaskBuffer.Process_CONTROL
										);
#endif

#ifdef BSP_PROCESS_FLASH
	xHandle.Process_FLASH = xTaskCreateStatic
 8009f3a:	4b99      	ldr	r3, [pc, #612]	; (800a1a0 <Initilialise_App+0x30c>)
 8009f3c:	9302      	str	r3, [sp, #8]
 8009f3e:	4b99      	ldr	r3, [pc, #612]	; (800a1a4 <Initilialise_App+0x310>)
 8009f40:	9301      	str	r3, [sp, #4]
 8009f42:	2302      	movs	r3, #2
 8009f44:	9300      	str	r3, [sp, #0]
 8009f46:	2301      	movs	r3, #1
 8009f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f4c:	4996      	ldr	r1, [pc, #600]	; (800a1a8 <Initilialise_App+0x314>)
 8009f4e:	4897      	ldr	r0, [pc, #604]	; (800a1ac <Initilialise_App+0x318>)
 8009f50:	f7fd fe72 	bl	8007c38 <xTaskCreateStatic>
 8009f54:	4603      	mov	r3, r0
 8009f56:	4a81      	ldr	r2, [pc, #516]	; (800a15c <Initilialise_App+0x2c8>)
 8009f58:	6153      	str	r3, [r2, #20]
										&xTaskBuffer.Process_FLASH
										);
#endif

#ifdef BSP_PROCESS_POWERSWITCH
	xHandle.Process_POWERSWITCH = xTaskCreateStatic
 8009f5a:	4b95      	ldr	r3, [pc, #596]	; (800a1b0 <Initilialise_App+0x31c>)
 8009f5c:	9302      	str	r3, [sp, #8]
 8009f5e:	4b95      	ldr	r3, [pc, #596]	; (800a1b4 <Initilialise_App+0x320>)
 8009f60:	9301      	str	r3, [sp, #4]
 8009f62:	2307      	movs	r3, #7
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	2301      	movs	r3, #1
 8009f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f6c:	4992      	ldr	r1, [pc, #584]	; (800a1b8 <Initilialise_App+0x324>)
 8009f6e:	4893      	ldr	r0, [pc, #588]	; (800a1bc <Initilialise_App+0x328>)
 8009f70:	f7fd fe62 	bl	8007c38 <xTaskCreateStatic>
 8009f74:	4603      	mov	r3, r0
 8009f76:	4a79      	ldr	r2, [pc, #484]	; (800a15c <Initilialise_App+0x2c8>)
 8009f78:	6193      	str	r3, [r2, #24]
										&xTaskBuffer.Process_POWERSWITCH
										);
#endif

#ifdef BSP_PROCESS_RTC
	xHandle.Process_RTC = xTaskCreateStatic
 8009f7a:	4b91      	ldr	r3, [pc, #580]	; (800a1c0 <Initilialise_App+0x32c>)
 8009f7c:	9302      	str	r3, [sp, #8]
 8009f7e:	4b91      	ldr	r3, [pc, #580]	; (800a1c4 <Initilialise_App+0x330>)
 8009f80:	9301      	str	r3, [sp, #4]
 8009f82:	2303      	movs	r3, #3
 8009f84:	9300      	str	r3, [sp, #0]
 8009f86:	2301      	movs	r3, #1
 8009f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f8c:	498e      	ldr	r1, [pc, #568]	; (800a1c8 <Initilialise_App+0x334>)
 8009f8e:	488f      	ldr	r0, [pc, #572]	; (800a1cc <Initilialise_App+0x338>)
 8009f90:	f7fd fe52 	bl	8007c38 <xTaskCreateStatic>
 8009f94:	4603      	mov	r3, r0
 8009f96:	4a71      	ldr	r2, [pc, #452]	; (800a15c <Initilialise_App+0x2c8>)
 8009f98:	61d3      	str	r3, [r2, #28]
										&xTaskBuffer.Process_RTC
										);
#endif

#ifdef BSP_PROCESS_SDCARD
	xHandle.Process_SDCARD = xTaskCreateStatic
 8009f9a:	4b8d      	ldr	r3, [pc, #564]	; (800a1d0 <Initilialise_App+0x33c>)
 8009f9c:	9302      	str	r3, [sp, #8]
 8009f9e:	4b8d      	ldr	r3, [pc, #564]	; (800a1d4 <Initilialise_App+0x340>)
 8009fa0:	9301      	str	r3, [sp, #4]
 8009fa2:	2309      	movs	r3, #9
 8009fa4:	9300      	str	r3, [sp, #0]
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fac:	498a      	ldr	r1, [pc, #552]	; (800a1d8 <Initilialise_App+0x344>)
 8009fae:	488b      	ldr	r0, [pc, #556]	; (800a1dc <Initilialise_App+0x348>)
 8009fb0:	f7fd fe42 	bl	8007c38 <xTaskCreateStatic>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	4a69      	ldr	r2, [pc, #420]	; (800a15c <Initilialise_App+0x2c8>)
 8009fb8:	6213      	str	r3, [r2, #32]
										&xTaskBuffer.Process_SDCARD
										);
#endif

#ifdef BSP_PROCESS_TELEMETRY
	xHandle.Process_TELEMETRY = xTaskCreateStatic
 8009fba:	4b89      	ldr	r3, [pc, #548]	; (800a1e0 <Initilialise_App+0x34c>)
 8009fbc:	9302      	str	r3, [sp, #8]
 8009fbe:	4b89      	ldr	r3, [pc, #548]	; (800a1e4 <Initilialise_App+0x350>)
 8009fc0:	9301      	str	r3, [sp, #4]
 8009fc2:	2308      	movs	r3, #8
 8009fc4:	9300      	str	r3, [sp, #0]
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fcc:	4986      	ldr	r1, [pc, #536]	; (800a1e8 <Initilialise_App+0x354>)
 8009fce:	4887      	ldr	r0, [pc, #540]	; (800a1ec <Initilialise_App+0x358>)
 8009fd0:	f7fd fe32 	bl	8007c38 <xTaskCreateStatic>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	4a61      	ldr	r2, [pc, #388]	; (800a15c <Initilialise_App+0x2c8>)
 8009fd8:	6253      	str	r3, [r2, #36]	; 0x24


/********************* Binary Semaphore Create **********************/

#ifdef BSP_PROCESS_ADC
	xSemHandle.Process_ADC 			= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_ADC);
 8009fda:	2303      	movs	r3, #3
 8009fdc:	9300      	str	r3, [sp, #0]
 8009fde:	4b84      	ldr	r3, [pc, #528]	; (800a1f0 <Initilialise_App+0x35c>)
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	2001      	movs	r0, #1
 8009fe6:	f7fd f87f 	bl	80070e8 <xQueueGenericCreateStatic>
 8009fea:	4603      	mov	r3, r0
 8009fec:	4a81      	ldr	r2, [pc, #516]	; (800a1f4 <Initilialise_App+0x360>)
 8009fee:	6013      	str	r3, [r2, #0]
#endif

#ifdef BSP_PROCESS_AUDIO
	xSemHandle.Process_AUDIO 		= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_AUDIO);
 8009ff0:	2303      	movs	r3, #3
 8009ff2:	9300      	str	r3, [sp, #0]
 8009ff4:	4b80      	ldr	r3, [pc, #512]	; (800a1f8 <Initilialise_App+0x364>)
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	2001      	movs	r0, #1
 8009ffc:	f7fd f874 	bl	80070e8 <xQueueGenericCreateStatic>
 800a000:	4603      	mov	r3, r0
 800a002:	4a7c      	ldr	r2, [pc, #496]	; (800a1f4 <Initilialise_App+0x360>)
 800a004:	6053      	str	r3, [r2, #4]
#endif

#ifdef BSP_PROCESS_CAN
	xSemHandle.Process_CAN 			= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CAN);
 800a006:	2303      	movs	r3, #3
 800a008:	9300      	str	r3, [sp, #0]
 800a00a:	4b7c      	ldr	r3, [pc, #496]	; (800a1fc <Initilialise_App+0x368>)
 800a00c:	2200      	movs	r2, #0
 800a00e:	2100      	movs	r1, #0
 800a010:	2001      	movs	r0, #1
 800a012:	f7fd f869 	bl	80070e8 <xQueueGenericCreateStatic>
 800a016:	4603      	mov	r3, r0
 800a018:	4a76      	ldr	r2, [pc, #472]	; (800a1f4 <Initilialise_App+0x360>)
 800a01a:	6093      	str	r3, [r2, #8]
#endif

#ifdef BSP_PROCESS_CONTROL
	xSemHandle.Process_CONTROL 		= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CONTROL);
 800a01c:	2303      	movs	r3, #3
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	4b77      	ldr	r3, [pc, #476]	; (800a200 <Initilialise_App+0x36c>)
 800a022:	2200      	movs	r2, #0
 800a024:	2100      	movs	r1, #0
 800a026:	2001      	movs	r0, #1
 800a028:	f7fd f85e 	bl	80070e8 <xQueueGenericCreateStatic>
 800a02c:	4603      	mov	r3, r0
 800a02e:	4a71      	ldr	r2, [pc, #452]	; (800a1f4 <Initilialise_App+0x360>)
 800a030:	60d3      	str	r3, [r2, #12]
#endif

#ifdef BSP_PROCESS_FLASH
	xSemHandle.Process_FLASH 		= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_FLASH);
 800a032:	2303      	movs	r3, #3
 800a034:	9300      	str	r3, [sp, #0]
 800a036:	4b73      	ldr	r3, [pc, #460]	; (800a204 <Initilialise_App+0x370>)
 800a038:	2200      	movs	r2, #0
 800a03a:	2100      	movs	r1, #0
 800a03c:	2001      	movs	r0, #1
 800a03e:	f7fd f853 	bl	80070e8 <xQueueGenericCreateStatic>
 800a042:	4603      	mov	r3, r0
 800a044:	4a6b      	ldr	r2, [pc, #428]	; (800a1f4 <Initilialise_App+0x360>)
 800a046:	6113      	str	r3, [r2, #16]
#endif

#ifdef BSP_PROCESS_POWERSWITCH
	xSemHandle.Process_POWERSWITCH 	= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_POWERSWITCH);
 800a048:	2303      	movs	r3, #3
 800a04a:	9300      	str	r3, [sp, #0]
 800a04c:	4b6e      	ldr	r3, [pc, #440]	; (800a208 <Initilialise_App+0x374>)
 800a04e:	2200      	movs	r2, #0
 800a050:	2100      	movs	r1, #0
 800a052:	2001      	movs	r0, #1
 800a054:	f7fd f848 	bl	80070e8 <xQueueGenericCreateStatic>
 800a058:	4603      	mov	r3, r0
 800a05a:	4a66      	ldr	r2, [pc, #408]	; (800a1f4 <Initilialise_App+0x360>)
 800a05c:	6153      	str	r3, [r2, #20]
#endif

#ifdef BSP_PROCESS_RTC
	xSemHandle.Process_RTC 			= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_RTC);
 800a05e:	2303      	movs	r3, #3
 800a060:	9300      	str	r3, [sp, #0]
 800a062:	4b6a      	ldr	r3, [pc, #424]	; (800a20c <Initilialise_App+0x378>)
 800a064:	2200      	movs	r2, #0
 800a066:	2100      	movs	r1, #0
 800a068:	2001      	movs	r0, #1
 800a06a:	f7fd f83d 	bl	80070e8 <xQueueGenericCreateStatic>
 800a06e:	4603      	mov	r3, r0
 800a070:	4a60      	ldr	r2, [pc, #384]	; (800a1f4 <Initilialise_App+0x360>)
 800a072:	6193      	str	r3, [r2, #24]
#endif

#ifdef BSP_PROCESS_SDCARD
	xSemHandle.Process_SDCARD 		= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_SDCARD);
 800a074:	2303      	movs	r3, #3
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	4b65      	ldr	r3, [pc, #404]	; (800a210 <Initilialise_App+0x37c>)
 800a07a:	2200      	movs	r2, #0
 800a07c:	2100      	movs	r1, #0
 800a07e:	2001      	movs	r0, #1
 800a080:	f7fd f832 	bl	80070e8 <xQueueGenericCreateStatic>
 800a084:	4603      	mov	r3, r0
 800a086:	4a5b      	ldr	r2, [pc, #364]	; (800a1f4 <Initilialise_App+0x360>)
 800a088:	61d3      	str	r3, [r2, #28]
#endif

#ifdef BSP_PROCESS_TELEMETRY
	xSemHandle.Process_TELEMETRY 	= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_TELEMETRY);
 800a08a:	2303      	movs	r3, #3
 800a08c:	9300      	str	r3, [sp, #0]
 800a08e:	4b61      	ldr	r3, [pc, #388]	; (800a214 <Initilialise_App+0x380>)
 800a090:	2200      	movs	r2, #0
 800a092:	2100      	movs	r1, #0
 800a094:	2001      	movs	r0, #1
 800a096:	f7fd f827 	bl	80070e8 <xQueueGenericCreateStatic>
 800a09a:	4603      	mov	r3, r0
 800a09c:	4a55      	ldr	r2, [pc, #340]	; (800a1f4 <Initilialise_App+0x360>)
 800a09e:	6213      	str	r3, [r2, #32]
#endif


	/************************ Create  Software Timers ***********************************/

    xTimerID.periodic = 	osTimerNew( APP_periodicTimerIRQHandler			,
 800a0a0:	4b5d      	ldr	r3, [pc, #372]	; (800a218 <Initilialise_App+0x384>)
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	2101      	movs	r1, #1
 800a0a6:	485d      	ldr	r0, [pc, #372]	; (800a21c <Initilialise_App+0x388>)
 800a0a8:	f7fc fe24 	bl	8006cf4 <osTimerNew>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	4a5c      	ldr	r2, [pc, #368]	; (800a220 <Initilialise_App+0x38c>)
 800a0b0:	6013      	str	r3, [r2, #0]
    									osTimerPeriodic						,
										NULL								,
										&APP_periodic_attributes			);

    xTimerID.timeout  = 	osTimerNew( APP_timeoutTimerIRQHandler			,
 800a0b2:	4b5c      	ldr	r3, [pc, #368]	; (800a224 <Initilialise_App+0x390>)
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	2100      	movs	r1, #0
 800a0b8:	485b      	ldr	r0, [pc, #364]	; (800a228 <Initilialise_App+0x394>)
 800a0ba:	f7fc fe1b 	bl	8006cf4 <osTimerNew>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	4a57      	ldr	r2, [pc, #348]	; (800a220 <Initilialise_App+0x38c>)
 800a0c2:	6053      	str	r3, [r2, #4]
										NULL								,
										&APP_timeout_attributes				);

    /* Create Broadcast Timers */

    xTimerID.broadcast01 = 	osTimerNew( APP_broadcast01TimerIRQHandler		,
 800a0c4:	4b59      	ldr	r3, [pc, #356]	; (800a22c <Initilialise_App+0x398>)
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	2101      	movs	r1, #1
 800a0ca:	4859      	ldr	r0, [pc, #356]	; (800a230 <Initilialise_App+0x39c>)
 800a0cc:	f7fc fe12 	bl	8006cf4 <osTimerNew>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	4a53      	ldr	r2, [pc, #332]	; (800a220 <Initilialise_App+0x38c>)
 800a0d4:	6093      	str	r3, [r2, #8]
    									osTimerPeriodic						,
										NULL								,
										&APP_broadcast01_attributes			);

    xTimerID.broadcast02 = 	osTimerNew( APP_broadcast02TimerIRQHandler		,
 800a0d6:	4b57      	ldr	r3, [pc, #348]	; (800a234 <Initilialise_App+0x3a0>)
 800a0d8:	2200      	movs	r2, #0
 800a0da:	2101      	movs	r1, #1
 800a0dc:	4856      	ldr	r0, [pc, #344]	; (800a238 <Initilialise_App+0x3a4>)
 800a0de:	f7fc fe09 	bl	8006cf4 <osTimerNew>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	4a4e      	ldr	r2, [pc, #312]	; (800a220 <Initilialise_App+0x38c>)
 800a0e6:	60d3      	str	r3, [r2, #12]
    									osTimerPeriodic						,
										NULL								,
										&APP_broadcast02_attributes			);

    xTimerID.broadcast03 = 	osTimerNew( APP_broadcast03TimerIRQHandler		,
 800a0e8:	4b54      	ldr	r3, [pc, #336]	; (800a23c <Initilialise_App+0x3a8>)
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	2101      	movs	r1, #1
 800a0ee:	4854      	ldr	r0, [pc, #336]	; (800a240 <Initilialise_App+0x3ac>)
 800a0f0:	f7fc fe00 	bl	8006cf4 <osTimerNew>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	4a4a      	ldr	r2, [pc, #296]	; (800a220 <Initilialise_App+0x38c>)
 800a0f8:	6113      	str	r3, [r2, #16]
    									osTimerPeriodic						,
										NULL								,
										&APP_broadcast03_attributes			);

    xTimerID.broadcast04 = 	osTimerNew( APP_broadcast04TimerIRQHandler		,
 800a0fa:	4b52      	ldr	r3, [pc, #328]	; (800a244 <Initilialise_App+0x3b0>)
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	2101      	movs	r1, #1
 800a100:	4851      	ldr	r0, [pc, #324]	; (800a248 <Initilialise_App+0x3b4>)
 800a102:	f7fc fdf7 	bl	8006cf4 <osTimerNew>
 800a106:	4603      	mov	r3, r0
 800a108:	4a45      	ldr	r2, [pc, #276]	; (800a220 <Initilialise_App+0x38c>)
 800a10a:	6153      	str	r3, [r2, #20]
    									osTimerPeriodic						,
										NULL								,
										&APP_broadcast04_attributes			);

    xTimerID.broadcast05 = 	osTimerNew( APP_broadcast05TimerIRQHandler		,
 800a10c:	4b4f      	ldr	r3, [pc, #316]	; (800a24c <Initilialise_App+0x3b8>)
 800a10e:	2200      	movs	r2, #0
 800a110:	2101      	movs	r1, #1
 800a112:	484f      	ldr	r0, [pc, #316]	; (800a250 <Initilialise_App+0x3bc>)
 800a114:	f7fc fdee 	bl	8006cf4 <osTimerNew>
 800a118:	4603      	mov	r3, r0
 800a11a:	4a41      	ldr	r2, [pc, #260]	; (800a220 <Initilialise_App+0x38c>)
 800a11c:	6193      	str	r3, [r2, #24]
    									osTimerPeriodic						,
										NULL								,
										&APP_broadcast05_attributes			);

    xTimerID.broadcast06 = 	osTimerNew( APP_broadcast06TimerIRQHandler		,
 800a11e:	4b4d      	ldr	r3, [pc, #308]	; (800a254 <Initilialise_App+0x3c0>)
 800a120:	2200      	movs	r2, #0
 800a122:	2101      	movs	r1, #1
 800a124:	484c      	ldr	r0, [pc, #304]	; (800a258 <Initilialise_App+0x3c4>)
 800a126:	f7fc fde5 	bl	8006cf4 <osTimerNew>
 800a12a:	4603      	mov	r3, r0
 800a12c:	4a3c      	ldr	r2, [pc, #240]	; (800a220 <Initilialise_App+0x38c>)
 800a12e:	61d3      	str	r3, [r2, #28]
    									osTimerPeriodic						,
										NULL								,
										&APP_broadcast06_attributes			);

    xTimerID.broadcast07 = 	osTimerNew( APP_broadcast07TimerIRQHandler		,
 800a130:	4b4a      	ldr	r3, [pc, #296]	; (800a25c <Initilialise_App+0x3c8>)
 800a132:	2200      	movs	r2, #0
 800a134:	2101      	movs	r1, #1
 800a136:	484a      	ldr	r0, [pc, #296]	; (800a260 <Initilialise_App+0x3cc>)
 800a138:	f7fc fddc 	bl	8006cf4 <osTimerNew>
 800a13c:	4603      	mov	r3, r0
 800a13e:	4a38      	ldr	r2, [pc, #224]	; (800a220 <Initilialise_App+0x38c>)
 800a140:	6213      	str	r3, [r2, #32]
//										&APP_broadcast08_attributes			);

    /*
    * 10ms Periodic Timer Start
    */
    osTimerStart(xTimerID.periodic, pdMS_TO_TICKS(10));
 800a142:	4b37      	ldr	r3, [pc, #220]	; (800a220 <Initilialise_App+0x38c>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	210a      	movs	r1, #10
 800a148:	4618      	mov	r0, r3
 800a14a:	e08b      	b.n	800a264 <Initilialise_App+0x3d0>
 800a14c:	20005ef8 	.word	0x20005ef8
 800a150:	20006290 	.word	0x20006290
 800a154:	0800c474 	.word	0x0800c474
 800a158:	0800a2e5 	.word	0x0800a2e5
 800a15c:	2000ba90 	.word	0x2000ba90
 800a160:	20005f54 	.word	0x20005f54
 800a164:	20007290 	.word	0x20007290
 800a168:	0800c48c 	.word	0x0800c48c
 800a16c:	0800a315 	.word	0x0800a315
 800a170:	20005fb0 	.word	0x20005fb0
 800a174:	20007a90 	.word	0x20007a90
 800a178:	0800c4a0 	.word	0x0800c4a0
 800a17c:	0800a41d 	.word	0x0800a41d
 800a180:	2000600c 	.word	0x2000600c
 800a184:	20008290 	.word	0x20008290
 800a188:	0800c4b4 	.word	0x0800c4b4
 800a18c:	0800a49d 	.word	0x0800a49d
 800a190:	20006068 	.word	0x20006068
 800a194:	20008a90 	.word	0x20008a90
 800a198:	0800c4c8 	.word	0x0800c4c8
 800a19c:	0800a5a5 	.word	0x0800a5a5
 800a1a0:	200060c4 	.word	0x200060c4
 800a1a4:	20009290 	.word	0x20009290
 800a1a8:	0800c4e0 	.word	0x0800c4e0
 800a1ac:	0800a625 	.word	0x0800a625
 800a1b0:	20006120 	.word	0x20006120
 800a1b4:	20009a90 	.word	0x20009a90
 800a1b8:	0800c4f4 	.word	0x0800c4f4
 800a1bc:	0800a6a5 	.word	0x0800a6a5
 800a1c0:	2000617c 	.word	0x2000617c
 800a1c4:	2000a290 	.word	0x2000a290
 800a1c8:	0800c504 	.word	0x0800c504
 800a1cc:	0800a725 	.word	0x0800a725
 800a1d0:	200061d8 	.word	0x200061d8
 800a1d4:	2000aa90 	.word	0x2000aa90
 800a1d8:	0800c518 	.word	0x0800c518
 800a1dc:	0800a7a5 	.word	0x0800a7a5
 800a1e0:	20006234 	.word	0x20006234
 800a1e4:	2000b290 	.word	0x2000b290
 800a1e8:	0800c52c 	.word	0x0800c52c
 800a1ec:	0800a825 	.word	0x0800a825
 800a1f0:	2000bab8 	.word	0x2000bab8
 800a1f4:	2000bd88 	.word	0x2000bd88
 800a1f8:	2000bb08 	.word	0x2000bb08
 800a1fc:	2000bb58 	.word	0x2000bb58
 800a200:	2000bba8 	.word	0x2000bba8
 800a204:	2000bbf8 	.word	0x2000bbf8
 800a208:	2000bc48 	.word	0x2000bc48
 800a20c:	2000bc98 	.word	0x2000bc98
 800a210:	2000bce8 	.word	0x2000bce8
 800a214:	2000bd38 	.word	0x2000bd38
 800a218:	0800c6d8 	.word	0x0800c6d8
 800a21c:	08009cc1 	.word	0x08009cc1
 800a220:	2000bdd0 	.word	0x2000bdd0
 800a224:	0800c6e8 	.word	0x0800c6e8
 800a228:	08009cad 	.word	0x08009cad
 800a22c:	0800c668 	.word	0x0800c668
 800a230:	08009d35 	.word	0x08009d35
 800a234:	0800c678 	.word	0x0800c678
 800a238:	08009d5d 	.word	0x08009d5d
 800a23c:	0800c688 	.word	0x0800c688
 800a240:	08009d85 	.word	0x08009d85
 800a244:	0800c698 	.word	0x0800c698
 800a248:	08009dad 	.word	0x08009dad
 800a24c:	0800c6a8 	.word	0x0800c6a8
 800a250:	08009dd5 	.word	0x08009dd5
 800a254:	0800c6b8 	.word	0x0800c6b8
 800a258:	08009dfd 	.word	0x08009dfd
 800a25c:	0800c6c8 	.word	0x0800c6c8
 800a260:	08009e25 	.word	0x08009e25
 800a264:	f7fc fdc2 	bl	8006dec <osTimerStart>
    /* Broadcast periodic sw timer start */

    /*
     * Broadcast01 - Start for Message 03
     */
    osTimerStart(xTimerID.broadcast01 , pdMS_TO_TICKS(100));
 800a268:	4b19      	ldr	r3, [pc, #100]	; (800a2d0 <Initilialise_App+0x43c>)
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	2164      	movs	r1, #100	; 0x64
 800a26e:	4618      	mov	r0, r3
 800a270:	f7fc fdbc 	bl	8006dec <osTimerStart>

    /*
    * Broadcast02 - Start for Message 04
    */
    osTimerStart(xTimerID.broadcast02 , pdMS_TO_TICKS(200));
 800a274:	4b16      	ldr	r3, [pc, #88]	; (800a2d0 <Initilialise_App+0x43c>)
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	21c8      	movs	r1, #200	; 0xc8
 800a27a:	4618      	mov	r0, r3
 800a27c:	f7fc fdb6 	bl	8006dec <osTimerStart>

    /*
    * Broadcast03 - Start for Message 05
    */
    osTimerStart(xTimerID.broadcast03 , pdMS_TO_TICKS(300));
 800a280:	4b13      	ldr	r3, [pc, #76]	; (800a2d0 <Initilialise_App+0x43c>)
 800a282:	691b      	ldr	r3, [r3, #16]
 800a284:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800a288:	4618      	mov	r0, r3
 800a28a:	f7fc fdaf 	bl	8006dec <osTimerStart>

    /*
     * Broadcast04 - Start for Message 11
     */
    osTimerStart(xTimerID.broadcast01 , pdMS_TO_TICKS(400));
 800a28e:	4b10      	ldr	r3, [pc, #64]	; (800a2d0 <Initilialise_App+0x43c>)
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800a296:	4618      	mov	r0, r3
 800a298:	f7fc fda8 	bl	8006dec <osTimerStart>

    /*
    * Broadcast05 - Start for Message 12
    */
    osTimerStart(xTimerID.broadcast05 , pdMS_TO_TICKS(500));
 800a29c:	4b0c      	ldr	r3, [pc, #48]	; (800a2d0 <Initilialise_App+0x43c>)
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f7fc fda1 	bl	8006dec <osTimerStart>

    /*
    * Broadcast06 - Start for Message 19
    */
    osTimerStart(xTimerID.broadcast06 , pdMS_TO_TICKS(600));
 800a2aa:	4b09      	ldr	r3, [pc, #36]	; (800a2d0 <Initilialise_App+0x43c>)
 800a2ac:	69db      	ldr	r3, [r3, #28]
 800a2ae:	f44f 7116 	mov.w	r1, #600	; 0x258
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7fc fd9a 	bl	8006dec <osTimerStart>

    /*
    * Broadcast07 - Start for Message 20
    */
    osTimerStart(xTimerID.broadcast07 , pdMS_TO_TICKS(100));
 800a2b8:	4b05      	ldr	r3, [pc, #20]	; (800a2d0 <Initilialise_App+0x43c>)
 800a2ba:	6a1b      	ldr	r3, [r3, #32]
 800a2bc:	2164      	movs	r1, #100	; 0x64
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7fc fd94 	bl	8006dec <osTimerStart>
    vTaskDelay(pdMS_TO_TICKS(10));
 800a2c4:	200a      	movs	r0, #10
 800a2c6:	f7fd fe59 	bl	8007f7c <vTaskDelay>

#ifdef DEBUG_MODE
    HAL_UART_Receive_DMA(&huart1, (U8 *)&__GL.DEBUG_Buffer[0], (U8)DEBUG_MSG_SIZE);
#endif

}
 800a2ca:	bf00      	nop
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	2000bdd0 	.word	0x2000bdd0

0800a2d4 <MAIN_App>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void MAIN_App(void)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	af00      	add	r7, sp, #0
	/* Create Threads, Semph, SW Timers */
    Initilialise_App();
 800a2d8:	f7ff fddc 	bl	8009e94 <Initilialise_App>
    /* Start Scheduler */
    vTaskStartScheduler();
 800a2dc:	f7fd fe82 	bl	8007fe4 <vTaskStartScheduler>

}
 800a2e0:	bf00      	nop
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <Process_BodyControlMAIN_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_BodyControlMAIN_TaskHandler(void* param)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]

	BodyControlMAIN_StartUP();
 800a2ec:	f000 fae8 	bl	800a8c0 <BodyControlMAIN_StartUP>
	while(1)
	{

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_BODYCONTROLMAIN_THREADNAME, "STARTED");
 800a2f0:	4905      	ldr	r1, [pc, #20]	; (800a308 <Process_BodyControlMAIN_TaskHandler+0x24>)
 800a2f2:	4806      	ldr	r0, [pc, #24]	; (800a30c <Process_BodyControlMAIN_TaskHandler+0x28>)
 800a2f4:	f7ff fdaa 	bl	8009e4c <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        BodyControlMAIN(); /* Main Application */
 800a2f8:	f000 fb0a 	bl	800a910 <BodyControlMAIN>
//        Process_SDCARD_Run();
//        Process_TELEMETRY_Run();

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_BODYCONTROLMAIN_THREADNAME, "ENDED");
 800a2fc:	4904      	ldr	r1, [pc, #16]	; (800a310 <Process_BodyControlMAIN_TaskHandler+0x2c>)
 800a2fe:	4803      	ldr	r0, [pc, #12]	; (800a30c <Process_BodyControlMAIN_TaskHandler+0x28>)
 800a300:	f7ff fda4 	bl	8009e4c <DEBUG_printThread>
        DEBUG_printThread((char *)PROCESS_BODYCONTROLMAIN_THREADNAME, "STARTED");
 800a304:	e7f4      	b.n	800a2f0 <Process_BodyControlMAIN_TaskHandler+0xc>
 800a306:	bf00      	nop
 800a308:	0800c540 	.word	0x0800c540
 800a30c:	0800c474 	.word	0x0800c474
 800a310:	0800c548 	.word	0x0800c548

0800a314 <Process_ADC_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_ADC_TaskHandler(void *params)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af02      	add	r7, sp, #8
 800a31a:	6078      	str	r0, [r7, #4]
	ModuleADC_StartUP();
 800a31c:	f000 fb2e 	bl	800a97c <ModuleADC_StartUP>


 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_ADC = xQueueSemaphoreTake(xSemHandle.Process_ADC, osWaitForever);
 800a320:	4b15      	ldr	r3, [pc, #84]	; (800a378 <Process_ADC_TaskHandler+0x64>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f04f 31ff 	mov.w	r1, #4294967295
 800a328:	4618      	mov	r0, r3
 800a32a:	f7fd f9f3 	bl	8007714 <xQueueSemaphoreTake>
 800a32e:	4603      	mov	r3, r0
 800a330:	4a12      	ldr	r2, [pc, #72]	; (800a37c <Process_ADC_TaskHandler+0x68>)
 800a332:	6013      	str	r3, [r2, #0]
	if (pdTRUE == xSemResult.Process_ADC)
 800a334:	4b11      	ldr	r3, [pc, #68]	; (800a37c <Process_ADC_TaskHandler+0x68>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2b01      	cmp	r3, #1
 800a33a:	d111      	bne.n	800a360 <Process_ADC_TaskHandler+0x4c>
	{

		/* Semph has taken */
		__GL.itc.flag.adc = FALSE;
 800a33c:	4a10      	ldr	r2, [pc, #64]	; (800a380 <Process_ADC_TaskHandler+0x6c>)
 800a33e:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a342:	f36f 0300 	bfc	r3, #0, #1
 800a346:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_ADC_THREADNAME, "STARTED");
 800a34a:	490e      	ldr	r1, [pc, #56]	; (800a384 <Process_ADC_TaskHandler+0x70>)
 800a34c:	480e      	ldr	r0, [pc, #56]	; (800a388 <Process_ADC_TaskHandler+0x74>)
 800a34e:	f7ff fd7d 	bl	8009e4c <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleADC_MAIN(); /* Main Application */
 800a352:	f000 fc33 	bl	800abbc <ModuleADC_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_ADC_THREADNAME, "ENDED");
 800a356:	490d      	ldr	r1, [pc, #52]	; (800a38c <Process_ADC_TaskHandler+0x78>)
 800a358:	480b      	ldr	r0, [pc, #44]	; (800a388 <Process_ADC_TaskHandler+0x74>)
 800a35a:	f7ff fd77 	bl	8009e4c <DEBUG_printThread>
 800a35e:	e7df      	b.n	800a320 <Process_ADC_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_ADC = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_ADC);
 800a360:	2303      	movs	r3, #3
 800a362:	9300      	str	r3, [sp, #0]
 800a364:	4b0a      	ldr	r3, [pc, #40]	; (800a390 <Process_ADC_TaskHandler+0x7c>)
 800a366:	2200      	movs	r2, #0
 800a368:	2100      	movs	r1, #0
 800a36a:	2001      	movs	r0, #1
 800a36c:	f7fc febc 	bl	80070e8 <xQueueGenericCreateStatic>
 800a370:	4603      	mov	r3, r0
 800a372:	4a01      	ldr	r2, [pc, #4]	; (800a378 <Process_ADC_TaskHandler+0x64>)
 800a374:	6013      	str	r3, [r2, #0]
	xSemResult.Process_ADC = xQueueSemaphoreTake(xSemHandle.Process_ADC, osWaitForever);
 800a376:	e7d3      	b.n	800a320 <Process_ADC_TaskHandler+0xc>
 800a378:	2000bd88 	.word	0x2000bd88
 800a37c:	2000bdac 	.word	0x2000bdac
 800a380:	20000074 	.word	0x20000074
 800a384:	0800c540 	.word	0x0800c540
 800a388:	0800c48c 	.word	0x0800c48c
 800a38c:	0800c548 	.word	0x0800c548
 800a390:	2000bab8 	.word	0x2000bab8

0800a394 <Process_ADC_Run>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_ADC_Run(void)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af02      	add	r7, sp, #8
/* Message first, release later :) */

#ifdef DEBUG_THREAD
    DEBUG_printThread((char *)PROCESS_ADC_SEMAPHORENAME, "RELEASED");
 800a39a:	4919      	ldr	r1, [pc, #100]	; (800a400 <Process_ADC_Run+0x6c>)
 800a39c:	4819      	ldr	r0, [pc, #100]	; (800a404 <Process_ADC_Run+0x70>)
 800a39e:	f7ff fd55 	bl	8009e4c <DEBUG_printThread>
#endif

    xSemResult.Process_ADC = xSemaphoreGive(xSemHandle.Process_ADC);
 800a3a2:	4b19      	ldr	r3, [pc, #100]	; (800a408 <Process_ADC_Run+0x74>)
 800a3a4:	6818      	ldr	r0, [r3, #0]
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	f7fc ff38 	bl	8007220 <xQueueGenericSend>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	4a16      	ldr	r2, [pc, #88]	; (800a40c <Process_ADC_Run+0x78>)
 800a3b4:	6013      	str	r3, [r2, #0]

    if (pdPASS == xSemResult.Process_ADC)
 800a3b6:	4b15      	ldr	r3, [pc, #84]	; (800a40c <Process_ADC_Run+0x78>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d107      	bne.n	800a3ce <Process_ADC_Run+0x3a>
    {
        /* Bootloader Semaphore is Passed */
    	__GL.itc.flag.adc = TRUE;
 800a3be:	4a14      	ldr	r2, [pc, #80]	; (800a410 <Process_ADC_Run+0x7c>)
 800a3c0:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a3c4:	f043 0301 	orr.w	r3, r3, #1
 800a3c8:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00
   DEBUG_printThread((char *)PROCESS_ADC_SEMAPHORENAME, "ALREADY RUNNING");
#endif

        xSemHandle.Process_ADC = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_ADC);
    }
}
 800a3cc:	e015      	b.n	800a3fa <Process_ADC_Run+0x66>
    	__GL.itc.flag.adc = FALSE;
 800a3ce:	4a10      	ldr	r2, [pc, #64]	; (800a410 <Process_ADC_Run+0x7c>)
 800a3d0:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a3d4:	f36f 0300 	bfc	r3, #0, #1
 800a3d8:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00
   DEBUG_printThread((char *)PROCESS_ADC_SEMAPHORENAME, "ALREADY RUNNING");
 800a3dc:	490d      	ldr	r1, [pc, #52]	; (800a414 <Process_ADC_Run+0x80>)
 800a3de:	4809      	ldr	r0, [pc, #36]	; (800a404 <Process_ADC_Run+0x70>)
 800a3e0:	f7ff fd34 	bl	8009e4c <DEBUG_printThread>
        xSemHandle.Process_ADC = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_ADC);
 800a3e4:	2303      	movs	r3, #3
 800a3e6:	9300      	str	r3, [sp, #0]
 800a3e8:	4b0b      	ldr	r3, [pc, #44]	; (800a418 <Process_ADC_Run+0x84>)
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	2001      	movs	r0, #1
 800a3f0:	f7fc fe7a 	bl	80070e8 <xQueueGenericCreateStatic>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	4a04      	ldr	r2, [pc, #16]	; (800a408 <Process_ADC_Run+0x74>)
 800a3f8:	6013      	str	r3, [r2, #0]
}
 800a3fa:	bf00      	nop
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	0800c550 	.word	0x0800c550
 800a404:	0800c55c 	.word	0x0800c55c
 800a408:	2000bd88 	.word	0x2000bd88
 800a40c:	2000bdac 	.word	0x2000bdac
 800a410:	20000074 	.word	0x20000074
 800a414:	0800c570 	.word	0x0800c570
 800a418:	2000bab8 	.word	0x2000bab8

0800a41c <Process_AUDIO_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_AUDIO_TaskHandler(void *params)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af02      	add	r7, sp, #8
 800a422:	6078      	str	r0, [r7, #4]
	ModuleAUDIO_StartUP();
 800a424:	f000 fe88 	bl	800b138 <ModuleAUDIO_StartUP>

 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_AUDIO = xQueueSemaphoreTake(xSemHandle.Process_AUDIO, osWaitForever);
 800a428:	4b15      	ldr	r3, [pc, #84]	; (800a480 <Process_AUDIO_TaskHandler+0x64>)
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	f04f 31ff 	mov.w	r1, #4294967295
 800a430:	4618      	mov	r0, r3
 800a432:	f7fd f96f 	bl	8007714 <xQueueSemaphoreTake>
 800a436:	4603      	mov	r3, r0
 800a438:	4a12      	ldr	r2, [pc, #72]	; (800a484 <Process_AUDIO_TaskHandler+0x68>)
 800a43a:	6053      	str	r3, [r2, #4]
	if (pdTRUE == xSemResult.Process_AUDIO)
 800a43c:	4b11      	ldr	r3, [pc, #68]	; (800a484 <Process_AUDIO_TaskHandler+0x68>)
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	2b01      	cmp	r3, #1
 800a442:	d111      	bne.n	800a468 <Process_AUDIO_TaskHandler+0x4c>
	{

		/* Semph has taken */
		__GL.itc.flag.audio = FALSE;
 800a444:	4a10      	ldr	r2, [pc, #64]	; (800a488 <Process_AUDIO_TaskHandler+0x6c>)
 800a446:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a44a:	f36f 0341 	bfc	r3, #1, #1
 800a44e:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_AUDIO_THREADNAME, "STARTED");
 800a452:	490e      	ldr	r1, [pc, #56]	; (800a48c <Process_AUDIO_TaskHandler+0x70>)
 800a454:	480e      	ldr	r0, [pc, #56]	; (800a490 <Process_AUDIO_TaskHandler+0x74>)
 800a456:	f7ff fcf9 	bl	8009e4c <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleAUDIO_MAIN(); /* Main Application */
 800a45a:	f000 fe83 	bl	800b164 <ModuleAUDIO_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_AUDIO_THREADNAME, "ENDED");
 800a45e:	490d      	ldr	r1, [pc, #52]	; (800a494 <Process_AUDIO_TaskHandler+0x78>)
 800a460:	480b      	ldr	r0, [pc, #44]	; (800a490 <Process_AUDIO_TaskHandler+0x74>)
 800a462:	f7ff fcf3 	bl	8009e4c <DEBUG_printThread>
 800a466:	e7df      	b.n	800a428 <Process_AUDIO_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_AUDIO = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_AUDIO);
 800a468:	2303      	movs	r3, #3
 800a46a:	9300      	str	r3, [sp, #0]
 800a46c:	4b0a      	ldr	r3, [pc, #40]	; (800a498 <Process_AUDIO_TaskHandler+0x7c>)
 800a46e:	2200      	movs	r2, #0
 800a470:	2100      	movs	r1, #0
 800a472:	2001      	movs	r0, #1
 800a474:	f7fc fe38 	bl	80070e8 <xQueueGenericCreateStatic>
 800a478:	4603      	mov	r3, r0
 800a47a:	4a01      	ldr	r2, [pc, #4]	; (800a480 <Process_AUDIO_TaskHandler+0x64>)
 800a47c:	6053      	str	r3, [r2, #4]
	xSemResult.Process_AUDIO = xQueueSemaphoreTake(xSemHandle.Process_AUDIO, osWaitForever);
 800a47e:	e7d3      	b.n	800a428 <Process_AUDIO_TaskHandler+0xc>
 800a480:	2000bd88 	.word	0x2000bd88
 800a484:	2000bdac 	.word	0x2000bdac
 800a488:	20000074 	.word	0x20000074
 800a48c:	0800c540 	.word	0x0800c540
 800a490:	0800c4a0 	.word	0x0800c4a0
 800a494:	0800c548 	.word	0x0800c548
 800a498:	2000bb08 	.word	0x2000bb08

0800a49c <Process_CAN_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_CAN_TaskHandler(void *params)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af02      	add	r7, sp, #8
 800a4a2:	6078      	str	r0, [r7, #4]
	ModuleCAN_StartUP();
 800a4a4:	f000 feca 	bl	800b23c <ModuleCAN_StartUP>


 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_CAN = xQueueSemaphoreTake(xSemHandle.Process_CAN, osWaitForever);
 800a4a8:	4b15      	ldr	r3, [pc, #84]	; (800a500 <Process_CAN_TaskHandler+0x64>)
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	f04f 31ff 	mov.w	r1, #4294967295
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f7fd f92f 	bl	8007714 <xQueueSemaphoreTake>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	4a12      	ldr	r2, [pc, #72]	; (800a504 <Process_CAN_TaskHandler+0x68>)
 800a4ba:	6093      	str	r3, [r2, #8]
	if (pdTRUE == xSemResult.Process_CAN)
 800a4bc:	4b11      	ldr	r3, [pc, #68]	; (800a504 <Process_CAN_TaskHandler+0x68>)
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d111      	bne.n	800a4e8 <Process_CAN_TaskHandler+0x4c>
	{

		/* Semph has taken */
		__GL.itc.flag.can = FALSE;
 800a4c4:	4a10      	ldr	r2, [pc, #64]	; (800a508 <Process_CAN_TaskHandler+0x6c>)
 800a4c6:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a4ca:	f36f 0382 	bfc	r3, #2, #1
 800a4ce:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_CAN_THREADNAME, "STARTED");
 800a4d2:	490e      	ldr	r1, [pc, #56]	; (800a50c <Process_CAN_TaskHandler+0x70>)
 800a4d4:	480e      	ldr	r0, [pc, #56]	; (800a510 <Process_CAN_TaskHandler+0x74>)
 800a4d6:	f7ff fcb9 	bl	8009e4c <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleCAN_MAIN(); /* Main Application */
 800a4da:	f001 f853 	bl	800b584 <ModuleCAN_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_CAN_THREADNAME, "ENDED");
 800a4de:	490d      	ldr	r1, [pc, #52]	; (800a514 <Process_CAN_TaskHandler+0x78>)
 800a4e0:	480b      	ldr	r0, [pc, #44]	; (800a510 <Process_CAN_TaskHandler+0x74>)
 800a4e2:	f7ff fcb3 	bl	8009e4c <DEBUG_printThread>
 800a4e6:	e7df      	b.n	800a4a8 <Process_CAN_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_CAN = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CAN);
 800a4e8:	2303      	movs	r3, #3
 800a4ea:	9300      	str	r3, [sp, #0]
 800a4ec:	4b0a      	ldr	r3, [pc, #40]	; (800a518 <Process_CAN_TaskHandler+0x7c>)
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	2001      	movs	r0, #1
 800a4f4:	f7fc fdf8 	bl	80070e8 <xQueueGenericCreateStatic>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	4a01      	ldr	r2, [pc, #4]	; (800a500 <Process_CAN_TaskHandler+0x64>)
 800a4fc:	6093      	str	r3, [r2, #8]
	xSemResult.Process_CAN = xQueueSemaphoreTake(xSemHandle.Process_CAN, osWaitForever);
 800a4fe:	e7d3      	b.n	800a4a8 <Process_CAN_TaskHandler+0xc>
 800a500:	2000bd88 	.word	0x2000bd88
 800a504:	2000bdac 	.word	0x2000bdac
 800a508:	20000074 	.word	0x20000074
 800a50c:	0800c540 	.word	0x0800c540
 800a510:	0800c4b4 	.word	0x0800c4b4
 800a514:	0800c548 	.word	0x0800c548
 800a518:	2000bb58 	.word	0x2000bb58

0800a51c <Process_CAN_Run>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_CAN_Run(void)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af02      	add	r7, sp, #8
/* Message first, release later :) */

#ifdef DEBUG_THREAD
    DEBUG_printThread((char *)PROCESS_CAN_SEMAPHORENAME, "RELEASED");
 800a522:	4919      	ldr	r1, [pc, #100]	; (800a588 <Process_CAN_Run+0x6c>)
 800a524:	4819      	ldr	r0, [pc, #100]	; (800a58c <Process_CAN_Run+0x70>)
 800a526:	f7ff fc91 	bl	8009e4c <DEBUG_printThread>
#endif

    xSemResult.Process_CAN = xSemaphoreGive(xSemHandle.Process_CAN);
 800a52a:	4b19      	ldr	r3, [pc, #100]	; (800a590 <Process_CAN_Run+0x74>)
 800a52c:	6898      	ldr	r0, [r3, #8]
 800a52e:	2300      	movs	r3, #0
 800a530:	2200      	movs	r2, #0
 800a532:	2100      	movs	r1, #0
 800a534:	f7fc fe74 	bl	8007220 <xQueueGenericSend>
 800a538:	4603      	mov	r3, r0
 800a53a:	4a16      	ldr	r2, [pc, #88]	; (800a594 <Process_CAN_Run+0x78>)
 800a53c:	6093      	str	r3, [r2, #8]

    if (pdPASS == xSemResult.Process_CAN)
 800a53e:	4b15      	ldr	r3, [pc, #84]	; (800a594 <Process_CAN_Run+0x78>)
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d107      	bne.n	800a556 <Process_CAN_Run+0x3a>
    {
        /* Bootloader Semaphore is Passed */
    	__GL.itc.flag.can = TRUE;
 800a546:	4a14      	ldr	r2, [pc, #80]	; (800a598 <Process_CAN_Run+0x7c>)
 800a548:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a54c:	f043 0304 	orr.w	r3, r3, #4
 800a550:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00
#endif

        xSemHandle.Process_CAN = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CAN);
    }

}
 800a554:	e015      	b.n	800a582 <Process_CAN_Run+0x66>
    	__GL.itc.flag.can = FALSE;
 800a556:	4a10      	ldr	r2, [pc, #64]	; (800a598 <Process_CAN_Run+0x7c>)
 800a558:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a55c:	f36f 0382 	bfc	r3, #2, #1
 800a560:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00
   DEBUG_printThread((char *)PROCESS_CAN_SEMAPHORENAME, "ALREADY RUNNING");
 800a564:	490d      	ldr	r1, [pc, #52]	; (800a59c <Process_CAN_Run+0x80>)
 800a566:	4809      	ldr	r0, [pc, #36]	; (800a58c <Process_CAN_Run+0x70>)
 800a568:	f7ff fc70 	bl	8009e4c <DEBUG_printThread>
        xSemHandle.Process_CAN = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CAN);
 800a56c:	2303      	movs	r3, #3
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	4b0b      	ldr	r3, [pc, #44]	; (800a5a0 <Process_CAN_Run+0x84>)
 800a572:	2200      	movs	r2, #0
 800a574:	2100      	movs	r1, #0
 800a576:	2001      	movs	r0, #1
 800a578:	f7fc fdb6 	bl	80070e8 <xQueueGenericCreateStatic>
 800a57c:	4603      	mov	r3, r0
 800a57e:	4a04      	ldr	r2, [pc, #16]	; (800a590 <Process_CAN_Run+0x74>)
 800a580:	6093      	str	r3, [r2, #8]
}
 800a582:	bf00      	nop
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}
 800a588:	0800c550 	.word	0x0800c550
 800a58c:	0800c598 	.word	0x0800c598
 800a590:	2000bd88 	.word	0x2000bd88
 800a594:	2000bdac 	.word	0x2000bdac
 800a598:	20000074 	.word	0x20000074
 800a59c:	0800c570 	.word	0x0800c570
 800a5a0:	2000bb58 	.word	0x2000bb58

0800a5a4 <Process_CONTROL_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_CONTROL_TaskHandler(void *params)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af02      	add	r7, sp, #8
 800a5aa:	6078      	str	r0, [r7, #4]
	ModuleCONTROL_StartUP();
 800a5ac:	f001 f820 	bl	800b5f0 <ModuleCONTROL_StartUP>

 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_CONTROL = xQueueSemaphoreTake(xSemHandle.Process_CONTROL, osWaitForever);
 800a5b0:	4b15      	ldr	r3, [pc, #84]	; (800a608 <Process_CONTROL_TaskHandler+0x64>)
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	f04f 31ff 	mov.w	r1, #4294967295
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7fd f8ab 	bl	8007714 <xQueueSemaphoreTake>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	4a12      	ldr	r2, [pc, #72]	; (800a60c <Process_CONTROL_TaskHandler+0x68>)
 800a5c2:	60d3      	str	r3, [r2, #12]
	if (pdTRUE == xSemResult.Process_CONTROL)
 800a5c4:	4b11      	ldr	r3, [pc, #68]	; (800a60c <Process_CONTROL_TaskHandler+0x68>)
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d111      	bne.n	800a5f0 <Process_CONTROL_TaskHandler+0x4c>
	{

		/* Semph has taken */
		__GL.itc.flag.control = FALSE;
 800a5cc:	4a10      	ldr	r2, [pc, #64]	; (800a610 <Process_CONTROL_TaskHandler+0x6c>)
 800a5ce:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a5d2:	f36f 03c3 	bfc	r3, #3, #1
 800a5d6:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_CONTROL_THREADNAME, "STARTED");
 800a5da:	490e      	ldr	r1, [pc, #56]	; (800a614 <Process_CONTROL_TaskHandler+0x70>)
 800a5dc:	480e      	ldr	r0, [pc, #56]	; (800a618 <Process_CONTROL_TaskHandler+0x74>)
 800a5de:	f7ff fc35 	bl	8009e4c <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleCONTROL_MAIN(); /* Main Application */
 800a5e2:	f001 f81b 	bl	800b61c <ModuleCONTROL_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_CONTROL_THREADNAME, "ENDED");
 800a5e6:	490d      	ldr	r1, [pc, #52]	; (800a61c <Process_CONTROL_TaskHandler+0x78>)
 800a5e8:	480b      	ldr	r0, [pc, #44]	; (800a618 <Process_CONTROL_TaskHandler+0x74>)
 800a5ea:	f7ff fc2f 	bl	8009e4c <DEBUG_printThread>
 800a5ee:	e7df      	b.n	800a5b0 <Process_CONTROL_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_CONTROL = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CONTROL);
 800a5f0:	2303      	movs	r3, #3
 800a5f2:	9300      	str	r3, [sp, #0]
 800a5f4:	4b0a      	ldr	r3, [pc, #40]	; (800a620 <Process_CONTROL_TaskHandler+0x7c>)
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	2100      	movs	r1, #0
 800a5fa:	2001      	movs	r0, #1
 800a5fc:	f7fc fd74 	bl	80070e8 <xQueueGenericCreateStatic>
 800a600:	4603      	mov	r3, r0
 800a602:	4a01      	ldr	r2, [pc, #4]	; (800a608 <Process_CONTROL_TaskHandler+0x64>)
 800a604:	60d3      	str	r3, [r2, #12]
	xSemResult.Process_CONTROL = xQueueSemaphoreTake(xSemHandle.Process_CONTROL, osWaitForever);
 800a606:	e7d3      	b.n	800a5b0 <Process_CONTROL_TaskHandler+0xc>
 800a608:	2000bd88 	.word	0x2000bd88
 800a60c:	2000bdac 	.word	0x2000bdac
 800a610:	20000074 	.word	0x20000074
 800a614:	0800c540 	.word	0x0800c540
 800a618:	0800c4c8 	.word	0x0800c4c8
 800a61c:	0800c548 	.word	0x0800c548
 800a620:	2000bba8 	.word	0x2000bba8

0800a624 <Process_FLASH_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_FLASH_TaskHandler(void *params)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af02      	add	r7, sp, #8
 800a62a:	6078      	str	r0, [r7, #4]
	ModuleFLASH_StartUP();
 800a62c:	f001 f82c 	bl	800b688 <ModuleFLASH_StartUP>

 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_FLASH = xQueueSemaphoreTake(xSemHandle.Process_FLASH, osWaitForever);
 800a630:	4b15      	ldr	r3, [pc, #84]	; (800a688 <Process_FLASH_TaskHandler+0x64>)
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	f04f 31ff 	mov.w	r1, #4294967295
 800a638:	4618      	mov	r0, r3
 800a63a:	f7fd f86b 	bl	8007714 <xQueueSemaphoreTake>
 800a63e:	4603      	mov	r3, r0
 800a640:	4a12      	ldr	r2, [pc, #72]	; (800a68c <Process_FLASH_TaskHandler+0x68>)
 800a642:	6113      	str	r3, [r2, #16]
	if (pdTRUE == xSemResult.Process_FLASH)
 800a644:	4b11      	ldr	r3, [pc, #68]	; (800a68c <Process_FLASH_TaskHandler+0x68>)
 800a646:	691b      	ldr	r3, [r3, #16]
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d111      	bne.n	800a670 <Process_FLASH_TaskHandler+0x4c>
	{

		/* Semph has taken */
		__GL.itc.flag.flash = FALSE;
 800a64c:	4a10      	ldr	r2, [pc, #64]	; (800a690 <Process_FLASH_TaskHandler+0x6c>)
 800a64e:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a652:	f36f 1304 	bfc	r3, #4, #1
 800a656:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_FLASH_THREADNAME, "STARTED");
 800a65a:	490e      	ldr	r1, [pc, #56]	; (800a694 <Process_FLASH_TaskHandler+0x70>)
 800a65c:	480e      	ldr	r0, [pc, #56]	; (800a698 <Process_FLASH_TaskHandler+0x74>)
 800a65e:	f7ff fbf5 	bl	8009e4c <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleFLASH_MAIN(); /* Main Application */
 800a662:	f001 f827 	bl	800b6b4 <ModuleFLASH_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_FLASH_THREADNAME, "ENDED");
 800a666:	490d      	ldr	r1, [pc, #52]	; (800a69c <Process_FLASH_TaskHandler+0x78>)
 800a668:	480b      	ldr	r0, [pc, #44]	; (800a698 <Process_FLASH_TaskHandler+0x74>)
 800a66a:	f7ff fbef 	bl	8009e4c <DEBUG_printThread>
 800a66e:	e7df      	b.n	800a630 <Process_FLASH_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_FLASH = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_FLASH);
 800a670:	2303      	movs	r3, #3
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	4b0a      	ldr	r3, [pc, #40]	; (800a6a0 <Process_FLASH_TaskHandler+0x7c>)
 800a676:	2200      	movs	r2, #0
 800a678:	2100      	movs	r1, #0
 800a67a:	2001      	movs	r0, #1
 800a67c:	f7fc fd34 	bl	80070e8 <xQueueGenericCreateStatic>
 800a680:	4603      	mov	r3, r0
 800a682:	4a01      	ldr	r2, [pc, #4]	; (800a688 <Process_FLASH_TaskHandler+0x64>)
 800a684:	6113      	str	r3, [r2, #16]
	xSemResult.Process_FLASH = xQueueSemaphoreTake(xSemHandle.Process_FLASH, osWaitForever);
 800a686:	e7d3      	b.n	800a630 <Process_FLASH_TaskHandler+0xc>
 800a688:	2000bd88 	.word	0x2000bd88
 800a68c:	2000bdac 	.word	0x2000bdac
 800a690:	20000074 	.word	0x20000074
 800a694:	0800c540 	.word	0x0800c540
 800a698:	0800c4e0 	.word	0x0800c4e0
 800a69c:	0800c548 	.word	0x0800c548
 800a6a0:	2000bbf8 	.word	0x2000bbf8

0800a6a4 <Process_POWERSWITCH_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_POWERSWITCH_TaskHandler(void *params)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af02      	add	r7, sp, #8
 800a6aa:	6078      	str	r0, [r7, #4]
	ModulePOWERSWITCH_StartUP();
 800a6ac:	f001 f838 	bl	800b720 <ModulePOWERSWITCH_StartUP>
 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_POWERSWITCH = xQueueSemaphoreTake(xSemHandle.Process_POWERSWITCH, osWaitForever);
 800a6b0:	4b15      	ldr	r3, [pc, #84]	; (800a708 <Process_POWERSWITCH_TaskHandler+0x64>)
 800a6b2:	695b      	ldr	r3, [r3, #20]
 800a6b4:	f04f 31ff 	mov.w	r1, #4294967295
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f7fd f82b 	bl	8007714 <xQueueSemaphoreTake>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	4a12      	ldr	r2, [pc, #72]	; (800a70c <Process_POWERSWITCH_TaskHandler+0x68>)
 800a6c2:	6153      	str	r3, [r2, #20]
	if (pdTRUE == xSemResult.Process_FLASH)
 800a6c4:	4b11      	ldr	r3, [pc, #68]	; (800a70c <Process_POWERSWITCH_TaskHandler+0x68>)
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d111      	bne.n	800a6f0 <Process_POWERSWITCH_TaskHandler+0x4c>
	{

		/* Semph has taken */
		__GL.itc.flag.powerswitch = FALSE;
 800a6cc:	4a10      	ldr	r2, [pc, #64]	; (800a710 <Process_POWERSWITCH_TaskHandler+0x6c>)
 800a6ce:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a6d2:	f36f 1345 	bfc	r3, #5, #1
 800a6d6:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_POWERSWITCH_THREADNAME, "STARTED");
 800a6da:	490e      	ldr	r1, [pc, #56]	; (800a714 <Process_POWERSWITCH_TaskHandler+0x70>)
 800a6dc:	480e      	ldr	r0, [pc, #56]	; (800a718 <Process_POWERSWITCH_TaskHandler+0x74>)
 800a6de:	f7ff fbb5 	bl	8009e4c <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModulePOWERSWITCH_MAIN(); /* Main Application */
 800a6e2:	f001 f833 	bl	800b74c <ModulePOWERSWITCH_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_POWERSWITCH_THREADNAME, "ENDED");
 800a6e6:	490d      	ldr	r1, [pc, #52]	; (800a71c <Process_POWERSWITCH_TaskHandler+0x78>)
 800a6e8:	480b      	ldr	r0, [pc, #44]	; (800a718 <Process_POWERSWITCH_TaskHandler+0x74>)
 800a6ea:	f7ff fbaf 	bl	8009e4c <DEBUG_printThread>
 800a6ee:	e7df      	b.n	800a6b0 <Process_POWERSWITCH_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_POWERSWITCH = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_POWERSWITCH);
 800a6f0:	2303      	movs	r3, #3
 800a6f2:	9300      	str	r3, [sp, #0]
 800a6f4:	4b0a      	ldr	r3, [pc, #40]	; (800a720 <Process_POWERSWITCH_TaskHandler+0x7c>)
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	2100      	movs	r1, #0
 800a6fa:	2001      	movs	r0, #1
 800a6fc:	f7fc fcf4 	bl	80070e8 <xQueueGenericCreateStatic>
 800a700:	4603      	mov	r3, r0
 800a702:	4a01      	ldr	r2, [pc, #4]	; (800a708 <Process_POWERSWITCH_TaskHandler+0x64>)
 800a704:	6153      	str	r3, [r2, #20]
	xSemResult.Process_POWERSWITCH = xQueueSemaphoreTake(xSemHandle.Process_POWERSWITCH, osWaitForever);
 800a706:	e7d3      	b.n	800a6b0 <Process_POWERSWITCH_TaskHandler+0xc>
 800a708:	2000bd88 	.word	0x2000bd88
 800a70c:	2000bdac 	.word	0x2000bdac
 800a710:	20000074 	.word	0x20000074
 800a714:	0800c540 	.word	0x0800c540
 800a718:	0800c4f4 	.word	0x0800c4f4
 800a71c:	0800c548 	.word	0x0800c548
 800a720:	2000bc48 	.word	0x2000bc48

0800a724 <Process_RTC_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_RTC_TaskHandler(void *params)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af02      	add	r7, sp, #8
 800a72a:	6078      	str	r0, [r7, #4]
	ModuleRTC_StartUP();
 800a72c:	f001 f844 	bl	800b7b8 <ModuleRTC_StartUP>

 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_RTC = xQueueSemaphoreTake(xSemHandle.Process_RTC, osWaitForever);
 800a730:	4b15      	ldr	r3, [pc, #84]	; (800a788 <Process_RTC_TaskHandler+0x64>)
 800a732:	699b      	ldr	r3, [r3, #24]
 800a734:	f04f 31ff 	mov.w	r1, #4294967295
 800a738:	4618      	mov	r0, r3
 800a73a:	f7fc ffeb 	bl	8007714 <xQueueSemaphoreTake>
 800a73e:	4603      	mov	r3, r0
 800a740:	4a12      	ldr	r2, [pc, #72]	; (800a78c <Process_RTC_TaskHandler+0x68>)
 800a742:	6193      	str	r3, [r2, #24]
	if (pdTRUE == xSemResult.Process_RTC)
 800a744:	4b11      	ldr	r3, [pc, #68]	; (800a78c <Process_RTC_TaskHandler+0x68>)
 800a746:	699b      	ldr	r3, [r3, #24]
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d111      	bne.n	800a770 <Process_RTC_TaskHandler+0x4c>
	{

		/* Semph has taken */
		__GL.itc.flag.rtc = FALSE;
 800a74c:	4a10      	ldr	r2, [pc, #64]	; (800a790 <Process_RTC_TaskHandler+0x6c>)
 800a74e:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a752:	f36f 1386 	bfc	r3, #6, #1
 800a756:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_RTC_THREADNAME, "STARTED");
 800a75a:	490e      	ldr	r1, [pc, #56]	; (800a794 <Process_RTC_TaskHandler+0x70>)
 800a75c:	480e      	ldr	r0, [pc, #56]	; (800a798 <Process_RTC_TaskHandler+0x74>)
 800a75e:	f7ff fb75 	bl	8009e4c <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleRTC_MAIN(); /* Main Application */
 800a762:	f001 f83f 	bl	800b7e4 <ModuleRTC_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_RTC_THREADNAME, "ENDED");
 800a766:	490d      	ldr	r1, [pc, #52]	; (800a79c <Process_RTC_TaskHandler+0x78>)
 800a768:	480b      	ldr	r0, [pc, #44]	; (800a798 <Process_RTC_TaskHandler+0x74>)
 800a76a:	f7ff fb6f 	bl	8009e4c <DEBUG_printThread>
 800a76e:	e7df      	b.n	800a730 <Process_RTC_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_RTC = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_RTC);
 800a770:	2303      	movs	r3, #3
 800a772:	9300      	str	r3, [sp, #0]
 800a774:	4b0a      	ldr	r3, [pc, #40]	; (800a7a0 <Process_RTC_TaskHandler+0x7c>)
 800a776:	2200      	movs	r2, #0
 800a778:	2100      	movs	r1, #0
 800a77a:	2001      	movs	r0, #1
 800a77c:	f7fc fcb4 	bl	80070e8 <xQueueGenericCreateStatic>
 800a780:	4603      	mov	r3, r0
 800a782:	4a01      	ldr	r2, [pc, #4]	; (800a788 <Process_RTC_TaskHandler+0x64>)
 800a784:	6193      	str	r3, [r2, #24]
	xSemResult.Process_RTC = xQueueSemaphoreTake(xSemHandle.Process_RTC, osWaitForever);
 800a786:	e7d3      	b.n	800a730 <Process_RTC_TaskHandler+0xc>
 800a788:	2000bd88 	.word	0x2000bd88
 800a78c:	2000bdac 	.word	0x2000bdac
 800a790:	20000074 	.word	0x20000074
 800a794:	0800c540 	.word	0x0800c540
 800a798:	0800c504 	.word	0x0800c504
 800a79c:	0800c548 	.word	0x0800c548
 800a7a0:	2000bc98 	.word	0x2000bc98

0800a7a4 <Process_SDCARD_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_SDCARD_TaskHandler(void *params)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af02      	add	r7, sp, #8
 800a7aa:	6078      	str	r0, [r7, #4]
	ModuleSDCARD_StartUP();
 800a7ac:	f001 f850 	bl	800b850 <ModuleSDCARD_StartUP>

 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_SDCARD = xQueueSemaphoreTake(xSemHandle.Process_SDCARD, osWaitForever);
 800a7b0:	4b15      	ldr	r3, [pc, #84]	; (800a808 <Process_SDCARD_TaskHandler+0x64>)
 800a7b2:	69db      	ldr	r3, [r3, #28]
 800a7b4:	f04f 31ff 	mov.w	r1, #4294967295
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f7fc ffab 	bl	8007714 <xQueueSemaphoreTake>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	4a12      	ldr	r2, [pc, #72]	; (800a80c <Process_SDCARD_TaskHandler+0x68>)
 800a7c2:	61d3      	str	r3, [r2, #28]
	if (pdTRUE == xSemResult.Process_SDCARD)
 800a7c4:	4b11      	ldr	r3, [pc, #68]	; (800a80c <Process_SDCARD_TaskHandler+0x68>)
 800a7c6:	69db      	ldr	r3, [r3, #28]
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d111      	bne.n	800a7f0 <Process_SDCARD_TaskHandler+0x4c>
	{

		/* Semph has taken */
		__GL.itc.flag.sdcard = FALSE;
 800a7cc:	4a10      	ldr	r2, [pc, #64]	; (800a810 <Process_SDCARD_TaskHandler+0x6c>)
 800a7ce:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a7d2:	f36f 13c7 	bfc	r3, #7, #1
 800a7d6:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_SDCARD_THREADNAME, "STARTED");
 800a7da:	490e      	ldr	r1, [pc, #56]	; (800a814 <Process_SDCARD_TaskHandler+0x70>)
 800a7dc:	480e      	ldr	r0, [pc, #56]	; (800a818 <Process_SDCARD_TaskHandler+0x74>)
 800a7de:	f7ff fb35 	bl	8009e4c <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleSDCARD_MAIN(); /* Main Application */
 800a7e2:	f001 f84b 	bl	800b87c <ModuleSDCARD_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_SDCARD_THREADNAME, "ENDED");
 800a7e6:	490d      	ldr	r1, [pc, #52]	; (800a81c <Process_SDCARD_TaskHandler+0x78>)
 800a7e8:	480b      	ldr	r0, [pc, #44]	; (800a818 <Process_SDCARD_TaskHandler+0x74>)
 800a7ea:	f7ff fb2f 	bl	8009e4c <DEBUG_printThread>
 800a7ee:	e7df      	b.n	800a7b0 <Process_SDCARD_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_SDCARD = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_SDCARD);
 800a7f0:	2303      	movs	r3, #3
 800a7f2:	9300      	str	r3, [sp, #0]
 800a7f4:	4b0a      	ldr	r3, [pc, #40]	; (800a820 <Process_SDCARD_TaskHandler+0x7c>)
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	2001      	movs	r0, #1
 800a7fc:	f7fc fc74 	bl	80070e8 <xQueueGenericCreateStatic>
 800a800:	4603      	mov	r3, r0
 800a802:	4a01      	ldr	r2, [pc, #4]	; (800a808 <Process_SDCARD_TaskHandler+0x64>)
 800a804:	61d3      	str	r3, [r2, #28]
	xSemResult.Process_SDCARD = xQueueSemaphoreTake(xSemHandle.Process_SDCARD, osWaitForever);
 800a806:	e7d3      	b.n	800a7b0 <Process_SDCARD_TaskHandler+0xc>
 800a808:	2000bd88 	.word	0x2000bd88
 800a80c:	2000bdac 	.word	0x2000bdac
 800a810:	20000074 	.word	0x20000074
 800a814:	0800c540 	.word	0x0800c540
 800a818:	0800c518 	.word	0x0800c518
 800a81c:	0800c548 	.word	0x0800c548
 800a820:	2000bce8 	.word	0x2000bce8

0800a824 <Process_TELEMETRY_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_TELEMETRY_TaskHandler(void *params)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af02      	add	r7, sp, #8
 800a82a:	6078      	str	r0, [r7, #4]
	ModuleTELEMETRY_StartUP();
 800a82c:	f001 f85c 	bl	800b8e8 <ModuleTELEMETRY_StartUP>

 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_TELEMETRY = xQueueSemaphoreTake(xSemHandle.Process_TELEMETRY, osWaitForever);
 800a830:	4b15      	ldr	r3, [pc, #84]	; (800a888 <Process_TELEMETRY_TaskHandler+0x64>)
 800a832:	6a1b      	ldr	r3, [r3, #32]
 800a834:	f04f 31ff 	mov.w	r1, #4294967295
 800a838:	4618      	mov	r0, r3
 800a83a:	f7fc ff6b 	bl	8007714 <xQueueSemaphoreTake>
 800a83e:	4603      	mov	r3, r0
 800a840:	4a12      	ldr	r2, [pc, #72]	; (800a88c <Process_TELEMETRY_TaskHandler+0x68>)
 800a842:	6213      	str	r3, [r2, #32]
	if (pdTRUE == xSemResult.Process_TELEMETRY)
 800a844:	4b11      	ldr	r3, [pc, #68]	; (800a88c <Process_TELEMETRY_TaskHandler+0x68>)
 800a846:	6a1b      	ldr	r3, [r3, #32]
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d111      	bne.n	800a870 <Process_TELEMETRY_TaskHandler+0x4c>
	{
		/* Semph has taken */
		__GL.itc.flag.telemetry = FALSE;
 800a84c:	4a10      	ldr	r2, [pc, #64]	; (800a890 <Process_TELEMETRY_TaskHandler+0x6c>)
 800a84e:	f892 3a01 	ldrb.w	r3, [r2, #2561]	; 0xa01
 800a852:	f36f 0300 	bfc	r3, #0, #1
 800a856:	f882 3a01 	strb.w	r3, [r2, #2561]	; 0xa01

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_TELEMETRY_THREADNAME, "STARTED");
 800a85a:	490e      	ldr	r1, [pc, #56]	; (800a894 <Process_TELEMETRY_TaskHandler+0x70>)
 800a85c:	480e      	ldr	r0, [pc, #56]	; (800a898 <Process_TELEMETRY_TaskHandler+0x74>)
 800a85e:	f7ff faf5 	bl	8009e4c <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleTELEMETRY_MAIN(); /* Main Application */
 800a862:	f001 f857 	bl	800b914 <ModuleTELEMETRY_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_TELEMETRY_THREADNAME, "ENDED");
 800a866:	490d      	ldr	r1, [pc, #52]	; (800a89c <Process_TELEMETRY_TaskHandler+0x78>)
 800a868:	480b      	ldr	r0, [pc, #44]	; (800a898 <Process_TELEMETRY_TaskHandler+0x74>)
 800a86a:	f7ff faef 	bl	8009e4c <DEBUG_printThread>
 800a86e:	e7df      	b.n	800a830 <Process_TELEMETRY_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_TELEMETRY = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_TELEMETRY);
 800a870:	2303      	movs	r3, #3
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	4b0a      	ldr	r3, [pc, #40]	; (800a8a0 <Process_TELEMETRY_TaskHandler+0x7c>)
 800a876:	2200      	movs	r2, #0
 800a878:	2100      	movs	r1, #0
 800a87a:	2001      	movs	r0, #1
 800a87c:	f7fc fc34 	bl	80070e8 <xQueueGenericCreateStatic>
 800a880:	4603      	mov	r3, r0
 800a882:	4a01      	ldr	r2, [pc, #4]	; (800a888 <Process_TELEMETRY_TaskHandler+0x64>)
 800a884:	6213      	str	r3, [r2, #32]
	xSemResult.Process_TELEMETRY = xQueueSemaphoreTake(xSemHandle.Process_TELEMETRY, osWaitForever);
 800a886:	e7d3      	b.n	800a830 <Process_TELEMETRY_TaskHandler+0xc>
 800a888:	2000bd88 	.word	0x2000bd88
 800a88c:	2000bdac 	.word	0x2000bdac
 800a890:	20000074 	.word	0x20000074
 800a894:	0800c540 	.word	0x0800c540
 800a898:	0800c52c 	.word	0x0800c52c
 800a89c:	0800c548 	.word	0x0800c548
 800a8a0:	2000bd38 	.word	0x2000bd38

0800a8a4 <BodyControlMAIN_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void BodyControlMAIN_HWInit(void)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	af00      	add	r7, sp, #0
	
}
 800a8a8:	bf00      	nop
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr

0800a8b2 <BodyControlMAIN_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void BodyControlMAIN_SWInit(void)
{
 800a8b2:	b480      	push	{r7}
 800a8b4:	af00      	add	r7, sp, #0
	
}
 800a8b6:	bf00      	nop
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <BodyControlMAIN_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void BodyControlMAIN_StartUP(void)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	af00      	add	r7, sp, #0
	BodyControlMAIN_HWInit();
 800a8c4:	f7ff ffee 	bl	800a8a4 <BodyControlMAIN_HWInit>
	BodyControlMAIN_SWInit();
 800a8c8:	f7ff fff3 	bl	800a8b2 <BodyControlMAIN_SWInit>
}
 800a8cc:	bf00      	nop
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <BodyControlMAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void BodyControlMAIN_Routine(void)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	af00      	add	r7, sp, #0

	if( __GL.mainState.flag.adc == TRUE )
 800a8d4:	4b09      	ldr	r3, [pc, #36]	; (800a8fc <BodyControlMAIN_Routine+0x2c>)
 800a8d6:	f893 3a02 	ldrb.w	r3, [r3, #2562]	; 0xa02
 800a8da:	f003 0301 	and.w	r3, r3, #1
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d008      	beq.n	800a8f6 <BodyControlMAIN_Routine+0x26>
	{
		/* Release Periodically ADC Semph */
		Process_ADC_Run();
 800a8e4:	f7ff fd56 	bl	800a394 <Process_ADC_Run>
		__GL.mainState.flag.adc = FALSE;
 800a8e8:	4a04      	ldr	r2, [pc, #16]	; (800a8fc <BodyControlMAIN_Routine+0x2c>)
 800a8ea:	f892 3a02 	ldrb.w	r3, [r2, #2562]	; 0xa02
 800a8ee:	f36f 0300 	bfc	r3, #0, #1
 800a8f2:	f882 3a02 	strb.w	r3, [r2, #2562]	; 0xa02
	}

}
 800a8f6:	bf00      	nop
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	20000074 	.word	0x20000074

0800a900 <BodyControlMAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void BodyControlMAIN_Process(void)
{
 800a900:	b480      	push	{r7}
 800a902:	af00      	add	r7, sp, #0

}
 800a904:	bf00      	nop
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr
	...

0800a910 <BodyControlMAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void BodyControlMAIN(void)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	af00      	add	r7, sp, #0

	switch(BodyControlMAIN_State)
 800a914:	4b11      	ldr	r3, [pc, #68]	; (800a95c <BodyControlMAIN+0x4c>)
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	2b03      	cmp	r3, #3
 800a91a:	d819      	bhi.n	800a950 <BodyControlMAIN+0x40>
 800a91c:	a201      	add	r2, pc, #4	; (adr r2, 800a924 <BodyControlMAIN+0x14>)
 800a91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a922:	bf00      	nop
 800a924:	0800a935 	.word	0x0800a935
 800a928:	0800a93d 	.word	0x0800a93d
 800a92c:	0800a943 	.word	0x0800a943
 800a930:	0800a949 	.word	0x0800a949
	{
	    case BodyControlMAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	BodyControlMAIN_State = BodyControlMAIN_State_ROUTINE;
 800a934:	4b09      	ldr	r3, [pc, #36]	; (800a95c <BodyControlMAIN+0x4c>)
 800a936:	2201      	movs	r2, #1
 800a938:	701a      	strb	r2, [r3, #0]
	    break;
 800a93a:	e00d      	b.n	800a958 <BodyControlMAIN+0x48>

	    case BodyControlMAIN_State_ROUTINE:

	    	BodyControlMAIN_Routine();
 800a93c:	f7ff ffc8 	bl	800a8d0 <BodyControlMAIN_Routine>
	    break;
 800a940:	e00a      	b.n	800a958 <BodyControlMAIN+0x48>

	    case BodyControlMAIN_State_PROCESS:

	    	BodyControlMAIN_Process();
 800a942:	f7ff ffdd 	bl	800a900 <BodyControlMAIN_Process>

	    break;
 800a946:	e007      	b.n	800a958 <BodyControlMAIN+0x48>

	    case BodyControlMAIN_State_SUSPEND:
	    	BodyControlMAIN_State = BodyControlMAIN_State_IDLE;
 800a948:	4b04      	ldr	r3, [pc, #16]	; (800a95c <BodyControlMAIN+0x4c>)
 800a94a:	2200      	movs	r2, #0
 800a94c:	701a      	strb	r2, [r3, #0]
	    break;
 800a94e:	e003      	b.n	800a958 <BodyControlMAIN+0x48>

	    default:
	    	BodyControlMAIN_State = BodyControlMAIN_State_SUSPEND;
 800a950:	4b02      	ldr	r3, [pc, #8]	; (800a95c <BodyControlMAIN+0x4c>)
 800a952:	2203      	movs	r2, #3
 800a954:	701a      	strb	r2, [r3, #0]
	    break;
 800a956:	bf00      	nop

	}
}
 800a958:	bf00      	nop
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	2000c168 	.word	0x2000c168

0800a960 <ModuleADC_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleADC_HWInit(void)
{
 800a960:	b480      	push	{r7}
 800a962:	af00      	add	r7, sp, #0
	
}
 800a964:	bf00      	nop
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <ModuleADC_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleADC_SWInit(void)
{
 800a96e:	b480      	push	{r7}
 800a970:	af00      	add	r7, sp, #0
	
}
 800a972:	bf00      	nop
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <ModuleADC_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleADC_StartUP(void)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	af00      	add	r7, sp, #0
	ModuleADC_HWInit();
 800a980:	f7ff ffee 	bl	800a960 <ModuleADC_HWInit>
	ModuleADC_SWInit();
 800a984:	f7ff fff3 	bl	800a96e <ModuleADC_SWInit>
}
 800a988:	bf00      	nop
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <ModuleADC_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleADC_MAIN_Routine(void)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	af00      	add	r7, sp, #0
    /* Read All Channels and All Data with polling method	*/

    /* MUX1 POLLING READ */
    // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
    /* Read FBR_VS1 data from Mux1-Pin0 polling mode */
    adc_s.VOLTAGE_3V3 = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_MUX1,
 800a990:	2100      	movs	r1, #0
 800a992:	2001      	movs	r0, #1
 800a994:	f000 f95c 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800a998:	4603      	mov	r3, r0
 800a99a:	b29a      	uxth	r2, r3
 800a99c:	4b82      	ldr	r3, [pc, #520]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800a99e:	801a      	strh	r2, [r3, #0]
                                                                 PROCESS_ANALOGSIGNALS_SELECT_PIN0);
    /* Read FBL_IS1 data from Mux1-Pin1 polling mode */
    adc_s.VOLTAGE_VMCU = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_MUX1,
 800a9a0:	2101      	movs	r1, #1
 800a9a2:	2001      	movs	r0, #1
 800a9a4:	f000 f954 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	b29a      	uxth	r2, r3
 800a9ac:	4b7e      	ldr	r3, [pc, #504]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800a9ae:	805a      	strh	r2, [r3, #2]
                                                                 PROCESS_ANALOGSIGNALS_SELECT_PIN1);
    /* Read FBL_VS1 data from Mux1-Pin2 polling mode */
    adc_s.VOLTAGE_5V = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_MUX1,
 800a9b0:	2102      	movs	r1, #2
 800a9b2:	2001      	movs	r0, #1
 800a9b4:	f000 f94c 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	4b7a      	ldr	r3, [pc, #488]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800a9be:	809a      	strh	r2, [r3, #4]
                                                                 PROCESS_ANALOGSIGNALS_SELECT_PIN2);
    /* Read FBR_IS1 data from Mux1-Pin3 polling mode */
    adc_s.VOLTAGE_12V = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_MUX1,
 800a9c0:	2103      	movs	r1, #3
 800a9c2:	2001      	movs	r0, #1
 800a9c4:	f000 f944 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	4b76      	ldr	r3, [pc, #472]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800a9ce:	80da      	strh	r2, [r3, #6]
                                                                 PROCESS_ANALOGSIGNALS_SELECT_PIN3);
    /* Read FBL_VS2 data from Mux1-Pin4 polling mode */
    adc_s.VOLTAGE_24V = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_MUX1,
 800a9d0:	2104      	movs	r1, #4
 800a9d2:	2001      	movs	r0, #1
 800a9d4:	f000 f93c 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	4b72      	ldr	r3, [pc, #456]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800a9de:	811a      	strh	r2, [r3, #8]
    // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

    /* MUX2 POLLING READ */
    // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
    /* Read POUT_IS7 data from Mux2-Pin0 polling mode */
    adc_s.A0_IN0 = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_MUX2,
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	2002      	movs	r0, #2
 800a9e4:	f000 f934 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	b29a      	uxth	r2, r3
 800a9ec:	4b6e      	ldr	r3, [pc, #440]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800a9ee:	815a      	strh	r2, [r3, #10]
                                                             PROCESS_ANALOGSIGNALS_SELECT_PIN0);
    /* Read POUT_VS4 data from Mux2-Pin1 polling mode */
    adc_s.A0_IN1 = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_MUX2,
 800a9f0:	2101      	movs	r1, #1
 800a9f2:	2002      	movs	r0, #2
 800a9f4:	f000 f92c 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	b29a      	uxth	r2, r3
 800a9fc:	4b6a      	ldr	r3, [pc, #424]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800a9fe:	819a      	strh	r2, [r3, #12]
                                                             PROCESS_ANALOGSIGNALS_SELECT_PIN1);
    /* Read POUT_IS4 data from Mux2-Pin2 polling mode */
    adc_s.A0_IN2 = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_MUX2,
 800aa00:	2102      	movs	r1, #2
 800aa02:	2002      	movs	r0, #2
 800aa04:	f000 f924 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	b29a      	uxth	r2, r3
 800aa0c:	4b66      	ldr	r3, [pc, #408]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800aa0e:	81da      	strh	r2, [r3, #14]
                                                             PROCESS_ANALOGSIGNALS_SELECT_PIN2);
    /* Read POUT_VS7 data from Mux2-Pin3 polling mode */
    adc_s.A0_IN3 = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_MUX2,
 800aa10:	2103      	movs	r1, #3
 800aa12:	2002      	movs	r0, #2
 800aa14:	f000 f91c 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	b29a      	uxth	r2, r3
 800aa1c:	4b62      	ldr	r3, [pc, #392]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800aa1e:	821a      	strh	r2, [r3, #16]
                                                             PROCESS_ANALOGSIGNALS_SELECT_PIN3);
    /* Read POUT_IS1 data from Mux2-Pin4 polling mode */
    adc_s.A0_IN4 = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_MUX2,
 800aa20:	2104      	movs	r1, #4
 800aa22:	2002      	movs	r0, #2
 800aa24:	f000 f914 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	4b5e      	ldr	r3, [pc, #376]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800aa2e:	825a      	strh	r2, [r3, #18]
                                                                PROCESS_ANALOGSIGNALS_SELECT_PIN4);
    /* Read PVDD_SNSS data from Mux2-Pin5 polling mode */
    adc_s.A0_IN5 = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_MUX2,
 800aa30:	2105      	movs	r1, #5
 800aa32:	2002      	movs	r0, #2
 800aa34:	f000 f90c 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	4b5a      	ldr	r3, [pc, #360]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800aa3e:	829a      	strh	r2, [r3, #20]
                                                                PROCESS_ANALOGSIGNALS_SELECT_PIN5);
    /* Read POUT_VS1 data from Mux2-Pin6 polling mode */
    adc_s.A0_IN6 = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_MUX2,
 800aa40:	2106      	movs	r1, #6
 800aa42:	2002      	movs	r0, #2
 800aa44:	f000 f904 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	b29a      	uxth	r2, r3
 800aa4c:	4b56      	ldr	r3, [pc, #344]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800aa4e:	82da      	strh	r2, [r3, #22]
                                                                PROCESS_ANALOGSIGNALS_SELECT_PIN6);
    /* Read V12_SNS data from Mux2-Pin7 polling mode */
    adc_s.A0_IN7 = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_MUX2,
 800aa50:	2107      	movs	r1, #7
 800aa52:	2002      	movs	r0, #2
 800aa54:	f000 f8fc 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	b29a      	uxth	r2, r3
 800aa5c:	4b52      	ldr	r3, [pc, #328]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800aa5e:	831a      	strh	r2, [r3, #24]


    /*  OTHER CHANNEL POLLING READ */
    // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
    /* Read POUT_IS11 data from Mux5-Pin0 polling mode */
    adc_s.VIN = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_VIN,
 800aa60:	21ff      	movs	r1, #255	; 0xff
 800aa62:	2003      	movs	r0, #3
 800aa64:	f000 f8f4 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	b29a      	uxth	r2, r3
 800aa6c:	4b4e      	ldr	r3, [pc, #312]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800aa6e:	835a      	strh	r2, [r3, #26]
    															   PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_VS8 data from Mux5-Pin1 polling mode */
    adc_s.ACS_5V = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_ACS_5V,
 800aa70:	21ff      	movs	r1, #255	; 0xff
 800aa72:	2004      	movs	r0, #4
 800aa74:	f000 f8ec 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	4b4a      	ldr	r3, [pc, #296]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800aa7e:	839a      	strh	r2, [r3, #28]
    																PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_IS8 data from Mux5-Pin2 polling mode */
    adc_s.ACS_12V = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_ACS_12V,
 800aa80:	21ff      	movs	r1, #255	; 0xff
 800aa82:	2005      	movs	r0, #5
 800aa84:	f000 f8e4 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	b29a      	uxth	r2, r3
 800aa8c:	4b46      	ldr	r3, [pc, #280]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800aa8e:	83da      	strh	r2, [r3, #30]
   															 PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_VS8 data from Mux5-Pin1 polling mode */
    adc_s.ACS_VMCU = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_ACS_VMCU,
 800aa90:	21ff      	movs	r1, #255	; 0xff
 800aa92:	2006      	movs	r0, #6
 800aa94:	f000 f8dc 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	b29a      	uxth	r2, r3
 800aa9c:	4b42      	ldr	r3, [pc, #264]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800aa9e:	841a      	strh	r2, [r3, #32]
    																PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_IS8 data from Mux5-Pin2 polling mode */
    adc_s.ACS_3V3 = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_ACS_3V3,
 800aaa0:	21ff      	movs	r1, #255	; 0xff
 800aaa2:	2007      	movs	r0, #7
 800aaa4:	f000 f8d4 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	b29a      	uxth	r2, r3
 800aaac:	4b3e      	ldr	r3, [pc, #248]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800aaae:	845a      	strh	r2, [r3, #34]	; 0x22
   															 PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_VS8 data from Mux5-Pin1 polling mode */
    adc_s.ACS_FL = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_ACS_FL,
 800aab0:	21ff      	movs	r1, #255	; 0xff
 800aab2:	2008      	movs	r0, #8
 800aab4:	f000 f8cc 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800aab8:	4603      	mov	r3, r0
 800aaba:	b29a      	uxth	r2, r3
 800aabc:	4b3a      	ldr	r3, [pc, #232]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800aabe:	849a      	strh	r2, [r3, #36]	; 0x24
    																PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_IS8 data from Mux5-Pin2 polling mode */
    adc_s.ACS_BL = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_ACS_BL,
 800aac0:	21ff      	movs	r1, #255	; 0xff
 800aac2:	2009      	movs	r0, #9
 800aac4:	f000 f8c4 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800aac8:	4603      	mov	r3, r0
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	4b36      	ldr	r3, [pc, #216]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800aace:	84da      	strh	r2, [r3, #38]	; 0x26
   															 PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_VS8 data from Mux5-Pin1 polling mode */
    adc_s.ACS_VINL1 = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_ACS_VINL1,
 800aad0:	21ff      	movs	r1, #255	; 0xff
 800aad2:	2010      	movs	r0, #16
 800aad4:	f000 f8bc 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800aad8:	4603      	mov	r3, r0
 800aada:	b29a      	uxth	r2, r3
 800aadc:	4b32      	ldr	r3, [pc, #200]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800aade:	851a      	strh	r2, [r3, #40]	; 0x28
    																PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_IS8 data from Mux5-Pin2 polling mode */
    adc_s.ACS_VINL2 = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_ACS_VINL2,
 800aae0:	21ff      	movs	r1, #255	; 0xff
 800aae2:	2011      	movs	r0, #17
 800aae4:	f000 f8b4 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800aae8:	4603      	mov	r3, r0
 800aaea:	b29a      	uxth	r2, r3
 800aaec:	4b2e      	ldr	r3, [pc, #184]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800aaee:	855a      	strh	r2, [r3, #42]	; 0x2a
   															 PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_VS8 data from Mux5-Pin1 polling mode */
    adc_s.ACS_BINL = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_ACS_BINL,
 800aaf0:	21ff      	movs	r1, #255	; 0xff
 800aaf2:	2012      	movs	r0, #18
 800aaf4:	f000 f8ac 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	b29a      	uxth	r2, r3
 800aafc:	4b2a      	ldr	r3, [pc, #168]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800aafe:	859a      	strh	r2, [r3, #44]	; 0x2c
    															PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_IS8 data from Mux5-Pin2 polling mode */
    adc_s.ACS_STOP = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_ACS_STOP,
 800ab00:	21ff      	movs	r1, #255	; 0xff
 800ab02:	2013      	movs	r0, #19
 800ab04:	f000 f8a4 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	b29a      	uxth	r2, r3
 800ab0c:	4b26      	ldr	r3, [pc, #152]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800ab0e:	85da      	strh	r2, [r3, #46]	; 0x2e
   															 PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_VS8 data from Mux5-Pin1 polling mode */
    adc_s.ACS_RS = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_ACS_RS,
 800ab10:	21ff      	movs	r1, #255	; 0xff
 800ab12:	2014      	movs	r0, #20
 800ab14:	f000 f89c 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	b29a      	uxth	r2, r3
 800ab1c:	4b22      	ldr	r3, [pc, #136]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800ab1e:	861a      	strh	r2, [r3, #48]	; 0x30
    																PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_IS8 data from Mux5-Pin2 polling mode */
    adc_s.ACS_LS = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_ACS_LS,
 800ab20:	21ff      	movs	r1, #255	; 0xff
 800ab22:	2015      	movs	r0, #21
 800ab24:	f000 f894 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	b29a      	uxth	r2, r3
 800ab2c:	4b1e      	ldr	r3, [pc, #120]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800ab2e:	865a      	strh	r2, [r3, #50]	; 0x32
   															 PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_VS8 data from Mux5-Pin1 polling mode */
    adc_s.RS_VRx = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_RS_VRx,
 800ab30:	21ff      	movs	r1, #255	; 0xff
 800ab32:	2016      	movs	r0, #22
 800ab34:	f000 f88c 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	b29a      	uxth	r2, r3
 800ab3c:	4b1a      	ldr	r3, [pc, #104]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800ab3e:	869a      	strh	r2, [r3, #52]	; 0x34
    																PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_IS8 data from Mux5-Pin2 polling mode */
    adc_s.RS_VRy = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_RS_VRy,
 800ab40:	21ff      	movs	r1, #255	; 0xff
 800ab42:	2017      	movs	r0, #23
 800ab44:	f000 f884 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	b29a      	uxth	r2, r3
 800ab4c:	4b16      	ldr	r3, [pc, #88]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800ab4e:	86da      	strh	r2, [r3, #54]	; 0x36
   															 PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_VS8 data from Mux5-Pin1 polling mode */
    adc_s.LS_VRx = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_LS_VRx,
 800ab50:	21ff      	movs	r1, #255	; 0xff
 800ab52:	2018      	movs	r0, #24
 800ab54:	f000 f87c 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	b29a      	uxth	r2, r3
 800ab5c:	4b12      	ldr	r3, [pc, #72]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800ab5e:	871a      	strh	r2, [r3, #56]	; 0x38
    																PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_IS8 data from Mux5-Pin2 polling mode */
    adc_s.LS_VRy = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_LS_VRy,
 800ab60:	21ff      	movs	r1, #255	; 0xff
 800ab62:	2019      	movs	r0, #25
 800ab64:	f000 f874 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	b29a      	uxth	r2, r3
 800ab6c:	4b0e      	ldr	r3, [pc, #56]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800ab6e:	875a      	strh	r2, [r3, #58]	; 0x3a
   															 PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_VS8 data from Mux5-Pin1 polling mode */
    adc_s.DIREKSIYON = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_DIREKSIYON,
 800ab70:	21ff      	movs	r1, #255	; 0xff
 800ab72:	2020      	movs	r0, #32
 800ab74:	f000 f86c 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	b29a      	uxth	r2, r3
 800ab7c:	4b0a      	ldr	r3, [pc, #40]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800ab7e:	879a      	strh	r2, [r3, #60]	; 0x3c
    																PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_IS8 data from Mux5-Pin2 polling mode */
    adc_s.FREN = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_FREN,
 800ab80:	21ff      	movs	r1, #255	; 0xff
 800ab82:	2021      	movs	r0, #33	; 0x21
 800ab84:	f000 f864 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	b29a      	uxth	r2, r3
 800ab8c:	4b06      	ldr	r3, [pc, #24]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800ab8e:	87da      	strh	r2, [r3, #62]	; 0x3e
   															 PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_VS8 data from Mux5-Pin1 polling mode */
    adc_s.GAZ = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_GAZ,
 800ab90:	21ff      	movs	r1, #255	; 0xff
 800ab92:	2022      	movs	r0, #34	; 0x22
 800ab94:	f000 f85c 	bl	800ac50 <Process_AnalogSignals_ReadChannel>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	b29a      	uxth	r2, r3
 800ab9c:	4b02      	ldr	r3, [pc, #8]	; (800aba8 <ModuleADC_MAIN_Routine+0x21c>)
 800ab9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40


#ifdef  DEBUG_ANALOGREAD_PROCESS
    DEBUG_Process();
#endif
}
 800aba2:	bf00      	nop
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	2000c16c 	.word	0x2000c16c

0800abac <ModuleADC_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleADC_MAIN_Process(void)
{
 800abac:	b480      	push	{r7}
 800abae:	af00      	add	r7, sp, #0

}
 800abb0:	bf00      	nop
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr
	...

0800abbc <ModuleADC_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleADC_MAIN(void)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	af00      	add	r7, sp, #0
	switch(ModuleADC_MAIN_State)
 800abc0:	4b11      	ldr	r3, [pc, #68]	; (800ac08 <ModuleADC_MAIN+0x4c>)
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	2b03      	cmp	r3, #3
 800abc6:	d819      	bhi.n	800abfc <ModuleADC_MAIN+0x40>
 800abc8:	a201      	add	r2, pc, #4	; (adr r2, 800abd0 <ModuleADC_MAIN+0x14>)
 800abca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abce:	bf00      	nop
 800abd0:	0800abe1 	.word	0x0800abe1
 800abd4:	0800abe9 	.word	0x0800abe9
 800abd8:	0800abef 	.word	0x0800abef
 800abdc:	0800abf5 	.word	0x0800abf5
	{
	    case ModuleADC_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleADC_MAIN_State = ModuleADC_MAIN_State_ROUTINE;
 800abe0:	4b09      	ldr	r3, [pc, #36]	; (800ac08 <ModuleADC_MAIN+0x4c>)
 800abe2:	2201      	movs	r2, #1
 800abe4:	701a      	strb	r2, [r3, #0]
	    break;
 800abe6:	e00d      	b.n	800ac04 <ModuleADC_MAIN+0x48>

	    case ModuleADC_MAIN_State_ROUTINE:

	    	ModuleADC_MAIN_Routine();
 800abe8:	f7ff fed0 	bl	800a98c <ModuleADC_MAIN_Routine>
	    break;
 800abec:	e00a      	b.n	800ac04 <ModuleADC_MAIN+0x48>

	    case ModuleADC_MAIN_State_PROCESS:

	    	ModuleADC_MAIN_Process();
 800abee:	f7ff ffdd 	bl	800abac <ModuleADC_MAIN_Process>

	    break;
 800abf2:	e007      	b.n	800ac04 <ModuleADC_MAIN+0x48>

	    case ModuleADC_MAIN_State_SUSPEND:
	    	ModuleADC_MAIN_State = ModuleADC_MAIN_State_IDLE;
 800abf4:	4b04      	ldr	r3, [pc, #16]	; (800ac08 <ModuleADC_MAIN+0x4c>)
 800abf6:	2200      	movs	r2, #0
 800abf8:	701a      	strb	r2, [r3, #0]
	    break;
 800abfa:	e003      	b.n	800ac04 <ModuleADC_MAIN+0x48>

	    default:
	    	ModuleADC_MAIN_State = ModuleADC_MAIN_State_SUSPEND;
 800abfc:	4b02      	ldr	r3, [pc, #8]	; (800ac08 <ModuleADC_MAIN+0x4c>)
 800abfe:	2203      	movs	r2, #3
 800ac00:	701a      	strb	r2, [r3, #0]
	    break;
 800ac02:	bf00      	nop

	}
}
 800ac04:	bf00      	nop
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	2000c169 	.word	0x2000c169

0800ac0c <Process_AnalogSignals_SeperateChannels>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void    Process_AnalogSignals_SeperateChannels(ADC_HandleTypeDef *hadc, U32 ADC_CHANNEL, U32 RANK)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b088      	sub	sp, #32
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	607a      	str	r2, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 800ac18:	f107 0310 	add.w	r3, r7, #16
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	601a      	str	r2, [r3, #0]
 800ac20:	605a      	str	r2, [r3, #4]
 800ac22:	609a      	str	r2, [r3, #8]
 800ac24:	60da      	str	r2, [r3, #12]

    sConfig.Channel      = ADC_CHANNEL;
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	613b      	str	r3, [r7, #16]
    sConfig.Rank         = RANK;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	617b      	str	r3, [r7, #20]
    sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800ac2e:	2302      	movs	r3, #2
 800ac30:	61bb      	str	r3, [r7, #24]

    if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 800ac32:	f107 0310 	add.w	r3, r7, #16
 800ac36:	4619      	mov	r1, r3
 800ac38:	68f8      	ldr	r0, [r7, #12]
 800ac3a:	f7f7 ff61 	bl	8002b00 <HAL_ADC_ConfigChannel>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d001      	beq.n	800ac48 <Process_AnalogSignals_SeperateChannels+0x3c>
    {
        Error_Handler();
 800ac44:	f7f6 fa38 	bl	80010b8 <Error_Handler>
    }
}
 800ac48:	bf00      	nop
 800ac4a:	3720      	adds	r7, #32
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <Process_AnalogSignals_ReadChannel>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
U32 Process_AnalogSignals_ReadChannel(U8 MUX_SELECT, U8 SELECT_PIN)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b096      	sub	sp, #88	; 0x58
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	4603      	mov	r3, r0
 800ac58:	460a      	mov	r2, r1
 800ac5a:	71fb      	strb	r3, [r7, #7]
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	71bb      	strb	r3, [r7, #6]
    ADC_HandleTypeDef tempAdcHandle;
    U32 tempAdcValue  = 0;
 800ac60:	2300      	movs	r3, #0
 800ac62:	657b      	str	r3, [r7, #84]	; 0x54

    /* Analog Mux Pin Selection																*/
    switch (MUX_SELECT)
 800ac64:	79fb      	ldrb	r3, [r7, #7]
 800ac66:	3b01      	subs	r3, #1
 800ac68:	2b21      	cmp	r3, #33	; 0x21
 800ac6a:	f200 817b 	bhi.w	800af64 <Process_AnalogSignals_ReadChannel+0x314>
 800ac6e:	a201      	add	r2, pc, #4	; (adr r2, 800ac74 <Process_AnalogSignals_ReadChannel+0x24>)
 800ac70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac74:	0800acfd 	.word	0x0800acfd
 800ac78:	0800ad19 	.word	0x0800ad19
 800ac7c:	0800ad35 	.word	0x0800ad35
 800ac80:	0800ad51 	.word	0x0800ad51
 800ac84:	0800ad6d 	.word	0x0800ad6d
 800ac88:	0800ad89 	.word	0x0800ad89
 800ac8c:	0800ada5 	.word	0x0800ada5
 800ac90:	0800adc1 	.word	0x0800adc1
 800ac94:	0800addd 	.word	0x0800addd
 800ac98:	0800af65 	.word	0x0800af65
 800ac9c:	0800af65 	.word	0x0800af65
 800aca0:	0800af65 	.word	0x0800af65
 800aca4:	0800af65 	.word	0x0800af65
 800aca8:	0800af65 	.word	0x0800af65
 800acac:	0800af65 	.word	0x0800af65
 800acb0:	0800adf9 	.word	0x0800adf9
 800acb4:	0800ae15 	.word	0x0800ae15
 800acb8:	0800ae31 	.word	0x0800ae31
 800acbc:	0800ae4d 	.word	0x0800ae4d
 800acc0:	0800ae69 	.word	0x0800ae69
 800acc4:	0800ae85 	.word	0x0800ae85
 800acc8:	0800aea1 	.word	0x0800aea1
 800accc:	0800aebd 	.word	0x0800aebd
 800acd0:	0800aed9 	.word	0x0800aed9
 800acd4:	0800aef5 	.word	0x0800aef5
 800acd8:	0800af65 	.word	0x0800af65
 800acdc:	0800af65 	.word	0x0800af65
 800ace0:	0800af65 	.word	0x0800af65
 800ace4:	0800af65 	.word	0x0800af65
 800ace8:	0800af65 	.word	0x0800af65
 800acec:	0800af65 	.word	0x0800af65
 800acf0:	0800af11 	.word	0x0800af11
 800acf4:	0800af2d 	.word	0x0800af2d
 800acf8:	0800af49 	.word	0x0800af49
    {
        case PROCESS_ANALOGSIGNALS_AN_MUX1:    /* PC1 - ADC3 - CHANNEL_13       */

            Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_MUX1_HANDLE,
 800acfc:	2203      	movs	r2, #3
 800acfe:	210d      	movs	r1, #13
 800ad00:	48cd      	ldr	r0, [pc, #820]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800ad02:	f7ff ff83 	bl	800ac0c <Process_AnalogSignals_SeperateChannels>
                                                   PROCESS_ANALOGSIGNALS_AN_MUX1_CHANNEL,
                                                   PROCESS_ANALOGSIGNALS_AN_MUX1_RANK);

            tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_MUX1_HANDLE;
 800ad06:	4acc      	ldr	r2, [pc, #816]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800ad08:	f107 030c 	add.w	r3, r7, #12
 800ad0c:	4611      	mov	r1, r2
 800ad0e:	2248      	movs	r2, #72	; 0x48
 800ad10:	4618      	mov	r0, r3
 800ad12:	f000 fe51 	bl	800b9b8 <memcpy>

            break;
 800ad16:	e125      	b.n	800af64 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_MUX2:    /* PC1 - ADC3 - CHANNEL_14       */

            Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_MUX2_HANDLE,
 800ad18:	2203      	movs	r2, #3
 800ad1a:	210e      	movs	r1, #14
 800ad1c:	48c6      	ldr	r0, [pc, #792]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800ad1e:	f7ff ff75 	bl	800ac0c <Process_AnalogSignals_SeperateChannels>
                                                   PROCESS_ANALOGSIGNALS_AN_MUX2_CHANNEL,
                                                   PROCESS_ANALOGSIGNALS_AN_MUX2_RANK);

            tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_MUX2_HANDLE;
 800ad22:	4ac5      	ldr	r2, [pc, #788]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800ad24:	f107 030c 	add.w	r3, r7, #12
 800ad28:	4611      	mov	r1, r2
 800ad2a:	2248      	movs	r2, #72	; 0x48
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f000 fe43 	bl	800b9b8 <memcpy>

            break;
 800ad32:	e117      	b.n	800af64 <Process_AnalogSignals_ReadChannel+0x314>

#ifdef SCI_BCM_SMALL
        /* ACS712 POWER Selection									*/
        case PROCESS_ANALOGSIGNALS_AN_VIN:

                    Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_VIN_HANDLE,
 800ad34:	2203      	movs	r2, #3
 800ad36:	210f      	movs	r1, #15
 800ad38:	48bf      	ldr	r0, [pc, #764]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800ad3a:	f7ff ff67 	bl	800ac0c <Process_AnalogSignals_SeperateChannels>
                    										PROCESS_ANALOGSIGNALS_AN_VIN_CHANNEL,
															PROCESS_ANALOGSIGNALS_AN_VIN_RANK);

                    tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_VIN_HANDLE;
 800ad3e:	4abe      	ldr	r2, [pc, #760]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800ad40:	f107 030c 	add.w	r3, r7, #12
 800ad44:	4611      	mov	r1, r2
 800ad46:	2248      	movs	r2, #72	; 0x48
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f000 fe35 	bl	800b9b8 <memcpy>

                    break;
 800ad4e:	e109      	b.n	800af64 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_ACS_5V:

                    Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_ACS_5V_HANDLE,
 800ad50:	2203      	movs	r2, #3
 800ad52:	2109      	movs	r1, #9
 800ad54:	48b8      	ldr	r0, [pc, #736]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800ad56:	f7ff ff59 	bl	800ac0c <Process_AnalogSignals_SeperateChannels>
                    									   PROCESS_ANALOGSIGNALS_AN_ACS_5V_CHANNEL,
														   PROCESS_ANALOGSIGNALS_AN_ACS_5V_RANK);

                    tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_ACS_5V_HANDLE;
 800ad5a:	4ab7      	ldr	r2, [pc, #732]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800ad5c:	f107 030c 	add.w	r3, r7, #12
 800ad60:	4611      	mov	r1, r2
 800ad62:	2248      	movs	r2, #72	; 0x48
 800ad64:	4618      	mov	r0, r3
 800ad66:	f000 fe27 	bl	800b9b8 <memcpy>

                    break;
 800ad6a:	e0fb      	b.n	800af64 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_ACS_12V:

                   	Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_ACS_12V_HANDLE,
 800ad6c:	2203      	movs	r2, #3
 800ad6e:	210a      	movs	r1, #10
 800ad70:	48b1      	ldr	r0, [pc, #708]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800ad72:	f7ff ff4b 	bl	800ac0c <Process_AnalogSignals_SeperateChannels>
                        		  	  	  	  	  	  	  PROCESS_ANALOGSIGNALS_AN_ACS_12V_CHANNEL,
														  PROCESS_ANALOGSIGNALS_AN_ACS_12V_RANK);

                    tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_ACS_12V_HANDLE;
 800ad76:	4ab0      	ldr	r2, [pc, #704]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800ad78:	f107 030c 	add.w	r3, r7, #12
 800ad7c:	4611      	mov	r1, r2
 800ad7e:	2248      	movs	r2, #72	; 0x48
 800ad80:	4618      	mov	r0, r3
 800ad82:	f000 fe19 	bl	800b9b8 <memcpy>

                    break;
 800ad86:	e0ed      	b.n	800af64 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_ACS_VMCU:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_ACS_VMCU_HANDLE,
 800ad88:	2203      	movs	r2, #3
 800ad8a:	210b      	movs	r1, #11
 800ad8c:	48aa      	ldr	r0, [pc, #680]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800ad8e:	f7ff ff3d 	bl	800ac0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_ACS_VMCU_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_ACS_VMCU_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_ACS_VMCU_HANDLE;
 800ad92:	4aa9      	ldr	r2, [pc, #676]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800ad94:	f107 030c 	add.w	r3, r7, #12
 800ad98:	4611      	mov	r1, r2
 800ad9a:	2248      	movs	r2, #72	; 0x48
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f000 fe0b 	bl	800b9b8 <memcpy>

                     break;
 800ada2:	e0df      	b.n	800af64 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_ACS_3V3:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_ACS_3V3_HANDLE,
 800ada4:	2203      	movs	r2, #3
 800ada6:	210c      	movs	r1, #12
 800ada8:	48a3      	ldr	r0, [pc, #652]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800adaa:	f7ff ff2f 	bl	800ac0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_ACS_3V3_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_ACS_3V3_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_ACS_3V3_HANDLE;
 800adae:	4aa2      	ldr	r2, [pc, #648]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800adb0:	f107 030c 	add.w	r3, r7, #12
 800adb4:	4611      	mov	r1, r2
 800adb6:	2248      	movs	r2, #72	; 0x48
 800adb8:	4618      	mov	r0, r3
 800adba:	f000 fdfd 	bl	800b9b8 <memcpy>

                     break;
 800adbe:	e0d1      	b.n	800af64 <Process_AnalogSignals_ReadChannel+0x314>

        /* ACS712 DRIVER Selection									*/
        case PROCESS_ANALOGSIGNALS_AN_ACS_FL:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_ACS_FL_HANDLE,
 800adc0:	2203      	movs	r2, #3
 800adc2:	2101      	movs	r1, #1
 800adc4:	489c      	ldr	r0, [pc, #624]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800adc6:	f7ff ff21 	bl	800ac0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_ACS_FL_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_ACS_FL_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_ACS_FL_HANDLE;
 800adca:	4a9b      	ldr	r2, [pc, #620]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800adcc:	f107 030c 	add.w	r3, r7, #12
 800add0:	4611      	mov	r1, r2
 800add2:	2248      	movs	r2, #72	; 0x48
 800add4:	4618      	mov	r0, r3
 800add6:	f000 fdef 	bl	800b9b8 <memcpy>

                     break;
 800adda:	e0c3      	b.n	800af64 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_ACS_BL:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_ACS_BL_HANDLE,
 800addc:	2203      	movs	r2, #3
 800adde:	2102      	movs	r1, #2
 800ade0:	4895      	ldr	r0, [pc, #596]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800ade2:	f7ff ff13 	bl	800ac0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_ACS_BL_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_ACS_BL_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_ACS_BL_HANDLE;
 800ade6:	4a94      	ldr	r2, [pc, #592]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800ade8:	f107 030c 	add.w	r3, r7, #12
 800adec:	4611      	mov	r1, r2
 800adee:	2248      	movs	r2, #72	; 0x48
 800adf0:	4618      	mov	r0, r3
 800adf2:	f000 fde1 	bl	800b9b8 <memcpy>

                     break;
 800adf6:	e0b5      	b.n	800af64 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_ACS_VINL1:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_ACS_VINL1_HANDLE,
 800adf8:	2203      	movs	r2, #3
 800adfa:	2103      	movs	r1, #3
 800adfc:	488e      	ldr	r0, [pc, #568]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800adfe:	f7ff ff05 	bl	800ac0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_ACS_VINL1_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_ACS_VINL1_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_ACS_VINL1_HANDLE;
 800ae02:	4a8d      	ldr	r2, [pc, #564]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800ae04:	f107 030c 	add.w	r3, r7, #12
 800ae08:	4611      	mov	r1, r2
 800ae0a:	2248      	movs	r2, #72	; 0x48
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f000 fdd3 	bl	800b9b8 <memcpy>

                     break;
 800ae12:	e0a7      	b.n	800af64 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_ACS_VINL2:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_ACS_VINL2_HANDLE,
 800ae14:	2203      	movs	r2, #3
 800ae16:	2104      	movs	r1, #4
 800ae18:	4887      	ldr	r0, [pc, #540]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800ae1a:	f7ff fef7 	bl	800ac0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_ACS_VINL2_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_ACS_VINL2_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_ACS_VINL2_HANDLE;
 800ae1e:	4a86      	ldr	r2, [pc, #536]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800ae20:	f107 030c 	add.w	r3, r7, #12
 800ae24:	4611      	mov	r1, r2
 800ae26:	2248      	movs	r2, #72	; 0x48
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f000 fdc5 	bl	800b9b8 <memcpy>

                     break;
 800ae2e:	e099      	b.n	800af64 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_ACS_BINL:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_ACS_BINL_HANDLE,
 800ae30:	2203      	movs	r2, #3
 800ae32:	2105      	movs	r1, #5
 800ae34:	4880      	ldr	r0, [pc, #512]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800ae36:	f7ff fee9 	bl	800ac0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_ACS_BINL_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_ACS_BINL_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_ACS_BINL_HANDLE;
 800ae3a:	4a7f      	ldr	r2, [pc, #508]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800ae3c:	f107 030c 	add.w	r3, r7, #12
 800ae40:	4611      	mov	r1, r2
 800ae42:	2248      	movs	r2, #72	; 0x48
 800ae44:	4618      	mov	r0, r3
 800ae46:	f000 fdb7 	bl	800b9b8 <memcpy>

                     break;
 800ae4a:	e08b      	b.n	800af64 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_ACS_STOP:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_ACS_STOP_HANDLE,
 800ae4c:	2203      	movs	r2, #3
 800ae4e:	2105      	movs	r1, #5
 800ae50:	4879      	ldr	r0, [pc, #484]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800ae52:	f7ff fedb 	bl	800ac0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_ACS_STOP_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_ACS_STOP_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_ACS_STOP_HANDLE;
 800ae56:	4a78      	ldr	r2, [pc, #480]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800ae58:	f107 030c 	add.w	r3, r7, #12
 800ae5c:	4611      	mov	r1, r2
 800ae5e:	2248      	movs	r2, #72	; 0x48
 800ae60:	4618      	mov	r0, r3
 800ae62:	f000 fda9 	bl	800b9b8 <memcpy>

                     break;
 800ae66:	e07d      	b.n	800af64 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_ACS_RS:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_ACS_RS_HANDLE,
 800ae68:	2203      	movs	r2, #3
 800ae6a:	2107      	movs	r1, #7
 800ae6c:	4872      	ldr	r0, [pc, #456]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800ae6e:	f7ff fecd 	bl	800ac0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_ACS_RS_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_ACS_RS_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_ACS_RS_HANDLE;
 800ae72:	4a71      	ldr	r2, [pc, #452]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800ae74:	f107 030c 	add.w	r3, r7, #12
 800ae78:	4611      	mov	r1, r2
 800ae7a:	2248      	movs	r2, #72	; 0x48
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f000 fd9b 	bl	800b9b8 <memcpy>

                     break;
 800ae82:	e06f      	b.n	800af64 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_ACS_LS:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_ACS_LS_HANDLE,
 800ae84:	2203      	movs	r2, #3
 800ae86:	2108      	movs	r1, #8
 800ae88:	486b      	ldr	r0, [pc, #428]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800ae8a:	f7ff febf 	bl	800ac0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_ACS_LS_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_ACS_LS_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_ACS_LS_HANDLE;
 800ae8e:	4a6a      	ldr	r2, [pc, #424]	; (800b038 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800ae90:	f107 030c 	add.w	r3, r7, #12
 800ae94:	4611      	mov	r1, r2
 800ae96:	2248      	movs	r2, #72	; 0x48
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f000 fd8d 	bl	800b9b8 <memcpy>

                     break;
 800ae9e:	e061      	b.n	800af64 <Process_AnalogSignals_ReadChannel+0x314>

        /* GPIO DRIVER Selection									 */
        case PROCESS_ANALOGSIGNALS_AN_RS_VRx:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_RS_VRx_HANDLE,
 800aea0:	2201      	movs	r2, #1
 800aea2:	2109      	movs	r1, #9
 800aea4:	4865      	ldr	r0, [pc, #404]	; (800b03c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800aea6:	f7ff feb1 	bl	800ac0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_RS_VRx_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_RS_VRx_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_RS_VRx_HANDLE;
 800aeaa:	4a64      	ldr	r2, [pc, #400]	; (800b03c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800aeac:	f107 030c 	add.w	r3, r7, #12
 800aeb0:	4611      	mov	r1, r2
 800aeb2:	2248      	movs	r2, #72	; 0x48
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f000 fd7f 	bl	800b9b8 <memcpy>

                     break;
 800aeba:	e053      	b.n	800af64 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_RS_VRy:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_RS_VRy_HANDLE,
 800aebc:	2201      	movs	r2, #1
 800aebe:	2107      	movs	r1, #7
 800aec0:	485e      	ldr	r0, [pc, #376]	; (800b03c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800aec2:	f7ff fea3 	bl	800ac0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_RS_VRy_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_RS_VRy_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_RS_VRy_HANDLE;
 800aec6:	4a5d      	ldr	r2, [pc, #372]	; (800b03c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800aec8:	f107 030c 	add.w	r3, r7, #12
 800aecc:	4611      	mov	r1, r2
 800aece:	2248      	movs	r2, #72	; 0x48
 800aed0:	4618      	mov	r0, r3
 800aed2:	f000 fd71 	bl	800b9b8 <memcpy>

                     break;
 800aed6:	e045      	b.n	800af64 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_LS_VRx:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_LS_VRx_HANDLE,
 800aed8:	2201      	movs	r2, #1
 800aeda:	210e      	movs	r1, #14
 800aedc:	4857      	ldr	r0, [pc, #348]	; (800b03c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800aede:	f7ff fe95 	bl	800ac0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_LS_VRx_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_LS_VRx_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_LS_VRx_HANDLE;
 800aee2:	4a56      	ldr	r2, [pc, #344]	; (800b03c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800aee4:	f107 030c 	add.w	r3, r7, #12
 800aee8:	4611      	mov	r1, r2
 800aeea:	2248      	movs	r2, #72	; 0x48
 800aeec:	4618      	mov	r0, r3
 800aeee:	f000 fd63 	bl	800b9b8 <memcpy>

                     break;
 800aef2:	e037      	b.n	800af64 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_LS_VRy:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_LS_VRy_HANDLE,
 800aef4:	2201      	movs	r2, #1
 800aef6:	210f      	movs	r1, #15
 800aef8:	4850      	ldr	r0, [pc, #320]	; (800b03c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800aefa:	f7ff fe87 	bl	800ac0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_LS_VRy_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_LS_VRy_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_LS_VRy_HANDLE;
 800aefe:	4a4f      	ldr	r2, [pc, #316]	; (800b03c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800af00:	f107 030c 	add.w	r3, r7, #12
 800af04:	4611      	mov	r1, r2
 800af06:	2248      	movs	r2, #72	; 0x48
 800af08:	4618      	mov	r0, r3
 800af0a:	f000 fd55 	bl	800b9b8 <memcpy>

                     break;
 800af0e:	e029      	b.n	800af64 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_DIREKSIYON:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_DIREKSIYON_HANDLE,
 800af10:	2201      	movs	r2, #1
 800af12:	2105      	movs	r1, #5
 800af14:	4849      	ldr	r0, [pc, #292]	; (800b03c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800af16:	f7ff fe79 	bl	800ac0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_DIREKSIYON_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_DIREKSIYON_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_DIREKSIYON_HANDLE;
 800af1a:	4a48      	ldr	r2, [pc, #288]	; (800b03c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800af1c:	f107 030c 	add.w	r3, r7, #12
 800af20:	4611      	mov	r1, r2
 800af22:	2248      	movs	r2, #72	; 0x48
 800af24:	4618      	mov	r0, r3
 800af26:	f000 fd47 	bl	800b9b8 <memcpy>

                     break;
 800af2a:	e01b      	b.n	800af64 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_FREN:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_FREN_HANDLE,
 800af2c:	2201      	movs	r2, #1
 800af2e:	2104      	movs	r1, #4
 800af30:	4842      	ldr	r0, [pc, #264]	; (800b03c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800af32:	f7ff fe6b 	bl	800ac0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_FREN_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_FREN_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_FREN_HANDLE;
 800af36:	4a41      	ldr	r2, [pc, #260]	; (800b03c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800af38:	f107 030c 	add.w	r3, r7, #12
 800af3c:	4611      	mov	r1, r2
 800af3e:	2248      	movs	r2, #72	; 0x48
 800af40:	4618      	mov	r0, r3
 800af42:	f000 fd39 	bl	800b9b8 <memcpy>

                     break;
 800af46:	e00d      	b.n	800af64 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_GAZ:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_GAZ_HANDLE,
 800af48:	2201      	movs	r2, #1
 800af4a:	2106      	movs	r1, #6
 800af4c:	483b      	ldr	r0, [pc, #236]	; (800b03c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800af4e:	f7ff fe5d 	bl	800ac0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_GAZ_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_GAZ_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_GAZ_HANDLE;
 800af52:	4a3a      	ldr	r2, [pc, #232]	; (800b03c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800af54:	f107 030c 	add.w	r3, r7, #12
 800af58:	4611      	mov	r1, r2
 800af5a:	2248      	movs	r2, #72	; 0x48
 800af5c:	4618      	mov	r0, r3
 800af5e:	f000 fd2b 	bl	800b9b8 <memcpy>

                     break;
 800af62:	bf00      	nop
#endif

    }


    switch (SELECT_PIN)
 800af64:	79bb      	ldrb	r3, [r7, #6]
 800af66:	2b07      	cmp	r3, #7
 800af68:	dc18      	bgt.n	800af9c <Process_AnalogSignals_ReadChannel+0x34c>
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	f2c0 80b6 	blt.w	800b0dc <Process_AnalogSignals_ReadChannel+0x48c>
 800af70:	2b07      	cmp	r3, #7
 800af72:	f200 80b3 	bhi.w	800b0dc <Process_AnalogSignals_ReadChannel+0x48c>
 800af76:	a201      	add	r2, pc, #4	; (adr r2, 800af7c <Process_AnalogSignals_ReadChannel+0x32c>)
 800af78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af7c:	0800afa1 	.word	0x0800afa1
 800af80:	0800afc7 	.word	0x0800afc7
 800af84:	0800afed 	.word	0x0800afed
 800af88:	0800b013 	.word	0x0800b013
 800af8c:	0800b045 	.word	0x0800b045
 800af90:	0800b06b 	.word	0x0800b06b
 800af94:	0800b091 	.word	0x0800b091
 800af98:	0800b0b7 	.word	0x0800b0b7
 800af9c:	2bff      	cmp	r3, #255	; 0xff
 800af9e:	e09d      	b.n	800b0dc <Process_AnalogSignals_ReadChannel+0x48c>
    {
    	case PROCESS_ANALOGSIGNALS_SELECT_NULL: break;

        case PROCESS_ANALOGSIGNALS_SELECT_PIN0: A0_MUX_SET(); break;
 800afa0:	2200      	movs	r2, #0
 800afa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800afa6:	4826      	ldr	r0, [pc, #152]	; (800b040 <Process_AnalogSignals_ReadChannel+0x3f0>)
 800afa8:	f7f9 f826 	bl	8003ff8 <HAL_GPIO_WritePin>
 800afac:	2200      	movs	r2, #0
 800afae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800afb2:	4823      	ldr	r0, [pc, #140]	; (800b040 <Process_AnalogSignals_ReadChannel+0x3f0>)
 800afb4:	f7f9 f820 	bl	8003ff8 <HAL_GPIO_WritePin>
 800afb8:	2200      	movs	r2, #0
 800afba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800afbe:	4820      	ldr	r0, [pc, #128]	; (800b040 <Process_AnalogSignals_ReadChannel+0x3f0>)
 800afc0:	f7f9 f81a 	bl	8003ff8 <HAL_GPIO_WritePin>
 800afc4:	e08a      	b.n	800b0dc <Process_AnalogSignals_ReadChannel+0x48c>

        case PROCESS_ANALOGSIGNALS_SELECT_PIN1: A1_MUX_SET(); break;
 800afc6:	2200      	movs	r2, #0
 800afc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800afcc:	481c      	ldr	r0, [pc, #112]	; (800b040 <Process_AnalogSignals_ReadChannel+0x3f0>)
 800afce:	f7f9 f813 	bl	8003ff8 <HAL_GPIO_WritePin>
 800afd2:	2200      	movs	r2, #0
 800afd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800afd8:	4819      	ldr	r0, [pc, #100]	; (800b040 <Process_AnalogSignals_ReadChannel+0x3f0>)
 800afda:	f7f9 f80d 	bl	8003ff8 <HAL_GPIO_WritePin>
 800afde:	2201      	movs	r2, #1
 800afe0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800afe4:	4816      	ldr	r0, [pc, #88]	; (800b040 <Process_AnalogSignals_ReadChannel+0x3f0>)
 800afe6:	f7f9 f807 	bl	8003ff8 <HAL_GPIO_WritePin>
 800afea:	e077      	b.n	800b0dc <Process_AnalogSignals_ReadChannel+0x48c>

        case PROCESS_ANALOGSIGNALS_SELECT_PIN2: A2_MUX_SET(); break;
 800afec:	2200      	movs	r2, #0
 800afee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800aff2:	4813      	ldr	r0, [pc, #76]	; (800b040 <Process_AnalogSignals_ReadChannel+0x3f0>)
 800aff4:	f7f9 f800 	bl	8003ff8 <HAL_GPIO_WritePin>
 800aff8:	2201      	movs	r2, #1
 800affa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800affe:	4810      	ldr	r0, [pc, #64]	; (800b040 <Process_AnalogSignals_ReadChannel+0x3f0>)
 800b000:	f7f8 fffa 	bl	8003ff8 <HAL_GPIO_WritePin>
 800b004:	2200      	movs	r2, #0
 800b006:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b00a:	480d      	ldr	r0, [pc, #52]	; (800b040 <Process_AnalogSignals_ReadChannel+0x3f0>)
 800b00c:	f7f8 fff4 	bl	8003ff8 <HAL_GPIO_WritePin>
 800b010:	e064      	b.n	800b0dc <Process_AnalogSignals_ReadChannel+0x48c>

        case PROCESS_ANALOGSIGNALS_SELECT_PIN3: A3_MUX_SET(); break;
 800b012:	2200      	movs	r2, #0
 800b014:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b018:	4809      	ldr	r0, [pc, #36]	; (800b040 <Process_AnalogSignals_ReadChannel+0x3f0>)
 800b01a:	f7f8 ffed 	bl	8003ff8 <HAL_GPIO_WritePin>
 800b01e:	2201      	movs	r2, #1
 800b020:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b024:	4806      	ldr	r0, [pc, #24]	; (800b040 <Process_AnalogSignals_ReadChannel+0x3f0>)
 800b026:	f7f8 ffe7 	bl	8003ff8 <HAL_GPIO_WritePin>
 800b02a:	2201      	movs	r2, #1
 800b02c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b030:	4803      	ldr	r0, [pc, #12]	; (800b040 <Process_AnalogSignals_ReadChannel+0x3f0>)
 800b032:	f7f8 ffe1 	bl	8003ff8 <HAL_GPIO_WritePin>
 800b036:	e051      	b.n	800b0dc <Process_AnalogSignals_ReadChannel+0x48c>
 800b038:	20001094 	.word	0x20001094
 800b03c:	2000104c 	.word	0x2000104c
 800b040:	40020c00 	.word	0x40020c00

        case PROCESS_ANALOGSIGNALS_SELECT_PIN4: A4_MUX_SET(); break;
 800b044:	2201      	movs	r2, #1
 800b046:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b04a:	4833      	ldr	r0, [pc, #204]	; (800b118 <Process_AnalogSignals_ReadChannel+0x4c8>)
 800b04c:	f7f8 ffd4 	bl	8003ff8 <HAL_GPIO_WritePin>
 800b050:	2200      	movs	r2, #0
 800b052:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b056:	4830      	ldr	r0, [pc, #192]	; (800b118 <Process_AnalogSignals_ReadChannel+0x4c8>)
 800b058:	f7f8 ffce 	bl	8003ff8 <HAL_GPIO_WritePin>
 800b05c:	2200      	movs	r2, #0
 800b05e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b062:	482d      	ldr	r0, [pc, #180]	; (800b118 <Process_AnalogSignals_ReadChannel+0x4c8>)
 800b064:	f7f8 ffc8 	bl	8003ff8 <HAL_GPIO_WritePin>
 800b068:	e038      	b.n	800b0dc <Process_AnalogSignals_ReadChannel+0x48c>

        case PROCESS_ANALOGSIGNALS_SELECT_PIN5: A5_MUX_SET(); break;
 800b06a:	2201      	movs	r2, #1
 800b06c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b070:	4829      	ldr	r0, [pc, #164]	; (800b118 <Process_AnalogSignals_ReadChannel+0x4c8>)
 800b072:	f7f8 ffc1 	bl	8003ff8 <HAL_GPIO_WritePin>
 800b076:	2200      	movs	r2, #0
 800b078:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b07c:	4826      	ldr	r0, [pc, #152]	; (800b118 <Process_AnalogSignals_ReadChannel+0x4c8>)
 800b07e:	f7f8 ffbb 	bl	8003ff8 <HAL_GPIO_WritePin>
 800b082:	2201      	movs	r2, #1
 800b084:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b088:	4823      	ldr	r0, [pc, #140]	; (800b118 <Process_AnalogSignals_ReadChannel+0x4c8>)
 800b08a:	f7f8 ffb5 	bl	8003ff8 <HAL_GPIO_WritePin>
 800b08e:	e025      	b.n	800b0dc <Process_AnalogSignals_ReadChannel+0x48c>

        case PROCESS_ANALOGSIGNALS_SELECT_PIN6: A6_MUX_SET(); break;
 800b090:	2201      	movs	r2, #1
 800b092:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b096:	4820      	ldr	r0, [pc, #128]	; (800b118 <Process_AnalogSignals_ReadChannel+0x4c8>)
 800b098:	f7f8 ffae 	bl	8003ff8 <HAL_GPIO_WritePin>
 800b09c:	2201      	movs	r2, #1
 800b09e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b0a2:	481d      	ldr	r0, [pc, #116]	; (800b118 <Process_AnalogSignals_ReadChannel+0x4c8>)
 800b0a4:	f7f8 ffa8 	bl	8003ff8 <HAL_GPIO_WritePin>
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b0ae:	481a      	ldr	r0, [pc, #104]	; (800b118 <Process_AnalogSignals_ReadChannel+0x4c8>)
 800b0b0:	f7f8 ffa2 	bl	8003ff8 <HAL_GPIO_WritePin>
 800b0b4:	e012      	b.n	800b0dc <Process_AnalogSignals_ReadChannel+0x48c>

        case PROCESS_ANALOGSIGNALS_SELECT_PIN7: A7_MUX_SET(); break;
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b0bc:	4816      	ldr	r0, [pc, #88]	; (800b118 <Process_AnalogSignals_ReadChannel+0x4c8>)
 800b0be:	f7f8 ff9b 	bl	8003ff8 <HAL_GPIO_WritePin>
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b0c8:	4813      	ldr	r0, [pc, #76]	; (800b118 <Process_AnalogSignals_ReadChannel+0x4c8>)
 800b0ca:	f7f8 ff95 	bl	8003ff8 <HAL_GPIO_WritePin>
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b0d4:	4810      	ldr	r0, [pc, #64]	; (800b118 <Process_AnalogSignals_ReadChannel+0x4c8>)
 800b0d6:	f7f8 ff8f 	bl	8003ff8 <HAL_GPIO_WritePin>
 800b0da:	bf00      	nop
    }

    /* 74HC4051 Enable-Pin Always ground */

    /* 74HC4051 Select-Pin Maximum response time 90ns overcondutions            */
    HAL_Delay(1);   /* 1ms blocking delay hope to solve this select sequence    */
 800b0dc:	2001      	movs	r0, #1
 800b0de:	f7f7 fb09 	bl	80026f4 <HAL_Delay>

    HAL_ADC_Start(&tempAdcHandle);
 800b0e2:	f107 030c 	add.w	r3, r7, #12
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7f7 fb6c 	bl	80027c4 <HAL_ADC_Start>

    HAL_ADC_PollForConversion(&tempAdcHandle, 100);
 800b0ec:	f107 030c 	add.w	r3, r7, #12
 800b0f0:	2164      	movs	r1, #100	; 0x64
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7f7 fc6b 	bl	80029ce <HAL_ADC_PollForConversion>

    tempAdcValue = HAL_ADC_GetValue(&tempAdcHandle);
 800b0f8:	f107 030c 	add.w	r3, r7, #12
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f7f7 fcf1 	bl	8002ae4 <HAL_ADC_GetValue>
 800b102:	6578      	str	r0, [r7, #84]	; 0x54

    HAL_ADC_Stop(&tempAdcHandle);
 800b104:	f107 030c 	add.w	r3, r7, #12
 800b108:	4618      	mov	r0, r3
 800b10a:	f7f7 fc2d 	bl	8002968 <HAL_ADC_Stop>

    return tempAdcValue;
 800b10e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800b110:	4618      	mov	r0, r3
 800b112:	3758      	adds	r7, #88	; 0x58
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	40020c00 	.word	0x40020c00

0800b11c <ModuleAUDIO_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleAUDIO_HWInit(void)
{
 800b11c:	b480      	push	{r7}
 800b11e:	af00      	add	r7, sp, #0

}
 800b120:	bf00      	nop
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr

0800b12a <ModuleAUDIO_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleAUDIO_SWInit(void)
{
 800b12a:	b480      	push	{r7}
 800b12c:	af00      	add	r7, sp, #0
	
}
 800b12e:	bf00      	nop
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <ModuleAUDIO_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleAUDIO_StartUP(void)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	af00      	add	r7, sp, #0
	ModuleAUDIO_HWInit();
 800b13c:	f7ff ffee 	bl	800b11c <ModuleAUDIO_HWInit>
	ModuleAUDIO_SWInit();
 800b140:	f7ff fff3 	bl	800b12a <ModuleAUDIO_SWInit>
}
 800b144:	bf00      	nop
 800b146:	bd80      	pop	{r7, pc}

0800b148 <ModuleAUDIO_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleAUDIO_MAIN_Routine(void)
{
 800b148:	b480      	push	{r7}
 800b14a:	af00      	add	r7, sp, #0

}
 800b14c:	bf00      	nop
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr

0800b156 <ModuleAUDIO_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleAUDIO_MAIN_Process(void)
{
 800b156:	b480      	push	{r7}
 800b158:	af00      	add	r7, sp, #0

}
 800b15a:	bf00      	nop
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <ModuleAUDIO_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleAUDIO_MAIN(void)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	af00      	add	r7, sp, #0

	switch(ModuleAUDIO_MAIN_State)
 800b168:	4b11      	ldr	r3, [pc, #68]	; (800b1b0 <ModuleAUDIO_MAIN+0x4c>)
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	2b03      	cmp	r3, #3
 800b16e:	d819      	bhi.n	800b1a4 <ModuleAUDIO_MAIN+0x40>
 800b170:	a201      	add	r2, pc, #4	; (adr r2, 800b178 <ModuleAUDIO_MAIN+0x14>)
 800b172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b176:	bf00      	nop
 800b178:	0800b189 	.word	0x0800b189
 800b17c:	0800b191 	.word	0x0800b191
 800b180:	0800b197 	.word	0x0800b197
 800b184:	0800b19d 	.word	0x0800b19d
	{
	    case ModuleAUDIO_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleAUDIO_MAIN_State = ModuleAUDIO_MAIN_State_ROUTINE;
 800b188:	4b09      	ldr	r3, [pc, #36]	; (800b1b0 <ModuleAUDIO_MAIN+0x4c>)
 800b18a:	2201      	movs	r2, #1
 800b18c:	701a      	strb	r2, [r3, #0]
	    break;
 800b18e:	e00d      	b.n	800b1ac <ModuleAUDIO_MAIN+0x48>

	    case ModuleAUDIO_MAIN_State_ROUTINE:

	    	ModuleAUDIO_MAIN_Routine();
 800b190:	f7ff ffda 	bl	800b148 <ModuleAUDIO_MAIN_Routine>
	    break;
 800b194:	e00a      	b.n	800b1ac <ModuleAUDIO_MAIN+0x48>

	    case ModuleAUDIO_MAIN_State_PROCESS:

	    	ModuleAUDIO_MAIN_Process();
 800b196:	f7ff ffde 	bl	800b156 <ModuleAUDIO_MAIN_Process>

	    break;
 800b19a:	e007      	b.n	800b1ac <ModuleAUDIO_MAIN+0x48>

	    case ModuleAUDIO_MAIN_State_SUSPEND:
	    	ModuleAUDIO_MAIN_State = ModuleAUDIO_MAIN_State_IDLE;
 800b19c:	4b04      	ldr	r3, [pc, #16]	; (800b1b0 <ModuleAUDIO_MAIN+0x4c>)
 800b19e:	2200      	movs	r2, #0
 800b1a0:	701a      	strb	r2, [r3, #0]
	    break;
 800b1a2:	e003      	b.n	800b1ac <ModuleAUDIO_MAIN+0x48>

	    default:
	    	ModuleAUDIO_MAIN_State = ModuleAUDIO_MAIN_State_SUSPEND;
 800b1a4:	4b02      	ldr	r3, [pc, #8]	; (800b1b0 <ModuleAUDIO_MAIN+0x4c>)
 800b1a6:	2203      	movs	r2, #3
 800b1a8:	701a      	strb	r2, [r3, #0]
	    break;
 800b1aa:	bf00      	nop

	}
}
 800b1ac:	bf00      	nop
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	2000c26c 	.word	0x2000c26c

0800b1b4 <ModuleCAN_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleCAN_HWInit(void)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af02      	add	r7, sp, #8
	/* Construction function of protocol */

	EEM_CTOR(&protocol /* Main protocol Class Construct */
 800b1ba:	4b13      	ldr	r3, [pc, #76]	; (800b208 <ModuleCAN_HWInit+0x54>)
 800b1bc:	4a13      	ldr	r2, [pc, #76]	; (800b20c <ModuleCAN_HWInit+0x58>)
 800b1be:	9200      	str	r2, [sp, #0]
 800b1c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b1c2:	4813      	ldr	r0, [pc, #76]	; (800b210 <ModuleCAN_HWInit+0x5c>)
 800b1c4:	f7f6 fdd3 	bl	8001d6e <EEM_CTOR>
/* Only works for spi2can */
#endif
	);

	/* Init protocol settings in order to 250KBps Bit Rate */
	protocol.ops.EEM_INIT(&protocol.obj);
 800b1c8:	4b11      	ldr	r3, [pc, #68]	; (800b210 <ModuleCAN_HWInit+0x5c>)
 800b1ca:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800b1ce:	4810      	ldr	r0, [pc, #64]	; (800b210 <ModuleCAN_HWInit+0x5c>)
 800b1d0:	4798      	blx	r3

	/* Send Test Data */
	const char testData[ EEM_MAX_SIZE ] = { 0xEE , 0x00 , 0xEE , 0x00 , 0xEE , 0x00 , 0xEE , 0x00 };
 800b1d2:	4a10      	ldr	r2, [pc, #64]	; (800b214 <ModuleCAN_HWInit+0x60>)
 800b1d4:	463b      	mov	r3, r7
 800b1d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b1da:	e883 0003 	stmia.w	r3, {r0, r1}
	memcpy(&protocol.obj.canPacket.DATA[0] , &testData[0] , 8);
 800b1de:	463b      	mov	r3, r7
 800b1e0:	2208      	movs	r2, #8
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	480c      	ldr	r0, [pc, #48]	; (800b218 <ModuleCAN_HWInit+0x64>)
 800b1e6:	f000 fbe7 	bl	800b9b8 <memcpy>
	protocol.obj.canPacket.EXTENDED_ID.identifier = 0x1CFFFFFF;
 800b1ea:	4b09      	ldr	r3, [pc, #36]	; (800b210 <ModuleCAN_HWInit+0x5c>)
 800b1ec:	f06f 4263 	mvn.w	r2, #3808428032	; 0xe3000000
 800b1f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 800b1f4:	4b06      	ldr	r3, [pc, #24]	; (800b210 <ModuleCAN_HWInit+0x5c>)
 800b1f6:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	4807      	ldr	r0, [pc, #28]	; (800b21c <ModuleCAN_HWInit+0x68>)
 800b1fe:	4798      	blx	r3
}
 800b200:	bf00      	nop
 800b202:	3708      	adds	r7, #8
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}
 800b208:	0800c65c 	.word	0x0800c65c
 800b20c:	200010dc 	.word	0x200010dc
 800b210:	2000bfb4 	.word	0x2000bfb4
 800b214:	0800c618 	.word	0x0800c618
 800b218:	2000c054 	.word	0x2000c054
 800b21c:	2000c050 	.word	0x2000c050

0800b220 <ModuleCAN_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCAN_SWInit(void)
{
 800b220:	b480      	push	{r7}
 800b222:	af00      	add	r7, sp, #0
	__GL.can.msgTickCounter_u32 = 0 ;
 800b224:	4b04      	ldr	r3, [pc, #16]	; (800b238 <ModuleCAN_SWInit+0x18>)
 800b226:	2200      	movs	r2, #0
 800b228:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300

}
 800b22c:	bf00      	nop
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop
 800b238:	20000074 	.word	0x20000074

0800b23c <ModuleCAN_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCAN_StartUP(void)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	af00      	add	r7, sp, #0
	ModuleCAN_HWInit();
 800b240:	f7ff ffb8 	bl	800b1b4 <ModuleCAN_HWInit>
	ModuleCAN_SWInit();
 800b244:	f7ff ffec 	bl	800b220 <ModuleCAN_SWInit>

}
 800b248:	bf00      	nop
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <ModuleCAN_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleCAN_MAIN_Routine(void)
{
 800b24c:	b480      	push	{r7}
 800b24e:	af00      	add	r7, sp, #0
	if( TRUE == __GL.can.msgSelect.Flag.ID01 )
 800b250:	4b3f      	ldr	r3, [pc, #252]	; (800b350 <ModuleCAN_MAIN_Routine+0x104>)
 800b252:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800b256:	f003 0301 	and.w	r3, r3, #1
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d006      	beq.n	800b26e <ModuleCAN_MAIN_Routine+0x22>
	{
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_PROCESS;
 800b260:	4b3c      	ldr	r3, [pc, #240]	; (800b354 <ModuleCAN_MAIN_Routine+0x108>)
 800b262:	2202      	movs	r2, #2
 800b264:	701a      	strb	r2, [r3, #0]
		ModuleCAN_PROCESS_State	= ModuleCAN_PROCESS_State_MSG01;
 800b266:	4b3c      	ldr	r3, [pc, #240]	; (800b358 <ModuleCAN_MAIN_Routine+0x10c>)
 800b268:	2201      	movs	r2, #1
 800b26a:	701a      	strb	r2, [r3, #0]
	else
	{
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_SUSPEND;
	}

}
 800b26c:	e06b      	b.n	800b346 <ModuleCAN_MAIN_Routine+0xfa>
	else if( TRUE == __GL.can.msgSelect.Flag.ID02 )
 800b26e:	4b38      	ldr	r3, [pc, #224]	; (800b350 <ModuleCAN_MAIN_Routine+0x104>)
 800b270:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800b274:	f003 0302 	and.w	r3, r3, #2
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d006      	beq.n	800b28c <ModuleCAN_MAIN_Routine+0x40>
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_PROCESS;
 800b27e:	4b35      	ldr	r3, [pc, #212]	; (800b354 <ModuleCAN_MAIN_Routine+0x108>)
 800b280:	2202      	movs	r2, #2
 800b282:	701a      	strb	r2, [r3, #0]
		ModuleCAN_PROCESS_State	= ModuleCAN_PROCESS_State_MSG02;
 800b284:	4b34      	ldr	r3, [pc, #208]	; (800b358 <ModuleCAN_MAIN_Routine+0x10c>)
 800b286:	2202      	movs	r2, #2
 800b288:	701a      	strb	r2, [r3, #0]
}
 800b28a:	e05c      	b.n	800b346 <ModuleCAN_MAIN_Routine+0xfa>
	else if( TRUE == __GL.can.msgSelect.Flag.ID03 )
 800b28c:	4b30      	ldr	r3, [pc, #192]	; (800b350 <ModuleCAN_MAIN_Routine+0x104>)
 800b28e:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800b292:	f003 0304 	and.w	r3, r3, #4
 800b296:	b2db      	uxtb	r3, r3
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d006      	beq.n	800b2aa <ModuleCAN_MAIN_Routine+0x5e>
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_PROCESS;
 800b29c:	4b2d      	ldr	r3, [pc, #180]	; (800b354 <ModuleCAN_MAIN_Routine+0x108>)
 800b29e:	2202      	movs	r2, #2
 800b2a0:	701a      	strb	r2, [r3, #0]
		ModuleCAN_PROCESS_State	= ModuleCAN_PROCESS_State_MSG03;
 800b2a2:	4b2d      	ldr	r3, [pc, #180]	; (800b358 <ModuleCAN_MAIN_Routine+0x10c>)
 800b2a4:	2203      	movs	r2, #3
 800b2a6:	701a      	strb	r2, [r3, #0]
}
 800b2a8:	e04d      	b.n	800b346 <ModuleCAN_MAIN_Routine+0xfa>
	else if( TRUE == __GL.can.msgSelect.Flag.ID04 )
 800b2aa:	4b29      	ldr	r3, [pc, #164]	; (800b350 <ModuleCAN_MAIN_Routine+0x104>)
 800b2ac:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800b2b0:	f003 0308 	and.w	r3, r3, #8
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d006      	beq.n	800b2c8 <ModuleCAN_MAIN_Routine+0x7c>
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_PROCESS;
 800b2ba:	4b26      	ldr	r3, [pc, #152]	; (800b354 <ModuleCAN_MAIN_Routine+0x108>)
 800b2bc:	2202      	movs	r2, #2
 800b2be:	701a      	strb	r2, [r3, #0]
		ModuleCAN_PROCESS_State	= ModuleCAN_PROCESS_State_MSG04;
 800b2c0:	4b25      	ldr	r3, [pc, #148]	; (800b358 <ModuleCAN_MAIN_Routine+0x10c>)
 800b2c2:	2204      	movs	r2, #4
 800b2c4:	701a      	strb	r2, [r3, #0]
}
 800b2c6:	e03e      	b.n	800b346 <ModuleCAN_MAIN_Routine+0xfa>
	else if( TRUE == __GL.can.msgSelect.Flag.ID05 )
 800b2c8:	4b21      	ldr	r3, [pc, #132]	; (800b350 <ModuleCAN_MAIN_Routine+0x104>)
 800b2ca:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800b2ce:	f003 0310 	and.w	r3, r3, #16
 800b2d2:	b2db      	uxtb	r3, r3
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d006      	beq.n	800b2e6 <ModuleCAN_MAIN_Routine+0x9a>
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_PROCESS;
 800b2d8:	4b1e      	ldr	r3, [pc, #120]	; (800b354 <ModuleCAN_MAIN_Routine+0x108>)
 800b2da:	2202      	movs	r2, #2
 800b2dc:	701a      	strb	r2, [r3, #0]
		ModuleCAN_PROCESS_State	= ModuleCAN_PROCESS_State_MSG05;
 800b2de:	4b1e      	ldr	r3, [pc, #120]	; (800b358 <ModuleCAN_MAIN_Routine+0x10c>)
 800b2e0:	2205      	movs	r2, #5
 800b2e2:	701a      	strb	r2, [r3, #0]
}
 800b2e4:	e02f      	b.n	800b346 <ModuleCAN_MAIN_Routine+0xfa>
	else if( TRUE == __GL.can.msgSelect.Flag.ID06 )
 800b2e6:	4b1a      	ldr	r3, [pc, #104]	; (800b350 <ModuleCAN_MAIN_Routine+0x104>)
 800b2e8:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800b2ec:	f003 0320 	and.w	r3, r3, #32
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d006      	beq.n	800b304 <ModuleCAN_MAIN_Routine+0xb8>
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_PROCESS;
 800b2f6:	4b17      	ldr	r3, [pc, #92]	; (800b354 <ModuleCAN_MAIN_Routine+0x108>)
 800b2f8:	2202      	movs	r2, #2
 800b2fa:	701a      	strb	r2, [r3, #0]
		ModuleCAN_PROCESS_State	= ModuleCAN_PROCESS_State_MSG06;
 800b2fc:	4b16      	ldr	r3, [pc, #88]	; (800b358 <ModuleCAN_MAIN_Routine+0x10c>)
 800b2fe:	2206      	movs	r2, #6
 800b300:	701a      	strb	r2, [r3, #0]
}
 800b302:	e020      	b.n	800b346 <ModuleCAN_MAIN_Routine+0xfa>
	else if( TRUE == __GL.can.msgSelect.Flag.ID07 )
 800b304:	4b12      	ldr	r3, [pc, #72]	; (800b350 <ModuleCAN_MAIN_Routine+0x104>)
 800b306:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800b30a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	2b00      	cmp	r3, #0
 800b312:	d006      	beq.n	800b322 <ModuleCAN_MAIN_Routine+0xd6>
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_PROCESS;
 800b314:	4b0f      	ldr	r3, [pc, #60]	; (800b354 <ModuleCAN_MAIN_Routine+0x108>)
 800b316:	2202      	movs	r2, #2
 800b318:	701a      	strb	r2, [r3, #0]
		ModuleCAN_PROCESS_State	= ModuleCAN_PROCESS_State_MSG07;
 800b31a:	4b0f      	ldr	r3, [pc, #60]	; (800b358 <ModuleCAN_MAIN_Routine+0x10c>)
 800b31c:	2207      	movs	r2, #7
 800b31e:	701a      	strb	r2, [r3, #0]
}
 800b320:	e011      	b.n	800b346 <ModuleCAN_MAIN_Routine+0xfa>
	else if( TRUE == __GL.can.msgSelect.Flag.ID08 )
 800b322:	4b0b      	ldr	r3, [pc, #44]	; (800b350 <ModuleCAN_MAIN_Routine+0x104>)
 800b324:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800b328:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d006      	beq.n	800b340 <ModuleCAN_MAIN_Routine+0xf4>
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_PROCESS;
 800b332:	4b08      	ldr	r3, [pc, #32]	; (800b354 <ModuleCAN_MAIN_Routine+0x108>)
 800b334:	2202      	movs	r2, #2
 800b336:	701a      	strb	r2, [r3, #0]
		ModuleCAN_PROCESS_State	= ModuleCAN_PROCESS_State_MSG08;
 800b338:	4b07      	ldr	r3, [pc, #28]	; (800b358 <ModuleCAN_MAIN_Routine+0x10c>)
 800b33a:	2208      	movs	r2, #8
 800b33c:	701a      	strb	r2, [r3, #0]
}
 800b33e:	e002      	b.n	800b346 <ModuleCAN_MAIN_Routine+0xfa>
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_SUSPEND;
 800b340:	4b04      	ldr	r3, [pc, #16]	; (800b354 <ModuleCAN_MAIN_Routine+0x108>)
 800b342:	2203      	movs	r2, #3
 800b344:	701a      	strb	r2, [r3, #0]
}
 800b346:	bf00      	nop
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr
 800b350:	20000074 	.word	0x20000074
 800b354:	2000c26d 	.word	0x2000c26d
 800b358:	2000c26e 	.word	0x2000c26e

0800b35c <ModuleCAN_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCAN_MAIN_Process(void)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	af00      	add	r7, sp, #0
	switch( ModuleCAN_PROCESS_State )
 800b360:	4b7a      	ldr	r3, [pc, #488]	; (800b54c <ModuleCAN_MAIN_Process+0x1f0>)
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	2b09      	cmp	r3, #9
 800b366:	f200 80e6 	bhi.w	800b536 <ModuleCAN_MAIN_Process+0x1da>
 800b36a:	a201      	add	r2, pc, #4	; (adr r2, 800b370 <ModuleCAN_MAIN_Process+0x14>)
 800b36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b370:	0800b545 	.word	0x0800b545
 800b374:	0800b399 	.word	0x0800b399
 800b378:	0800b3cf 	.word	0x0800b3cf
 800b37c:	0800b405 	.word	0x0800b405
 800b380:	0800b43b 	.word	0x0800b43b
 800b384:	0800b471 	.word	0x0800b471
 800b388:	0800b4a7 	.word	0x0800b4a7
 800b38c:	0800b4dd 	.word	0x0800b4dd
 800b390:	0800b513 	.word	0x0800b513
 800b394:	0800b529 	.word	0x0800b529

	case ModuleCAN_PROCESS_State_IDLE  : break;

	case ModuleCAN_PROCESS_State_MSG01  :

		memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message03.payload[0] , 8);
 800b398:	2208      	movs	r2, #8
 800b39a:	496d      	ldr	r1, [pc, #436]	; (800b550 <ModuleCAN_MAIN_Process+0x1f4>)
 800b39c:	486d      	ldr	r0, [pc, #436]	; (800b554 <ModuleCAN_MAIN_Process+0x1f8>)
 800b39e:	f000 fb0b 	bl	800b9b8 <memcpy>
		protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message03_ID;
 800b3a2:	4b6d      	ldr	r3, [pc, #436]	; (800b558 <ModuleCAN_MAIN_Process+0x1fc>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4a6d      	ldr	r2, [pc, #436]	; (800b55c <ModuleCAN_MAIN_Process+0x200>)
 800b3a8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 800b3ac:	4b6b      	ldr	r3, [pc, #428]	; (800b55c <ModuleCAN_MAIN_Process+0x200>)
 800b3ae:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800b3b2:	2100      	movs	r1, #0
 800b3b4:	486a      	ldr	r0, [pc, #424]	; (800b560 <ModuleCAN_MAIN_Process+0x204>)
 800b3b6:	4798      	blx	r3

		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800b3b8:	4b64      	ldr	r3, [pc, #400]	; (800b54c <ModuleCAN_MAIN_Process+0x1f0>)
 800b3ba:	2209      	movs	r2, #9
 800b3bc:	701a      	strb	r2, [r3, #0]
		__GL.can.msgSelect.Flag.ID01 = FALSE;
 800b3be:	4a69      	ldr	r2, [pc, #420]	; (800b564 <ModuleCAN_MAIN_Process+0x208>)
 800b3c0:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 800b3c4:	f36f 0300 	bfc	r3, #0, #1
 800b3c8:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304

	break;
 800b3cc:	e0bb      	b.n	800b546 <ModuleCAN_MAIN_Process+0x1ea>

	case ModuleCAN_PROCESS_State_MSG02 :

		memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message04.payload[0] , 8);
 800b3ce:	2208      	movs	r2, #8
 800b3d0:	4965      	ldr	r1, [pc, #404]	; (800b568 <ModuleCAN_MAIN_Process+0x20c>)
 800b3d2:	4860      	ldr	r0, [pc, #384]	; (800b554 <ModuleCAN_MAIN_Process+0x1f8>)
 800b3d4:	f000 faf0 	bl	800b9b8 <memcpy>
		protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message04_ID;
 800b3d8:	4b5f      	ldr	r3, [pc, #380]	; (800b558 <ModuleCAN_MAIN_Process+0x1fc>)
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	4a5f      	ldr	r2, [pc, #380]	; (800b55c <ModuleCAN_MAIN_Process+0x200>)
 800b3de:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 800b3e2:	4b5e      	ldr	r3, [pc, #376]	; (800b55c <ModuleCAN_MAIN_Process+0x200>)
 800b3e4:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800b3e8:	2100      	movs	r1, #0
 800b3ea:	485d      	ldr	r0, [pc, #372]	; (800b560 <ModuleCAN_MAIN_Process+0x204>)
 800b3ec:	4798      	blx	r3

		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800b3ee:	4b57      	ldr	r3, [pc, #348]	; (800b54c <ModuleCAN_MAIN_Process+0x1f0>)
 800b3f0:	2209      	movs	r2, #9
 800b3f2:	701a      	strb	r2, [r3, #0]
		__GL.can.msgSelect.Flag.ID02 = FALSE;
 800b3f4:	4a5b      	ldr	r2, [pc, #364]	; (800b564 <ModuleCAN_MAIN_Process+0x208>)
 800b3f6:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 800b3fa:	f36f 0341 	bfc	r3, #1, #1
 800b3fe:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304

	break;
 800b402:	e0a0      	b.n	800b546 <ModuleCAN_MAIN_Process+0x1ea>

	case ModuleCAN_PROCESS_State_MSG03 :

		memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message05.payload[0] , 8);
 800b404:	2208      	movs	r2, #8
 800b406:	4959      	ldr	r1, [pc, #356]	; (800b56c <ModuleCAN_MAIN_Process+0x210>)
 800b408:	4852      	ldr	r0, [pc, #328]	; (800b554 <ModuleCAN_MAIN_Process+0x1f8>)
 800b40a:	f000 fad5 	bl	800b9b8 <memcpy>
		protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message05_ID;
 800b40e:	4b52      	ldr	r3, [pc, #328]	; (800b558 <ModuleCAN_MAIN_Process+0x1fc>)
 800b410:	69db      	ldr	r3, [r3, #28]
 800b412:	4a52      	ldr	r2, [pc, #328]	; (800b55c <ModuleCAN_MAIN_Process+0x200>)
 800b414:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 800b418:	4b50      	ldr	r3, [pc, #320]	; (800b55c <ModuleCAN_MAIN_Process+0x200>)
 800b41a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800b41e:	2100      	movs	r1, #0
 800b420:	484f      	ldr	r0, [pc, #316]	; (800b560 <ModuleCAN_MAIN_Process+0x204>)
 800b422:	4798      	blx	r3

		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800b424:	4b49      	ldr	r3, [pc, #292]	; (800b54c <ModuleCAN_MAIN_Process+0x1f0>)
 800b426:	2209      	movs	r2, #9
 800b428:	701a      	strb	r2, [r3, #0]
		__GL.can.msgSelect.Flag.ID03 = FALSE;
 800b42a:	4a4e      	ldr	r2, [pc, #312]	; (800b564 <ModuleCAN_MAIN_Process+0x208>)
 800b42c:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 800b430:	f36f 0382 	bfc	r3, #2, #1
 800b434:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304

	break;
 800b438:	e085      	b.n	800b546 <ModuleCAN_MAIN_Process+0x1ea>

	case ModuleCAN_PROCESS_State_MSG04 :

		memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message11.payload[0] , 8);
 800b43a:	2208      	movs	r2, #8
 800b43c:	494c      	ldr	r1, [pc, #304]	; (800b570 <ModuleCAN_MAIN_Process+0x214>)
 800b43e:	4845      	ldr	r0, [pc, #276]	; (800b554 <ModuleCAN_MAIN_Process+0x1f8>)
 800b440:	f000 faba 	bl	800b9b8 <memcpy>
		protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message11_ID;
 800b444:	4b44      	ldr	r3, [pc, #272]	; (800b558 <ModuleCAN_MAIN_Process+0x1fc>)
 800b446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b448:	4a44      	ldr	r2, [pc, #272]	; (800b55c <ModuleCAN_MAIN_Process+0x200>)
 800b44a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 800b44e:	4b43      	ldr	r3, [pc, #268]	; (800b55c <ModuleCAN_MAIN_Process+0x200>)
 800b450:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800b454:	2100      	movs	r1, #0
 800b456:	4842      	ldr	r0, [pc, #264]	; (800b560 <ModuleCAN_MAIN_Process+0x204>)
 800b458:	4798      	blx	r3

		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800b45a:	4b3c      	ldr	r3, [pc, #240]	; (800b54c <ModuleCAN_MAIN_Process+0x1f0>)
 800b45c:	2209      	movs	r2, #9
 800b45e:	701a      	strb	r2, [r3, #0]
		__GL.can.msgSelect.Flag.ID04 = FALSE;
 800b460:	4a40      	ldr	r2, [pc, #256]	; (800b564 <ModuleCAN_MAIN_Process+0x208>)
 800b462:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 800b466:	f36f 03c3 	bfc	r3, #3, #1
 800b46a:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304

	break;
 800b46e:	e06a      	b.n	800b546 <ModuleCAN_MAIN_Process+0x1ea>

	case ModuleCAN_PROCESS_State_MSG05 :

		memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message12.payload[0] , 8);
 800b470:	2208      	movs	r2, #8
 800b472:	4940      	ldr	r1, [pc, #256]	; (800b574 <ModuleCAN_MAIN_Process+0x218>)
 800b474:	4837      	ldr	r0, [pc, #220]	; (800b554 <ModuleCAN_MAIN_Process+0x1f8>)
 800b476:	f000 fa9f 	bl	800b9b8 <memcpy>
		protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message12_ID;
 800b47a:	4b37      	ldr	r3, [pc, #220]	; (800b558 <ModuleCAN_MAIN_Process+0x1fc>)
 800b47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b47e:	4a37      	ldr	r2, [pc, #220]	; (800b55c <ModuleCAN_MAIN_Process+0x200>)
 800b480:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 800b484:	4b35      	ldr	r3, [pc, #212]	; (800b55c <ModuleCAN_MAIN_Process+0x200>)
 800b486:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800b48a:	2100      	movs	r1, #0
 800b48c:	4834      	ldr	r0, [pc, #208]	; (800b560 <ModuleCAN_MAIN_Process+0x204>)
 800b48e:	4798      	blx	r3

		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800b490:	4b2e      	ldr	r3, [pc, #184]	; (800b54c <ModuleCAN_MAIN_Process+0x1f0>)
 800b492:	2209      	movs	r2, #9
 800b494:	701a      	strb	r2, [r3, #0]
		__GL.can.msgSelect.Flag.ID05 = FALSE;
 800b496:	4a33      	ldr	r2, [pc, #204]	; (800b564 <ModuleCAN_MAIN_Process+0x208>)
 800b498:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 800b49c:	f36f 1304 	bfc	r3, #4, #1
 800b4a0:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304

	break;
 800b4a4:	e04f      	b.n	800b546 <ModuleCAN_MAIN_Process+0x1ea>

	case ModuleCAN_PROCESS_State_MSG06 :

		memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message19.payload[0] , 8);
 800b4a6:	2208      	movs	r2, #8
 800b4a8:	4933      	ldr	r1, [pc, #204]	; (800b578 <ModuleCAN_MAIN_Process+0x21c>)
 800b4aa:	482a      	ldr	r0, [pc, #168]	; (800b554 <ModuleCAN_MAIN_Process+0x1f8>)
 800b4ac:	f000 fa84 	bl	800b9b8 <memcpy>
		protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message19_ID;
 800b4b0:	4b29      	ldr	r3, [pc, #164]	; (800b558 <ModuleCAN_MAIN_Process+0x1fc>)
 800b4b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4b4:	4a29      	ldr	r2, [pc, #164]	; (800b55c <ModuleCAN_MAIN_Process+0x200>)
 800b4b6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 800b4ba:	4b28      	ldr	r3, [pc, #160]	; (800b55c <ModuleCAN_MAIN_Process+0x200>)
 800b4bc:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800b4c0:	2100      	movs	r1, #0
 800b4c2:	4827      	ldr	r0, [pc, #156]	; (800b560 <ModuleCAN_MAIN_Process+0x204>)
 800b4c4:	4798      	blx	r3

		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800b4c6:	4b21      	ldr	r3, [pc, #132]	; (800b54c <ModuleCAN_MAIN_Process+0x1f0>)
 800b4c8:	2209      	movs	r2, #9
 800b4ca:	701a      	strb	r2, [r3, #0]
		__GL.can.msgSelect.Flag.ID06 = FALSE;
 800b4cc:	4a25      	ldr	r2, [pc, #148]	; (800b564 <ModuleCAN_MAIN_Process+0x208>)
 800b4ce:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 800b4d2:	f36f 1345 	bfc	r3, #5, #1
 800b4d6:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304

	break;
 800b4da:	e034      	b.n	800b546 <ModuleCAN_MAIN_Process+0x1ea>

	case ModuleCAN_PROCESS_State_MSG07 :

		memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message20.payload[0] , 8);
 800b4dc:	2208      	movs	r2, #8
 800b4de:	4927      	ldr	r1, [pc, #156]	; (800b57c <ModuleCAN_MAIN_Process+0x220>)
 800b4e0:	481c      	ldr	r0, [pc, #112]	; (800b554 <ModuleCAN_MAIN_Process+0x1f8>)
 800b4e2:	f000 fa69 	bl	800b9b8 <memcpy>
		protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message20_ID;
 800b4e6:	4b1c      	ldr	r3, [pc, #112]	; (800b558 <ModuleCAN_MAIN_Process+0x1fc>)
 800b4e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ea:	4a1c      	ldr	r2, [pc, #112]	; (800b55c <ModuleCAN_MAIN_Process+0x200>)
 800b4ec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 800b4f0:	4b1a      	ldr	r3, [pc, #104]	; (800b55c <ModuleCAN_MAIN_Process+0x200>)
 800b4f2:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800b4f6:	2100      	movs	r1, #0
 800b4f8:	4819      	ldr	r0, [pc, #100]	; (800b560 <ModuleCAN_MAIN_Process+0x204>)
 800b4fa:	4798      	blx	r3

		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800b4fc:	4b13      	ldr	r3, [pc, #76]	; (800b54c <ModuleCAN_MAIN_Process+0x1f0>)
 800b4fe:	2209      	movs	r2, #9
 800b500:	701a      	strb	r2, [r3, #0]
		__GL.can.msgSelect.Flag.ID07 = FALSE;
 800b502:	4a18      	ldr	r2, [pc, #96]	; (800b564 <ModuleCAN_MAIN_Process+0x208>)
 800b504:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 800b508:	f36f 1386 	bfc	r3, #6, #1
 800b50c:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304

	break;
 800b510:	e019      	b.n	800b546 <ModuleCAN_MAIN_Process+0x1ea>

	case ModuleCAN_PROCESS_State_MSG08 :

		/* NULL */
		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800b512:	4b0e      	ldr	r3, [pc, #56]	; (800b54c <ModuleCAN_MAIN_Process+0x1f0>)
 800b514:	2209      	movs	r2, #9
 800b516:	701a      	strb	r2, [r3, #0]
		__GL.can.msgSelect.Flag.ID08 = FALSE;
 800b518:	4a12      	ldr	r2, [pc, #72]	; (800b564 <ModuleCAN_MAIN_Process+0x208>)
 800b51a:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 800b51e:	f36f 13c7 	bfc	r3, #7, #1
 800b522:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304

	break;
 800b526:	e00e      	b.n	800b546 <ModuleCAN_MAIN_Process+0x1ea>

	case ModuleCAN_PROCESS_State_SUSPEND:

		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_IDLE;
 800b528:	4b08      	ldr	r3, [pc, #32]	; (800b54c <ModuleCAN_MAIN_Process+0x1f0>)
 800b52a:	2200      	movs	r2, #0
 800b52c:	701a      	strb	r2, [r3, #0]
		ModuleCAN_MAIN_State	= ModuleCAN_MAIN_State_SUSPEND;
 800b52e:	4b14      	ldr	r3, [pc, #80]	; (800b580 <ModuleCAN_MAIN_Process+0x224>)
 800b530:	2203      	movs	r2, #3
 800b532:	701a      	strb	r2, [r3, #0]
	break;
 800b534:	e007      	b.n	800b546 <ModuleCAN_MAIN_Process+0x1ea>


	default:
		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800b536:	4b05      	ldr	r3, [pc, #20]	; (800b54c <ModuleCAN_MAIN_Process+0x1f0>)
 800b538:	2209      	movs	r2, #9
 800b53a:	701a      	strb	r2, [r3, #0]
		ModuleCAN_MAIN_State	= ModuleCAN_MAIN_State_SUSPEND;
 800b53c:	4b10      	ldr	r3, [pc, #64]	; (800b580 <ModuleCAN_MAIN_Process+0x224>)
 800b53e:	2203      	movs	r2, #3
 800b540:	701a      	strb	r2, [r3, #0]
	break;
 800b542:	e000      	b.n	800b546 <ModuleCAN_MAIN_Process+0x1ea>
	case ModuleCAN_PROCESS_State_IDLE  : break;
 800b544:	bf00      	nop

	}

}
 800b546:	bf00      	nop
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	2000c26e 	.word	0x2000c26e
 800b550:	200013e4 	.word	0x200013e4
 800b554:	2000c054 	.word	0x2000c054
 800b558:	200013e0 	.word	0x200013e0
 800b55c:	2000bfb4 	.word	0x2000bfb4
 800b560:	2000c050 	.word	0x2000c050
 800b564:	20000074 	.word	0x20000074
 800b568:	200013f0 	.word	0x200013f0
 800b56c:	20001400 	.word	0x20001400
 800b570:	20001410 	.word	0x20001410
 800b574:	20001420 	.word	0x20001420
 800b578:	20001430 	.word	0x20001430
 800b57c:	20001440 	.word	0x20001440
 800b580:	2000c26d 	.word	0x2000c26d

0800b584 <ModuleCAN_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleCAN_MAIN(void)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	af00      	add	r7, sp, #0
  while(1)
  {
	if( ModuleCAN_MAIN_State == ModuleCAN_MAIN_State_SUSPEND )
 800b588:	4b11      	ldr	r3, [pc, #68]	; (800b5d0 <ModuleCAN_MAIN+0x4c>)
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	2b03      	cmp	r3, #3
 800b58e:	d103      	bne.n	800b598 <ModuleCAN_MAIN+0x14>
	{
		ModuleCAN_MAIN_State = ModuleCAN_MAIN_State_IDLE;
 800b590:	4b0f      	ldr	r3, [pc, #60]	; (800b5d0 <ModuleCAN_MAIN+0x4c>)
 800b592:	2200      	movs	r2, #0
 800b594:	701a      	strb	r2, [r3, #0]
		break;
 800b596:	e019      	b.n	800b5cc <ModuleCAN_MAIN+0x48>
	}

	switch(ModuleCAN_MAIN_State)
 800b598:	4b0d      	ldr	r3, [pc, #52]	; (800b5d0 <ModuleCAN_MAIN+0x4c>)
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	2b02      	cmp	r3, #2
 800b59e:	d00d      	beq.n	800b5bc <ModuleCAN_MAIN+0x38>
 800b5a0:	2b02      	cmp	r3, #2
 800b5a2:	dc0e      	bgt.n	800b5c2 <ModuleCAN_MAIN+0x3e>
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d002      	beq.n	800b5ae <ModuleCAN_MAIN+0x2a>
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d004      	beq.n	800b5b6 <ModuleCAN_MAIN+0x32>
 800b5ac:	e009      	b.n	800b5c2 <ModuleCAN_MAIN+0x3e>
#if defined(SPI2CAN_Protocol)
	    	/* Check Can FIFO's each 10 ms semph relases */
	    	EEM_PERIODIC(&protocol.obj.canPacket);
#endif

	    	ModuleCAN_MAIN_State = ModuleCAN_MAIN_State_ROUTINE;
 800b5ae:	4b08      	ldr	r3, [pc, #32]	; (800b5d0 <ModuleCAN_MAIN+0x4c>)
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	701a      	strb	r2, [r3, #0]
	    break;
 800b5b4:	e009      	b.n	800b5ca <ModuleCAN_MAIN+0x46>

	    case ModuleCAN_MAIN_State_ROUTINE:

	    	ModuleCAN_MAIN_Routine();
 800b5b6:	f7ff fe49 	bl	800b24c <ModuleCAN_MAIN_Routine>
	    break;
 800b5ba:	e006      	b.n	800b5ca <ModuleCAN_MAIN+0x46>

	    case ModuleCAN_MAIN_State_PROCESS:

	    	ModuleCAN_MAIN_Process();
 800b5bc:	f7ff fece 	bl	800b35c <ModuleCAN_MAIN_Process>

	    break;
 800b5c0:	e003      	b.n	800b5ca <ModuleCAN_MAIN+0x46>

	    default:
	    	ModuleCAN_MAIN_State = ModuleCAN_MAIN_State_SUSPEND;
 800b5c2:	4b03      	ldr	r3, [pc, #12]	; (800b5d0 <ModuleCAN_MAIN+0x4c>)
 800b5c4:	2203      	movs	r2, #3
 800b5c6:	701a      	strb	r2, [r3, #0]
	    break;
 800b5c8:	bf00      	nop
	if( ModuleCAN_MAIN_State == ModuleCAN_MAIN_State_SUSPEND )
 800b5ca:	e7dd      	b.n	800b588 <ModuleCAN_MAIN+0x4>
	}
  }
}
 800b5cc:	bf00      	nop
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	2000c26d 	.word	0x2000c26d

0800b5d4 <ModuleCONTROL_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleCONTROL_HWInit(void)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	af00      	add	r7, sp, #0

}
 800b5d8:	bf00      	nop
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr

0800b5e2 <ModuleCONTROL_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCONTROL_SWInit(void)
{
 800b5e2:	b480      	push	{r7}
 800b5e4:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait yazilimsal init fonksiyonları
}
 800b5e6:	bf00      	nop
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <ModuleCONTROL_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCONTROL_StartUP(void)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	af00      	add	r7, sp, #0
	ModuleCONTROL_HWInit();
 800b5f4:	f7ff ffee 	bl	800b5d4 <ModuleCONTROL_HWInit>
	ModuleCONTROL_SWInit();
 800b5f8:	f7ff fff3 	bl	800b5e2 <ModuleCONTROL_SWInit>
}
 800b5fc:	bf00      	nop
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <ModuleCONTROL_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleCONTROL_MAIN_Routine(void)
{
 800b600:	b480      	push	{r7}
 800b602:	af00      	add	r7, sp, #0

}
 800b604:	bf00      	nop
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr

0800b60e <ModuleCONTROL_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCONTROL_MAIN_Process(void)
{
 800b60e:	b480      	push	{r7}
 800b610:	af00      	add	r7, sp, #0

}
 800b612:	bf00      	nop
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <ModuleCONTROL_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleCONTROL_MAIN(void)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	af00      	add	r7, sp, #0

	switch(ModuleCONTROL_MAIN_State)
 800b620:	4b11      	ldr	r3, [pc, #68]	; (800b668 <ModuleCONTROL_MAIN+0x4c>)
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	2b03      	cmp	r3, #3
 800b626:	d818      	bhi.n	800b65a <ModuleCONTROL_MAIN+0x3e>
 800b628:	a201      	add	r2, pc, #4	; (adr r2, 800b630 <ModuleCONTROL_MAIN+0x14>)
 800b62a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b62e:	bf00      	nop
 800b630:	0800b641 	.word	0x0800b641
 800b634:	0800b647 	.word	0x0800b647
 800b638:	0800b64d 	.word	0x0800b64d
 800b63c:	0800b653 	.word	0x0800b653
	{
	    case ModuleCONTROL_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleCONTROL_MAIN_State = ModuleCONTROL_MAIN_State_ROUTINE;
 800b640:	4b09      	ldr	r3, [pc, #36]	; (800b668 <ModuleCONTROL_MAIN+0x4c>)
 800b642:	2201      	movs	r2, #1
 800b644:	701a      	strb	r2, [r3, #0]


	    case ModuleCONTROL_MAIN_State_ROUTINE:

	    	ModuleCONTROL_MAIN_Routine();
 800b646:	f7ff ffdb 	bl	800b600 <ModuleCONTROL_MAIN_Routine>
	    break;
 800b64a:	e00a      	b.n	800b662 <ModuleCONTROL_MAIN+0x46>

	    case ModuleCONTROL_MAIN_State_PROCESS:

	    	ModuleCONTROL_MAIN_Process();
 800b64c:	f7ff ffdf 	bl	800b60e <ModuleCONTROL_MAIN_Process>

	    break;
 800b650:	e007      	b.n	800b662 <ModuleCONTROL_MAIN+0x46>

	    case ModuleCONTROL_MAIN_State_SUSPEND:
	    	ModuleCONTROL_MAIN_State = ModuleCONTROL_MAIN_State_IDLE;
 800b652:	4b05      	ldr	r3, [pc, #20]	; (800b668 <ModuleCONTROL_MAIN+0x4c>)
 800b654:	2200      	movs	r2, #0
 800b656:	701a      	strb	r2, [r3, #0]
	    break;
 800b658:	e003      	b.n	800b662 <ModuleCONTROL_MAIN+0x46>

	    default:
	    	ModuleCONTROL_MAIN_State = ModuleCONTROL_MAIN_State_SUSPEND;
 800b65a:	4b03      	ldr	r3, [pc, #12]	; (800b668 <ModuleCONTROL_MAIN+0x4c>)
 800b65c:	2203      	movs	r2, #3
 800b65e:	701a      	strb	r2, [r3, #0]
	    break;
 800b660:	bf00      	nop

	}

}
 800b662:	bf00      	nop
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	2000c26f 	.word	0x2000c26f

0800b66c <ModuleFLASH_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleFLASH_HWInit(void)
{
 800b66c:	b480      	push	{r7}
 800b66e:	af00      	add	r7, sp, #0
	
}
 800b670:	bf00      	nop
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr

0800b67a <ModuleFLASH_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleFLASH_SWInit(void)
{
 800b67a:	b480      	push	{r7}
 800b67c:	af00      	add	r7, sp, #0
	
}
 800b67e:	bf00      	nop
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr

0800b688 <ModuleFLASH_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleFLASH_StartUP(void)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	af00      	add	r7, sp, #0
	ModuleFLASH_HWInit();
 800b68c:	f7ff ffee 	bl	800b66c <ModuleFLASH_HWInit>
	ModuleFLASH_SWInit();
 800b690:	f7ff fff3 	bl	800b67a <ModuleFLASH_SWInit>
}
 800b694:	bf00      	nop
 800b696:	bd80      	pop	{r7, pc}

0800b698 <ModuleFLASH_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleFLASH_MAIN_Routine(void)
{
 800b698:	b480      	push	{r7}
 800b69a:	af00      	add	r7, sp, #0

}
 800b69c:	bf00      	nop
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr

0800b6a6 <ModuleFLASH_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleFLASH_MAIN_Process(void)
{
 800b6a6:	b480      	push	{r7}
 800b6a8:	af00      	add	r7, sp, #0

}
 800b6aa:	bf00      	nop
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <ModuleFLASH_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleFLASH_MAIN(void)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	af00      	add	r7, sp, #0

	switch(ModuleFLASH_MAIN_State)
 800b6b8:	4b11      	ldr	r3, [pc, #68]	; (800b700 <ModuleFLASH_MAIN+0x4c>)
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	2b03      	cmp	r3, #3
 800b6be:	d819      	bhi.n	800b6f4 <ModuleFLASH_MAIN+0x40>
 800b6c0:	a201      	add	r2, pc, #4	; (adr r2, 800b6c8 <ModuleFLASH_MAIN+0x14>)
 800b6c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c6:	bf00      	nop
 800b6c8:	0800b6d9 	.word	0x0800b6d9
 800b6cc:	0800b6e1 	.word	0x0800b6e1
 800b6d0:	0800b6e7 	.word	0x0800b6e7
 800b6d4:	0800b6ed 	.word	0x0800b6ed
	{
	    case ModuleFLASH_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleFLASH_MAIN_State = ModuleFLASH_MAIN_State_ROUTINE;
 800b6d8:	4b09      	ldr	r3, [pc, #36]	; (800b700 <ModuleFLASH_MAIN+0x4c>)
 800b6da:	2201      	movs	r2, #1
 800b6dc:	701a      	strb	r2, [r3, #0]
	    break;
 800b6de:	e00d      	b.n	800b6fc <ModuleFLASH_MAIN+0x48>

	    case ModuleFLASH_MAIN_State_ROUTINE:

	    	ModuleFLASH_MAIN_Routine();
 800b6e0:	f7ff ffda 	bl	800b698 <ModuleFLASH_MAIN_Routine>
	    break;
 800b6e4:	e00a      	b.n	800b6fc <ModuleFLASH_MAIN+0x48>

	    case ModuleFLASH_MAIN_State_PROCESS:

	    	ModuleFLASH_MAIN_Process();
 800b6e6:	f7ff ffde 	bl	800b6a6 <ModuleFLASH_MAIN_Process>

	    break;
 800b6ea:	e007      	b.n	800b6fc <ModuleFLASH_MAIN+0x48>

	    case ModuleFLASH_MAIN_State_SUSPEND:
	    	ModuleFLASH_MAIN_State = ModuleFLASH_MAIN_State_IDLE;
 800b6ec:	4b04      	ldr	r3, [pc, #16]	; (800b700 <ModuleFLASH_MAIN+0x4c>)
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	701a      	strb	r2, [r3, #0]
	    break;
 800b6f2:	e003      	b.n	800b6fc <ModuleFLASH_MAIN+0x48>

	    default:
	    	ModuleFLASH_MAIN_State = ModuleFLASH_MAIN_State_SUSPEND;
 800b6f4:	4b02      	ldr	r3, [pc, #8]	; (800b700 <ModuleFLASH_MAIN+0x4c>)
 800b6f6:	2203      	movs	r2, #3
 800b6f8:	701a      	strb	r2, [r3, #0]
	    break;
 800b6fa:	bf00      	nop

	}

}
 800b6fc:	bf00      	nop
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	2000c270 	.word	0x2000c270

0800b704 <ModulePOWERSWITCH_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModulePOWERSWITCH_HWInit(void)
{
 800b704:	b480      	push	{r7}
 800b706:	af00      	add	r7, sp, #0
	
}
 800b708:	bf00      	nop
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr

0800b712 <ModulePOWERSWITCH_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModulePOWERSWITCH_SWInit(void)
{
 800b712:	b480      	push	{r7}
 800b714:	af00      	add	r7, sp, #0
	
}
 800b716:	bf00      	nop
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <ModulePOWERSWITCH_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModulePOWERSWITCH_StartUP(void)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	af00      	add	r7, sp, #0
	ModulePOWERSWITCH_HWInit();
 800b724:	f7ff ffee 	bl	800b704 <ModulePOWERSWITCH_HWInit>
	ModulePOWERSWITCH_SWInit();
 800b728:	f7ff fff3 	bl	800b712 <ModulePOWERSWITCH_SWInit>
}
 800b72c:	bf00      	nop
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <ModulePOWERSWITCH_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModulePOWERSWITCH_MAIN_Routine(void)
{
 800b730:	b480      	push	{r7}
 800b732:	af00      	add	r7, sp, #0

}
 800b734:	bf00      	nop
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr

0800b73e <ModulePOWERSWITCH_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModulePOWERSWITCH_MAIN_Process(void)
{
 800b73e:	b480      	push	{r7}
 800b740:	af00      	add	r7, sp, #0

}
 800b742:	bf00      	nop
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <ModulePOWERSWITCH_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModulePOWERSWITCH_MAIN(void)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	af00      	add	r7, sp, #0

	switch(ModulePOWERSWITCH_MAIN_State)
 800b750:	4b11      	ldr	r3, [pc, #68]	; (800b798 <ModulePOWERSWITCH_MAIN+0x4c>)
 800b752:	781b      	ldrb	r3, [r3, #0]
 800b754:	2b03      	cmp	r3, #3
 800b756:	d819      	bhi.n	800b78c <ModulePOWERSWITCH_MAIN+0x40>
 800b758:	a201      	add	r2, pc, #4	; (adr r2, 800b760 <ModulePOWERSWITCH_MAIN+0x14>)
 800b75a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b75e:	bf00      	nop
 800b760:	0800b771 	.word	0x0800b771
 800b764:	0800b779 	.word	0x0800b779
 800b768:	0800b77f 	.word	0x0800b77f
 800b76c:	0800b785 	.word	0x0800b785
	{
	    case ModulePOWERSWITCH_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModulePOWERSWITCH_MAIN_State = ModulePOWERSWITCH_MAIN_State_ROUTINE;
 800b770:	4b09      	ldr	r3, [pc, #36]	; (800b798 <ModulePOWERSWITCH_MAIN+0x4c>)
 800b772:	2201      	movs	r2, #1
 800b774:	701a      	strb	r2, [r3, #0]
	    break;
 800b776:	e00d      	b.n	800b794 <ModulePOWERSWITCH_MAIN+0x48>

	    case ModulePOWERSWITCH_MAIN_State_ROUTINE:

	    	ModulePOWERSWITCH_MAIN_Routine();
 800b778:	f7ff ffda 	bl	800b730 <ModulePOWERSWITCH_MAIN_Routine>
	    break;
 800b77c:	e00a      	b.n	800b794 <ModulePOWERSWITCH_MAIN+0x48>

	    case ModulePOWERSWITCH_MAIN_State_PROCESS:

	    	ModulePOWERSWITCH_MAIN_Process();
 800b77e:	f7ff ffde 	bl	800b73e <ModulePOWERSWITCH_MAIN_Process>

	    break;
 800b782:	e007      	b.n	800b794 <ModulePOWERSWITCH_MAIN+0x48>

	    case ModulePOWERSWITCH_MAIN_State_SUSPEND:
	    	ModulePOWERSWITCH_MAIN_State = ModulePOWERSWITCH_MAIN_State_IDLE;
 800b784:	4b04      	ldr	r3, [pc, #16]	; (800b798 <ModulePOWERSWITCH_MAIN+0x4c>)
 800b786:	2200      	movs	r2, #0
 800b788:	701a      	strb	r2, [r3, #0]
	    break;
 800b78a:	e003      	b.n	800b794 <ModulePOWERSWITCH_MAIN+0x48>

	    default:
	    	ModulePOWERSWITCH_MAIN_State = ModulePOWERSWITCH_MAIN_State_SUSPEND;
 800b78c:	4b02      	ldr	r3, [pc, #8]	; (800b798 <ModulePOWERSWITCH_MAIN+0x4c>)
 800b78e:	2203      	movs	r2, #3
 800b790:	701a      	strb	r2, [r3, #0]
	    break;
 800b792:	bf00      	nop

	}

}
 800b794:	bf00      	nop
 800b796:	bd80      	pop	{r7, pc}
 800b798:	2000c271 	.word	0x2000c271

0800b79c <ModuleRTC_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleRTC_HWInit(void)
{
 800b79c:	b480      	push	{r7}
 800b79e:	af00      	add	r7, sp, #0

}
 800b7a0:	bf00      	nop
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr

0800b7aa <ModuleRTC_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleRTC_SWInit(void)
{
 800b7aa:	b480      	push	{r7}
 800b7ac:	af00      	add	r7, sp, #0
	
}
 800b7ae:	bf00      	nop
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <ModuleRTC_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleRTC_StartUP(void)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	af00      	add	r7, sp, #0
	ModuleRTC_HWInit();
 800b7bc:	f7ff ffee 	bl	800b79c <ModuleRTC_HWInit>
	ModuleRTC_SWInit();
 800b7c0:	f7ff fff3 	bl	800b7aa <ModuleRTC_SWInit>
}
 800b7c4:	bf00      	nop
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <ModuleRTC_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleRTC_MAIN_Routine(void)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	af00      	add	r7, sp, #0

}
 800b7cc:	bf00      	nop
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr

0800b7d6 <ModuleRTC_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleRTC_MAIN_Process(void)
{
 800b7d6:	b480      	push	{r7}
 800b7d8:	af00      	add	r7, sp, #0

}
 800b7da:	bf00      	nop
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <ModuleRTC_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleRTC_MAIN(void)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	af00      	add	r7, sp, #0
	switch(ModuleRTC_MAIN_State)
 800b7e8:	4b11      	ldr	r3, [pc, #68]	; (800b830 <ModuleRTC_MAIN+0x4c>)
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	2b03      	cmp	r3, #3
 800b7ee:	d819      	bhi.n	800b824 <ModuleRTC_MAIN+0x40>
 800b7f0:	a201      	add	r2, pc, #4	; (adr r2, 800b7f8 <ModuleRTC_MAIN+0x14>)
 800b7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f6:	bf00      	nop
 800b7f8:	0800b809 	.word	0x0800b809
 800b7fc:	0800b811 	.word	0x0800b811
 800b800:	0800b817 	.word	0x0800b817
 800b804:	0800b81d 	.word	0x0800b81d
	{
	    case ModuleRTC_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleRTC_MAIN_State = ModuleRTC_MAIN_State_ROUTINE;
 800b808:	4b09      	ldr	r3, [pc, #36]	; (800b830 <ModuleRTC_MAIN+0x4c>)
 800b80a:	2201      	movs	r2, #1
 800b80c:	701a      	strb	r2, [r3, #0]
	    break;
 800b80e:	e00d      	b.n	800b82c <ModuleRTC_MAIN+0x48>

	    case ModuleRTC_MAIN_State_ROUTINE:

	    	ModuleRTC_MAIN_Routine();
 800b810:	f7ff ffda 	bl	800b7c8 <ModuleRTC_MAIN_Routine>
	    break;
 800b814:	e00a      	b.n	800b82c <ModuleRTC_MAIN+0x48>

	    case ModuleRTC_MAIN_State_PROCESS:

	    	ModuleRTC_MAIN_Process();
 800b816:	f7ff ffde 	bl	800b7d6 <ModuleRTC_MAIN_Process>

	    break;
 800b81a:	e007      	b.n	800b82c <ModuleRTC_MAIN+0x48>

	    case ModuleRTC_MAIN_State_SUSPEND:
	    	ModuleRTC_MAIN_State = ModuleRTC_MAIN_State_IDLE;
 800b81c:	4b04      	ldr	r3, [pc, #16]	; (800b830 <ModuleRTC_MAIN+0x4c>)
 800b81e:	2200      	movs	r2, #0
 800b820:	701a      	strb	r2, [r3, #0]
	    break;
 800b822:	e003      	b.n	800b82c <ModuleRTC_MAIN+0x48>

	    default:
	    	ModuleRTC_MAIN_State = ModuleRTC_MAIN_State_SUSPEND;
 800b824:	4b02      	ldr	r3, [pc, #8]	; (800b830 <ModuleRTC_MAIN+0x4c>)
 800b826:	2203      	movs	r2, #3
 800b828:	701a      	strb	r2, [r3, #0]
	    break;
 800b82a:	bf00      	nop

	}
}
 800b82c:	bf00      	nop
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	2000c272 	.word	0x2000c272

0800b834 <ModuleSDCARD_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleSDCARD_HWInit(void)
{
 800b834:	b480      	push	{r7}
 800b836:	af00      	add	r7, sp, #0

}
 800b838:	bf00      	nop
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr

0800b842 <ModuleSDCARD_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleSDCARD_SWInit(void)
{
 800b842:	b480      	push	{r7}
 800b844:	af00      	add	r7, sp, #0
	
}
 800b846:	bf00      	nop
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr

0800b850 <ModuleSDCARD_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleSDCARD_StartUP(void)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	af00      	add	r7, sp, #0
	ModuleSDCARD_HWInit();
 800b854:	f7ff ffee 	bl	800b834 <ModuleSDCARD_HWInit>
	ModuleSDCARD_SWInit();
 800b858:	f7ff fff3 	bl	800b842 <ModuleSDCARD_SWInit>
}
 800b85c:	bf00      	nop
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <ModuleSDCARD_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleSDCARD_MAIN_Routine(void)
{
 800b860:	b480      	push	{r7}
 800b862:	af00      	add	r7, sp, #0

}
 800b864:	bf00      	nop
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr

0800b86e <ModuleSDCARD_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleSDCARD_MAIN_Process(void)
{
 800b86e:	b480      	push	{r7}
 800b870:	af00      	add	r7, sp, #0

}
 800b872:	bf00      	nop
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr

0800b87c <ModuleSDCARD_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleSDCARD_MAIN(void)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	af00      	add	r7, sp, #0
	switch(ModuleSDCARD_MAIN_State)
 800b880:	4b11      	ldr	r3, [pc, #68]	; (800b8c8 <ModuleSDCARD_MAIN+0x4c>)
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	2b03      	cmp	r3, #3
 800b886:	d819      	bhi.n	800b8bc <ModuleSDCARD_MAIN+0x40>
 800b888:	a201      	add	r2, pc, #4	; (adr r2, 800b890 <ModuleSDCARD_MAIN+0x14>)
 800b88a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b88e:	bf00      	nop
 800b890:	0800b8a1 	.word	0x0800b8a1
 800b894:	0800b8a9 	.word	0x0800b8a9
 800b898:	0800b8af 	.word	0x0800b8af
 800b89c:	0800b8b5 	.word	0x0800b8b5
	{
	    case ModuleSDCARD_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleSDCARD_MAIN_State = ModuleSDCARD_MAIN_State_ROUTINE;
 800b8a0:	4b09      	ldr	r3, [pc, #36]	; (800b8c8 <ModuleSDCARD_MAIN+0x4c>)
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	701a      	strb	r2, [r3, #0]
	    break;
 800b8a6:	e00d      	b.n	800b8c4 <ModuleSDCARD_MAIN+0x48>

	    case ModuleSDCARD_MAIN_State_ROUTINE:

	    	ModuleSDCARD_MAIN_Routine();
 800b8a8:	f7ff ffda 	bl	800b860 <ModuleSDCARD_MAIN_Routine>
	    break;
 800b8ac:	e00a      	b.n	800b8c4 <ModuleSDCARD_MAIN+0x48>

	    case ModuleSDCARD_MAIN_State_PROCESS:

	    	ModuleSDCARD_MAIN_Process();
 800b8ae:	f7ff ffde 	bl	800b86e <ModuleSDCARD_MAIN_Process>

	    break;
 800b8b2:	e007      	b.n	800b8c4 <ModuleSDCARD_MAIN+0x48>

	    case ModuleSDCARD_MAIN_State_SUSPEND:
	    	ModuleSDCARD_MAIN_State = ModuleSDCARD_MAIN_State_IDLE;
 800b8b4:	4b04      	ldr	r3, [pc, #16]	; (800b8c8 <ModuleSDCARD_MAIN+0x4c>)
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	701a      	strb	r2, [r3, #0]
	    break;
 800b8ba:	e003      	b.n	800b8c4 <ModuleSDCARD_MAIN+0x48>

	    default:
	    	ModuleSDCARD_MAIN_State = ModuleSDCARD_MAIN_State_SUSPEND;
 800b8bc:	4b02      	ldr	r3, [pc, #8]	; (800b8c8 <ModuleSDCARD_MAIN+0x4c>)
 800b8be:	2203      	movs	r2, #3
 800b8c0:	701a      	strb	r2, [r3, #0]
	    break;
 800b8c2:	bf00      	nop

	}
}
 800b8c4:	bf00      	nop
 800b8c6:	bd80      	pop	{r7, pc}
 800b8c8:	2000c273 	.word	0x2000c273

0800b8cc <ModuleTELEMETRY_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleTELEMETRY_HWInit(void)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	af00      	add	r7, sp, #0
	
}
 800b8d0:	bf00      	nop
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr

0800b8da <ModuleTELEMETRY_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleTELEMETRY_SWInit(void)
{
 800b8da:	b480      	push	{r7}
 800b8dc:	af00      	add	r7, sp, #0
	
}
 800b8de:	bf00      	nop
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <ModuleTELEMETRY_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleTELEMETRY_StartUP(void)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	af00      	add	r7, sp, #0
	ModuleTELEMETRY_HWInit();
 800b8ec:	f7ff ffee 	bl	800b8cc <ModuleTELEMETRY_HWInit>
	ModuleTELEMETRY_SWInit();
 800b8f0:	f7ff fff3 	bl	800b8da <ModuleTELEMETRY_SWInit>
}
 800b8f4:	bf00      	nop
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <ModuleTELEMETRY_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleTELEMETRY_MAIN_Routine(void)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	af00      	add	r7, sp, #0

}
 800b8fc:	bf00      	nop
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr

0800b906 <ModuleTELEMETRY_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleTELEMETRY_MAIN_Process(void)
{
 800b906:	b480      	push	{r7}
 800b908:	af00      	add	r7, sp, #0

}
 800b90a:	bf00      	nop
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <ModuleTELEMETRY_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleTELEMETRY_MAIN(void)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	af00      	add	r7, sp, #0

	switch(ModuleTELEMETRY_MAIN_State)
 800b918:	4b11      	ldr	r3, [pc, #68]	; (800b960 <ModuleTELEMETRY_MAIN+0x4c>)
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	2b03      	cmp	r3, #3
 800b91e:	d819      	bhi.n	800b954 <ModuleTELEMETRY_MAIN+0x40>
 800b920:	a201      	add	r2, pc, #4	; (adr r2, 800b928 <ModuleTELEMETRY_MAIN+0x14>)
 800b922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b926:	bf00      	nop
 800b928:	0800b939 	.word	0x0800b939
 800b92c:	0800b941 	.word	0x0800b941
 800b930:	0800b947 	.word	0x0800b947
 800b934:	0800b94d 	.word	0x0800b94d
	{
	    case ModuleTELEMETRY_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleTELEMETRY_MAIN_State = ModuleTELEMETRY_MAIN_State_ROUTINE;
 800b938:	4b09      	ldr	r3, [pc, #36]	; (800b960 <ModuleTELEMETRY_MAIN+0x4c>)
 800b93a:	2201      	movs	r2, #1
 800b93c:	701a      	strb	r2, [r3, #0]
	    break;
 800b93e:	e00d      	b.n	800b95c <ModuleTELEMETRY_MAIN+0x48>

	    case ModuleTELEMETRY_MAIN_State_ROUTINE:

	    	ModuleTELEMETRY_MAIN_Routine();
 800b940:	f7ff ffda 	bl	800b8f8 <ModuleTELEMETRY_MAIN_Routine>
	    break;
 800b944:	e00a      	b.n	800b95c <ModuleTELEMETRY_MAIN+0x48>

	    case ModuleTELEMETRY_MAIN_State_PROCESS:

	    	ModuleTELEMETRY_MAIN_Process();
 800b946:	f7ff ffde 	bl	800b906 <ModuleTELEMETRY_MAIN_Process>

	    break;
 800b94a:	e007      	b.n	800b95c <ModuleTELEMETRY_MAIN+0x48>

	    case ModuleTELEMETRY_MAIN_State_SUSPEND:
	    	ModuleTELEMETRY_MAIN_State = ModuleTELEMETRY_MAIN_State_IDLE;
 800b94c:	4b04      	ldr	r3, [pc, #16]	; (800b960 <ModuleTELEMETRY_MAIN+0x4c>)
 800b94e:	2200      	movs	r2, #0
 800b950:	701a      	strb	r2, [r3, #0]
	    break;
 800b952:	e003      	b.n	800b95c <ModuleTELEMETRY_MAIN+0x48>

	    default:
	    	ModuleTELEMETRY_MAIN_State = ModuleTELEMETRY_MAIN_State_SUSPEND;
 800b954:	4b02      	ldr	r3, [pc, #8]	; (800b960 <ModuleTELEMETRY_MAIN+0x4c>)
 800b956:	2203      	movs	r2, #3
 800b958:	701a      	strb	r2, [r3, #0]
	    break;
 800b95a:	bf00      	nop

	}

}
 800b95c:	bf00      	nop
 800b95e:	bd80      	pop	{r7, pc}
 800b960:	2000c274 	.word	0x2000c274

0800b964 <__errno>:
 800b964:	4b01      	ldr	r3, [pc, #4]	; (800b96c <__errno+0x8>)
 800b966:	6818      	ldr	r0, [r3, #0]
 800b968:	4770      	bx	lr
 800b96a:	bf00      	nop
 800b96c:	20000010 	.word	0x20000010

0800b970 <__libc_init_array>:
 800b970:	b570      	push	{r4, r5, r6, lr}
 800b972:	4d0d      	ldr	r5, [pc, #52]	; (800b9a8 <__libc_init_array+0x38>)
 800b974:	4c0d      	ldr	r4, [pc, #52]	; (800b9ac <__libc_init_array+0x3c>)
 800b976:	1b64      	subs	r4, r4, r5
 800b978:	10a4      	asrs	r4, r4, #2
 800b97a:	2600      	movs	r6, #0
 800b97c:	42a6      	cmp	r6, r4
 800b97e:	d109      	bne.n	800b994 <__libc_init_array+0x24>
 800b980:	4d0b      	ldr	r5, [pc, #44]	; (800b9b0 <__libc_init_array+0x40>)
 800b982:	4c0c      	ldr	r4, [pc, #48]	; (800b9b4 <__libc_init_array+0x44>)
 800b984:	f000 fc8e 	bl	800c2a4 <_init>
 800b988:	1b64      	subs	r4, r4, r5
 800b98a:	10a4      	asrs	r4, r4, #2
 800b98c:	2600      	movs	r6, #0
 800b98e:	42a6      	cmp	r6, r4
 800b990:	d105      	bne.n	800b99e <__libc_init_array+0x2e>
 800b992:	bd70      	pop	{r4, r5, r6, pc}
 800b994:	f855 3b04 	ldr.w	r3, [r5], #4
 800b998:	4798      	blx	r3
 800b99a:	3601      	adds	r6, #1
 800b99c:	e7ee      	b.n	800b97c <__libc_init_array+0xc>
 800b99e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9a2:	4798      	blx	r3
 800b9a4:	3601      	adds	r6, #1
 800b9a6:	e7f2      	b.n	800b98e <__libc_init_array+0x1e>
 800b9a8:	0800c734 	.word	0x0800c734
 800b9ac:	0800c734 	.word	0x0800c734
 800b9b0:	0800c734 	.word	0x0800c734
 800b9b4:	0800c738 	.word	0x0800c738

0800b9b8 <memcpy>:
 800b9b8:	440a      	add	r2, r1
 800b9ba:	4291      	cmp	r1, r2
 800b9bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9c0:	d100      	bne.n	800b9c4 <memcpy+0xc>
 800b9c2:	4770      	bx	lr
 800b9c4:	b510      	push	{r4, lr}
 800b9c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9ce:	4291      	cmp	r1, r2
 800b9d0:	d1f9      	bne.n	800b9c6 <memcpy+0xe>
 800b9d2:	bd10      	pop	{r4, pc}

0800b9d4 <memset>:
 800b9d4:	4402      	add	r2, r0
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d100      	bne.n	800b9de <memset+0xa>
 800b9dc:	4770      	bx	lr
 800b9de:	f803 1b01 	strb.w	r1, [r3], #1
 800b9e2:	e7f9      	b.n	800b9d8 <memset+0x4>

0800b9e4 <siprintf>:
 800b9e4:	b40e      	push	{r1, r2, r3}
 800b9e6:	b500      	push	{lr}
 800b9e8:	b09c      	sub	sp, #112	; 0x70
 800b9ea:	ab1d      	add	r3, sp, #116	; 0x74
 800b9ec:	9002      	str	r0, [sp, #8]
 800b9ee:	9006      	str	r0, [sp, #24]
 800b9f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b9f4:	4809      	ldr	r0, [pc, #36]	; (800ba1c <siprintf+0x38>)
 800b9f6:	9107      	str	r1, [sp, #28]
 800b9f8:	9104      	str	r1, [sp, #16]
 800b9fa:	4909      	ldr	r1, [pc, #36]	; (800ba20 <siprintf+0x3c>)
 800b9fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba00:	9105      	str	r1, [sp, #20]
 800ba02:	6800      	ldr	r0, [r0, #0]
 800ba04:	9301      	str	r3, [sp, #4]
 800ba06:	a902      	add	r1, sp, #8
 800ba08:	f000 f868 	bl	800badc <_svfiprintf_r>
 800ba0c:	9b02      	ldr	r3, [sp, #8]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	701a      	strb	r2, [r3, #0]
 800ba12:	b01c      	add	sp, #112	; 0x70
 800ba14:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba18:	b003      	add	sp, #12
 800ba1a:	4770      	bx	lr
 800ba1c:	20000010 	.word	0x20000010
 800ba20:	ffff0208 	.word	0xffff0208

0800ba24 <__ssputs_r>:
 800ba24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba28:	688e      	ldr	r6, [r1, #8]
 800ba2a:	429e      	cmp	r6, r3
 800ba2c:	4682      	mov	sl, r0
 800ba2e:	460c      	mov	r4, r1
 800ba30:	4690      	mov	r8, r2
 800ba32:	461f      	mov	r7, r3
 800ba34:	d838      	bhi.n	800baa8 <__ssputs_r+0x84>
 800ba36:	898a      	ldrh	r2, [r1, #12]
 800ba38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba3c:	d032      	beq.n	800baa4 <__ssputs_r+0x80>
 800ba3e:	6825      	ldr	r5, [r4, #0]
 800ba40:	6909      	ldr	r1, [r1, #16]
 800ba42:	eba5 0901 	sub.w	r9, r5, r1
 800ba46:	6965      	ldr	r5, [r4, #20]
 800ba48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba50:	3301      	adds	r3, #1
 800ba52:	444b      	add	r3, r9
 800ba54:	106d      	asrs	r5, r5, #1
 800ba56:	429d      	cmp	r5, r3
 800ba58:	bf38      	it	cc
 800ba5a:	461d      	movcc	r5, r3
 800ba5c:	0553      	lsls	r3, r2, #21
 800ba5e:	d531      	bpl.n	800bac4 <__ssputs_r+0xa0>
 800ba60:	4629      	mov	r1, r5
 800ba62:	f000 fb55 	bl	800c110 <_malloc_r>
 800ba66:	4606      	mov	r6, r0
 800ba68:	b950      	cbnz	r0, 800ba80 <__ssputs_r+0x5c>
 800ba6a:	230c      	movs	r3, #12
 800ba6c:	f8ca 3000 	str.w	r3, [sl]
 800ba70:	89a3      	ldrh	r3, [r4, #12]
 800ba72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba76:	81a3      	strh	r3, [r4, #12]
 800ba78:	f04f 30ff 	mov.w	r0, #4294967295
 800ba7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba80:	6921      	ldr	r1, [r4, #16]
 800ba82:	464a      	mov	r2, r9
 800ba84:	f7ff ff98 	bl	800b9b8 <memcpy>
 800ba88:	89a3      	ldrh	r3, [r4, #12]
 800ba8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba92:	81a3      	strh	r3, [r4, #12]
 800ba94:	6126      	str	r6, [r4, #16]
 800ba96:	6165      	str	r5, [r4, #20]
 800ba98:	444e      	add	r6, r9
 800ba9a:	eba5 0509 	sub.w	r5, r5, r9
 800ba9e:	6026      	str	r6, [r4, #0]
 800baa0:	60a5      	str	r5, [r4, #8]
 800baa2:	463e      	mov	r6, r7
 800baa4:	42be      	cmp	r6, r7
 800baa6:	d900      	bls.n	800baaa <__ssputs_r+0x86>
 800baa8:	463e      	mov	r6, r7
 800baaa:	6820      	ldr	r0, [r4, #0]
 800baac:	4632      	mov	r2, r6
 800baae:	4641      	mov	r1, r8
 800bab0:	f000 faa8 	bl	800c004 <memmove>
 800bab4:	68a3      	ldr	r3, [r4, #8]
 800bab6:	1b9b      	subs	r3, r3, r6
 800bab8:	60a3      	str	r3, [r4, #8]
 800baba:	6823      	ldr	r3, [r4, #0]
 800babc:	4433      	add	r3, r6
 800babe:	6023      	str	r3, [r4, #0]
 800bac0:	2000      	movs	r0, #0
 800bac2:	e7db      	b.n	800ba7c <__ssputs_r+0x58>
 800bac4:	462a      	mov	r2, r5
 800bac6:	f000 fb97 	bl	800c1f8 <_realloc_r>
 800baca:	4606      	mov	r6, r0
 800bacc:	2800      	cmp	r0, #0
 800bace:	d1e1      	bne.n	800ba94 <__ssputs_r+0x70>
 800bad0:	6921      	ldr	r1, [r4, #16]
 800bad2:	4650      	mov	r0, sl
 800bad4:	f000 fab0 	bl	800c038 <_free_r>
 800bad8:	e7c7      	b.n	800ba6a <__ssputs_r+0x46>
	...

0800badc <_svfiprintf_r>:
 800badc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae0:	4698      	mov	r8, r3
 800bae2:	898b      	ldrh	r3, [r1, #12]
 800bae4:	061b      	lsls	r3, r3, #24
 800bae6:	b09d      	sub	sp, #116	; 0x74
 800bae8:	4607      	mov	r7, r0
 800baea:	460d      	mov	r5, r1
 800baec:	4614      	mov	r4, r2
 800baee:	d50e      	bpl.n	800bb0e <_svfiprintf_r+0x32>
 800baf0:	690b      	ldr	r3, [r1, #16]
 800baf2:	b963      	cbnz	r3, 800bb0e <_svfiprintf_r+0x32>
 800baf4:	2140      	movs	r1, #64	; 0x40
 800baf6:	f000 fb0b 	bl	800c110 <_malloc_r>
 800bafa:	6028      	str	r0, [r5, #0]
 800bafc:	6128      	str	r0, [r5, #16]
 800bafe:	b920      	cbnz	r0, 800bb0a <_svfiprintf_r+0x2e>
 800bb00:	230c      	movs	r3, #12
 800bb02:	603b      	str	r3, [r7, #0]
 800bb04:	f04f 30ff 	mov.w	r0, #4294967295
 800bb08:	e0d1      	b.n	800bcae <_svfiprintf_r+0x1d2>
 800bb0a:	2340      	movs	r3, #64	; 0x40
 800bb0c:	616b      	str	r3, [r5, #20]
 800bb0e:	2300      	movs	r3, #0
 800bb10:	9309      	str	r3, [sp, #36]	; 0x24
 800bb12:	2320      	movs	r3, #32
 800bb14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb18:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb1c:	2330      	movs	r3, #48	; 0x30
 800bb1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bcc8 <_svfiprintf_r+0x1ec>
 800bb22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb26:	f04f 0901 	mov.w	r9, #1
 800bb2a:	4623      	mov	r3, r4
 800bb2c:	469a      	mov	sl, r3
 800bb2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb32:	b10a      	cbz	r2, 800bb38 <_svfiprintf_r+0x5c>
 800bb34:	2a25      	cmp	r2, #37	; 0x25
 800bb36:	d1f9      	bne.n	800bb2c <_svfiprintf_r+0x50>
 800bb38:	ebba 0b04 	subs.w	fp, sl, r4
 800bb3c:	d00b      	beq.n	800bb56 <_svfiprintf_r+0x7a>
 800bb3e:	465b      	mov	r3, fp
 800bb40:	4622      	mov	r2, r4
 800bb42:	4629      	mov	r1, r5
 800bb44:	4638      	mov	r0, r7
 800bb46:	f7ff ff6d 	bl	800ba24 <__ssputs_r>
 800bb4a:	3001      	adds	r0, #1
 800bb4c:	f000 80aa 	beq.w	800bca4 <_svfiprintf_r+0x1c8>
 800bb50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb52:	445a      	add	r2, fp
 800bb54:	9209      	str	r2, [sp, #36]	; 0x24
 800bb56:	f89a 3000 	ldrb.w	r3, [sl]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	f000 80a2 	beq.w	800bca4 <_svfiprintf_r+0x1c8>
 800bb60:	2300      	movs	r3, #0
 800bb62:	f04f 32ff 	mov.w	r2, #4294967295
 800bb66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb6a:	f10a 0a01 	add.w	sl, sl, #1
 800bb6e:	9304      	str	r3, [sp, #16]
 800bb70:	9307      	str	r3, [sp, #28]
 800bb72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb76:	931a      	str	r3, [sp, #104]	; 0x68
 800bb78:	4654      	mov	r4, sl
 800bb7a:	2205      	movs	r2, #5
 800bb7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb80:	4851      	ldr	r0, [pc, #324]	; (800bcc8 <_svfiprintf_r+0x1ec>)
 800bb82:	f7f4 fb45 	bl	8000210 <memchr>
 800bb86:	9a04      	ldr	r2, [sp, #16]
 800bb88:	b9d8      	cbnz	r0, 800bbc2 <_svfiprintf_r+0xe6>
 800bb8a:	06d0      	lsls	r0, r2, #27
 800bb8c:	bf44      	itt	mi
 800bb8e:	2320      	movmi	r3, #32
 800bb90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb94:	0711      	lsls	r1, r2, #28
 800bb96:	bf44      	itt	mi
 800bb98:	232b      	movmi	r3, #43	; 0x2b
 800bb9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb9e:	f89a 3000 	ldrb.w	r3, [sl]
 800bba2:	2b2a      	cmp	r3, #42	; 0x2a
 800bba4:	d015      	beq.n	800bbd2 <_svfiprintf_r+0xf6>
 800bba6:	9a07      	ldr	r2, [sp, #28]
 800bba8:	4654      	mov	r4, sl
 800bbaa:	2000      	movs	r0, #0
 800bbac:	f04f 0c0a 	mov.w	ip, #10
 800bbb0:	4621      	mov	r1, r4
 800bbb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbb6:	3b30      	subs	r3, #48	; 0x30
 800bbb8:	2b09      	cmp	r3, #9
 800bbba:	d94e      	bls.n	800bc5a <_svfiprintf_r+0x17e>
 800bbbc:	b1b0      	cbz	r0, 800bbec <_svfiprintf_r+0x110>
 800bbbe:	9207      	str	r2, [sp, #28]
 800bbc0:	e014      	b.n	800bbec <_svfiprintf_r+0x110>
 800bbc2:	eba0 0308 	sub.w	r3, r0, r8
 800bbc6:	fa09 f303 	lsl.w	r3, r9, r3
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	9304      	str	r3, [sp, #16]
 800bbce:	46a2      	mov	sl, r4
 800bbd0:	e7d2      	b.n	800bb78 <_svfiprintf_r+0x9c>
 800bbd2:	9b03      	ldr	r3, [sp, #12]
 800bbd4:	1d19      	adds	r1, r3, #4
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	9103      	str	r1, [sp, #12]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	bfbb      	ittet	lt
 800bbde:	425b      	neglt	r3, r3
 800bbe0:	f042 0202 	orrlt.w	r2, r2, #2
 800bbe4:	9307      	strge	r3, [sp, #28]
 800bbe6:	9307      	strlt	r3, [sp, #28]
 800bbe8:	bfb8      	it	lt
 800bbea:	9204      	strlt	r2, [sp, #16]
 800bbec:	7823      	ldrb	r3, [r4, #0]
 800bbee:	2b2e      	cmp	r3, #46	; 0x2e
 800bbf0:	d10c      	bne.n	800bc0c <_svfiprintf_r+0x130>
 800bbf2:	7863      	ldrb	r3, [r4, #1]
 800bbf4:	2b2a      	cmp	r3, #42	; 0x2a
 800bbf6:	d135      	bne.n	800bc64 <_svfiprintf_r+0x188>
 800bbf8:	9b03      	ldr	r3, [sp, #12]
 800bbfa:	1d1a      	adds	r2, r3, #4
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	9203      	str	r2, [sp, #12]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	bfb8      	it	lt
 800bc04:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc08:	3402      	adds	r4, #2
 800bc0a:	9305      	str	r3, [sp, #20]
 800bc0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bcd8 <_svfiprintf_r+0x1fc>
 800bc10:	7821      	ldrb	r1, [r4, #0]
 800bc12:	2203      	movs	r2, #3
 800bc14:	4650      	mov	r0, sl
 800bc16:	f7f4 fafb 	bl	8000210 <memchr>
 800bc1a:	b140      	cbz	r0, 800bc2e <_svfiprintf_r+0x152>
 800bc1c:	2340      	movs	r3, #64	; 0x40
 800bc1e:	eba0 000a 	sub.w	r0, r0, sl
 800bc22:	fa03 f000 	lsl.w	r0, r3, r0
 800bc26:	9b04      	ldr	r3, [sp, #16]
 800bc28:	4303      	orrs	r3, r0
 800bc2a:	3401      	adds	r4, #1
 800bc2c:	9304      	str	r3, [sp, #16]
 800bc2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc32:	4826      	ldr	r0, [pc, #152]	; (800bccc <_svfiprintf_r+0x1f0>)
 800bc34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc38:	2206      	movs	r2, #6
 800bc3a:	f7f4 fae9 	bl	8000210 <memchr>
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	d038      	beq.n	800bcb4 <_svfiprintf_r+0x1d8>
 800bc42:	4b23      	ldr	r3, [pc, #140]	; (800bcd0 <_svfiprintf_r+0x1f4>)
 800bc44:	bb1b      	cbnz	r3, 800bc8e <_svfiprintf_r+0x1b2>
 800bc46:	9b03      	ldr	r3, [sp, #12]
 800bc48:	3307      	adds	r3, #7
 800bc4a:	f023 0307 	bic.w	r3, r3, #7
 800bc4e:	3308      	adds	r3, #8
 800bc50:	9303      	str	r3, [sp, #12]
 800bc52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc54:	4433      	add	r3, r6
 800bc56:	9309      	str	r3, [sp, #36]	; 0x24
 800bc58:	e767      	b.n	800bb2a <_svfiprintf_r+0x4e>
 800bc5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc5e:	460c      	mov	r4, r1
 800bc60:	2001      	movs	r0, #1
 800bc62:	e7a5      	b.n	800bbb0 <_svfiprintf_r+0xd4>
 800bc64:	2300      	movs	r3, #0
 800bc66:	3401      	adds	r4, #1
 800bc68:	9305      	str	r3, [sp, #20]
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	f04f 0c0a 	mov.w	ip, #10
 800bc70:	4620      	mov	r0, r4
 800bc72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc76:	3a30      	subs	r2, #48	; 0x30
 800bc78:	2a09      	cmp	r2, #9
 800bc7a:	d903      	bls.n	800bc84 <_svfiprintf_r+0x1a8>
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d0c5      	beq.n	800bc0c <_svfiprintf_r+0x130>
 800bc80:	9105      	str	r1, [sp, #20]
 800bc82:	e7c3      	b.n	800bc0c <_svfiprintf_r+0x130>
 800bc84:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc88:	4604      	mov	r4, r0
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	e7f0      	b.n	800bc70 <_svfiprintf_r+0x194>
 800bc8e:	ab03      	add	r3, sp, #12
 800bc90:	9300      	str	r3, [sp, #0]
 800bc92:	462a      	mov	r2, r5
 800bc94:	4b0f      	ldr	r3, [pc, #60]	; (800bcd4 <_svfiprintf_r+0x1f8>)
 800bc96:	a904      	add	r1, sp, #16
 800bc98:	4638      	mov	r0, r7
 800bc9a:	f3af 8000 	nop.w
 800bc9e:	1c42      	adds	r2, r0, #1
 800bca0:	4606      	mov	r6, r0
 800bca2:	d1d6      	bne.n	800bc52 <_svfiprintf_r+0x176>
 800bca4:	89ab      	ldrh	r3, [r5, #12]
 800bca6:	065b      	lsls	r3, r3, #25
 800bca8:	f53f af2c 	bmi.w	800bb04 <_svfiprintf_r+0x28>
 800bcac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcae:	b01d      	add	sp, #116	; 0x74
 800bcb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb4:	ab03      	add	r3, sp, #12
 800bcb6:	9300      	str	r3, [sp, #0]
 800bcb8:	462a      	mov	r2, r5
 800bcba:	4b06      	ldr	r3, [pc, #24]	; (800bcd4 <_svfiprintf_r+0x1f8>)
 800bcbc:	a904      	add	r1, sp, #16
 800bcbe:	4638      	mov	r0, r7
 800bcc0:	f000 f87a 	bl	800bdb8 <_printf_i>
 800bcc4:	e7eb      	b.n	800bc9e <_svfiprintf_r+0x1c2>
 800bcc6:	bf00      	nop
 800bcc8:	0800c6f8 	.word	0x0800c6f8
 800bccc:	0800c702 	.word	0x0800c702
 800bcd0:	00000000 	.word	0x00000000
 800bcd4:	0800ba25 	.word	0x0800ba25
 800bcd8:	0800c6fe 	.word	0x0800c6fe

0800bcdc <_printf_common>:
 800bcdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bce0:	4616      	mov	r6, r2
 800bce2:	4699      	mov	r9, r3
 800bce4:	688a      	ldr	r2, [r1, #8]
 800bce6:	690b      	ldr	r3, [r1, #16]
 800bce8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bcec:	4293      	cmp	r3, r2
 800bcee:	bfb8      	it	lt
 800bcf0:	4613      	movlt	r3, r2
 800bcf2:	6033      	str	r3, [r6, #0]
 800bcf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bcf8:	4607      	mov	r7, r0
 800bcfa:	460c      	mov	r4, r1
 800bcfc:	b10a      	cbz	r2, 800bd02 <_printf_common+0x26>
 800bcfe:	3301      	adds	r3, #1
 800bd00:	6033      	str	r3, [r6, #0]
 800bd02:	6823      	ldr	r3, [r4, #0]
 800bd04:	0699      	lsls	r1, r3, #26
 800bd06:	bf42      	ittt	mi
 800bd08:	6833      	ldrmi	r3, [r6, #0]
 800bd0a:	3302      	addmi	r3, #2
 800bd0c:	6033      	strmi	r3, [r6, #0]
 800bd0e:	6825      	ldr	r5, [r4, #0]
 800bd10:	f015 0506 	ands.w	r5, r5, #6
 800bd14:	d106      	bne.n	800bd24 <_printf_common+0x48>
 800bd16:	f104 0a19 	add.w	sl, r4, #25
 800bd1a:	68e3      	ldr	r3, [r4, #12]
 800bd1c:	6832      	ldr	r2, [r6, #0]
 800bd1e:	1a9b      	subs	r3, r3, r2
 800bd20:	42ab      	cmp	r3, r5
 800bd22:	dc26      	bgt.n	800bd72 <_printf_common+0x96>
 800bd24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd28:	1e13      	subs	r3, r2, #0
 800bd2a:	6822      	ldr	r2, [r4, #0]
 800bd2c:	bf18      	it	ne
 800bd2e:	2301      	movne	r3, #1
 800bd30:	0692      	lsls	r2, r2, #26
 800bd32:	d42b      	bmi.n	800bd8c <_printf_common+0xb0>
 800bd34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd38:	4649      	mov	r1, r9
 800bd3a:	4638      	mov	r0, r7
 800bd3c:	47c0      	blx	r8
 800bd3e:	3001      	adds	r0, #1
 800bd40:	d01e      	beq.n	800bd80 <_printf_common+0xa4>
 800bd42:	6823      	ldr	r3, [r4, #0]
 800bd44:	68e5      	ldr	r5, [r4, #12]
 800bd46:	6832      	ldr	r2, [r6, #0]
 800bd48:	f003 0306 	and.w	r3, r3, #6
 800bd4c:	2b04      	cmp	r3, #4
 800bd4e:	bf08      	it	eq
 800bd50:	1aad      	subeq	r5, r5, r2
 800bd52:	68a3      	ldr	r3, [r4, #8]
 800bd54:	6922      	ldr	r2, [r4, #16]
 800bd56:	bf0c      	ite	eq
 800bd58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd5c:	2500      	movne	r5, #0
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	bfc4      	itt	gt
 800bd62:	1a9b      	subgt	r3, r3, r2
 800bd64:	18ed      	addgt	r5, r5, r3
 800bd66:	2600      	movs	r6, #0
 800bd68:	341a      	adds	r4, #26
 800bd6a:	42b5      	cmp	r5, r6
 800bd6c:	d11a      	bne.n	800bda4 <_printf_common+0xc8>
 800bd6e:	2000      	movs	r0, #0
 800bd70:	e008      	b.n	800bd84 <_printf_common+0xa8>
 800bd72:	2301      	movs	r3, #1
 800bd74:	4652      	mov	r2, sl
 800bd76:	4649      	mov	r1, r9
 800bd78:	4638      	mov	r0, r7
 800bd7a:	47c0      	blx	r8
 800bd7c:	3001      	adds	r0, #1
 800bd7e:	d103      	bne.n	800bd88 <_printf_common+0xac>
 800bd80:	f04f 30ff 	mov.w	r0, #4294967295
 800bd84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd88:	3501      	adds	r5, #1
 800bd8a:	e7c6      	b.n	800bd1a <_printf_common+0x3e>
 800bd8c:	18e1      	adds	r1, r4, r3
 800bd8e:	1c5a      	adds	r2, r3, #1
 800bd90:	2030      	movs	r0, #48	; 0x30
 800bd92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd96:	4422      	add	r2, r4
 800bd98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bda0:	3302      	adds	r3, #2
 800bda2:	e7c7      	b.n	800bd34 <_printf_common+0x58>
 800bda4:	2301      	movs	r3, #1
 800bda6:	4622      	mov	r2, r4
 800bda8:	4649      	mov	r1, r9
 800bdaa:	4638      	mov	r0, r7
 800bdac:	47c0      	blx	r8
 800bdae:	3001      	adds	r0, #1
 800bdb0:	d0e6      	beq.n	800bd80 <_printf_common+0xa4>
 800bdb2:	3601      	adds	r6, #1
 800bdb4:	e7d9      	b.n	800bd6a <_printf_common+0x8e>
	...

0800bdb8 <_printf_i>:
 800bdb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bdbc:	7e0f      	ldrb	r7, [r1, #24]
 800bdbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bdc0:	2f78      	cmp	r7, #120	; 0x78
 800bdc2:	4691      	mov	r9, r2
 800bdc4:	4680      	mov	r8, r0
 800bdc6:	460c      	mov	r4, r1
 800bdc8:	469a      	mov	sl, r3
 800bdca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bdce:	d807      	bhi.n	800bde0 <_printf_i+0x28>
 800bdd0:	2f62      	cmp	r7, #98	; 0x62
 800bdd2:	d80a      	bhi.n	800bdea <_printf_i+0x32>
 800bdd4:	2f00      	cmp	r7, #0
 800bdd6:	f000 80d8 	beq.w	800bf8a <_printf_i+0x1d2>
 800bdda:	2f58      	cmp	r7, #88	; 0x58
 800bddc:	f000 80a3 	beq.w	800bf26 <_printf_i+0x16e>
 800bde0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bde4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bde8:	e03a      	b.n	800be60 <_printf_i+0xa8>
 800bdea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bdee:	2b15      	cmp	r3, #21
 800bdf0:	d8f6      	bhi.n	800bde0 <_printf_i+0x28>
 800bdf2:	a101      	add	r1, pc, #4	; (adr r1, 800bdf8 <_printf_i+0x40>)
 800bdf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bdf8:	0800be51 	.word	0x0800be51
 800bdfc:	0800be65 	.word	0x0800be65
 800be00:	0800bde1 	.word	0x0800bde1
 800be04:	0800bde1 	.word	0x0800bde1
 800be08:	0800bde1 	.word	0x0800bde1
 800be0c:	0800bde1 	.word	0x0800bde1
 800be10:	0800be65 	.word	0x0800be65
 800be14:	0800bde1 	.word	0x0800bde1
 800be18:	0800bde1 	.word	0x0800bde1
 800be1c:	0800bde1 	.word	0x0800bde1
 800be20:	0800bde1 	.word	0x0800bde1
 800be24:	0800bf71 	.word	0x0800bf71
 800be28:	0800be95 	.word	0x0800be95
 800be2c:	0800bf53 	.word	0x0800bf53
 800be30:	0800bde1 	.word	0x0800bde1
 800be34:	0800bde1 	.word	0x0800bde1
 800be38:	0800bf93 	.word	0x0800bf93
 800be3c:	0800bde1 	.word	0x0800bde1
 800be40:	0800be95 	.word	0x0800be95
 800be44:	0800bde1 	.word	0x0800bde1
 800be48:	0800bde1 	.word	0x0800bde1
 800be4c:	0800bf5b 	.word	0x0800bf5b
 800be50:	682b      	ldr	r3, [r5, #0]
 800be52:	1d1a      	adds	r2, r3, #4
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	602a      	str	r2, [r5, #0]
 800be58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be60:	2301      	movs	r3, #1
 800be62:	e0a3      	b.n	800bfac <_printf_i+0x1f4>
 800be64:	6820      	ldr	r0, [r4, #0]
 800be66:	6829      	ldr	r1, [r5, #0]
 800be68:	0606      	lsls	r6, r0, #24
 800be6a:	f101 0304 	add.w	r3, r1, #4
 800be6e:	d50a      	bpl.n	800be86 <_printf_i+0xce>
 800be70:	680e      	ldr	r6, [r1, #0]
 800be72:	602b      	str	r3, [r5, #0]
 800be74:	2e00      	cmp	r6, #0
 800be76:	da03      	bge.n	800be80 <_printf_i+0xc8>
 800be78:	232d      	movs	r3, #45	; 0x2d
 800be7a:	4276      	negs	r6, r6
 800be7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be80:	485e      	ldr	r0, [pc, #376]	; (800bffc <_printf_i+0x244>)
 800be82:	230a      	movs	r3, #10
 800be84:	e019      	b.n	800beba <_printf_i+0x102>
 800be86:	680e      	ldr	r6, [r1, #0]
 800be88:	602b      	str	r3, [r5, #0]
 800be8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800be8e:	bf18      	it	ne
 800be90:	b236      	sxthne	r6, r6
 800be92:	e7ef      	b.n	800be74 <_printf_i+0xbc>
 800be94:	682b      	ldr	r3, [r5, #0]
 800be96:	6820      	ldr	r0, [r4, #0]
 800be98:	1d19      	adds	r1, r3, #4
 800be9a:	6029      	str	r1, [r5, #0]
 800be9c:	0601      	lsls	r1, r0, #24
 800be9e:	d501      	bpl.n	800bea4 <_printf_i+0xec>
 800bea0:	681e      	ldr	r6, [r3, #0]
 800bea2:	e002      	b.n	800beaa <_printf_i+0xf2>
 800bea4:	0646      	lsls	r6, r0, #25
 800bea6:	d5fb      	bpl.n	800bea0 <_printf_i+0xe8>
 800bea8:	881e      	ldrh	r6, [r3, #0]
 800beaa:	4854      	ldr	r0, [pc, #336]	; (800bffc <_printf_i+0x244>)
 800beac:	2f6f      	cmp	r7, #111	; 0x6f
 800beae:	bf0c      	ite	eq
 800beb0:	2308      	moveq	r3, #8
 800beb2:	230a      	movne	r3, #10
 800beb4:	2100      	movs	r1, #0
 800beb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800beba:	6865      	ldr	r5, [r4, #4]
 800bebc:	60a5      	str	r5, [r4, #8]
 800bebe:	2d00      	cmp	r5, #0
 800bec0:	bfa2      	ittt	ge
 800bec2:	6821      	ldrge	r1, [r4, #0]
 800bec4:	f021 0104 	bicge.w	r1, r1, #4
 800bec8:	6021      	strge	r1, [r4, #0]
 800beca:	b90e      	cbnz	r6, 800bed0 <_printf_i+0x118>
 800becc:	2d00      	cmp	r5, #0
 800bece:	d04d      	beq.n	800bf6c <_printf_i+0x1b4>
 800bed0:	4615      	mov	r5, r2
 800bed2:	fbb6 f1f3 	udiv	r1, r6, r3
 800bed6:	fb03 6711 	mls	r7, r3, r1, r6
 800beda:	5dc7      	ldrb	r7, [r0, r7]
 800bedc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bee0:	4637      	mov	r7, r6
 800bee2:	42bb      	cmp	r3, r7
 800bee4:	460e      	mov	r6, r1
 800bee6:	d9f4      	bls.n	800bed2 <_printf_i+0x11a>
 800bee8:	2b08      	cmp	r3, #8
 800beea:	d10b      	bne.n	800bf04 <_printf_i+0x14c>
 800beec:	6823      	ldr	r3, [r4, #0]
 800beee:	07de      	lsls	r6, r3, #31
 800bef0:	d508      	bpl.n	800bf04 <_printf_i+0x14c>
 800bef2:	6923      	ldr	r3, [r4, #16]
 800bef4:	6861      	ldr	r1, [r4, #4]
 800bef6:	4299      	cmp	r1, r3
 800bef8:	bfde      	ittt	le
 800befa:	2330      	movle	r3, #48	; 0x30
 800befc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf00:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bf04:	1b52      	subs	r2, r2, r5
 800bf06:	6122      	str	r2, [r4, #16]
 800bf08:	f8cd a000 	str.w	sl, [sp]
 800bf0c:	464b      	mov	r3, r9
 800bf0e:	aa03      	add	r2, sp, #12
 800bf10:	4621      	mov	r1, r4
 800bf12:	4640      	mov	r0, r8
 800bf14:	f7ff fee2 	bl	800bcdc <_printf_common>
 800bf18:	3001      	adds	r0, #1
 800bf1a:	d14c      	bne.n	800bfb6 <_printf_i+0x1fe>
 800bf1c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf20:	b004      	add	sp, #16
 800bf22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf26:	4835      	ldr	r0, [pc, #212]	; (800bffc <_printf_i+0x244>)
 800bf28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bf2c:	6829      	ldr	r1, [r5, #0]
 800bf2e:	6823      	ldr	r3, [r4, #0]
 800bf30:	f851 6b04 	ldr.w	r6, [r1], #4
 800bf34:	6029      	str	r1, [r5, #0]
 800bf36:	061d      	lsls	r5, r3, #24
 800bf38:	d514      	bpl.n	800bf64 <_printf_i+0x1ac>
 800bf3a:	07df      	lsls	r7, r3, #31
 800bf3c:	bf44      	itt	mi
 800bf3e:	f043 0320 	orrmi.w	r3, r3, #32
 800bf42:	6023      	strmi	r3, [r4, #0]
 800bf44:	b91e      	cbnz	r6, 800bf4e <_printf_i+0x196>
 800bf46:	6823      	ldr	r3, [r4, #0]
 800bf48:	f023 0320 	bic.w	r3, r3, #32
 800bf4c:	6023      	str	r3, [r4, #0]
 800bf4e:	2310      	movs	r3, #16
 800bf50:	e7b0      	b.n	800beb4 <_printf_i+0xfc>
 800bf52:	6823      	ldr	r3, [r4, #0]
 800bf54:	f043 0320 	orr.w	r3, r3, #32
 800bf58:	6023      	str	r3, [r4, #0]
 800bf5a:	2378      	movs	r3, #120	; 0x78
 800bf5c:	4828      	ldr	r0, [pc, #160]	; (800c000 <_printf_i+0x248>)
 800bf5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bf62:	e7e3      	b.n	800bf2c <_printf_i+0x174>
 800bf64:	0659      	lsls	r1, r3, #25
 800bf66:	bf48      	it	mi
 800bf68:	b2b6      	uxthmi	r6, r6
 800bf6a:	e7e6      	b.n	800bf3a <_printf_i+0x182>
 800bf6c:	4615      	mov	r5, r2
 800bf6e:	e7bb      	b.n	800bee8 <_printf_i+0x130>
 800bf70:	682b      	ldr	r3, [r5, #0]
 800bf72:	6826      	ldr	r6, [r4, #0]
 800bf74:	6961      	ldr	r1, [r4, #20]
 800bf76:	1d18      	adds	r0, r3, #4
 800bf78:	6028      	str	r0, [r5, #0]
 800bf7a:	0635      	lsls	r5, r6, #24
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	d501      	bpl.n	800bf84 <_printf_i+0x1cc>
 800bf80:	6019      	str	r1, [r3, #0]
 800bf82:	e002      	b.n	800bf8a <_printf_i+0x1d2>
 800bf84:	0670      	lsls	r0, r6, #25
 800bf86:	d5fb      	bpl.n	800bf80 <_printf_i+0x1c8>
 800bf88:	8019      	strh	r1, [r3, #0]
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	6123      	str	r3, [r4, #16]
 800bf8e:	4615      	mov	r5, r2
 800bf90:	e7ba      	b.n	800bf08 <_printf_i+0x150>
 800bf92:	682b      	ldr	r3, [r5, #0]
 800bf94:	1d1a      	adds	r2, r3, #4
 800bf96:	602a      	str	r2, [r5, #0]
 800bf98:	681d      	ldr	r5, [r3, #0]
 800bf9a:	6862      	ldr	r2, [r4, #4]
 800bf9c:	2100      	movs	r1, #0
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	f7f4 f936 	bl	8000210 <memchr>
 800bfa4:	b108      	cbz	r0, 800bfaa <_printf_i+0x1f2>
 800bfa6:	1b40      	subs	r0, r0, r5
 800bfa8:	6060      	str	r0, [r4, #4]
 800bfaa:	6863      	ldr	r3, [r4, #4]
 800bfac:	6123      	str	r3, [r4, #16]
 800bfae:	2300      	movs	r3, #0
 800bfb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfb4:	e7a8      	b.n	800bf08 <_printf_i+0x150>
 800bfb6:	6923      	ldr	r3, [r4, #16]
 800bfb8:	462a      	mov	r2, r5
 800bfba:	4649      	mov	r1, r9
 800bfbc:	4640      	mov	r0, r8
 800bfbe:	47d0      	blx	sl
 800bfc0:	3001      	adds	r0, #1
 800bfc2:	d0ab      	beq.n	800bf1c <_printf_i+0x164>
 800bfc4:	6823      	ldr	r3, [r4, #0]
 800bfc6:	079b      	lsls	r3, r3, #30
 800bfc8:	d413      	bmi.n	800bff2 <_printf_i+0x23a>
 800bfca:	68e0      	ldr	r0, [r4, #12]
 800bfcc:	9b03      	ldr	r3, [sp, #12]
 800bfce:	4298      	cmp	r0, r3
 800bfd0:	bfb8      	it	lt
 800bfd2:	4618      	movlt	r0, r3
 800bfd4:	e7a4      	b.n	800bf20 <_printf_i+0x168>
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	4632      	mov	r2, r6
 800bfda:	4649      	mov	r1, r9
 800bfdc:	4640      	mov	r0, r8
 800bfde:	47d0      	blx	sl
 800bfe0:	3001      	adds	r0, #1
 800bfe2:	d09b      	beq.n	800bf1c <_printf_i+0x164>
 800bfe4:	3501      	adds	r5, #1
 800bfe6:	68e3      	ldr	r3, [r4, #12]
 800bfe8:	9903      	ldr	r1, [sp, #12]
 800bfea:	1a5b      	subs	r3, r3, r1
 800bfec:	42ab      	cmp	r3, r5
 800bfee:	dcf2      	bgt.n	800bfd6 <_printf_i+0x21e>
 800bff0:	e7eb      	b.n	800bfca <_printf_i+0x212>
 800bff2:	2500      	movs	r5, #0
 800bff4:	f104 0619 	add.w	r6, r4, #25
 800bff8:	e7f5      	b.n	800bfe6 <_printf_i+0x22e>
 800bffa:	bf00      	nop
 800bffc:	0800c709 	.word	0x0800c709
 800c000:	0800c71a 	.word	0x0800c71a

0800c004 <memmove>:
 800c004:	4288      	cmp	r0, r1
 800c006:	b510      	push	{r4, lr}
 800c008:	eb01 0402 	add.w	r4, r1, r2
 800c00c:	d902      	bls.n	800c014 <memmove+0x10>
 800c00e:	4284      	cmp	r4, r0
 800c010:	4623      	mov	r3, r4
 800c012:	d807      	bhi.n	800c024 <memmove+0x20>
 800c014:	1e43      	subs	r3, r0, #1
 800c016:	42a1      	cmp	r1, r4
 800c018:	d008      	beq.n	800c02c <memmove+0x28>
 800c01a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c01e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c022:	e7f8      	b.n	800c016 <memmove+0x12>
 800c024:	4402      	add	r2, r0
 800c026:	4601      	mov	r1, r0
 800c028:	428a      	cmp	r2, r1
 800c02a:	d100      	bne.n	800c02e <memmove+0x2a>
 800c02c:	bd10      	pop	{r4, pc}
 800c02e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c032:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c036:	e7f7      	b.n	800c028 <memmove+0x24>

0800c038 <_free_r>:
 800c038:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c03a:	2900      	cmp	r1, #0
 800c03c:	d044      	beq.n	800c0c8 <_free_r+0x90>
 800c03e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c042:	9001      	str	r0, [sp, #4]
 800c044:	2b00      	cmp	r3, #0
 800c046:	f1a1 0404 	sub.w	r4, r1, #4
 800c04a:	bfb8      	it	lt
 800c04c:	18e4      	addlt	r4, r4, r3
 800c04e:	f000 f913 	bl	800c278 <__malloc_lock>
 800c052:	4a1e      	ldr	r2, [pc, #120]	; (800c0cc <_free_r+0x94>)
 800c054:	9801      	ldr	r0, [sp, #4]
 800c056:	6813      	ldr	r3, [r2, #0]
 800c058:	b933      	cbnz	r3, 800c068 <_free_r+0x30>
 800c05a:	6063      	str	r3, [r4, #4]
 800c05c:	6014      	str	r4, [r2, #0]
 800c05e:	b003      	add	sp, #12
 800c060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c064:	f000 b90e 	b.w	800c284 <__malloc_unlock>
 800c068:	42a3      	cmp	r3, r4
 800c06a:	d908      	bls.n	800c07e <_free_r+0x46>
 800c06c:	6825      	ldr	r5, [r4, #0]
 800c06e:	1961      	adds	r1, r4, r5
 800c070:	428b      	cmp	r3, r1
 800c072:	bf01      	itttt	eq
 800c074:	6819      	ldreq	r1, [r3, #0]
 800c076:	685b      	ldreq	r3, [r3, #4]
 800c078:	1949      	addeq	r1, r1, r5
 800c07a:	6021      	streq	r1, [r4, #0]
 800c07c:	e7ed      	b.n	800c05a <_free_r+0x22>
 800c07e:	461a      	mov	r2, r3
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	b10b      	cbz	r3, 800c088 <_free_r+0x50>
 800c084:	42a3      	cmp	r3, r4
 800c086:	d9fa      	bls.n	800c07e <_free_r+0x46>
 800c088:	6811      	ldr	r1, [r2, #0]
 800c08a:	1855      	adds	r5, r2, r1
 800c08c:	42a5      	cmp	r5, r4
 800c08e:	d10b      	bne.n	800c0a8 <_free_r+0x70>
 800c090:	6824      	ldr	r4, [r4, #0]
 800c092:	4421      	add	r1, r4
 800c094:	1854      	adds	r4, r2, r1
 800c096:	42a3      	cmp	r3, r4
 800c098:	6011      	str	r1, [r2, #0]
 800c09a:	d1e0      	bne.n	800c05e <_free_r+0x26>
 800c09c:	681c      	ldr	r4, [r3, #0]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	6053      	str	r3, [r2, #4]
 800c0a2:	4421      	add	r1, r4
 800c0a4:	6011      	str	r1, [r2, #0]
 800c0a6:	e7da      	b.n	800c05e <_free_r+0x26>
 800c0a8:	d902      	bls.n	800c0b0 <_free_r+0x78>
 800c0aa:	230c      	movs	r3, #12
 800c0ac:	6003      	str	r3, [r0, #0]
 800c0ae:	e7d6      	b.n	800c05e <_free_r+0x26>
 800c0b0:	6825      	ldr	r5, [r4, #0]
 800c0b2:	1961      	adds	r1, r4, r5
 800c0b4:	428b      	cmp	r3, r1
 800c0b6:	bf04      	itt	eq
 800c0b8:	6819      	ldreq	r1, [r3, #0]
 800c0ba:	685b      	ldreq	r3, [r3, #4]
 800c0bc:	6063      	str	r3, [r4, #4]
 800c0be:	bf04      	itt	eq
 800c0c0:	1949      	addeq	r1, r1, r5
 800c0c2:	6021      	streq	r1, [r4, #0]
 800c0c4:	6054      	str	r4, [r2, #4]
 800c0c6:	e7ca      	b.n	800c05e <_free_r+0x26>
 800c0c8:	b003      	add	sp, #12
 800c0ca:	bd30      	pop	{r4, r5, pc}
 800c0cc:	2000c278 	.word	0x2000c278

0800c0d0 <sbrk_aligned>:
 800c0d0:	b570      	push	{r4, r5, r6, lr}
 800c0d2:	4e0e      	ldr	r6, [pc, #56]	; (800c10c <sbrk_aligned+0x3c>)
 800c0d4:	460c      	mov	r4, r1
 800c0d6:	6831      	ldr	r1, [r6, #0]
 800c0d8:	4605      	mov	r5, r0
 800c0da:	b911      	cbnz	r1, 800c0e2 <sbrk_aligned+0x12>
 800c0dc:	f000 f8bc 	bl	800c258 <_sbrk_r>
 800c0e0:	6030      	str	r0, [r6, #0]
 800c0e2:	4621      	mov	r1, r4
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	f000 f8b7 	bl	800c258 <_sbrk_r>
 800c0ea:	1c43      	adds	r3, r0, #1
 800c0ec:	d00a      	beq.n	800c104 <sbrk_aligned+0x34>
 800c0ee:	1cc4      	adds	r4, r0, #3
 800c0f0:	f024 0403 	bic.w	r4, r4, #3
 800c0f4:	42a0      	cmp	r0, r4
 800c0f6:	d007      	beq.n	800c108 <sbrk_aligned+0x38>
 800c0f8:	1a21      	subs	r1, r4, r0
 800c0fa:	4628      	mov	r0, r5
 800c0fc:	f000 f8ac 	bl	800c258 <_sbrk_r>
 800c100:	3001      	adds	r0, #1
 800c102:	d101      	bne.n	800c108 <sbrk_aligned+0x38>
 800c104:	f04f 34ff 	mov.w	r4, #4294967295
 800c108:	4620      	mov	r0, r4
 800c10a:	bd70      	pop	{r4, r5, r6, pc}
 800c10c:	2000c27c 	.word	0x2000c27c

0800c110 <_malloc_r>:
 800c110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c114:	1ccd      	adds	r5, r1, #3
 800c116:	f025 0503 	bic.w	r5, r5, #3
 800c11a:	3508      	adds	r5, #8
 800c11c:	2d0c      	cmp	r5, #12
 800c11e:	bf38      	it	cc
 800c120:	250c      	movcc	r5, #12
 800c122:	2d00      	cmp	r5, #0
 800c124:	4607      	mov	r7, r0
 800c126:	db01      	blt.n	800c12c <_malloc_r+0x1c>
 800c128:	42a9      	cmp	r1, r5
 800c12a:	d905      	bls.n	800c138 <_malloc_r+0x28>
 800c12c:	230c      	movs	r3, #12
 800c12e:	603b      	str	r3, [r7, #0]
 800c130:	2600      	movs	r6, #0
 800c132:	4630      	mov	r0, r6
 800c134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c138:	4e2e      	ldr	r6, [pc, #184]	; (800c1f4 <_malloc_r+0xe4>)
 800c13a:	f000 f89d 	bl	800c278 <__malloc_lock>
 800c13e:	6833      	ldr	r3, [r6, #0]
 800c140:	461c      	mov	r4, r3
 800c142:	bb34      	cbnz	r4, 800c192 <_malloc_r+0x82>
 800c144:	4629      	mov	r1, r5
 800c146:	4638      	mov	r0, r7
 800c148:	f7ff ffc2 	bl	800c0d0 <sbrk_aligned>
 800c14c:	1c43      	adds	r3, r0, #1
 800c14e:	4604      	mov	r4, r0
 800c150:	d14d      	bne.n	800c1ee <_malloc_r+0xde>
 800c152:	6834      	ldr	r4, [r6, #0]
 800c154:	4626      	mov	r6, r4
 800c156:	2e00      	cmp	r6, #0
 800c158:	d140      	bne.n	800c1dc <_malloc_r+0xcc>
 800c15a:	6823      	ldr	r3, [r4, #0]
 800c15c:	4631      	mov	r1, r6
 800c15e:	4638      	mov	r0, r7
 800c160:	eb04 0803 	add.w	r8, r4, r3
 800c164:	f000 f878 	bl	800c258 <_sbrk_r>
 800c168:	4580      	cmp	r8, r0
 800c16a:	d13a      	bne.n	800c1e2 <_malloc_r+0xd2>
 800c16c:	6821      	ldr	r1, [r4, #0]
 800c16e:	3503      	adds	r5, #3
 800c170:	1a6d      	subs	r5, r5, r1
 800c172:	f025 0503 	bic.w	r5, r5, #3
 800c176:	3508      	adds	r5, #8
 800c178:	2d0c      	cmp	r5, #12
 800c17a:	bf38      	it	cc
 800c17c:	250c      	movcc	r5, #12
 800c17e:	4629      	mov	r1, r5
 800c180:	4638      	mov	r0, r7
 800c182:	f7ff ffa5 	bl	800c0d0 <sbrk_aligned>
 800c186:	3001      	adds	r0, #1
 800c188:	d02b      	beq.n	800c1e2 <_malloc_r+0xd2>
 800c18a:	6823      	ldr	r3, [r4, #0]
 800c18c:	442b      	add	r3, r5
 800c18e:	6023      	str	r3, [r4, #0]
 800c190:	e00e      	b.n	800c1b0 <_malloc_r+0xa0>
 800c192:	6822      	ldr	r2, [r4, #0]
 800c194:	1b52      	subs	r2, r2, r5
 800c196:	d41e      	bmi.n	800c1d6 <_malloc_r+0xc6>
 800c198:	2a0b      	cmp	r2, #11
 800c19a:	d916      	bls.n	800c1ca <_malloc_r+0xba>
 800c19c:	1961      	adds	r1, r4, r5
 800c19e:	42a3      	cmp	r3, r4
 800c1a0:	6025      	str	r5, [r4, #0]
 800c1a2:	bf18      	it	ne
 800c1a4:	6059      	strne	r1, [r3, #4]
 800c1a6:	6863      	ldr	r3, [r4, #4]
 800c1a8:	bf08      	it	eq
 800c1aa:	6031      	streq	r1, [r6, #0]
 800c1ac:	5162      	str	r2, [r4, r5]
 800c1ae:	604b      	str	r3, [r1, #4]
 800c1b0:	4638      	mov	r0, r7
 800c1b2:	f104 060b 	add.w	r6, r4, #11
 800c1b6:	f000 f865 	bl	800c284 <__malloc_unlock>
 800c1ba:	f026 0607 	bic.w	r6, r6, #7
 800c1be:	1d23      	adds	r3, r4, #4
 800c1c0:	1af2      	subs	r2, r6, r3
 800c1c2:	d0b6      	beq.n	800c132 <_malloc_r+0x22>
 800c1c4:	1b9b      	subs	r3, r3, r6
 800c1c6:	50a3      	str	r3, [r4, r2]
 800c1c8:	e7b3      	b.n	800c132 <_malloc_r+0x22>
 800c1ca:	6862      	ldr	r2, [r4, #4]
 800c1cc:	42a3      	cmp	r3, r4
 800c1ce:	bf0c      	ite	eq
 800c1d0:	6032      	streq	r2, [r6, #0]
 800c1d2:	605a      	strne	r2, [r3, #4]
 800c1d4:	e7ec      	b.n	800c1b0 <_malloc_r+0xa0>
 800c1d6:	4623      	mov	r3, r4
 800c1d8:	6864      	ldr	r4, [r4, #4]
 800c1da:	e7b2      	b.n	800c142 <_malloc_r+0x32>
 800c1dc:	4634      	mov	r4, r6
 800c1de:	6876      	ldr	r6, [r6, #4]
 800c1e0:	e7b9      	b.n	800c156 <_malloc_r+0x46>
 800c1e2:	230c      	movs	r3, #12
 800c1e4:	603b      	str	r3, [r7, #0]
 800c1e6:	4638      	mov	r0, r7
 800c1e8:	f000 f84c 	bl	800c284 <__malloc_unlock>
 800c1ec:	e7a1      	b.n	800c132 <_malloc_r+0x22>
 800c1ee:	6025      	str	r5, [r4, #0]
 800c1f0:	e7de      	b.n	800c1b0 <_malloc_r+0xa0>
 800c1f2:	bf00      	nop
 800c1f4:	2000c278 	.word	0x2000c278

0800c1f8 <_realloc_r>:
 800c1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1fc:	4680      	mov	r8, r0
 800c1fe:	4614      	mov	r4, r2
 800c200:	460e      	mov	r6, r1
 800c202:	b921      	cbnz	r1, 800c20e <_realloc_r+0x16>
 800c204:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c208:	4611      	mov	r1, r2
 800c20a:	f7ff bf81 	b.w	800c110 <_malloc_r>
 800c20e:	b92a      	cbnz	r2, 800c21c <_realloc_r+0x24>
 800c210:	f7ff ff12 	bl	800c038 <_free_r>
 800c214:	4625      	mov	r5, r4
 800c216:	4628      	mov	r0, r5
 800c218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c21c:	f000 f838 	bl	800c290 <_malloc_usable_size_r>
 800c220:	4284      	cmp	r4, r0
 800c222:	4607      	mov	r7, r0
 800c224:	d802      	bhi.n	800c22c <_realloc_r+0x34>
 800c226:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c22a:	d812      	bhi.n	800c252 <_realloc_r+0x5a>
 800c22c:	4621      	mov	r1, r4
 800c22e:	4640      	mov	r0, r8
 800c230:	f7ff ff6e 	bl	800c110 <_malloc_r>
 800c234:	4605      	mov	r5, r0
 800c236:	2800      	cmp	r0, #0
 800c238:	d0ed      	beq.n	800c216 <_realloc_r+0x1e>
 800c23a:	42bc      	cmp	r4, r7
 800c23c:	4622      	mov	r2, r4
 800c23e:	4631      	mov	r1, r6
 800c240:	bf28      	it	cs
 800c242:	463a      	movcs	r2, r7
 800c244:	f7ff fbb8 	bl	800b9b8 <memcpy>
 800c248:	4631      	mov	r1, r6
 800c24a:	4640      	mov	r0, r8
 800c24c:	f7ff fef4 	bl	800c038 <_free_r>
 800c250:	e7e1      	b.n	800c216 <_realloc_r+0x1e>
 800c252:	4635      	mov	r5, r6
 800c254:	e7df      	b.n	800c216 <_realloc_r+0x1e>
	...

0800c258 <_sbrk_r>:
 800c258:	b538      	push	{r3, r4, r5, lr}
 800c25a:	4d06      	ldr	r5, [pc, #24]	; (800c274 <_sbrk_r+0x1c>)
 800c25c:	2300      	movs	r3, #0
 800c25e:	4604      	mov	r4, r0
 800c260:	4608      	mov	r0, r1
 800c262:	602b      	str	r3, [r5, #0]
 800c264:	f7f5 fc9a 	bl	8001b9c <_sbrk>
 800c268:	1c43      	adds	r3, r0, #1
 800c26a:	d102      	bne.n	800c272 <_sbrk_r+0x1a>
 800c26c:	682b      	ldr	r3, [r5, #0]
 800c26e:	b103      	cbz	r3, 800c272 <_sbrk_r+0x1a>
 800c270:	6023      	str	r3, [r4, #0]
 800c272:	bd38      	pop	{r3, r4, r5, pc}
 800c274:	2000c280 	.word	0x2000c280

0800c278 <__malloc_lock>:
 800c278:	4801      	ldr	r0, [pc, #4]	; (800c280 <__malloc_lock+0x8>)
 800c27a:	f000 b811 	b.w	800c2a0 <__retarget_lock_acquire_recursive>
 800c27e:	bf00      	nop
 800c280:	2000c284 	.word	0x2000c284

0800c284 <__malloc_unlock>:
 800c284:	4801      	ldr	r0, [pc, #4]	; (800c28c <__malloc_unlock+0x8>)
 800c286:	f000 b80c 	b.w	800c2a2 <__retarget_lock_release_recursive>
 800c28a:	bf00      	nop
 800c28c:	2000c284 	.word	0x2000c284

0800c290 <_malloc_usable_size_r>:
 800c290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c294:	1f18      	subs	r0, r3, #4
 800c296:	2b00      	cmp	r3, #0
 800c298:	bfbc      	itt	lt
 800c29a:	580b      	ldrlt	r3, [r1, r0]
 800c29c:	18c0      	addlt	r0, r0, r3
 800c29e:	4770      	bx	lr

0800c2a0 <__retarget_lock_acquire_recursive>:
 800c2a0:	4770      	bx	lr

0800c2a2 <__retarget_lock_release_recursive>:
 800c2a2:	4770      	bx	lr

0800c2a4 <_init>:
 800c2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2a6:	bf00      	nop
 800c2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2aa:	bc08      	pop	{r3}
 800c2ac:	469e      	mov	lr, r3
 800c2ae:	4770      	bx	lr

0800c2b0 <_fini>:
 800c2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2b2:	bf00      	nop
 800c2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2b6:	bc08      	pop	{r3}
 800c2b8:	469e      	mov	lr, r3
 800c2ba:	4770      	bx	lr
