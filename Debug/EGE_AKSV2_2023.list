
EGE_AKSV2_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b648  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  0800b818  0800b818  0001b818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc88  0800bc88  00021074  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc88  0800bc88  0001bc88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc90  0800bc90  00021074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc90  0800bc90  0001bc90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc94  0800bc94  0001bc94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800bc98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ARM.__at_0x20000000 00001000  20000074  0800bd0c  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000b154  20001078  0800cd0c  00021078  2**3
                  ALLOC
 11 ._user_heap_stack 00006004  2000c1cc  0800cd0c  0002c1cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00021074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029db2  00000000  00000000  000210a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005210  00000000  00000000  0004ae56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002170  00000000  00000000  00050068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f40  00000000  00000000  000521d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000971d  00000000  00000000  00054118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033980  00000000  00000000  0005d835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fbbb2  00000000  00000000  000911b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018cd67  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008ec8  00000000  00000000  0018cdb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001078 	.word	0x20001078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b800 	.word	0x0800b800

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000107c 	.word	0x2000107c
 800020c:	0800b800 	.word	0x0800b800

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f002 f82a 	bl	8002610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f834 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 fbfa 	bl	8000db8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005c4:	f000 f8a0 	bl	8000708 <MX_ADC1_Init>
  MX_ADC3_Init();
 80005c8:	f000 f8f0 	bl	80007ac <MX_ADC3_Init>
  MX_CAN1_Init();
 80005cc:	f000 f940 	bl	8000850 <MX_CAN1_Init>
  MX_CAN2_Init();
 80005d0:	f000 f974 	bl	80008bc <MX_CAN2_Init>
  MX_I2C1_Init();
 80005d4:	f000 f9bc 	bl	8000950 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005d8:	f000 f9e8 	bl	80009ac <MX_I2C2_Init>
  MX_I2C3_Init();
 80005dc:	f000 fa14 	bl	8000a08 <MX_I2C3_Init>
  MX_SPI2_Init();
 80005e0:	f000 fa66 	bl	8000ab0 <MX_SPI2_Init>
  MX_SPI3_Init();
 80005e4:	f000 fa9a 	bl	8000b1c <MX_SPI3_Init>
  MX_TIM1_Init();
 80005e8:	f000 face 	bl	8000b88 <MX_TIM1_Init>
  MX_UART4_Init();
 80005ec:	f000 fb90 	bl	8000d10 <MX_UART4_Init>
  MX_UART5_Init();
 80005f0:	f000 fbb8 	bl	8000d64 <MX_UART5_Init>
  MX_CRC_Init();
 80005f4:	f000 f998 	bl	8000928 <MX_CRC_Init>
  //MX_IWDG_Init();
  MX_RTC_Init();
 80005f8:	f000 fa34 	bl	8000a64 <MX_RTC_Init>
  //MX_WWDG_Init();
  /* USER CODE BEGIN 2 */

  MAIN_App(); /* JUMP INTO BODY CONTROL MODULE */
 80005fc:	f009 fcaa 	bl	8009f54 <MAIN_App>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000600:	f006 f8aa 	bl	8006758 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000604:	4a05      	ldr	r2, [pc, #20]	; (800061c <main+0x68>)
 8000606:	2100      	movs	r1, #0
 8000608:	4805      	ldr	r0, [pc, #20]	; (8000620 <main+0x6c>)
 800060a:	f006 f8ef 	bl	80067ec <osThreadNew>
 800060e:	4603      	mov	r3, r0
 8000610:	4a04      	ldr	r2, [pc, #16]	; (8000624 <main+0x70>)
 8000612:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000614:	f006 f8c4 	bl	80067a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	e7fe      	b.n	8000618 <main+0x64>
 800061a:	bf00      	nop
 800061c:	0800bb7c 	.word	0x0800bb7c
 8000620:	080010a9 	.word	0x080010a9
 8000624:	20001418 	.word	0x20001418

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	2234      	movs	r2, #52	; 0x34
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f00a fc7a 	bl	800af30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <SystemClock_Config+0xd8>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a2a      	ldr	r2, [pc, #168]	; (8000700 <SystemClock_Config+0xd8>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b28      	ldr	r3, [pc, #160]	; (8000700 <SystemClock_Config+0xd8>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000668:	2300      	movs	r3, #0
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <SystemClock_Config+0xdc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000674:	4a23      	ldr	r2, [pc, #140]	; (8000704 <SystemClock_Config+0xdc>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b21      	ldr	r3, [pc, #132]	; (8000704 <SystemClock_Config+0xdc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000688:	230a      	movs	r3, #10
 800068a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	2310      	movs	r3, #16
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a4:	2308      	movs	r3, #8
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80006a8:	2354      	movs	r3, #84	; 0x54
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4618      	mov	r0, r3
 80006be:	f004 fa49 	bl	8004b54 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006c8:	f000 fcf6 	bl	80010b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	2102      	movs	r1, #2
 80006e8:	4618      	mov	r0, r3
 80006ea:	f003 fc45 	bl	8003f78 <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006f4:	f000 fce0 	bl	80010b8 <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3750      	adds	r7, #80	; 0x50
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070e:	463b      	mov	r3, r7
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800071a:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <MX_ADC1_Init+0x98>)
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <MX_ADC1_Init+0x9c>)
 800071e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000720:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000722:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000726:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_ADC1_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000736:	2200      	movs	r2, #0
 8000738:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <MX_ADC1_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000744:	2200      	movs	r2, #0
 8000746:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_ADC1_Init+0x98>)
 800074a:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <MX_ADC1_Init+0xa0>)
 800074c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000756:	2201      	movs	r2, #1
 8000758:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_ADC1_Init+0x98>)
 800075c:	2200      	movs	r2, #0
 800075e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000764:	2201      	movs	r2, #1
 8000766:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000768:	480d      	ldr	r0, [pc, #52]	; (80007a0 <MX_ADC1_Init+0x98>)
 800076a:	f001 ffc3 	bl	80026f4 <HAL_ADC_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000774:	f000 fca0 	bl	80010b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000778:	2304      	movs	r3, #4
 800077a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800077c:	2301      	movs	r3, #1
 800077e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000784:	463b      	mov	r3, r7
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_ADC1_Init+0x98>)
 800078a:	f001 fff7 	bl	800277c <HAL_ADC_ConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000794:	f000 fc90 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20001094 	.word	0x20001094
 80007a4:	40012000 	.word	0x40012000
 80007a8:	0f000001 	.word	0x0f000001

080007ac <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80007be:	4b21      	ldr	r3, [pc, #132]	; (8000844 <MX_ADC3_Init+0x98>)
 80007c0:	4a21      	ldr	r2, [pc, #132]	; (8000848 <MX_ADC3_Init+0x9c>)
 80007c2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c4:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_ADC3_Init+0x98>)
 80007c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007ca:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007cc:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_ADC3_Init+0x98>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_ADC3_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80007d8:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_ADC3_Init+0x98>)
 80007da:	2200      	movs	r2, #0
 80007dc:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_ADC3_Init+0x98>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_ADC3_Init+0x98>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_ADC3_Init+0x98>)
 80007ee:	4a17      	ldr	r2, [pc, #92]	; (800084c <MX_ADC3_Init+0xa0>)
 80007f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_ADC3_Init+0x98>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_ADC3_Init+0x98>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_ADC3_Init+0x98>)
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_ADC3_Init+0x98>)
 8000808:	2201      	movs	r2, #1
 800080a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800080c:	480d      	ldr	r0, [pc, #52]	; (8000844 <MX_ADC3_Init+0x98>)
 800080e:	f001 ff71 	bl	80026f4 <HAL_ADC_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000818:	f000 fc4e 	bl	80010b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800081c:	2301      	movs	r3, #1
 800081e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000820:	2301      	movs	r3, #1
 8000822:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000828:	463b      	mov	r3, r7
 800082a:	4619      	mov	r1, r3
 800082c:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_ADC3_Init+0x98>)
 800082e:	f001 ffa5 	bl	800277c <HAL_ADC_ConfigChannel>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000838:	f000 fc3e 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200010dc 	.word	0x200010dc
 8000848:	40012200 	.word	0x40012200
 800084c:	0f000001 	.word	0x0f000001

08000850 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000856:	4a18      	ldr	r2, [pc, #96]	; (80008b8 <MX_CAN1_Init+0x68>)
 8000858:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_CAN1_Init+0x64>)
 800085c:	220c      	movs	r2, #12
 800085e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_CAN1_Init+0x64>)
 800086e:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000872:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000876:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800087a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800087c:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <MX_CAN1_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <MX_CAN1_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000890:	2201      	movs	r2, #1
 8000892:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_CAN1_Init+0x64>)
 800089c:	2200      	movs	r2, #0
 800089e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_CAN1_Init+0x64>)
 80008a2:	f002 f999 	bl	8002bd8 <HAL_CAN_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80008ac:	f000 fc04 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20001124 	.word	0x20001124
 80008b8:	40006400 	.word	0x40006400

080008bc <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_CAN2_Init+0x64>)
 80008c2:	4a18      	ldr	r2, [pc, #96]	; (8000924 <MX_CAN2_Init+0x68>)
 80008c4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 12;
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <MX_CAN2_Init+0x64>)
 80008c8:	220c      	movs	r2, #12
 80008ca:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_CAN2_Init+0x64>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_CAN2_Init+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_CAN2_Init+0x64>)
 80008da:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80008de:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_CAN2_Init+0x64>)
 80008e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80008e6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80008e8:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <MX_CAN2_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_CAN2_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <MX_CAN2_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_CAN2_Init+0x64>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <MX_CAN2_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_CAN2_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_CAN2_Init+0x64>)
 800090e:	f002 f963 	bl	8002bd8 <HAL_CAN_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000918:	f000 fbce 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	2000114c 	.word	0x2000114c
 8000924:	40006800 	.word	0x40006800

08000928 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_CRC_Init+0x20>)
 800092e:	4a07      	ldr	r2, [pc, #28]	; (800094c <MX_CRC_Init+0x24>)
 8000930:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_CRC_Init+0x20>)
 8000934:	f002 ffed 	bl	8003912 <HAL_CRC_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800093e:	f000 fbbb 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20001174 	.word	0x20001174
 800094c:	40023000 	.word	0x40023000

08000950 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <MX_I2C1_Init+0x50>)
 8000956:	4a13      	ldr	r2, [pc, #76]	; (80009a4 <MX_I2C1_Init+0x54>)
 8000958:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_I2C1_Init+0x50>)
 800095c:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <MX_I2C1_Init+0x58>)
 800095e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_I2C1_Init+0x50>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_I2C1_Init+0x50>)
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_I2C1_Init+0x50>)
 800096e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000972:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <MX_I2C1_Init+0x50>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_I2C1_Init+0x50>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <MX_I2C1_Init+0x50>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_I2C1_Init+0x50>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_I2C1_Init+0x50>)
 800098e:	f003 f9af 	bl	8003cf0 <HAL_I2C_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000998:	f000 fb8e 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	2000117c 	.word	0x2000117c
 80009a4:	40005400 	.word	0x40005400
 80009a8:	000186a0 	.word	0x000186a0

080009ac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <MX_I2C2_Init+0x50>)
 80009b2:	4a13      	ldr	r2, [pc, #76]	; (8000a00 <MX_I2C2_Init+0x54>)
 80009b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_I2C2_Init+0x50>)
 80009b8:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <MX_I2C2_Init+0x58>)
 80009ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_I2C2_Init+0x50>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_I2C2_Init+0x50>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_I2C2_Init+0x50>)
 80009ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <MX_I2C2_Init+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_I2C2_Init+0x50>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <MX_I2C2_Init+0x50>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_I2C2_Init+0x50>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_I2C2_Init+0x50>)
 80009ea:	f003 f981 	bl	8003cf0 <HAL_I2C_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80009f4:	f000 fb60 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200011d0 	.word	0x200011d0
 8000a00:	40005800 	.word	0x40005800
 8000a04:	000186a0 	.word	0x000186a0

08000a08 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <MX_I2C3_Init+0x50>)
 8000a0e:	4a13      	ldr	r2, [pc, #76]	; (8000a5c <MX_I2C3_Init+0x54>)
 8000a10:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_I2C3_Init+0x50>)
 8000a14:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <MX_I2C3_Init+0x58>)
 8000a16:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_I2C3_Init+0x50>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_I2C3_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_I2C3_Init+0x50>)
 8000a26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a2a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <MX_I2C3_Init+0x50>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_I2C3_Init+0x50>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <MX_I2C3_Init+0x50>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_I2C3_Init+0x50>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a44:	4804      	ldr	r0, [pc, #16]	; (8000a58 <MX_I2C3_Init+0x50>)
 8000a46:	f003 f953 	bl	8003cf0 <HAL_I2C_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a50:	f000 fb32 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20001224 	.word	0x20001224
 8000a5c:	40005c00 	.word	0x40005c00
 8000a60:	000186a0 	.word	0x000186a0

08000a64 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_RTC_Init+0x44>)
 8000a6a:	4a10      	ldr	r2, [pc, #64]	; (8000aac <MX_RTC_Init+0x48>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_RTC_Init+0x44>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_RTC_Init+0x44>)
 8000a76:	227f      	movs	r2, #127	; 0x7f
 8000a78:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_RTC_Init+0x44>)
 8000a7c:	22ff      	movs	r2, #255	; 0xff
 8000a7e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_RTC_Init+0x44>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_RTC_Init+0x44>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_RTC_Init+0x44>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_RTC_Init+0x44>)
 8000a94:	f004 fafc 	bl	8005090 <HAL_RTC_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000a9e:	f000 fb0b 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20001278 	.word	0x20001278
 8000aac:	40002800 	.word	0x40002800

08000ab0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <MX_SPI2_Init+0x64>)
 8000ab6:	4a18      	ldr	r2, [pc, #96]	; (8000b18 <MX_SPI2_Init+0x68>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000aba:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <MX_SPI2_Init+0x64>)
 8000abc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ac0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_SPI2_Init+0x64>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <MX_SPI2_Init+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_SPI2_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_SPI2_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_SPI2_Init+0x64>)
 8000adc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ae0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <MX_SPI2_Init+0x64>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <MX_SPI2_Init+0x64>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_SPI2_Init+0x64>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <MX_SPI2_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_SPI2_Init+0x64>)
 8000afc:	220a      	movs	r2, #10
 8000afe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b00:	4804      	ldr	r0, [pc, #16]	; (8000b14 <MX_SPI2_Init+0x64>)
 8000b02:	f004 fbbf 	bl	8005284 <HAL_SPI_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b0c:	f000 fad4 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20001298 	.word	0x20001298
 8000b18:	40003800 	.word	0x40003800

08000b1c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_SPI3_Init+0x64>)
 8000b22:	4a18      	ldr	r2, [pc, #96]	; (8000b84 <MX_SPI3_Init+0x68>)
 8000b24:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <MX_SPI3_Init+0x64>)
 8000b28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b2c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_SPI3_Init+0x64>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <MX_SPI3_Init+0x64>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_SPI3_Init+0x64>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_SPI3_Init+0x64>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_SPI3_Init+0x64>)
 8000b48:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b4c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_SPI3_Init+0x64>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <MX_SPI3_Init+0x64>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_SPI3_Init+0x64>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <MX_SPI3_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_SPI3_Init+0x64>)
 8000b68:	220a      	movs	r2, #10
 8000b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_SPI3_Init+0x64>)
 8000b6e:	f004 fb89 	bl	8005284 <HAL_SPI_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000b78:	f000 fa9e 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	200012f0 	.word	0x200012f0
 8000b84:	40003c00 	.word	0x40003c00

08000b88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b096      	sub	sp, #88	; 0x58
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]
 8000bb6:	615a      	str	r2, [r3, #20]
 8000bb8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2220      	movs	r2, #32
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f00a f9b5 	bl	800af30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bc6:	4b50      	ldr	r3, [pc, #320]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000bc8:	4a50      	ldr	r2, [pc, #320]	; (8000d0c <MX_TIM1_Init+0x184>)
 8000bca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bcc:	4b4e      	ldr	r3, [pc, #312]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd2:	4b4d      	ldr	r3, [pc, #308]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000bd8:	4b4b      	ldr	r3, [pc, #300]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000bda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bde:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be0:	4b49      	ldr	r3, [pc, #292]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000be6:	4b48      	ldr	r3, [pc, #288]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bec:	4b46      	ldr	r3, [pc, #280]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bf2:	4845      	ldr	r0, [pc, #276]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000bf4:	f004 fbcf 	bl	8005396 <HAL_TIM_Base_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000bfe:	f000 fa5b 	bl	80010b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c06:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	483e      	ldr	r0, [pc, #248]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000c10:	f004 fd2c 	bl	800566c <HAL_TIM_ConfigClockSource>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c1a:	f000 fa4d 	bl	80010b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c1e:	483a      	ldr	r0, [pc, #232]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000c20:	f004 fc08 	bl	8005434 <HAL_TIM_PWM_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000c2a:	f000 fa45 	bl	80010b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4832      	ldr	r0, [pc, #200]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000c3e:	f005 f8c7 	bl	8005dd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000c48:	f000 fa36 	bl	80010b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c4c:	2360      	movs	r3, #96	; 0x60
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c60:	2300      	movs	r3, #0
 8000c62:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c64:	2300      	movs	r3, #0
 8000c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4825      	ldr	r0, [pc, #148]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000c72:	f004 fc39 	bl	80054e8 <HAL_TIM_PWM_ConfigChannel>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000c7c:	f000 fa1c 	bl	80010b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c84:	2204      	movs	r2, #4
 8000c86:	4619      	mov	r1, r3
 8000c88:	481f      	ldr	r0, [pc, #124]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000c8a:	f004 fc2d 	bl	80054e8 <HAL_TIM_PWM_ConfigChannel>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000c94:	f000 fa10 	bl	80010b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9c:	2208      	movs	r2, #8
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4819      	ldr	r0, [pc, #100]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000ca2:	f004 fc21 	bl	80054e8 <HAL_TIM_PWM_ConfigChannel>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000cac:	f000 fa04 	bl	80010b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb4:	220c      	movs	r2, #12
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4813      	ldr	r0, [pc, #76]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000cba:	f004 fc15 	bl	80054e8 <HAL_TIM_PWM_ConfigChannel>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000cc4:	f000 f9f8 	bl	80010b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4807      	ldr	r0, [pc, #28]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000cec:	f005 f8ec 	bl	8005ec8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000cf6:	f000 f9df 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cfa:	4803      	ldr	r0, [pc, #12]	; (8000d08 <MX_TIM1_Init+0x180>)
 8000cfc:	f000 fde4 	bl	80018c8 <HAL_TIM_MspPostInit>

}
 8000d00:	bf00      	nop
 8000d02:	3758      	adds	r7, #88	; 0x58
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20001348 	.word	0x20001348
 8000d0c:	40010000 	.word	0x40010000

08000d10 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_UART4_Init+0x4c>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <MX_UART4_Init+0x50>)
 8000d18:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <MX_UART4_Init+0x4c>)
 8000d1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d20:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_UART4_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <MX_UART4_Init+0x4c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <MX_UART4_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_UART4_Init+0x4c>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <MX_UART4_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_UART4_Init+0x4c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_UART4_Init+0x4c>)
 8000d48:	f005 f910 	bl	8005f6c <HAL_UART_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000d52:	f000 f9b1 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20001390 	.word	0x20001390
 8000d60:	40004c00 	.word	0x40004c00

08000d64 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_UART5_Init+0x4c>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <MX_UART5_Init+0x50>)
 8000d6c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <MX_UART5_Init+0x4c>)
 8000d70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d74:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_UART5_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <MX_UART5_Init+0x4c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <MX_UART5_Init+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_UART5_Init+0x4c>)
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <MX_UART5_Init+0x4c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_UART5_Init+0x4c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_UART5_Init+0x4c>)
 8000d9c:	f005 f8e6 	bl	8005f6c <HAL_UART_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000da6:	f000 f987 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200013d4 	.word	0x200013d4
 8000db4:	40005000 	.word	0x40005000

08000db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08e      	sub	sp, #56	; 0x38
 8000dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
 8000dd2:	4bae      	ldr	r3, [pc, #696]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4aad      	ldr	r2, [pc, #692]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000dd8:	f043 0310 	orr.w	r3, r3, #16
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4bab      	ldr	r3, [pc, #684]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0310 	and.w	r3, r3, #16
 8000de6:	623b      	str	r3, [r7, #32]
 8000de8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
 8000dee:	4ba7      	ldr	r3, [pc, #668]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4aa6      	ldr	r2, [pc, #664]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4ba4      	ldr	r3, [pc, #656]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	61fb      	str	r3, [r7, #28]
 8000e04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
 8000e0a:	4ba0      	ldr	r3, [pc, #640]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a9f      	ldr	r2, [pc, #636]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e10:	f043 0320 	orr.w	r3, r3, #32
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b9d      	ldr	r3, [pc, #628]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0320 	and.w	r3, r3, #32
 8000e1e:	61bb      	str	r3, [r7, #24]
 8000e20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
 8000e26:	4b99      	ldr	r3, [pc, #612]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a98      	ldr	r2, [pc, #608]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b96      	ldr	r3, [pc, #600]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	4b92      	ldr	r3, [pc, #584]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a91      	ldr	r2, [pc, #580]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b8f      	ldr	r3, [pc, #572]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	4b8b      	ldr	r3, [pc, #556]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a8a      	ldr	r2, [pc, #552]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b88      	ldr	r3, [pc, #544]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	4b84      	ldr	r3, [pc, #528]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a83      	ldr	r2, [pc, #524]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b81      	ldr	r3, [pc, #516]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	4b7d      	ldr	r3, [pc, #500]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a7c      	ldr	r2, [pc, #496]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e9c:	f043 0308 	orr.w	r3, r3, #8
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b7a      	ldr	r3, [pc, #488]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0308 	and.w	r3, r3, #8
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STOP_LAMP_Pin|VEHICLE_INLAMP1_Pin|VEHICLE_INLAMP2_Pin|BONNET_LAMP_Pin
 8000eae:	2200      	movs	r2, #0
 8000eb0:	21ff      	movs	r1, #255	; 0xff
 8000eb2:	4877      	ldr	r0, [pc, #476]	; (8001090 <MX_GPIO_Init+0x2d8>)
 8000eb4:	f002 fede 	bl	8003c74 <HAL_GPIO_WritePin>
                          |RIGHT_SIGNAL_Pin|DYH_GPIO7_Pin|FRONT_LAMP_Pin|BACK_LAMP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LEFT_SIGNAL_Pin|GPIO_MPU6050_GYRO2_AD0_Pin, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8000ebe:	4875      	ldr	r0, [pc, #468]	; (8001094 <MX_GPIO_Init+0x2dc>)
 8000ec0:	f002 fed8 	bl	8003c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DYH_GPIO2_Pin|DYH_GPIO3_Pin|DYH_GPIO4_Pin, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000eca:	4873      	ldr	r0, [pc, #460]	; (8001098 <MX_GPIO_Init+0x2e0>)
 8000ecc:	f002 fed2 	bl	8003c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DYH_GPIO5_Pin|DYH_GPIO6_Pin|DEBUG_SET_Pin|GPIO_SX1262_TXEN_Pin
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f245 5167 	movw	r1, #21863	; 0x5567
 8000ed6:	4871      	ldr	r0, [pc, #452]	; (800109c <MX_GPIO_Init+0x2e4>)
 8000ed8:	f002 fecc 	bl	8003c74 <HAL_GPIO_WritePin>
                          |GPIO_SX1262_RXEN_Pin|GPIO_SX1262_RESET_Pin|GPIO_MPU6050_GYRO1_AD0_Pin|GPIO_MPU6050_GYRORIGHT_AD0_Pin
                          |GPIO_MPU6050_GYROLEFT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_Output_M1_S2_Pin|GPIO_Output_M1_S1_Pin|GPIO_Output_M1_S0_Pin|GPIO_Output_M0_S2_Pin
 8000edc:	2200      	movs	r2, #0
 8000ede:	f64f 4180 	movw	r1, #64640	; 0xfc80
 8000ee2:	486f      	ldr	r0, [pc, #444]	; (80010a0 <MX_GPIO_Init+0x2e8>)
 8000ee4:	f002 fec6 	bl	8003c74 <HAL_GPIO_WritePin>
                          |GPIO_Output_M0_S1_Pin|GPIO_Output_M0_S0_Pin|GPIO_Output_LED_DRIVER_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : STOP_LAMP_Pin VEHICLE_INLAMP1_Pin VEHICLE_INLAMP2_Pin BONNET_LAMP_Pin
                           RIGHT_SIGNAL_Pin DYH_GPIO7_Pin FRONT_LAMP_Pin BACK_LAMP_Pin */
  GPIO_InitStruct.Pin = STOP_LAMP_Pin|VEHICLE_INLAMP1_Pin|VEHICLE_INLAMP2_Pin|BONNET_LAMP_Pin
 8000ee8:	23ff      	movs	r3, #255	; 0xff
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
                          |RIGHT_SIGNAL_Pin|DYH_GPIO7_Pin|FRONT_LAMP_Pin|BACK_LAMP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efc:	4619      	mov	r1, r3
 8000efe:	4864      	ldr	r0, [pc, #400]	; (8001090 <MX_GPIO_Init+0x2d8>)
 8000f00:	f002 fd24 	bl	800394c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_SIGNAL_Pin GPIO_MPU6050_GYRO2_AD0_Pin */
  GPIO_InitStruct.Pin = LEFT_SIGNAL_Pin|GPIO_MPU6050_GYRO2_AD0_Pin;
 8000f04:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	485d      	ldr	r0, [pc, #372]	; (8001094 <MX_GPIO_Init+0x2dc>)
 8000f1e:	f002 fd15 	bl	800394c <HAL_GPIO_Init>

  /*Configure GPIO pins : DYH_GPIO2_Pin DYH_GPIO3_Pin DYH_GPIO4_Pin */
  GPIO_InitStruct.Pin = DYH_GPIO2_Pin|DYH_GPIO3_Pin|DYH_GPIO4_Pin;
 8000f22:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4857      	ldr	r0, [pc, #348]	; (8001098 <MX_GPIO_Init+0x2e0>)
 8000f3c:	f002 fd06 	bl	800394c <HAL_GPIO_Init>

  /*Configure GPIO pins : DYH_GPIO5_Pin DYH_GPIO6_Pin DEBUG_SET_Pin GPIO_SX1262_TXEN_Pin
                           GPIO_SX1262_RXEN_Pin GPIO_SX1262_RESET_Pin GPIO_MPU6050_GYRO1_AD0_Pin GPIO_MPU6050_GYRORIGHT_AD0_Pin
                           GPIO_MPU6050_GYROLEFT_Pin */
  GPIO_InitStruct.Pin = DYH_GPIO5_Pin|DYH_GPIO6_Pin|DEBUG_SET_Pin|GPIO_SX1262_TXEN_Pin
 8000f40:	f245 5367 	movw	r3, #21863	; 0x5567
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_SX1262_RXEN_Pin|GPIO_SX1262_RESET_Pin|GPIO_MPU6050_GYRO1_AD0_Pin|GPIO_MPU6050_GYRORIGHT_AD0_Pin
                          |GPIO_MPU6050_GYROLEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f56:	4619      	mov	r1, r3
 8000f58:	4850      	ldr	r0, [pc, #320]	; (800109c <MX_GPIO_Init+0x2e4>)
 8000f5a:	f002 fcf7 	bl	800394c <HAL_GPIO_Init>

  /*Configure GPIO pin : DYH_BUSY_INPUT_Pin */
  GPIO_InitStruct.Pin = DYH_BUSY_INPUT_Pin;
 8000f5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DYH_BUSY_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f70:	4619      	mov	r1, r3
 8000f72:	4847      	ldr	r0, [pc, #284]	; (8001090 <MX_GPIO_Init+0x2d8>)
 8000f74:	f002 fcea 	bl	800394c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_Output_M1_S2_Pin GPIO_Output_M1_S1_Pin GPIO_Output_M1_S0_Pin GPIO_Output_M0_S2_Pin
                           GPIO_Output_M0_S1_Pin GPIO_Output_M0_S0_Pin GPIO_Output_LED_DRIVER_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_Output_M1_S2_Pin|GPIO_Output_M1_S1_Pin|GPIO_Output_M1_S0_Pin|GPIO_Output_M0_S2_Pin
 8000f78:	f64f 4380 	movw	r3, #64640	; 0xfc80
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_Output_M0_S1_Pin|GPIO_Output_M0_S0_Pin|GPIO_Output_LED_DRIVER_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4843      	ldr	r0, [pc, #268]	; (80010a0 <MX_GPIO_Init+0x2e8>)
 8000f92:	f002 fcdb 	bl	800394c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI3_SX1262_DIO2_Pin EXTI4_SX1262_DIO1_Pin EXTI9_MPU6050_GYRO1_Pin EXT11_MPU5060_GYRORIGHT_Pin
                           EXTI13_MPU6050_GYROLEFT_Pin */
  GPIO_InitStruct.Pin = EXTI3_SX1262_DIO2_Pin|EXTI4_SX1262_DIO1_Pin|EXTI9_MPU6050_GYRO1_Pin|EXT11_MPU5060_GYRORIGHT_Pin
 8000f96:	f642 2318 	movw	r3, #10776	; 0x2a18
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
                          |EXTI13_MPU6050_GYROLEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f9c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000faa:	4619      	mov	r1, r3
 8000fac:	483b      	ldr	r0, [pc, #236]	; (800109c <MX_GPIO_Init+0x2e4>)
 8000fae:	f002 fccd 	bl	800394c <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1262_BUSY_INPUT_Pin */
  GPIO_InitStruct.Pin = SX1262_BUSY_INPUT_Pin;
 8000fb2:	2380      	movs	r3, #128	; 0x80
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX1262_BUSY_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4835      	ldr	r0, [pc, #212]	; (800109c <MX_GPIO_Init+0x2e4>)
 8000fc6:	f002 fcc1 	bl	800394c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI7_MPU6050_GYRO2_Pin */
  GPIO_InitStruct.Pin = EXTI7_MPU6050_GYRO2_Pin;
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXTI7_MPU6050_GYRO2_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fdc:	4619      	mov	r1, r3
 8000fde:	482d      	ldr	r0, [pc, #180]	; (8001094 <MX_GPIO_Init+0x2dc>)
 8000fe0:	f002 fcb4 	bl	800394c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI0_IGN_KEY_Pin */
  GPIO_InitStruct.Pin = EXTI0_IGN_KEY_Pin;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXTI0_IGN_KEY_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4829      	ldr	r0, [pc, #164]	; (80010a0 <MX_GPIO_Init+0x2e8>)
 8000ffa:	f002 fca7 	bl	800394c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI8_RIGHTARM_Pin */
  GPIO_InitStruct.Pin = EXTI8_RIGHTARM_Pin;
 8000ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001004:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXTI8_RIGHTARM_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	4619      	mov	r1, r3
 8001014:	4823      	ldr	r0, [pc, #140]	; (80010a4 <MX_GPIO_Init+0x2ec>)
 8001016:	f002 fc99 	bl	800394c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_LEFTARM_INPUT_Pin */
  GPIO_InitStruct.Pin = GPIO_LEFTARM_INPUT_Pin;
 800101a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001020:	2300      	movs	r3, #0
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIO_LEFTARM_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102c:	4619      	mov	r1, r3
 800102e:	481d      	ldr	r0, [pc, #116]	; (80010a4 <MX_GPIO_Init+0x2ec>)
 8001030:	f002 fc8c 	bl	800394c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2105      	movs	r1, #5
 8001038:	2006      	movs	r0, #6
 800103a:	f002 fc34 	bl	80038a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800103e:	2006      	movs	r0, #6
 8001040:	f002 fc4d 	bl	80038de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	2105      	movs	r1, #5
 8001048:	2009      	movs	r0, #9
 800104a:	f002 fc2c 	bl	80038a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800104e:	2009      	movs	r0, #9
 8001050:	f002 fc45 	bl	80038de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2105      	movs	r1, #5
 8001058:	200a      	movs	r0, #10
 800105a:	f002 fc24 	bl	80038a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800105e:	200a      	movs	r0, #10
 8001060:	f002 fc3d 	bl	80038de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	2105      	movs	r1, #5
 8001068:	2017      	movs	r0, #23
 800106a:	f002 fc1c 	bl	80038a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800106e:	2017      	movs	r0, #23
 8001070:	f002 fc35 	bl	80038de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	2105      	movs	r1, #5
 8001078:	2028      	movs	r0, #40	; 0x28
 800107a:	f002 fc14 	bl	80038a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800107e:	2028      	movs	r0, #40	; 0x28
 8001080:	f002 fc2d 	bl	80038de <HAL_NVIC_EnableIRQ>

}
 8001084:	bf00      	nop
 8001086:	3738      	adds	r7, #56	; 0x38
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40023800 	.word	0x40023800
 8001090:	40021000 	.word	0x40021000
 8001094:	40020800 	.word	0x40020800
 8001098:	40021400 	.word	0x40021400
 800109c:	40021800 	.word	0x40021800
 80010a0:	40020c00 	.word	0x40020c00
 80010a4:	40020400 	.word	0x40020400

080010a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010b0:	2001      	movs	r0, #1
 80010b2:	f005 fc2d 	bl	8006910 <osDelay>
 80010b6:	e7fb      	b.n	80010b0 <StartDefaultTask+0x8>

080010b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010bc:	b672      	cpsid	i
}
 80010be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <Error_Handler+0x8>
	...

080010c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_MspInit+0x54>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a11      	ldr	r2, [pc, #68]	; (8001118 <HAL_MspInit+0x54>)
 80010d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <HAL_MspInit+0x54>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_MspInit+0x54>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <HAL_MspInit+0x54>)
 80010f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f4:	6413      	str	r3, [r2, #64]	; 0x40
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <HAL_MspInit+0x54>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	210f      	movs	r1, #15
 8001106:	f06f 0001 	mvn.w	r0, #1
 800110a:	f002 fbcc 	bl	80038a6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800

0800111c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b090      	sub	sp, #64	; 0x40
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a62      	ldr	r2, [pc, #392]	; (80012c4 <HAL_ADC_MspInit+0x1a8>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d15c      	bne.n	80011f8 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
 8001142:	4b61      	ldr	r3, [pc, #388]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	4a60      	ldr	r2, [pc, #384]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114c:	6453      	str	r3, [r2, #68]	; 0x44
 800114e:	4b5e      	ldr	r3, [pc, #376]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
 8001158:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
 800115e:	4b5a      	ldr	r3, [pc, #360]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a59      	ldr	r2, [pc, #356]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b57      	ldr	r3, [pc, #348]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
 8001174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
 800117a:	4b53      	ldr	r3, [pc, #332]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a52      	ldr	r2, [pc, #328]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b50      	ldr	r3, [pc, #320]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	623b      	str	r3, [r7, #32]
 8001190:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
 8001196:	4b4c      	ldr	r3, [pc, #304]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a4b      	ldr	r2, [pc, #300]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b49      	ldr	r3, [pc, #292]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	61fb      	str	r3, [r7, #28]
 80011ac:	69fb      	ldr	r3, [r7, #28]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_IN4_BRAKE_Pin|ADC1_IN5_ANGLETEST_Pin|ADC1_IN6_GAS_Pin|ADC1_IN7_RIGHTARM_AXIS_Y_Pin;
 80011ae:	23f0      	movs	r3, #240	; 0xf0
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b2:	2303      	movs	r3, #3
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011be:	4619      	mov	r1, r3
 80011c0:	4842      	ldr	r0, [pc, #264]	; (80012cc <HAL_ADC_MspInit+0x1b0>)
 80011c2:	f002 fbc3 	bl	800394c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN14_LEFTARM_AXIS_X_Pin|ADC1_IN15_LEFTARM_AXIS_Y_Pin;
 80011c6:	2330      	movs	r3, #48	; 0x30
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ca:	2303      	movs	r3, #3
 80011cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d6:	4619      	mov	r1, r3
 80011d8:	483d      	ldr	r0, [pc, #244]	; (80012d0 <HAL_ADC_MspInit+0x1b4>)
 80011da:	f002 fbb7 	bl	800394c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN9_RIGHTARM_AXIS_X_Pin;
 80011de:	2302      	movs	r3, #2
 80011e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e2:	2303      	movs	r3, #3
 80011e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ADC1_IN9_RIGHTARM_AXIS_X_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ee:	4619      	mov	r1, r3
 80011f0:	4838      	ldr	r0, [pc, #224]	; (80012d4 <HAL_ADC_MspInit+0x1b8>)
 80011f2:	f002 fbab 	bl	800394c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80011f6:	e061      	b.n	80012bc <HAL_ADC_MspInit+0x1a0>
  else if(hadc->Instance==ADC3)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a36      	ldr	r2, [pc, #216]	; (80012d8 <HAL_ADC_MspInit+0x1bc>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d15c      	bne.n	80012bc <HAL_ADC_MspInit+0x1a0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a2f      	ldr	r2, [pc, #188]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 800120c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b2d      	ldr	r3, [pc, #180]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	4b29      	ldr	r3, [pc, #164]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a28      	ldr	r2, [pc, #160]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001228:	f043 0320 	orr.w	r3, r3, #32
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0320 	and.w	r3, r3, #32
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a21      	ldr	r2, [pc, #132]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a1a      	ldr	r2, [pc, #104]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <HAL_ADC_MspInit+0x1ac>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC3_IN9_5VIN_Pin|GPIO_PIN_4|GPIO_PIN_5|ADC3_IN4_VINLAMP2_Pin
 8001272:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001278:	2303      	movs	r3, #3
 800127a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001280:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001284:	4619      	mov	r1, r3
 8001286:	4815      	ldr	r0, [pc, #84]	; (80012dc <HAL_ADC_MspInit+0x1c0>)
 8001288:	f002 fb60 	bl	800394c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC3_IN10_12VIN_Pin|ADC3_IN11_VMCU_Pin|ADC3_IN12_3V3IN_Pin|ADC3_IN13_M0_Pin;
 800128c:	230f      	movs	r3, #15
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001290:	2303      	movs	r3, #3
 8001292:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001298:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800129c:	4619      	mov	r1, r3
 800129e:	480c      	ldr	r0, [pc, #48]	; (80012d0 <HAL_ADC_MspInit+0x1b4>)
 80012a0:	f002 fb54 	bl	800394c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC3_IN1_FRONT_LIGHT_CURRENT_Pin|ADC3_IN2_BACK_LIGHT_CURRENT_Pin|ADC3_IN3_VINLAMP1_Pin;
 80012a4:	230e      	movs	r3, #14
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a8:	2303      	movs	r3, #3
 80012aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012b4:	4619      	mov	r1, r3
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <HAL_ADC_MspInit+0x1b0>)
 80012b8:	f002 fb48 	bl	800394c <HAL_GPIO_Init>
}
 80012bc:	bf00      	nop
 80012be:	3740      	adds	r7, #64	; 0x40
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40012000 	.word	0x40012000
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40020800 	.word	0x40020800
 80012d4:	40020400 	.word	0x40020400
 80012d8:	40012200 	.word	0x40012200
 80012dc:	40021400 	.word	0x40021400

080012e0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08c      	sub	sp, #48	; 0x30
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 031c 	add.w	r3, r7, #28
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a53      	ldr	r2, [pc, #332]	; (800144c <HAL_CAN_MspInit+0x16c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d156      	bne.n	80013b0 <HAL_CAN_MspInit+0xd0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001302:	4b53      	ldr	r3, [pc, #332]	; (8001450 <HAL_CAN_MspInit+0x170>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	3301      	adds	r3, #1
 8001308:	4a51      	ldr	r2, [pc, #324]	; (8001450 <HAL_CAN_MspInit+0x170>)
 800130a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800130c:	4b50      	ldr	r3, [pc, #320]	; (8001450 <HAL_CAN_MspInit+0x170>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d10d      	bne.n	8001330 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001314:	2300      	movs	r3, #0
 8001316:	61bb      	str	r3, [r7, #24]
 8001318:	4b4e      	ldr	r3, [pc, #312]	; (8001454 <HAL_CAN_MspInit+0x174>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	4a4d      	ldr	r2, [pc, #308]	; (8001454 <HAL_CAN_MspInit+0x174>)
 800131e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001322:	6413      	str	r3, [r2, #64]	; 0x40
 8001324:	4b4b      	ldr	r3, [pc, #300]	; (8001454 <HAL_CAN_MspInit+0x174>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	4b47      	ldr	r3, [pc, #284]	; (8001454 <HAL_CAN_MspInit+0x174>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	4a46      	ldr	r2, [pc, #280]	; (8001454 <HAL_CAN_MspInit+0x174>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	6313      	str	r3, [r2, #48]	; 0x30
 8001340:	4b44      	ldr	r3, [pc, #272]	; (8001454 <HAL_CAN_MspInit+0x174>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800134c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800135e:	2309      	movs	r3, #9
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	483b      	ldr	r0, [pc, #236]	; (8001458 <HAL_CAN_MspInit+0x178>)
 800136a:	f002 faef 	bl	800394c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2105      	movs	r1, #5
 8001372:	2013      	movs	r0, #19
 8001374:	f002 fa97 	bl	80038a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001378:	2013      	movs	r0, #19
 800137a:	f002 fab0 	bl	80038de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2105      	movs	r1, #5
 8001382:	2014      	movs	r0, #20
 8001384:	f002 fa8f 	bl	80038a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001388:	2014      	movs	r0, #20
 800138a:	f002 faa8 	bl	80038de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2105      	movs	r1, #5
 8001392:	2015      	movs	r0, #21
 8001394:	f002 fa87 	bl	80038a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001398:	2015      	movs	r0, #21
 800139a:	f002 faa0 	bl	80038de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2105      	movs	r1, #5
 80013a2:	2016      	movs	r0, #22
 80013a4:	f002 fa7f 	bl	80038a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80013a8:	2016      	movs	r0, #22
 80013aa:	f002 fa98 	bl	80038de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80013ae:	e048      	b.n	8001442 <HAL_CAN_MspInit+0x162>
  else if(hcan->Instance==CAN2)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a29      	ldr	r2, [pc, #164]	; (800145c <HAL_CAN_MspInit+0x17c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d143      	bne.n	8001442 <HAL_CAN_MspInit+0x162>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	4b25      	ldr	r3, [pc, #148]	; (8001454 <HAL_CAN_MspInit+0x174>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	4a24      	ldr	r2, [pc, #144]	; (8001454 <HAL_CAN_MspInit+0x174>)
 80013c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013c8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ca:	4b22      	ldr	r3, [pc, #136]	; (8001454 <HAL_CAN_MspInit+0x174>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80013d6:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <HAL_CAN_MspInit+0x170>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	3301      	adds	r3, #1
 80013dc:	4a1c      	ldr	r2, [pc, #112]	; (8001450 <HAL_CAN_MspInit+0x170>)
 80013de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <HAL_CAN_MspInit+0x170>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d10d      	bne.n	8001404 <HAL_CAN_MspInit+0x124>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	4b19      	ldr	r3, [pc, #100]	; (8001454 <HAL_CAN_MspInit+0x174>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	4a18      	ldr	r2, [pc, #96]	; (8001454 <HAL_CAN_MspInit+0x174>)
 80013f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013f6:	6413      	str	r3, [r2, #64]	; 0x40
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <HAL_CAN_MspInit+0x174>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001404:	2300      	movs	r3, #0
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_CAN_MspInit+0x174>)
 800140a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140c:	4a11      	ldr	r2, [pc, #68]	; (8001454 <HAL_CAN_MspInit+0x174>)
 800140e:	f043 0302 	orr.w	r3, r3, #2
 8001412:	6313      	str	r3, [r2, #48]	; 0x30
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <HAL_CAN_MspInit+0x174>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001420:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001432:	2309      	movs	r3, #9
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	4619      	mov	r1, r3
 800143c:	4808      	ldr	r0, [pc, #32]	; (8001460 <HAL_CAN_MspInit+0x180>)
 800143e:	f002 fa85 	bl	800394c <HAL_GPIO_Init>
}
 8001442:	bf00      	nop
 8001444:	3730      	adds	r7, #48	; 0x30
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40006400 	.word	0x40006400
 8001450:	2000141c 	.word	0x2000141c
 8001454:	40023800 	.word	0x40023800
 8001458:	40020000 	.word	0x40020000
 800145c:	40006800 	.word	0x40006800
 8001460:	40020400 	.word	0x40020400

08001464 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <HAL_CRC_MspInit+0x3c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d10d      	bne.n	8001492 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_CRC_MspInit+0x40>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a09      	ldr	r2, [pc, #36]	; (80014a4 <HAL_CRC_MspInit+0x40>)
 8001480:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <HAL_CRC_MspInit+0x40>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023000 	.word	0x40023000
 80014a4:	40023800 	.word	0x40023800

080014a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08e      	sub	sp, #56	; 0x38
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a5b      	ldr	r2, [pc, #364]	; (8001634 <HAL_I2C_MspInit+0x18c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d12c      	bne.n	8001524 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
 80014ce:	4b5a      	ldr	r3, [pc, #360]	; (8001638 <HAL_I2C_MspInit+0x190>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a59      	ldr	r2, [pc, #356]	; (8001638 <HAL_I2C_MspInit+0x190>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b57      	ldr	r3, [pc, #348]	; (8001638 <HAL_I2C_MspInit+0x190>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	623b      	str	r3, [r7, #32]
 80014e4:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014e6:	23c0      	movs	r3, #192	; 0xc0
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ea:	2312      	movs	r3, #18
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014f6:	2304      	movs	r3, #4
 80014f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fe:	4619      	mov	r1, r3
 8001500:	484e      	ldr	r0, [pc, #312]	; (800163c <HAL_I2C_MspInit+0x194>)
 8001502:	f002 fa23 	bl	800394c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
 800150a:	4b4b      	ldr	r3, [pc, #300]	; (8001638 <HAL_I2C_MspInit+0x190>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	4a4a      	ldr	r2, [pc, #296]	; (8001638 <HAL_I2C_MspInit+0x190>)
 8001510:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001514:	6413      	str	r3, [r2, #64]	; 0x40
 8001516:	4b48      	ldr	r3, [pc, #288]	; (8001638 <HAL_I2C_MspInit+0x190>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800151e:	61fb      	str	r3, [r7, #28]
 8001520:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001522:	e082      	b.n	800162a <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a45      	ldr	r2, [pc, #276]	; (8001640 <HAL_I2C_MspInit+0x198>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d12c      	bne.n	8001588 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <HAL_I2C_MspInit+0x190>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a40      	ldr	r2, [pc, #256]	; (8001638 <HAL_I2C_MspInit+0x190>)
 8001538:	f043 0320 	orr.w	r3, r3, #32
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b3e      	ldr	r3, [pc, #248]	; (8001638 <HAL_I2C_MspInit+0x190>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0320 	and.w	r3, r3, #32
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800154a:	2303      	movs	r3, #3
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800154e:	2312      	movs	r3, #18
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800155a:	2304      	movs	r3, #4
 800155c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800155e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001562:	4619      	mov	r1, r3
 8001564:	4837      	ldr	r0, [pc, #220]	; (8001644 <HAL_I2C_MspInit+0x19c>)
 8001566:	f002 f9f1 	bl	800394c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	4b32      	ldr	r3, [pc, #200]	; (8001638 <HAL_I2C_MspInit+0x190>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	4a31      	ldr	r2, [pc, #196]	; (8001638 <HAL_I2C_MspInit+0x190>)
 8001574:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001578:	6413      	str	r3, [r2, #64]	; 0x40
 800157a:	4b2f      	ldr	r3, [pc, #188]	; (8001638 <HAL_I2C_MspInit+0x190>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	697b      	ldr	r3, [r7, #20]
}
 8001586:	e050      	b.n	800162a <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C3)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a2e      	ldr	r2, [pc, #184]	; (8001648 <HAL_I2C_MspInit+0x1a0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d14b      	bne.n	800162a <HAL_I2C_MspInit+0x182>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b28      	ldr	r3, [pc, #160]	; (8001638 <HAL_I2C_MspInit+0x190>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a27      	ldr	r2, [pc, #156]	; (8001638 <HAL_I2C_MspInit+0x190>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b25      	ldr	r3, [pc, #148]	; (8001638 <HAL_I2C_MspInit+0x190>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b21      	ldr	r3, [pc, #132]	; (8001638 <HAL_I2C_MspInit+0x190>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a20      	ldr	r2, [pc, #128]	; (8001638 <HAL_I2C_MspInit+0x190>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <HAL_I2C_MspInit+0x190>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d0:	2312      	movs	r3, #18
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015dc:	2304      	movs	r3, #4
 80015de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e4:	4619      	mov	r1, r3
 80015e6:	4819      	ldr	r0, [pc, #100]	; (800164c <HAL_I2C_MspInit+0x1a4>)
 80015e8:	f002 f9b0 	bl	800394c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f2:	2312      	movs	r3, #18
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015fe:	2304      	movs	r3, #4
 8001600:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001606:	4619      	mov	r1, r3
 8001608:	4811      	ldr	r0, [pc, #68]	; (8001650 <HAL_I2C_MspInit+0x1a8>)
 800160a:	f002 f99f 	bl	800394c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HAL_I2C_MspInit+0x190>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	4a08      	ldr	r2, [pc, #32]	; (8001638 <HAL_I2C_MspInit+0x190>)
 8001618:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800161c:	6413      	str	r3, [r2, #64]	; 0x40
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_I2C_MspInit+0x190>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
}
 800162a:	bf00      	nop
 800162c:	3738      	adds	r7, #56	; 0x38
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40005400 	.word	0x40005400
 8001638:	40023800 	.word	0x40023800
 800163c:	40020400 	.word	0x40020400
 8001640:	40005800 	.word	0x40005800
 8001644:	40021400 	.word	0x40021400
 8001648:	40005c00 	.word	0x40005c00
 800164c:	40020800 	.word	0x40020800
 8001650:	40020000 	.word	0x40020000

08001654 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b09a      	sub	sp, #104	; 0x68
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	225c      	movs	r2, #92	; 0x5c
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f009 fc63 	bl	800af30 <memset>
  if(hrtc->Instance==RTC)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a0c      	ldr	r2, [pc, #48]	; (80016a0 <HAL_RTC_MspInit+0x4c>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d111      	bne.n	8001698 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001674:	2320      	movs	r3, #32
 8001676:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001678:	f44f 7300 	mov.w	r3, #512	; 0x200
 800167c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800167e:	f107 030c 	add.w	r3, r7, #12
 8001682:	4618      	mov	r0, r3
 8001684:	f002 fd92 	bl	80041ac <HAL_RCCEx_PeriphCLKConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800168e:	f7ff fd13 	bl	80010b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <HAL_RTC_MspInit+0x50>)
 8001694:	2201      	movs	r2, #1
 8001696:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001698:	bf00      	nop
 800169a:	3768      	adds	r7, #104	; 0x68
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40002800 	.word	0x40002800
 80016a4:	42470e3c 	.word	0x42470e3c

080016a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08e      	sub	sp, #56	; 0x38
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a68      	ldr	r2, [pc, #416]	; (8001868 <HAL_SPI_MspInit+0x1c0>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d14b      	bne.n	8001762 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	623b      	str	r3, [r7, #32]
 80016ce:	4b67      	ldr	r3, [pc, #412]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	4a66      	ldr	r2, [pc, #408]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 80016d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d8:	6413      	str	r3, [r2, #64]	; 0x40
 80016da:	4b64      	ldr	r3, [pc, #400]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e2:	623b      	str	r3, [r7, #32]
 80016e4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	4b60      	ldr	r3, [pc, #384]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a5f      	ldr	r2, [pc, #380]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 80016f0:	f043 0302 	orr.w	r3, r3, #2
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b5d      	ldr	r3, [pc, #372]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	61fb      	str	r3, [r7, #28]
 8001700:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	61bb      	str	r3, [r7, #24]
 8001706:	4b59      	ldr	r3, [pc, #356]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a58      	ldr	r2, [pc, #352]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 800170c:	f043 0308 	orr.w	r3, r3, #8
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b56      	ldr	r3, [pc, #344]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	61bb      	str	r3, [r7, #24]
 800171c:	69bb      	ldr	r3, [r7, #24]
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    PD1     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800171e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172c:	2303      	movs	r3, #3
 800172e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001730:	2305      	movs	r3, #5
 8001732:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001738:	4619      	mov	r1, r3
 800173a:	484d      	ldr	r0, [pc, #308]	; (8001870 <HAL_SPI_MspInit+0x1c8>)
 800173c:	f002 f906 	bl	800394c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001740:	2302      	movs	r3, #2
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001750:	2307      	movs	r3, #7
 8001752:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001758:	4619      	mov	r1, r3
 800175a:	4846      	ldr	r0, [pc, #280]	; (8001874 <HAL_SPI_MspInit+0x1cc>)
 800175c:	f002 f8f6 	bl	800394c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001760:	e07e      	b.n	8001860 <HAL_SPI_MspInit+0x1b8>
  else if(hspi->Instance==SPI3)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a44      	ldr	r2, [pc, #272]	; (8001878 <HAL_SPI_MspInit+0x1d0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d179      	bne.n	8001860 <HAL_SPI_MspInit+0x1b8>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	4b3e      	ldr	r3, [pc, #248]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	4a3d      	ldr	r2, [pc, #244]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 8001776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800177a:	6413      	str	r3, [r2, #64]	; 0x40
 800177c:	4b3b      	ldr	r3, [pc, #236]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001788:	2300      	movs	r3, #0
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	4b37      	ldr	r3, [pc, #220]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 800178e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001790:	4a36      	ldr	r2, [pc, #216]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 8001792:	f043 0302 	orr.w	r3, r3, #2
 8001796:	6313      	str	r3, [r2, #48]	; 0x30
 8001798:	4b34      	ldr	r3, [pc, #208]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 800179a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	4b30      	ldr	r3, [pc, #192]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	4a2f      	ldr	r2, [pc, #188]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6313      	str	r3, [r2, #48]	; 0x30
 80017b4:	4b2d      	ldr	r3, [pc, #180]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 80017b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c0:	2300      	movs	r3, #0
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	4b29      	ldr	r3, [pc, #164]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 80017c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c8:	4a28      	ldr	r2, [pc, #160]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 80017ca:	f043 0304 	orr.w	r3, r3, #4
 80017ce:	6313      	str	r3, [r2, #48]	; 0x30
 80017d0:	4b26      	ldr	r3, [pc, #152]	; (800186c <HAL_SPI_MspInit+0x1c4>)
 80017d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017dc:	2301      	movs	r3, #1
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e8:	2303      	movs	r3, #3
 80017ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80017ec:	2307      	movs	r3, #7
 80017ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f4:	4619      	mov	r1, r3
 80017f6:	481e      	ldr	r0, [pc, #120]	; (8001870 <HAL_SPI_MspInit+0x1c8>)
 80017f8:	f002 f8a8 	bl	800394c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800180e:	2306      	movs	r3, #6
 8001810:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001816:	4619      	mov	r1, r3
 8001818:	4818      	ldr	r0, [pc, #96]	; (800187c <HAL_SPI_MspInit+0x1d4>)
 800181a:	f002 f897 	bl	800394c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800181e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182c:	2303      	movs	r3, #3
 800182e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001830:	2306      	movs	r3, #6
 8001832:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001838:	4619      	mov	r1, r3
 800183a:	4811      	ldr	r0, [pc, #68]	; (8001880 <HAL_SPI_MspInit+0x1d8>)
 800183c:	f002 f886 	bl	800394c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001840:	2310      	movs	r3, #16
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	2303      	movs	r3, #3
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001850:	2306      	movs	r3, #6
 8001852:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001858:	4619      	mov	r1, r3
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <HAL_SPI_MspInit+0x1c8>)
 800185c:	f002 f876 	bl	800394c <HAL_GPIO_Init>
}
 8001860:	bf00      	nop
 8001862:	3738      	adds	r7, #56	; 0x38
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40003800 	.word	0x40003800
 800186c:	40023800 	.word	0x40023800
 8001870:	40020400 	.word	0x40020400
 8001874:	40020c00 	.word	0x40020c00
 8001878:	40003c00 	.word	0x40003c00
 800187c:	40020000 	.word	0x40020000
 8001880:	40020800 	.word	0x40020800

08001884 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <HAL_TIM_Base_MspInit+0x3c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d10d      	bne.n	80018b2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_TIM_Base_MspInit+0x40>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	4a09      	ldr	r2, [pc, #36]	; (80018c4 <HAL_TIM_Base_MspInit+0x40>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6453      	str	r3, [r2, #68]	; 0x44
 80018a6:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <HAL_TIM_Base_MspInit+0x40>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80018b2:	bf00      	nop
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40010000 	.word	0x40010000
 80018c4:	40023800 	.word	0x40023800

080018c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a12      	ldr	r2, [pc, #72]	; (8001930 <HAL_TIM_MspPostInit+0x68>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d11e      	bne.n	8001928 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <HAL_TIM_MspPostInit+0x6c>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a10      	ldr	r2, [pc, #64]	; (8001934 <HAL_TIM_MspPostInit+0x6c>)
 80018f4:	f043 0310 	orr.w	r3, r3, #16
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <HAL_TIM_MspPostInit+0x6c>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_BUZZER_Pin|TIM1_CH2_RGB_RED_Pin|TIM1_CH3_RGB_BLUE_Pin|TIM1_CH4_RGB_GREEN_Pin;
 8001906:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800190a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001918:	2301      	movs	r3, #1
 800191a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	4619      	mov	r1, r3
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <HAL_TIM_MspPostInit+0x70>)
 8001924:	f002 f812 	bl	800394c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001928:	bf00      	nop
 800192a:	3720      	adds	r7, #32
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40010000 	.word	0x40010000
 8001934:	40023800 	.word	0x40023800
 8001938:	40021000 	.word	0x40021000

0800193c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08e      	sub	sp, #56	; 0x38
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a51      	ldr	r2, [pc, #324]	; (8001aa0 <HAL_UART_MspInit+0x164>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d14b      	bne.n	80019f6 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	623b      	str	r3, [r7, #32]
 8001962:	4b50      	ldr	r3, [pc, #320]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a4f      	ldr	r2, [pc, #316]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001968:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b4d      	ldr	r3, [pc, #308]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001976:	623b      	str	r3, [r7, #32]
 8001978:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	4b49      	ldr	r3, [pc, #292]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a48      	ldr	r2, [pc, #288]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b46      	ldr	r3, [pc, #280]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	61fb      	str	r3, [r7, #28]
 8001994:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
 800199a:	4b42      	ldr	r3, [pc, #264]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a41      	ldr	r2, [pc, #260]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 80019a0:	f043 0304 	orr.w	r3, r3, #4
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b3f      	ldr	r3, [pc, #252]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	61bb      	str	r3, [r7, #24]
 80019b0:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = DYH_UART4_TX_GPIO0_Pin;
 80019b2:	2301      	movs	r3, #1
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019c2:	2308      	movs	r3, #8
 80019c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DYH_UART4_TX_GPIO0_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ca:	4619      	mov	r1, r3
 80019cc:	4836      	ldr	r0, [pc, #216]	; (8001aa8 <HAL_UART_MspInit+0x16c>)
 80019ce:	f001 ffbd 	bl	800394c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DYH_UART4_RX_GPIO1_Pin;
 80019d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019e4:	2308      	movs	r3, #8
 80019e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DYH_UART4_RX_GPIO1_GPIO_Port, &GPIO_InitStruct);
 80019e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ec:	4619      	mov	r1, r3
 80019ee:	482f      	ldr	r0, [pc, #188]	; (8001aac <HAL_UART_MspInit+0x170>)
 80019f0:	f001 ffac 	bl	800394c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80019f4:	e04f      	b.n	8001a96 <HAL_UART_MspInit+0x15a>
  else if(huart->Instance==UART5)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a2d      	ldr	r2, [pc, #180]	; (8001ab0 <HAL_UART_MspInit+0x174>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d14a      	bne.n	8001a96 <HAL_UART_MspInit+0x15a>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	4a26      	ldr	r2, [pc, #152]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001a0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a10:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	4a1f      	ldr	r2, [pc, #124]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001a26:	f043 0304 	orr.w	r3, r3, #4
 8001a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	4a18      	ldr	r2, [pc, #96]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001a42:	f043 0308 	orr.w	r3, r3, #8
 8001a46:	6313      	str	r3, [r2, #48]	; 0x30
 8001a48:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DEBUG_UART5_TX_Pin;
 8001a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a62:	2303      	movs	r3, #3
 8001a64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001a66:	2308      	movs	r3, #8
 8001a68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8001a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480e      	ldr	r0, [pc, #56]	; (8001aac <HAL_UART_MspInit+0x170>)
 8001a72:	f001 ff6b 	bl	800394c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DEBUG_UART5_RX_Pin;
 8001a76:	2304      	movs	r3, #4
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001a86:	2308      	movs	r3, #8
 8001a88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_UART5_RX_GPIO_Port, &GPIO_InitStruct);
 8001a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4808      	ldr	r0, [pc, #32]	; (8001ab4 <HAL_UART_MspInit+0x178>)
 8001a92:	f001 ff5b 	bl	800394c <HAL_GPIO_Init>
}
 8001a96:	bf00      	nop
 8001a98:	3738      	adds	r7, #56	; 0x38
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40004c00 	.word	0x40004c00
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	40020800 	.word	0x40020800
 8001ab0:	40005000 	.word	0x40005000
 8001ab4:	40020c00 	.word	0x40020c00

08001ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <NMI_Handler+0x4>

08001abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac2:	e7fe      	b.n	8001ac2 <HardFault_Handler+0x4>

08001ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <MemManage_Handler+0x4>

08001aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ace:	e7fe      	b.n	8001ace <BusFault_Handler+0x4>

08001ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <UsageFault_Handler+0x4>

08001ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae8:	f000 fde4 	bl	80026b4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001aec:	f006 fd00 	bl	80084f0 <xTaskGetSchedulerState>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d001      	beq.n	8001afa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001af6:	f007 fc9f 	bl	8009438 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}

08001afe <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI0_IGN_KEY_Pin);
 8001b02:	2001      	movs	r0, #1
 8001b04:	f002 f8d0 	bl	8003ca8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI3_SX1262_DIO2_Pin);
 8001b10:	2008      	movs	r0, #8
 8001b12:	f002 f8c9 	bl	8003ca8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI4_SX1262_DIO1_Pin);
 8001b1e:	2010      	movs	r0, #16
 8001b20:	f002 f8c2 	bl	8003ca8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
__WEAK void CAN1_TX_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b2c:	4802      	ldr	r0, [pc, #8]	; (8001b38 <CAN1_TX_IRQHandler+0x10>)
 8001b2e:	f001 fba5 	bl	800327c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20001124 	.word	0x20001124

08001b3c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
__WEAK void CAN1_RX1_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <CAN1_RX1_IRQHandler+0x10>)
 8001b42:	f001 fb9b 	bl	800327c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20001124 	.word	0x20001124

08001b50 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
__WEAK void CAN1_SCE_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <CAN1_SCE_IRQHandler+0x10>)
 8001b56:	f001 fb91 	bl	800327c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20001124 	.word	0x20001124

08001b64 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI7_MPU6050_GYRO2_Pin);
 8001b68:	2080      	movs	r0, #128	; 0x80
 8001b6a:	f002 f89d 	bl	8003ca8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI8_RIGHTARM_Pin);
 8001b6e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b72:	f002 f899 	bl	8003ca8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI9_MPU6050_GYRO1_Pin);
 8001b76:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b7a:	f002 f895 	bl	8003ca8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT11_MPU5060_GYRORIGHT_Pin);
 8001b86:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001b8a:	f002 f88d 	bl	8003ca8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI13_MPU6050_GYROLEFT_Pin);
 8001b8e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b92:	f002 f889 	bl	8003ca8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ba4:	4a14      	ldr	r2, [pc, #80]	; (8001bf8 <_sbrk+0x5c>)
 8001ba6:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <_sbrk+0x60>)
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb0:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <_sbrk+0x64>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d102      	bne.n	8001bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <_sbrk+0x64>)
 8001bba:	4a12      	ldr	r2, [pc, #72]	; (8001c04 <_sbrk+0x68>)
 8001bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <_sbrk+0x64>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d207      	bcs.n	8001bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bcc:	f009 f978 	bl	800aec0 <__errno>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	220c      	movs	r2, #12
 8001bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bda:	e009      	b.n	8001bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <_sbrk+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <_sbrk+0x64>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	4a05      	ldr	r2, [pc, #20]	; (8001c00 <_sbrk+0x64>)
 8001bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bee:	68fb      	ldr	r3, [r7, #12]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20020000 	.word	0x20020000
 8001bfc:	00004000 	.word	0x00004000
 8001c00:	20001420 	.word	0x20001420
 8001c04:	2000c1d0 	.word	0x2000c1d0

08001c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <SystemInit+0x20>)
 8001c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c12:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <SystemInit+0x20>)
 8001c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c30:	480d      	ldr	r0, [pc, #52]	; (8001c68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c32:	490e      	ldr	r1, [pc, #56]	; (8001c6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c34:	4a0e      	ldr	r2, [pc, #56]	; (8001c70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c38:	e002      	b.n	8001c40 <LoopCopyDataInit>

08001c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3e:	3304      	adds	r3, #4

08001c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c44:	d3f9      	bcc.n	8001c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c46:	4a0b      	ldr	r2, [pc, #44]	; (8001c74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c48:	4c0b      	ldr	r4, [pc, #44]	; (8001c78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c4c:	e001      	b.n	8001c52 <LoopFillZerobss>

08001c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c50:	3204      	adds	r2, #4

08001c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c54:	d3fb      	bcc.n	8001c4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c56:	f7ff ffd7 	bl	8001c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c5a:	f009 f937 	bl	800aecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c5e:	f7fe fca9 	bl	80005b4 <main>
  bx  lr    
 8001c62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c6c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001c70:	0800bc98 	.word	0x0800bc98
  ldr r2, =_sbss
 8001c74:	20001078 	.word	0x20001078
  ldr r4, =_ebss
 8001c78:	2000c1cc 	.word	0x2000c1cc

08001c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c7c:	e7fe      	b.n	8001c7c <ADC_IRQHandler>
	...

08001c80 <CAN1_RX0_IRQHandler>:
 * @NOTICE: Dont forget to get __WEAK IRQ Handler in order to defined in it.c file which created by CubeMX
 */
#if (defined(STM32F446xx) || defined(STM32F407xx) && defined(BXCAN_Protocol))

void CAN1_RX0_IRQHandler(void)
{
 8001c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c82:	b087      	sub	sp, #28
 8001c84:	af06      	add	r7, sp, #24

  HAL_CAN_IRQHandler(&protocol.obj.bxHandle.hbxcanHandle);
 8001c86:	4816      	ldr	r0, [pc, #88]	; (8001ce0 <CAN1_RX0_IRQHandler+0x60>)
 8001c88:	f001 faf8 	bl	800327c <HAL_CAN_IRQHandler>

  if( HAL_CAN_GetRxMessage( &protocol.obj.bxHandle.hbxcanHandle ,
 8001c8c:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <CAN1_RX0_IRQHandler+0x64>)
 8001c8e:	4a16      	ldr	r2, [pc, #88]	; (8001ce8 <CAN1_RX0_IRQHandler+0x68>)
 8001c90:	2100      	movs	r1, #0
 8001c92:	4813      	ldr	r0, [pc, #76]	; (8001ce0 <CAN1_RX0_IRQHandler+0x60>)
 8001c94:	f001 f9ba 	bl	800300c <HAL_CAN_GetRxMessage>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <CAN1_RX0_IRQHandler+0x22>
		  	  	  	        CAN_RX_FIFO0						,
							&protocol.obj.bxHandle.rxHeader 	,
							&protocol.obj.bxHandle.rxData[0] 	) != HAL_OK )
  {
	  Error_Handler();
 8001c9e:	f7ff fa0b 	bl	80010b8 <Error_Handler>
  }

  protocol.ops.EEM_RX( &protocol.obj.canPacket  			,
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <CAN1_RX0_IRQHandler+0x60>)
 8001ca4:	f8d3 61b0 	ldr.w	r6, [r3, #432]	; 0x1b0
 8001ca8:	4d0d      	ldr	r5, [pc, #52]	; (8001ce0 <CAN1_RX0_IRQHandler+0x60>)
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <CAN1_RX0_IRQHandler+0x64>)
 8001cac:	9304      	str	r3, [sp, #16]
 8001cae:	466c      	mov	r4, sp
 8001cb0:	f105 0378 	add.w	r3, r5, #120	; 0x78
 8001cb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001cba:	f105 036c 	add.w	r3, r5, #108	; 0x6c
 8001cbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cc0:	480a      	ldr	r0, [pc, #40]	; (8001cec <CAN1_RX0_IRQHandler+0x6c>)
 8001cc2:	47b0      	blx	r6
      				   protocol.obj.bxHandle.rxHeader		,
  					   &protocol.obj.bxHandle.rxData[0]	    );

  if( HAL_CAN_ActivateNotification(&protocol.obj.bxHandle.hbxcanHandle, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK )
 8001cc4:	2102      	movs	r1, #2
 8001cc6:	4806      	ldr	r0, [pc, #24]	; (8001ce0 <CAN1_RX0_IRQHandler+0x60>)
 8001cc8:	f001 fab2 	bl	8003230 <HAL_CAN_ActivateNotification>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <CAN1_RX0_IRQHandler+0x56>
  {
	  Error_Handler();
 8001cd2:	f7ff f9f1 	bl	80010b8 <Error_Handler>
  }

}
 8001cd6:	bf00      	nop
 8001cd8:	3704      	adds	r7, #4
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	2000bffc 	.word	0x2000bffc
 8001ce4:	2000c090 	.word	0x2000c090
 8001ce8:	2000c068 	.word	0x2000c068
 8001cec:	2000c098 	.word	0x2000c098

08001cf0 <EEM_BXCAN_PeriphBase_CTOR>:
	 @return  : void
	 @date	  : 22.02.2023
	 @INFO	  :	Constructur function for BxCAN Periph Class
********************************************************************************/
void EEM_BXCAN_PeriphBase_CTOR(EEM_bxCAN_PeriphBase_st* param , CAN_HandleTypeDef* _can)
{
 8001cf0:	b5b0      	push	{r4, r5, r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
	param->hbxcanHandle = *_can;
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	4614      	mov	r4, r2
 8001d00:	461d      	mov	r5, r3
 8001d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d0e:	e884 0003 	stmia.w	r4, {r0, r1}

	memset(&param->sFilterConfig , 0x00 , sizeof(CAN_FilterTypeDef) );
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3328      	adds	r3, #40	; 0x28
 8001d16:	2228      	movs	r2, #40	; 0x28
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f009 f908 	bl	800af30 <memset>

	memset(&param->txHeader , 0x00 , sizeof(CAN_TxHeaderTypeDef) );
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3350      	adds	r3, #80	; 0x50
 8001d24:	2218      	movs	r2, #24
 8001d26:	2100      	movs	r1, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f009 f901 	bl	800af30 <memset>
	param->txMailBox = 0 ;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	669a      	str	r2, [r3, #104]	; 0x68

	memset(&param->rxHeader , 0x00 , sizeof(CAN_RxHeaderTypeDef) );
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	336c      	adds	r3, #108	; 0x6c
 8001d38:	221c      	movs	r2, #28
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f009 f8f7 	bl	800af30 <memset>
	param->rxMailBox = 0 ;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	memset(&param->txData[0] , 0x00 , sizeof(param->txData) );
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	338c      	adds	r3, #140	; 0x8c
 8001d4e:	2208      	movs	r2, #8
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f009 f8ec 	bl	800af30 <memset>
	memset(&param->rxData[0] , 0x00 , sizeof(param->rxData) );
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3394      	adds	r3, #148	; 0x94
 8001d5c:	2208      	movs	r2, #8
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f009 f8e5 	bl	800af30 <memset>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bdb0      	pop	{r4, r5, r7, pc}

08001d6e <EEM_CTOR>:
	, FDCAN_HandleTypeDef* _fdcan
#else
/* Only works for spi2can */
#endif
)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b084      	sub	sp, #16
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	4638      	mov	r0, r7
 8001d78:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	/* Construct methods */
	param->ops = _ops ;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001d82:	463a      	mov	r2, r7
 8001d84:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d86:	e883 0007 	stmia.w	r3, {r0, r1, r2}

#if (defined(STM32F446xx) || defined(STM32F407xx) && defined(BXCAN_Protocol))

	EEM_BXCAN_PeriphBase_CTOR(&param->obj.bxHandle , _can);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	69b9      	ldr	r1, [r7, #24]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff ffae 	bl	8001cf0 <EEM_BXCAN_PeriphBase_CTOR>
//ERROR
#endif
#endif

	/* Construct other objects */
	memset(&param->obj.canPacket , 0x00 , sizeof(EEM_CAN_Packet_st));
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	339c      	adds	r3, #156	; 0x9c
 8001d98:	2214      	movs	r2, #20
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f009 f8c7 	bl	800af30 <memset>
	memset(&param->obj.ringBuffer , 0x00 , sizeof(EEM_RING_Buffer_st));
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	33b0      	adds	r3, #176	; 0xb0
 8001da6:	22f8      	movs	r2, #248	; 0xf8
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f009 f8c0 	bl	800af30 <memset>

}
 8001db0:	bf00      	nop
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <EEM_INIT>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
EEM_ERR_T EEM_INIT( EEM_Protocol_obj_st*  param )
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08c      	sub	sp, #48	; 0x30
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	
	EEM_ERR_T result = EEM_EOK;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

#ifdef EEM_DEBUG_EN

	debug.uartHandle.Instance 			= USART2;
 8001dc6:	4b50      	ldr	r3, [pc, #320]	; (8001f08 <EEM_INIT+0x150>)
 8001dc8:	4a50      	ldr	r2, [pc, #320]	; (8001f0c <EEM_INIT+0x154>)
 8001dca:	601a      	str	r2, [r3, #0]
	debug.uartHandle.Init.BaudRate 		= 115200;
 8001dcc:	4b4e      	ldr	r3, [pc, #312]	; (8001f08 <EEM_INIT+0x150>)
 8001dce:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dd2:	605a      	str	r2, [r3, #4]
	debug.uartHandle.Init.WordLength 	= UART_WORDLENGTH_8B;
 8001dd4:	4b4c      	ldr	r3, [pc, #304]	; (8001f08 <EEM_INIT+0x150>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
	debug.uartHandle.Init.StopBits 		= UART_STOPBITS_1;
 8001dda:	4b4b      	ldr	r3, [pc, #300]	; (8001f08 <EEM_INIT+0x150>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	60da      	str	r2, [r3, #12]
	debug.uartHandle.Init.Parity 		= UART_PARITY_NONE;
 8001de0:	4b49      	ldr	r3, [pc, #292]	; (8001f08 <EEM_INIT+0x150>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	611a      	str	r2, [r3, #16]
	debug.uartHandle.Init.Mode 			= UART_MODE_TX_RX;
 8001de6:	4b48      	ldr	r3, [pc, #288]	; (8001f08 <EEM_INIT+0x150>)
 8001de8:	220c      	movs	r2, #12
 8001dea:	615a      	str	r2, [r3, #20]
	debug.uartHandle.Init.HwFlowCtl 	= UART_HWCONTROL_NONE;
 8001dec:	4b46      	ldr	r3, [pc, #280]	; (8001f08 <EEM_INIT+0x150>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	619a      	str	r2, [r3, #24]
	debug.uartHandle.Init.OverSampling 	= UART_OVERSAMPLING_16;
 8001df2:	4b45      	ldr	r3, [pc, #276]	; (8001f08 <EEM_INIT+0x150>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	61da      	str	r2, [r3, #28]

	if(HAL_UART_Init(&debug.uartHandle) != HAL_OK)
 8001df8:	4843      	ldr	r0, [pc, #268]	; (8001f08 <EEM_INIT+0x150>)
 8001dfa:	f004 f8b7 	bl	8005f6c <HAL_UART_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <EEM_INIT+0x50>
	{
	  return EEM_ERROR;
 8001e04:	2300      	movs	r3, #0
 8001e06:	e07b      	b.n	8001f00 <EEM_INIT+0x148>
	}

#ifdef EEM_DEBUG_EN
	EEM_DEBUG_PRINT(&debug , "EEM PROTOCOL CAN STACK \n");
 8001e08:	4941      	ldr	r1, [pc, #260]	; (8001f10 <EEM_INIT+0x158>)
 8001e0a:	483f      	ldr	r0, [pc, #252]	; (8001f08 <EEM_INIT+0x150>)
 8001e0c:	f000 f93a 	bl	8002084 <EEM_DEBUG_PRINT>
#endif

#endif
/* Ring Buffer Init Sequance */

	param->ringBuffer.head = 0;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
	param->ringBuffer.tail = 0;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5
	param->ringBuffer.full = EEM_FALSE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 21a6 	strb.w	r2, [r3, #422]	; 0x1a6

#if (defined(STM32F446xx) || defined(STM32F407xx) && defined(BXCAN_Protocol))
	
	param->bxHandle.hbxcanHandle.Instance					= CAN1;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a3a      	ldr	r2, [pc, #232]	; (8001f14 <EEM_INIT+0x15c>)
 8001e2c:	601a      	str	r2, [r3, #0]
	param->bxHandle.hbxcanHandle.Init.Prescaler 			= 12;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	220c      	movs	r2, #12
 8001e32:	605a      	str	r2, [r3, #4]
	param->bxHandle.hbxcanHandle.Init.Mode 					= CAN_MODE_LOOPBACK;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e3a:	609a      	str	r2, [r3, #8]
	param->bxHandle.hbxcanHandle.Init.SyncJumpWidth 		= CAN_SJW_1TQ;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	60da      	str	r2, [r3, #12]
	param->bxHandle.hbxcanHandle.Init.TimeSeg1 				= CAN_BS1_11TQ;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8001e48:	611a      	str	r2, [r3, #16]
	param->bxHandle.hbxcanHandle.Init.TimeSeg2 				= CAN_BS2_2TQ;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e50:	615a      	str	r2, [r3, #20]
	param->bxHandle.hbxcanHandle.Init.TimeTriggeredMode 	= DISABLE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	761a      	strb	r2, [r3, #24]
	param->bxHandle.hbxcanHandle.Init.AutoBusOff 			= DISABLE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	765a      	strb	r2, [r3, #25]
	param->bxHandle.hbxcanHandle.Init.AutoWakeUp 			= DISABLE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	769a      	strb	r2, [r3, #26]
	param->bxHandle.hbxcanHandle.Init.AutoRetransmission 	= ENABLE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	76da      	strb	r2, [r3, #27]
	param->bxHandle.hbxcanHandle.Init.ReceiveFifoLocked	 	= DISABLE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	771a      	strb	r2, [r3, #28]
	param->bxHandle.hbxcanHandle.Init.TransmitFifoPriority 	= DISABLE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	775a      	strb	r2, [r3, #29]
	
	if (HAL_CAN_Init(&param->bxHandle.hbxcanHandle) != HAL_OK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f000 fead 	bl	8002bd8 <HAL_CAN_Init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <EEM_INIT+0xd0>
	{
		return EEM_ERROR;
 8001e84:	2300      	movs	r3, #0
 8001e86:	e03b      	b.n	8001f00 <EEM_INIT+0x148>
	}
	
#ifdef EEM_DEBUG_EN
	EEM_DEBUG_PRINT(&debug , "BXCAN PERIPH CONFIG DONE ! \n");
 8001e88:	4923      	ldr	r1, [pc, #140]	; (8001f18 <EEM_INIT+0x160>)
 8001e8a:	481f      	ldr	r0, [pc, #124]	; (8001f08 <EEM_INIT+0x150>)
 8001e8c:	f000 f8fa 	bl	8002084 <EEM_DEBUG_PRINT>

#endif

	/* Filtering Configurations */

	EEM_SET_IDENTIFIERS();
 8001e90:	f000 f914 	bl	80020bc <EEM_SET_IDENTIFIERS>
#else
	/* No Filter */
#endif

#ifdef EEM_DEBUG_EN
	EEM_DEBUG_PRINT(&debug , "EEM PROTOCOL FILTERING DONE ! \n");
 8001e94:	4921      	ldr	r1, [pc, #132]	; (8001f1c <EEM_INIT+0x164>)
 8001e96:	481c      	ldr	r0, [pc, #112]	; (8001f08 <EEM_INIT+0x150>)
 8001e98:	f000 f8f4 	bl	8002084 <EEM_DEBUG_PRINT>
#endif

#if (defined(STM32F446xx) || defined(STM32F407xx) && defined(BXCAN_Protocol))

	if( HAL_CAN_Start(&param->bxHandle.hbxcanHandle) != HAL_OK )
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 ff95 	bl	8002dce <HAL_CAN_Start>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <EEM_INIT+0xf6>
	{
		return EEM_ERROR;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	e028      	b.n	8001f00 <EEM_INIT+0x148>
	}
	if( HAL_CAN_ActivateNotification(&param->bxHandle.hbxcanHandle, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK )
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2102      	movs	r1, #2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f001 f9bc 	bl	8003230 <HAL_CAN_ActivateNotification>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <EEM_INIT+0x10a>
	{
		return EEM_ERROR;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e01e      	b.n	8001f00 <EEM_INIT+0x148>

	/* TEST MESSAGE FOR BX CAN LINE */
	/*******************************************************************************/
	CAN_TxHeaderTypeDef   	TestTxHeader;
	EEM_U32					TestTxMailBox;
	EEM_U8               	TestTxData[8] = { 0xEE , EEM_VERSION , 0xEE , EEM_SUBVERSION , 0xEE , EEM_REVISION , 0xEE , 0xEE};
 8001ec2:	4a17      	ldr	r2, [pc, #92]	; (8001f20 <EEM_INIT+0x168>)
 8001ec4:	f107 0308 	add.w	r3, r7, #8
 8001ec8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ecc:	e883 0003 	stmia.w	r3, {r0, r1}
	TestTxHeader.DLC		= EEM_MAX_SIZE 	;
 8001ed0:	2308      	movs	r3, #8
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
	TestTxHeader.IDE		= CAN_ID_EXT   	;
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	61fb      	str	r3, [r7, #28]
	TestTxHeader.RTR		= CAN_RTR_DATA	;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	623b      	str	r3, [r7, #32]
	TestTxHeader.ExtId		= 0x0EE00EE0;
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <EEM_INIT+0x16c>)
 8001ede:	61bb      	str	r3, [r7, #24]
	if( HAL_CAN_AddTxMessage(&param->bxHandle.hbxcanHandle  ,
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f107 0310 	add.w	r3, r7, #16
 8001ee6:	f107 0208 	add.w	r2, r7, #8
 8001eea:	f107 0114 	add.w	r1, r7, #20
 8001eee:	f000 ffb2 	bl	8002e56 <HAL_CAN_AddTxMessage>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <EEM_INIT+0x144>
		        			 &TestTxHeader				,
							 &TestTxData 	     		,
							 &TestTxMailBox 	 			) != HAL_OK )
	{
		return EEM_ERROR;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	e001      	b.n	8001f00 <EEM_INIT+0x148>
#error /* failed define */
#endif

#endif

	return result;
 8001efc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3730      	adds	r7, #48	; 0x30
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20001560 	.word	0x20001560
 8001f0c:	40004400 	.word	0x40004400
 8001f10:	0800b824 	.word	0x0800b824
 8001f14:	40006400 	.word	0x40006400
 8001f18:	0800b840 	.word	0x0800b840
 8001f1c:	0800b860 	.word	0x0800b860
 8001f20:	0800b880 	.word	0x0800b880
 8001f24:	0ee00ee0 	.word	0x0ee00ee0

08001f28 <EEM_PUSH>:
	 @return  : 
	 @date	  : 
	 @INFO	  :
********************************************************************************/
void   EEM_PUSH( EEM_RING_Buffer_st* ringBuf , EEM_CAN_Packet_st* param)
{
 8001f28:	b490      	push	{r4, r7}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
	EEM_U8 loopVal = 0 ;
 8001f32:	2300      	movs	r3, #0
 8001f34:	73fb      	strb	r3, [r7, #15]

	for(loopVal = 0 ; loopVal < 8 ; loopVal++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	73fb      	strb	r3, [r7, #15]
 8001f3a:	e011      	b.n	8001f60 <EEM_PUSH+0x38>
	{
		ringBuf->data[ ringBuf->tail ][ loopVal ] = param->DATA[ loopVal ];
 8001f3c:	7bfa      	ldrb	r2, [r7, #15]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8001f44:	461c      	mov	r4, r3
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	6839      	ldr	r1, [r7, #0]
 8001f4a:	440a      	add	r2, r1
 8001f4c:	7910      	ldrb	r0, [r2, #4]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	00e2      	lsls	r2, r4, #3
 8001f52:	440a      	add	r2, r1
 8001f54:	4413      	add	r3, r2
 8001f56:	4602      	mov	r2, r0
 8001f58:	701a      	strb	r2, [r3, #0]
	for(loopVal = 0 ; loopVal < 8 ; loopVal++)
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	2b07      	cmp	r3, #7
 8001f64:	d9ea      	bls.n	8001f3c <EEM_PUSH+0x14>
	}
	ringBuf->id[ ringBuf->tail ].identifier = param->EXTENDED_ID.identifier;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	6819      	ldr	r1, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3228      	adds	r2, #40	; 0x28
 8001f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	ringBuf->byte_count++;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	ringBuf->tail = ( ringBuf->tail + 1 ) % EEM_BUFFER_SIZE ;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <EEM_PUSH+0xa8>)
 8001f92:	fb83 1302 	smull	r1, r3, r3, r2
 8001f96:	10d9      	asrs	r1, r3, #3
 8001f98:	17d3      	asrs	r3, r2, #31
 8001f9a:	1ac9      	subs	r1, r1, r3
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	1ad1      	subs	r1, r2, r3
 8001fa6:	b2ca      	uxtb	r2, r1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
	
	if( ringBuf->tail == ringBuf->head )
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 20f5 	ldrb.w	r2, [r3, #245]	; 0xf5
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d103      	bne.n	8001fc6 <EEM_PUSH+0x9e>
	{
		ringBuf->full = EEM_TRUE ;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
	}
	
}
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc90      	pop	{r4, r7}
 8001fce:	4770      	bx	lr
 8001fd0:	66666667 	.word	0x66666667

08001fd4 <EEM_TX>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
EEM_ERR_T 		EEM_TX( EEM_CAN_Packet_st* param, EEM_U32 period )
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
	EEM_ERR_T result = EEM_EOK;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]

#if (defined(STM32F446xx) || defined(STM32F407xx) && defined(BXCAN_Protocol))

	memcpy(&protocol.obj.bxHandle.txData , &param->DATA[0] , EEM_MAX_SIZE );
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	1d1a      	adds	r2, r3, #4
 8001fe6:	4b11      	ldr	r3, [pc, #68]	; (800202c <EEM_TX+0x58>)
 8001fe8:	338c      	adds	r3, #140	; 0x8c
 8001fea:	6810      	ldr	r0, [r2, #0]
 8001fec:	6851      	ldr	r1, [r2, #4]
 8001fee:	c303      	stmia	r3!, {r0, r1}

	protocol.obj.bxHandle.txHeader.DLC   = EEM_MAX_SIZE ; /* 8 BYTE */
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	; (800202c <EEM_TX+0x58>)
 8001ff2:	2208      	movs	r2, #8
 8001ff4:	661a      	str	r2, [r3, #96]	; 0x60
	protocol.obj.bxHandle.txHeader.IDE   = CAN_ID_EXT   ;
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	; (800202c <EEM_TX+0x58>)
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	659a      	str	r2, [r3, #88]	; 0x58
	protocol.obj.bxHandle.txHeader.RTR   = CAN_RTR_DATA ;
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <EEM_TX+0x58>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	65da      	str	r2, [r3, #92]	; 0x5c
	protocol.obj.bxHandle.txHeader.ExtId = param->EXTENDED_ID.identifier ;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a09      	ldr	r2, [pc, #36]	; (800202c <EEM_TX+0x58>)
 8002008:	6553      	str	r3, [r2, #84]	; 0x54

	if( HAL_CAN_AddTxMessage(&protocol.obj.bxHandle.hbxcanHandle ,
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <EEM_TX+0x5c>)
 800200c:	4a09      	ldr	r2, [pc, #36]	; (8002034 <EEM_TX+0x60>)
 800200e:	490a      	ldr	r1, [pc, #40]	; (8002038 <EEM_TX+0x64>)
 8002010:	4806      	ldr	r0, [pc, #24]	; (800202c <EEM_TX+0x58>)
 8002012:	f000 ff20 	bl	8002e56 <HAL_CAN_AddTxMessage>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <EEM_TX+0x4c>
	        				 &protocol.obj.bxHandle.txHeader	 ,
	        				 &protocol.obj.bxHandle.txData 	     ,
	        				 &protocol.obj.bxHandle.txMailBox 	 ) != HAL_OK )
	{
		return EEM_ERROR;
 800201c:	2300      	movs	r3, #0
 800201e:	e000      	b.n	8002022 <EEM_TX+0x4e>

#endif

#endif

	return result;
 8002020:	7bfb      	ldrb	r3, [r7, #15]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	2000bffc 	.word	0x2000bffc
 8002030:	2000c064 	.word	0x2000c064
 8002034:	2000c088 	.word	0x2000c088
 8002038:	2000c04c 	.word	0x2000c04c

0800203c <EEM_RX>:
#if defined(SPI2CAN_Protocol)
						uCAN_MSG*			rxPacked      ,
#endif
#endif
						EEM_U8*				rxData	  	   )
{
 800203c:	b084      	sub	sp, #16
 800203e:	b580      	push	{r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	f107 001c 	add.w	r0, r7, #28
 800204a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	EEM_ERR_T result = EEM_EOK;
 800204e:	2301      	movs	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]

#if ( defined(STM32F446xx) || defined(STM32F407xx) ) && defined(BXCAN_Protocol)

	memcpy( &param->DATA[0] , &rxData[0] , EEM_MAX_SIZE );
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3304      	adds	r3, #4
 8002056:	2208      	movs	r2, #8
 8002058:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800205a:	4618      	mov	r0, r3
 800205c:	f008 ff5a 	bl	800af14 <memcpy>
	param->EXTENDED_ID.identifier = rxHeader.ExtId;
 8002060:	6a3a      	ldr	r2, [r7, #32]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	601a      	str	r2, [r3, #0]
#endif

#endif

	/* Received Data Handled Push Ring Buffer */
	EEM_PUSH( &protocol.obj.ringBuffer , param);
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4805      	ldr	r0, [pc, #20]	; (8002080 <EEM_RX+0x44>)
 800206a:	f7ff ff5d 	bl	8001f28 <EEM_PUSH>

	return result;
 800206e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800207a:	b004      	add	sp, #16
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	2000c0ac 	.word	0x2000c0ac

08002084 <EEM_DEBUG_PRINT>:
	 @return  :
	 @date	  :
	 @INFO	  :
********************************************************************************/
void	EEM_DEBUG_PRINT(EEM_Debug_st* debugParam, char* msg)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
	memset( &debug.message[0] , 0x00 , DEBUG_MESSAGE_SIZE );
 800208e:	2232      	movs	r2, #50	; 0x32
 8002090:	2100      	movs	r1, #0
 8002092:	4808      	ldr	r0, [pc, #32]	; (80020b4 <EEM_DEBUG_PRINT+0x30>)
 8002094:	f008 ff4c 	bl	800af30 <memset>
	sprintf( &debug.message[0], msg);
 8002098:	6839      	ldr	r1, [r7, #0]
 800209a:	4806      	ldr	r0, [pc, #24]	; (80020b4 <EEM_DEBUG_PRINT+0x30>)
 800209c:	f008 ff50 	bl	800af40 <siprintf>
	HAL_UART_Transmit(&debug.uartHandle, (const EEM_U8*)&debug.message[0], DEBUG_MESSAGE_SIZE, 10);
 80020a0:	230a      	movs	r3, #10
 80020a2:	2232      	movs	r2, #50	; 0x32
 80020a4:	4903      	ldr	r1, [pc, #12]	; (80020b4 <EEM_DEBUG_PRINT+0x30>)
 80020a6:	4804      	ldr	r0, [pc, #16]	; (80020b8 <EEM_DEBUG_PRINT+0x34>)
 80020a8:	f003 ffad 	bl	8006006 <HAL_UART_Transmit>
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	200015b8 	.word	0x200015b8
 80020b8:	20001560 	.word	0x20001560

080020bc <EEM_SET_IDENTIFIERS>:
	 @return  : void
	 @date	  : 7.02.2023
	 @INFO	  :	Set All Identifiers
********************************************************************************/
void EEM_SET_IDENTIFIERS(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b09a      	sub	sp, #104	; 0x68
 80020c0:	af00      	add	r7, sp, #0
	/* Message Identifier Handler */
	EEM_CAN_ID_st ID[SIZE_OF_MSG] = {0};
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	2264      	movs	r2, #100	; 0x64
 80020c6:	2100      	movs	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f008 ff31 	bl	800af30 <memset>

	ID[MSG01_INDEX].Pages.priority 		= PRIORITY_010 ;
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	2202      	movs	r2, #2
 80020d2:	f362 0384 	bfi	r3, r2, #2, #3
 80020d6:	71fb      	strb	r3, [r7, #7]
	ID[MSG01_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	f36f 0341 	bfc	r3, #1, #1
 80020de:	71fb      	strb	r3, [r7, #7]
	ID[MSG01_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	f36f 0300 	bfc	r3, #0, #1
 80020e6:	71fb      	strb	r3, [r7, #7]
	ID[MSG01_INDEX].Pages.messageID 	= MESSAGE01 ;
 80020e8:	2301      	movs	r3, #1
 80020ea:	71bb      	strb	r3, [r7, #6]
	ID[MSG01_INDEX].Pages.DA 			= BCM_NODE;
 80020ec:	2311      	movs	r3, #17
 80020ee:	717b      	strb	r3, [r7, #5]
	ID[MSG01_INDEX].Pages.SA 			= HVAC_NODE ;
 80020f0:	2322      	movs	r3, #34	; 0x22
 80020f2:	713b      	strb	r3, [r7, #4]
	HVAC_MSG.Message01_ID = ID[MSG01_INDEX].identifier ;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4ae5      	ldr	r2, [pc, #916]	; (800248c <EEM_SET_IDENTIFIERS+0x3d0>)
 80020f8:	6013      	str	r3, [r2, #0]

	ID[MSG02_INDEX].Pages.priority 		= PRIORITY_010 ;
 80020fa:	7afb      	ldrb	r3, [r7, #11]
 80020fc:	2202      	movs	r2, #2
 80020fe:	f362 0384 	bfi	r3, r2, #2, #3
 8002102:	72fb      	strb	r3, [r7, #11]
	ID[MSG02_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002104:	7afb      	ldrb	r3, [r7, #11]
 8002106:	f36f 0341 	bfc	r3, #1, #1
 800210a:	72fb      	strb	r3, [r7, #11]
	ID[MSG02_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800210c:	7afb      	ldrb	r3, [r7, #11]
 800210e:	f36f 0300 	bfc	r3, #0, #1
 8002112:	72fb      	strb	r3, [r7, #11]
	ID[MSG02_INDEX].Pages.messageID 	= MESSAGE02 ;
 8002114:	2302      	movs	r3, #2
 8002116:	72bb      	strb	r3, [r7, #10]
	ID[MSG02_INDEX].Pages.DA 			= BCM_NODE;
 8002118:	2311      	movs	r3, #17
 800211a:	727b      	strb	r3, [r7, #9]
	ID[MSG02_INDEX].Pages.SA 			= HVAC_NODE ;
 800211c:	2322      	movs	r3, #34	; 0x22
 800211e:	723b      	strb	r3, [r7, #8]
	HVAC_MSG.Message02_ID = ID[MSG02_INDEX].identifier ;
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4ada      	ldr	r2, [pc, #872]	; (800248c <EEM_SET_IDENTIFIERS+0x3d0>)
 8002124:	6113      	str	r3, [r2, #16]

	ID[MSG03_INDEX].Pages.priority 		= PRIORITY_100 ;
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	2204      	movs	r2, #4
 800212a:	f362 0384 	bfi	r3, r2, #2, #3
 800212e:	73fb      	strb	r3, [r7, #15]
	ID[MSG03_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	f36f 0341 	bfc	r3, #1, #1
 8002136:	73fb      	strb	r3, [r7, #15]
	ID[MSG03_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	f36f 0300 	bfc	r3, #0, #1
 800213e:	73fb      	strb	r3, [r7, #15]
	ID[MSG03_INDEX].Pages.messageID 	= MESSAGE03 ;
 8002140:	2303      	movs	r3, #3
 8002142:	73bb      	strb	r3, [r7, #14]
	ID[MSG03_INDEX].Pages.DA 			= TLM_NODE;
 8002144:	2388      	movs	r3, #136	; 0x88
 8002146:	737b      	strb	r3, [r7, #13]
	ID[MSG03_INDEX].Pages.SA 			= BCM_NODE;
 8002148:	2311      	movs	r3, #17
 800214a:	733b      	strb	r3, [r7, #12]
	BCM_MSG.Message03_ID = ID[MSG03_INDEX].identifier ;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4ad0      	ldr	r2, [pc, #832]	; (8002490 <EEM_SET_IDENTIFIERS+0x3d4>)
 8002150:	6013      	str	r3, [r2, #0]

	ID[MSG04_INDEX].Pages.priority 		= PRIORITY_100 ;
 8002152:	7cfb      	ldrb	r3, [r7, #19]
 8002154:	2204      	movs	r2, #4
 8002156:	f362 0384 	bfi	r3, r2, #2, #3
 800215a:	74fb      	strb	r3, [r7, #19]
	ID[MSG04_INDEX].Pages.reserved 		= NOT_RESERVED ;
 800215c:	7cfb      	ldrb	r3, [r7, #19]
 800215e:	f36f 0341 	bfc	r3, #1, #1
 8002162:	74fb      	strb	r3, [r7, #19]
	ID[MSG04_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002164:	7cfb      	ldrb	r3, [r7, #19]
 8002166:	f36f 0300 	bfc	r3, #0, #1
 800216a:	74fb      	strb	r3, [r7, #19]
	ID[MSG04_INDEX].Pages.messageID 	= MESSAGE04 ;
 800216c:	2304      	movs	r3, #4
 800216e:	74bb      	strb	r3, [r7, #18]
	ID[MSG04_INDEX].Pages.DA 			= SCB_NODE;
 8002170:	2333      	movs	r3, #51	; 0x33
 8002172:	747b      	strb	r3, [r7, #17]
	ID[MSG04_INDEX].Pages.SA 			= BCM_NODE;
 8002174:	2311      	movs	r3, #17
 8002176:	743b      	strb	r3, [r7, #16]
	BCM_MSG.Message04_ID = ID[MSG04_INDEX].identifier ;
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4ac5      	ldr	r2, [pc, #788]	; (8002490 <EEM_SET_IDENTIFIERS+0x3d4>)
 800217c:	60d3      	str	r3, [r2, #12]

	ID[MSG05_INDEX].Pages.priority 		= PRIORITY_100 ;
 800217e:	7dfb      	ldrb	r3, [r7, #23]
 8002180:	2204      	movs	r2, #4
 8002182:	f362 0384 	bfi	r3, r2, #2, #3
 8002186:	75fb      	strb	r3, [r7, #23]
	ID[MSG05_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002188:	7dfb      	ldrb	r3, [r7, #23]
 800218a:	f36f 0341 	bfc	r3, #1, #1
 800218e:	75fb      	strb	r3, [r7, #23]
	ID[MSG05_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002190:	7dfb      	ldrb	r3, [r7, #23]
 8002192:	f36f 0300 	bfc	r3, #0, #1
 8002196:	75fb      	strb	r3, [r7, #23]
	ID[MSG05_INDEX].Pages.messageID 	= MESSAGE05 ;
 8002198:	2305      	movs	r3, #5
 800219a:	75bb      	strb	r3, [r7, #22]
	ID[MSG05_INDEX].Pages.DA 			= SCB_NODE;
 800219c:	2333      	movs	r3, #51	; 0x33
 800219e:	757b      	strb	r3, [r7, #21]
	ID[MSG05_INDEX].Pages.SA 			= BCM_NODE;
 80021a0:	2311      	movs	r3, #17
 80021a2:	753b      	strb	r3, [r7, #20]
	BCM_MSG.Message05_ID = ID[MSG05_INDEX].identifier ;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	4aba      	ldr	r2, [pc, #744]	; (8002490 <EEM_SET_IDENTIFIERS+0x3d4>)
 80021a8:	61d3      	str	r3, [r2, #28]

	ID[MSG06_INDEX].Pages.priority 		= PRIORITY_100 ;
 80021aa:	7efb      	ldrb	r3, [r7, #27]
 80021ac:	2204      	movs	r2, #4
 80021ae:	f362 0384 	bfi	r3, r2, #2, #3
 80021b2:	76fb      	strb	r3, [r7, #27]
	ID[MSG06_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80021b4:	7efb      	ldrb	r3, [r7, #27]
 80021b6:	f36f 0341 	bfc	r3, #1, #1
 80021ba:	76fb      	strb	r3, [r7, #27]
	ID[MSG06_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80021bc:	7efb      	ldrb	r3, [r7, #27]
 80021be:	f36f 0300 	bfc	r3, #0, #1
 80021c2:	76fb      	strb	r3, [r7, #27]
	ID[MSG06_INDEX].Pages.messageID 	= MESSAGE06 ;
 80021c4:	2306      	movs	r3, #6
 80021c6:	76bb      	strb	r3, [r7, #26]
	ID[MSG06_INDEX].Pages.DA 			= SCB_NODE;
 80021c8:	2333      	movs	r3, #51	; 0x33
 80021ca:	767b      	strb	r3, [r7, #25]
	ID[MSG06_INDEX].Pages.SA 			= BMS_NODE;
 80021cc:	2344      	movs	r3, #68	; 0x44
 80021ce:	763b      	strb	r3, [r7, #24]
	BMS_MSG.Message06_ID = ID[MSG06_INDEX].identifier ;
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	4ab0      	ldr	r2, [pc, #704]	; (8002494 <EEM_SET_IDENTIFIERS+0x3d8>)
 80021d4:	6013      	str	r3, [r2, #0]

	ID[MSG07_INDEX].Pages.priority 		= PRIORITY_100 ;
 80021d6:	7ffb      	ldrb	r3, [r7, #31]
 80021d8:	2204      	movs	r2, #4
 80021da:	f362 0384 	bfi	r3, r2, #2, #3
 80021de:	77fb      	strb	r3, [r7, #31]
	ID[MSG07_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80021e0:	7ffb      	ldrb	r3, [r7, #31]
 80021e2:	f36f 0341 	bfc	r3, #1, #1
 80021e6:	77fb      	strb	r3, [r7, #31]
	ID[MSG07_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80021e8:	7ffb      	ldrb	r3, [r7, #31]
 80021ea:	f36f 0300 	bfc	r3, #0, #1
 80021ee:	77fb      	strb	r3, [r7, #31]
	ID[MSG07_INDEX].Pages.messageID 	= MESSAGE07 ;
 80021f0:	2307      	movs	r3, #7
 80021f2:	77bb      	strb	r3, [r7, #30]
	ID[MSG07_INDEX].Pages.DA 			= SCB_NODE;
 80021f4:	2333      	movs	r3, #51	; 0x33
 80021f6:	777b      	strb	r3, [r7, #29]
	ID[MSG07_INDEX].Pages.SA 			= BMS_NODE;
 80021f8:	2344      	movs	r3, #68	; 0x44
 80021fa:	773b      	strb	r3, [r7, #28]
	BMS_MSG.Message07_ID = ID[MSG07_INDEX].identifier ;
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	4aa5      	ldr	r2, [pc, #660]	; (8002494 <EEM_SET_IDENTIFIERS+0x3d8>)
 8002200:	60d3      	str	r3, [r2, #12]

	ID[MSG08_INDEX].Pages.priority 		= PRIORITY_100 ;
 8002202:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002206:	2204      	movs	r2, #4
 8002208:	f362 0384 	bfi	r3, r2, #2, #3
 800220c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ID[MSG08_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002210:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002214:	f36f 0341 	bfc	r3, #1, #1
 8002218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ID[MSG08_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800221c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002220:	f36f 0300 	bfc	r3, #0, #1
 8002224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ID[MSG08_INDEX].Pages.messageID 	= MESSAGE08 ;
 8002228:	2308      	movs	r3, #8
 800222a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	ID[MSG08_INDEX].Pages.DA 			= SCB_NODE;
 800222e:	2333      	movs	r3, #51	; 0x33
 8002230:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	ID[MSG08_INDEX].Pages.SA 			= BMS_NODE;
 8002234:	2344      	movs	r3, #68	; 0x44
 8002236:	f887 3020 	strb.w	r3, [r7, #32]
	BMS_MSG.Message08_ID = ID[MSG08_INDEX].identifier ;
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	4a95      	ldr	r2, [pc, #596]	; (8002494 <EEM_SET_IDENTIFIERS+0x3d8>)
 800223e:	6193      	str	r3, [r2, #24]

	ID[MSG09_INDEX].Pages.priority 		= PRIORITY_100 ;
 8002240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002244:	2204      	movs	r2, #4
 8002246:	f362 0384 	bfi	r3, r2, #2, #3
 800224a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ID[MSG09_INDEX].Pages.reserved 		= NOT_RESERVED ;
 800224e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002252:	f36f 0341 	bfc	r3, #1, #1
 8002256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ID[MSG09_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800225a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800225e:	f36f 0300 	bfc	r3, #0, #1
 8002262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ID[MSG09_INDEX].Pages.messageID 	= MESSAGE09 ;
 8002266:	2309      	movs	r3, #9
 8002268:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	ID[MSG09_INDEX].Pages.DA 			= SCB_NODE;
 800226c:	2333      	movs	r3, #51	; 0x33
 800226e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	ID[MSG09_INDEX].Pages.SA 			= BMS_NODE;
 8002272:	2344      	movs	r3, #68	; 0x44
 8002274:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	BMS_MSG.Message09_ID = ID[MSG09_INDEX].identifier ;
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	4a86      	ldr	r2, [pc, #536]	; (8002494 <EEM_SET_IDENTIFIERS+0x3d8>)
 800227c:	6253      	str	r3, [r2, #36]	; 0x24

	ID[MSG10_INDEX].Pages.priority 		= PRIORITY_100 ;
 800227e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002282:	2204      	movs	r2, #4
 8002284:	f362 0384 	bfi	r3, r2, #2, #3
 8002288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	ID[MSG10_INDEX].Pages.reserved 		= NOT_RESERVED ;
 800228c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002290:	f36f 0341 	bfc	r3, #1, #1
 8002294:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	ID[MSG10_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002298:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800229c:	f36f 0300 	bfc	r3, #0, #1
 80022a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	ID[MSG10_INDEX].Pages.messageID 	= MESSAGE10 ;
 80022a4:	2310      	movs	r3, #16
 80022a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	ID[MSG10_INDEX].Pages.DA 			= SCB_NODE;
 80022aa:	2333      	movs	r3, #51	; 0x33
 80022ac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	ID[MSG10_INDEX].Pages.SA 			= BMS_NODE;
 80022b0:	2344      	movs	r3, #68	; 0x44
 80022b2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	BMS_MSG.Message10_ID = ID[MSG10_INDEX].identifier ;
 80022b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b8:	4a76      	ldr	r2, [pc, #472]	; (8002494 <EEM_SET_IDENTIFIERS+0x3d8>)
 80022ba:	6313      	str	r3, [r2, #48]	; 0x30

	ID[MSG11_INDEX].Pages.priority 		= PRIORITY_001 ;
 80022bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022c0:	2201      	movs	r2, #1
 80022c2:	f362 0384 	bfi	r3, r2, #2, #3
 80022c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ID[MSG11_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80022ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022ce:	f36f 0341 	bfc	r3, #1, #1
 80022d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ID[MSG11_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80022d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022da:	f36f 0300 	bfc	r3, #0, #1
 80022de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ID[MSG11_INDEX].Pages.messageID 	= MESSAGE11 ;
 80022e2:	2311      	movs	r3, #17
 80022e4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	ID[MSG11_INDEX].Pages.DA 			= MS1_NODE;
 80022e8:	2355      	movs	r3, #85	; 0x55
 80022ea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	ID[MSG11_INDEX].Pages.SA 			= BCM_NODE ;
 80022ee:	2311      	movs	r3, #17
 80022f0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	BCM_MSG.Message11_ID = ID[MSG11_INDEX].identifier ;
 80022f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f6:	4a66      	ldr	r2, [pc, #408]	; (8002490 <EEM_SET_IDENTIFIERS+0x3d4>)
 80022f8:	6293      	str	r3, [r2, #40]	; 0x28

	ID[MSG12_INDEX].Pages.priority 		= PRIORITY_001 ;
 80022fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022fe:	2201      	movs	r2, #1
 8002300:	f362 0384 	bfi	r3, r2, #2, #3
 8002304:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	ID[MSG12_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002308:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800230c:	f36f 0341 	bfc	r3, #1, #1
 8002310:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	ID[MSG12_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002314:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002318:	f36f 0300 	bfc	r3, #0, #1
 800231c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	ID[MSG12_INDEX].Pages.messageID 	= MESSAGE12 ;
 8002320:	2312      	movs	r3, #18
 8002322:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	ID[MSG12_INDEX].Pages.DA 			= MS2_NODE;
 8002326:	2366      	movs	r3, #102	; 0x66
 8002328:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	ID[MSG12_INDEX].Pages.SA 			= BCM_NODE ;
 800232c:	2311      	movs	r3, #17
 800232e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	BCM_MSG.Message12_ID = ID[MSG12_INDEX].identifier ;
 8002332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002334:	4a56      	ldr	r2, [pc, #344]	; (8002490 <EEM_SET_IDENTIFIERS+0x3d4>)
 8002336:	6393      	str	r3, [r2, #56]	; 0x38

	ID[MSG13_INDEX].Pages.priority 		= PRIORITY_001 ;
 8002338:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800233c:	2201      	movs	r2, #1
 800233e:	f362 0384 	bfi	r3, r2, #2, #3
 8002342:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	ID[MSG13_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002346:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800234a:	f36f 0341 	bfc	r3, #1, #1
 800234e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	ID[MSG13_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002352:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002356:	f36f 0300 	bfc	r3, #0, #1
 800235a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	ID[MSG13_INDEX].Pages.messageID 	= MESSAGE13 ;
 800235e:	2313      	movs	r3, #19
 8002360:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	ID[MSG13_INDEX].Pages.DA 			= BCM_NODE ;
 8002364:	2311      	movs	r3, #17
 8002366:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	ID[MSG13_INDEX].Pages.SA 			= MS1_NODE ;
 800236a:	2355      	movs	r3, #85	; 0x55
 800236c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	MS1_MSG.Message13_ID = ID[MSG13_INDEX].identifier ;
 8002370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002372:	4a49      	ldr	r2, [pc, #292]	; (8002498 <EEM_SET_IDENTIFIERS+0x3dc>)
 8002374:	6013      	str	r3, [r2, #0]

	ID[MSG14_INDEX].Pages.priority 		= PRIORITY_001 ;
 8002376:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800237a:	2201      	movs	r2, #1
 800237c:	f362 0384 	bfi	r3, r2, #2, #3
 8002380:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	ID[MSG14_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002384:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002388:	f36f 0341 	bfc	r3, #1, #1
 800238c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	ID[MSG14_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002390:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002394:	f36f 0300 	bfc	r3, #0, #1
 8002398:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	ID[MSG14_INDEX].Pages.messageID 	= MESSAGE14 ;
 800239c:	2314      	movs	r3, #20
 800239e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	ID[MSG14_INDEX].Pages.DA 			= BCM_NODE ;
 80023a2:	2311      	movs	r3, #17
 80023a4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	ID[MSG14_INDEX].Pages.SA 			= MS1_NODE ;
 80023a8:	2355      	movs	r3, #85	; 0x55
 80023aa:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	MS1_MSG.Message14_ID = ID[MSG14_INDEX].identifier ;
 80023ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b0:	4a39      	ldr	r2, [pc, #228]	; (8002498 <EEM_SET_IDENTIFIERS+0x3dc>)
 80023b2:	60d3      	str	r3, [r2, #12]

	ID[MSG15_INDEX].Pages.priority 		= PRIORITY_001 ;
 80023b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023b8:	2201      	movs	r2, #1
 80023ba:	f362 0384 	bfi	r3, r2, #2, #3
 80023be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	ID[MSG15_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80023c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023c6:	f36f 0341 	bfc	r3, #1, #1
 80023ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	ID[MSG15_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80023ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023d2:	f36f 0300 	bfc	r3, #0, #1
 80023d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	ID[MSG15_INDEX].Pages.messageID 	= MESSAGE15 ;
 80023da:	2315      	movs	r3, #21
 80023dc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	ID[MSG15_INDEX].Pages.DA 			= BCM_NODE ;
 80023e0:	2311      	movs	r3, #17
 80023e2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	ID[MSG15_INDEX].Pages.SA 			= MS1_NODE ;
 80023e6:	2355      	movs	r3, #85	; 0x55
 80023e8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	MS1_MSG.Message15_ID = ID[MSG15_INDEX].identifier ;
 80023ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ee:	4a2a      	ldr	r2, [pc, #168]	; (8002498 <EEM_SET_IDENTIFIERS+0x3dc>)
 80023f0:	6193      	str	r3, [r2, #24]

	ID[MSG16_INDEX].Pages.priority 		= PRIORITY_001 ;
 80023f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80023f6:	2201      	movs	r2, #1
 80023f8:	f362 0384 	bfi	r3, r2, #2, #3
 80023fc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	ID[MSG16_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002400:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002404:	f36f 0341 	bfc	r3, #1, #1
 8002408:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	ID[MSG16_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800240c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002410:	f36f 0300 	bfc	r3, #0, #1
 8002414:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	ID[MSG16_INDEX].Pages.messageID 	= MESSAGE16 ;
 8002418:	2316      	movs	r3, #22
 800241a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	ID[MSG16_INDEX].Pages.DA 			= BCM_NODE ;
 800241e:	2311      	movs	r3, #17
 8002420:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	ID[MSG16_INDEX].Pages.SA 			= MS2_NODE ;
 8002424:	2366      	movs	r3, #102	; 0x66
 8002426:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	MS2_MSG.Message16_ID = ID[MSG16_INDEX].identifier ;
 800242a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800242c:	4a1b      	ldr	r2, [pc, #108]	; (800249c <EEM_SET_IDENTIFIERS+0x3e0>)
 800242e:	6013      	str	r3, [r2, #0]

	ID[MSG17_INDEX].Pages.priority 		= PRIORITY_001 ;
 8002430:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002434:	2201      	movs	r2, #1
 8002436:	f362 0384 	bfi	r3, r2, #2, #3
 800243a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	ID[MSG17_INDEX].Pages.reserved 		= NOT_RESERVED ;
 800243e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002442:	f36f 0341 	bfc	r3, #1, #1
 8002446:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	ID[MSG17_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800244a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800244e:	f36f 0300 	bfc	r3, #0, #1
 8002452:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	ID[MSG17_INDEX].Pages.messageID 	= MESSAGE17 ;
 8002456:	2317      	movs	r3, #23
 8002458:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	ID[MSG17_INDEX].Pages.DA 			= BCM_NODE ;
 800245c:	2311      	movs	r3, #17
 800245e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	ID[MSG17_INDEX].Pages.SA 			= MS2_NODE ;
 8002462:	2366      	movs	r3, #102	; 0x66
 8002464:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	MS2_MSG.Message17_ID = ID[MSG17_INDEX].identifier ;
 8002468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800246a:	4a0c      	ldr	r2, [pc, #48]	; (800249c <EEM_SET_IDENTIFIERS+0x3e0>)
 800246c:	60d3      	str	r3, [r2, #12]

	ID[MSG18_INDEX].Pages.priority 		= PRIORITY_001 ;
 800246e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002472:	2201      	movs	r2, #1
 8002474:	f362 0384 	bfi	r3, r2, #2, #3
 8002478:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	ID[MSG18_INDEX].Pages.reserved 		= NOT_RESERVED ;
 800247c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002480:	f36f 0341 	bfc	r3, #1, #1
 8002484:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8002488:	e00a      	b.n	80024a0 <EEM_SET_IDENTIFIERS+0x3e4>
 800248a:	bf00      	nop
 800248c:	20001490 	.word	0x20001490
 8002490:	20001428 	.word	0x20001428
 8002494:	200014bc 	.word	0x200014bc
 8002498:	200014f8 	.word	0x200014f8
 800249c:	20001520 	.word	0x20001520
	ID[MSG18_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80024a0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80024a4:	f36f 0300 	bfc	r3, #0, #1
 80024a8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	ID[MSG18_INDEX].Pages.messageID 	= MESSAGE18 ;
 80024ac:	2318      	movs	r3, #24
 80024ae:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	ID[MSG18_INDEX].Pages.DA 			= BCM_NODE ;
 80024b2:	2311      	movs	r3, #17
 80024b4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	ID[MSG18_INDEX].Pages.SA 			= MS2_NODE ;
 80024b8:	2366      	movs	r3, #102	; 0x66
 80024ba:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MS2_MSG.Message18_ID = ID[MSG18_INDEX].identifier ;
 80024be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024c0:	4a4f      	ldr	r2, [pc, #316]	; (8002600 <EEM_SET_IDENTIFIERS+0x544>)
 80024c2:	6193      	str	r3, [r2, #24]

	ID[MSG19_INDEX].Pages.priority 		= PRIORITY_001 ;
 80024c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80024c8:	2201      	movs	r2, #1
 80024ca:	f362 0384 	bfi	r3, r2, #2, #3
 80024ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	ID[MSG19_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80024d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80024d6:	f36f 0341 	bfc	r3, #1, #1
 80024da:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	ID[MSG19_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80024de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80024e2:	f36f 0300 	bfc	r3, #0, #1
 80024e6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	ID[MSG19_INDEX].Pages.messageID 	= MESSAGE19 ;
 80024ea:	2319      	movs	r3, #25
 80024ec:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	ID[MSG19_INDEX].Pages.DA 			= BCM_NODE ;
 80024f0:	2311      	movs	r3, #17
 80024f2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	ID[MSG19_INDEX].Pages.SA 			= MS1_NODE ;
 80024f6:	2355      	movs	r3, #85	; 0x55
 80024f8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	BCM_MSG.Message19_ID = ID[MSG19_INDEX].identifier ;
 80024fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024fe:	4a41      	ldr	r2, [pc, #260]	; (8002604 <EEM_SET_IDENTIFIERS+0x548>)
 8002500:	6493      	str	r3, [r2, #72]	; 0x48

	ID[MSG20_INDEX].Pages.priority 		= PRIORITY_001 ;
 8002502:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002506:	2201      	movs	r2, #1
 8002508:	f362 0384 	bfi	r3, r2, #2, #3
 800250c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	ID[MSG20_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002510:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002514:	f36f 0341 	bfc	r3, #1, #1
 8002518:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	ID[MSG20_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800251c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002520:	f36f 0300 	bfc	r3, #0, #1
 8002524:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	ID[MSG20_INDEX].Pages.messageID 	= MESSAGE20 ;
 8002528:	2320      	movs	r3, #32
 800252a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	ID[MSG20_INDEX].Pages.DA 			= BCM_NODE ;
 800252e:	2311      	movs	r3, #17
 8002530:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	ID[MSG20_INDEX].Pages.SA 			= MS2_NODE ;
 8002534:	2366      	movs	r3, #102	; 0x66
 8002536:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	BCM_MSG.Message20_ID = ID[MSG20_INDEX].identifier ;
 800253a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800253c:	4a31      	ldr	r2, [pc, #196]	; (8002604 <EEM_SET_IDENTIFIERS+0x548>)
 800253e:	6593      	str	r3, [r2, #88]	; 0x58

	ID[MSG21_INDEX].Pages.priority 		= PRIORITY_011 ;
 8002540:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002544:	2203      	movs	r2, #3
 8002546:	f362 0384 	bfi	r3, r2, #2, #3
 800254a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	ID[MSG21_INDEX].Pages.reserved 		= NOT_RESERVED ;
 800254e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002552:	f36f 0341 	bfc	r3, #1, #1
 8002556:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	ID[MSG21_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800255a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800255e:	f36f 0300 	bfc	r3, #0, #1
 8002562:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	ID[MSG21_INDEX].Pages.messageID 	= MESSAGE21 ;
 8002566:	2321      	movs	r3, #33	; 0x21
 8002568:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	ID[MSG21_INDEX].Pages.DA 			= BCM_NODE;
 800256c:	2311      	movs	r3, #17
 800256e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	ID[MSG21_INDEX].Pages.SA 			= SCB_NODE;
 8002572:	2333      	movs	r3, #51	; 0x33
 8002574:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	SCB_MSG.Message21_ID = ID[MSG21_INDEX].identifier ;
 8002578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800257a:	4a23      	ldr	r2, [pc, #140]	; (8002608 <EEM_SET_IDENTIFIERS+0x54c>)
 800257c:	6013      	str	r3, [r2, #0]

	ID[MSG22_INDEX].Pages.priority 		= PRIORITY_111 ;
 800257e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002582:	f043 031c 	orr.w	r3, r3, #28
 8002586:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	ID[MSG22_INDEX].Pages.reserved 		= NOT_RESERVED ;
 800258a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800258e:	f36f 0341 	bfc	r3, #1, #1
 8002592:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	ID[MSG22_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002596:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800259a:	f36f 0300 	bfc	r3, #0, #1
 800259e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	ID[MSG22_INDEX].Pages.messageID 	= MESSAGE22 ;
 80025a2:	2322      	movs	r3, #34	; 0x22
 80025a4:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	ID[MSG22_INDEX].Pages.DA 			= BCM_NODE;
 80025a8:	2311      	movs	r3, #17
 80025aa:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	ID[MSG22_INDEX].Pages.SA 			= TLM_NODE;
 80025ae:	2388      	movs	r3, #136	; 0x88
 80025b0:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	TLM_MSG.Message22_ID = 	ID[MSG22_INDEX].identifier ;
 80025b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025b6:	4a15      	ldr	r2, [pc, #84]	; (800260c <EEM_SET_IDENTIFIERS+0x550>)
 80025b8:	6013      	str	r3, [r2, #0]

	ID[MSG23_INDEX].Pages.priority 		= PRIORITY_111 ;
 80025ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80025be:	f043 031c 	orr.w	r3, r3, #28
 80025c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	ID[MSG23_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80025c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80025ca:	f36f 0341 	bfc	r3, #1, #1
 80025ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	ID[MSG23_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80025d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80025d6:	f36f 0300 	bfc	r3, #0, #1
 80025da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	ID[MSG23_INDEX].Pages.messageID 	= MESSAGE23 ;
 80025de:	2323      	movs	r3, #35	; 0x23
 80025e0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	ID[MSG23_INDEX].Pages.DA 			= BCM_NODE;
 80025e4:	2311      	movs	r3, #17
 80025e6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	ID[MSG23_INDEX].Pages.SA 			= TLM_NODE;
 80025ea:	2388      	movs	r3, #136	; 0x88
 80025ec:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	TLM_MSG.Message23_ID = 	ID[MSG23_INDEX].identifier ;
 80025f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025f2:	4a06      	ldr	r2, [pc, #24]	; (800260c <EEM_SET_IDENTIFIERS+0x550>)
 80025f4:	60d3      	str	r3, [r2, #12]


}
 80025f6:	bf00      	nop
 80025f8:	3768      	adds	r7, #104	; 0x68
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	20001520 	.word	0x20001520
 8002604:	20001428 	.word	0x20001428
 8002608:	200014b0 	.word	0x200014b0
 800260c:	20001548 	.word	0x20001548

08002610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002614:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <HAL_Init+0x40>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a0d      	ldr	r2, [pc, #52]	; (8002650 <HAL_Init+0x40>)
 800261a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800261e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_Init+0x40>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <HAL_Init+0x40>)
 8002626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800262a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <HAL_Init+0x40>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a07      	ldr	r2, [pc, #28]	; (8002650 <HAL_Init+0x40>)
 8002632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002636:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002638:	2003      	movs	r0, #3
 800263a:	f001 f929 	bl	8003890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800263e:	200f      	movs	r0, #15
 8002640:	f000 f808 	bl	8002654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002644:	f7fe fd3e 	bl	80010c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40023c00 	.word	0x40023c00

08002654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800265c:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_InitTick+0x54>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_InitTick+0x58>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	4619      	mov	r1, r3
 8002666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800266a:	fbb3 f3f1 	udiv	r3, r3, r1
 800266e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002672:	4618      	mov	r0, r3
 8002674:	f001 f941 	bl	80038fa <HAL_SYSTICK_Config>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e00e      	b.n	80026a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b0f      	cmp	r3, #15
 8002686:	d80a      	bhi.n	800269e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002688:	2200      	movs	r2, #0
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	f04f 30ff 	mov.w	r0, #4294967295
 8002690:	f001 f909 	bl	80038a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002694:	4a06      	ldr	r2, [pc, #24]	; (80026b0 <HAL_InitTick+0x5c>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	e000      	b.n	80026a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000000 	.word	0x20000000
 80026ac:	20000008 	.word	0x20000008
 80026b0:	20000004 	.word	0x20000004

080026b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <HAL_IncTick+0x20>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_IncTick+0x24>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4413      	add	r3, r2
 80026c4:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <HAL_IncTick+0x24>)
 80026c6:	6013      	str	r3, [r2, #0]
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000008 	.word	0x20000008
 80026d8:	200015ec 	.word	0x200015ec

080026dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  return uwTick;
 80026e0:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <HAL_GetTick+0x14>)
 80026e2:	681b      	ldr	r3, [r3, #0]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	200015ec 	.word	0x200015ec

080026f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e033      	b.n	8002772 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	2b00      	cmp	r3, #0
 8002710:	d109      	bne.n	8002726 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7fe fd02 	bl	800111c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	2b00      	cmp	r3, #0
 8002730:	d118      	bne.n	8002764 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800273a:	f023 0302 	bic.w	r3, r3, #2
 800273e:	f043 0202 	orr.w	r2, r3, #2
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f94a 	bl	80029e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f023 0303 	bic.w	r3, r3, #3
 800275a:	f043 0201 	orr.w	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	641a      	str	r2, [r3, #64]	; 0x40
 8002762:	e001      	b.n	8002768 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002770:	7bfb      	ldrb	r3, [r7, #15]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x1c>
 8002794:	2302      	movs	r3, #2
 8002796:	e113      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x244>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b09      	cmp	r3, #9
 80027a6:	d925      	bls.n	80027f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68d9      	ldr	r1, [r3, #12]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	4613      	mov	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	3b1e      	subs	r3, #30
 80027be:	2207      	movs	r2, #7
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43da      	mvns	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	400a      	ands	r2, r1
 80027cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68d9      	ldr	r1, [r3, #12]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	4618      	mov	r0, r3
 80027e0:	4603      	mov	r3, r0
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4403      	add	r3, r0
 80027e6:	3b1e      	subs	r3, #30
 80027e8:	409a      	lsls	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	e022      	b.n	800283a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6919      	ldr	r1, [r3, #16]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	2207      	movs	r2, #7
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43da      	mvns	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	400a      	ands	r2, r1
 8002816:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6919      	ldr	r1, [r3, #16]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	b29b      	uxth	r3, r3
 8002828:	4618      	mov	r0, r3
 800282a:	4603      	mov	r3, r0
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4403      	add	r3, r0
 8002830:	409a      	lsls	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b06      	cmp	r3, #6
 8002840:	d824      	bhi.n	800288c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	3b05      	subs	r3, #5
 8002854:	221f      	movs	r2, #31
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43da      	mvns	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	400a      	ands	r2, r1
 8002862:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	b29b      	uxth	r3, r3
 8002870:	4618      	mov	r0, r3
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	3b05      	subs	r3, #5
 800287e:	fa00 f203 	lsl.w	r2, r0, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	635a      	str	r2, [r3, #52]	; 0x34
 800288a:	e04c      	b.n	8002926 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b0c      	cmp	r3, #12
 8002892:	d824      	bhi.n	80028de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	3b23      	subs	r3, #35	; 0x23
 80028a6:	221f      	movs	r2, #31
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43da      	mvns	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	400a      	ands	r2, r1
 80028b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	4618      	mov	r0, r3
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	3b23      	subs	r3, #35	; 0x23
 80028d0:	fa00 f203 	lsl.w	r2, r0, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	631a      	str	r2, [r3, #48]	; 0x30
 80028dc:	e023      	b.n	8002926 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	3b41      	subs	r3, #65	; 0x41
 80028f0:	221f      	movs	r2, #31
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43da      	mvns	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	400a      	ands	r2, r1
 80028fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	b29b      	uxth	r3, r3
 800290c:	4618      	mov	r0, r3
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	3b41      	subs	r3, #65	; 0x41
 800291a:	fa00 f203 	lsl.w	r2, r0, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002926:	4b29      	ldr	r3, [pc, #164]	; (80029cc <HAL_ADC_ConfigChannel+0x250>)
 8002928:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a28      	ldr	r2, [pc, #160]	; (80029d0 <HAL_ADC_ConfigChannel+0x254>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d10f      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x1d8>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b12      	cmp	r3, #18
 800293a:	d10b      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1d      	ldr	r2, [pc, #116]	; (80029d0 <HAL_ADC_ConfigChannel+0x254>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d12b      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x23a>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a1c      	ldr	r2, [pc, #112]	; (80029d4 <HAL_ADC_ConfigChannel+0x258>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d003      	beq.n	8002970 <HAL_ADC_ConfigChannel+0x1f4>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b11      	cmp	r3, #17
 800296e:	d122      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a11      	ldr	r2, [pc, #68]	; (80029d4 <HAL_ADC_ConfigChannel+0x258>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d111      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002992:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <HAL_ADC_ConfigChannel+0x25c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a11      	ldr	r2, [pc, #68]	; (80029dc <HAL_ADC_ConfigChannel+0x260>)
 8002998:	fba2 2303 	umull	r2, r3, r2, r3
 800299c:	0c9a      	lsrs	r2, r3, #18
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029a8:	e002      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	3b01      	subs	r3, #1
 80029ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f9      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	40012300 	.word	0x40012300
 80029d0:	40012000 	.word	0x40012000
 80029d4:	10000012 	.word	0x10000012
 80029d8:	20000000 	.word	0x20000000
 80029dc:	431bde83 	.word	0x431bde83

080029e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029e8:	4b79      	ldr	r3, [pc, #484]	; (8002bd0 <ADC_Init+0x1f0>)
 80029ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	431a      	orrs	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6859      	ldr	r1, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	021a      	lsls	r2, r3, #8
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6859      	ldr	r1, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6899      	ldr	r1, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a72:	4a58      	ldr	r2, [pc, #352]	; (8002bd4 <ADC_Init+0x1f4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d022      	beq.n	8002abe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6899      	ldr	r1, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002aa8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6899      	ldr	r1, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	e00f      	b.n	8002ade <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002acc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002adc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0202 	bic.w	r2, r2, #2
 8002aec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6899      	ldr	r1, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	7e1b      	ldrb	r3, [r3, #24]
 8002af8:	005a      	lsls	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d01b      	beq.n	8002b44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6859      	ldr	r1, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	3b01      	subs	r3, #1
 8002b38:	035a      	lsls	r2, r3, #13
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	e007      	b.n	8002b54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	051a      	lsls	r2, r3, #20
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6899      	ldr	r1, [r3, #8]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b96:	025a      	lsls	r2, r3, #9
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6899      	ldr	r1, [r3, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	029a      	lsls	r2, r3, #10
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	609a      	str	r2, [r3, #8]
}
 8002bc4:	bf00      	nop
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	40012300 	.word	0x40012300
 8002bd4:	0f000001 	.word	0x0f000001

08002bd8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e0ed      	b.n	8002dc6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d102      	bne.n	8002bfc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7fe fb72 	bl	80012e0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c0c:	f7ff fd66 	bl	80026dc <HAL_GetTick>
 8002c10:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c12:	e012      	b.n	8002c3a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c14:	f7ff fd62 	bl	80026dc <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b0a      	cmp	r3, #10
 8002c20:	d90b      	bls.n	8002c3a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2205      	movs	r2, #5
 8002c32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e0c5      	b.n	8002dc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0e5      	beq.n	8002c14 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0202 	bic.w	r2, r2, #2
 8002c56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c58:	f7ff fd40 	bl	80026dc <HAL_GetTick>
 8002c5c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c5e:	e012      	b.n	8002c86 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c60:	f7ff fd3c 	bl	80026dc <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b0a      	cmp	r3, #10
 8002c6c:	d90b      	bls.n	8002c86 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2205      	movs	r2, #5
 8002c7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e09f      	b.n	8002dc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1e5      	bne.n	8002c60 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	7e1b      	ldrb	r3, [r3, #24]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d108      	bne.n	8002cae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	e007      	b.n	8002cbe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	7e5b      	ldrb	r3, [r3, #25]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d108      	bne.n	8002cd8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	e007      	b.n	8002ce8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ce6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	7e9b      	ldrb	r3, [r3, #26]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d108      	bne.n	8002d02 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0220 	orr.w	r2, r2, #32
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	e007      	b.n	8002d12 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0220 	bic.w	r2, r2, #32
 8002d10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	7edb      	ldrb	r3, [r3, #27]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d108      	bne.n	8002d2c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0210 	bic.w	r2, r2, #16
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	e007      	b.n	8002d3c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0210 	orr.w	r2, r2, #16
 8002d3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	7f1b      	ldrb	r3, [r3, #28]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d108      	bne.n	8002d56 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0208 	orr.w	r2, r2, #8
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	e007      	b.n	8002d66 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0208 	bic.w	r2, r2, #8
 8002d64:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	7f5b      	ldrb	r3, [r3, #29]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d108      	bne.n	8002d80 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f042 0204 	orr.w	r2, r2, #4
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	e007      	b.n	8002d90 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0204 	bic.w	r2, r2, #4
 8002d8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	ea42 0103 	orr.w	r1, r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	1e5a      	subs	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b084      	sub	sp, #16
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d12e      	bne.n	8002e40 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2202      	movs	r2, #2
 8002de6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0201 	bic.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002dfa:	f7ff fc6f 	bl	80026dc <HAL_GetTick>
 8002dfe:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e00:	e012      	b.n	8002e28 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e02:	f7ff fc6b 	bl	80026dc <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b0a      	cmp	r3, #10
 8002e0e:	d90b      	bls.n	8002e28 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2205      	movs	r2, #5
 8002e20:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e012      	b.n	8002e4e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1e5      	bne.n	8002e02 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	e006      	b.n	8002e4e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
  }
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b089      	sub	sp, #36	; 0x24
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
 8002e62:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e74:	7ffb      	ldrb	r3, [r7, #31]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d003      	beq.n	8002e82 <HAL_CAN_AddTxMessage+0x2c>
 8002e7a:	7ffb      	ldrb	r3, [r7, #31]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	f040 80b8 	bne.w	8002ff2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10a      	bne.n	8002ea2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d105      	bne.n	8002ea2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80a0 	beq.w	8002fe2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	0e1b      	lsrs	r3, r3, #24
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d907      	bls.n	8002ec2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e09e      	b.n	8003000 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10d      	bne.n	8002ef0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ede:	68f9      	ldr	r1, [r7, #12]
 8002ee0:	6809      	ldr	r1, [r1, #0]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	3318      	adds	r3, #24
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	440b      	add	r3, r1
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	e00f      	b.n	8002f10 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002efa:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f00:	68f9      	ldr	r1, [r7, #12]
 8002f02:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002f04:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	3318      	adds	r3, #24
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	440b      	add	r3, r1
 8002f0e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6819      	ldr	r1, [r3, #0]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	3318      	adds	r3, #24
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	440b      	add	r3, r1
 8002f20:	3304      	adds	r3, #4
 8002f22:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	7d1b      	ldrb	r3, [r3, #20]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d111      	bne.n	8002f50 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	3318      	adds	r3, #24
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	4413      	add	r3, r2
 8002f38:	3304      	adds	r3, #4
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	6811      	ldr	r1, [r2, #0]
 8002f40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	3318      	adds	r3, #24
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	440b      	add	r3, r1
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3307      	adds	r3, #7
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	061a      	lsls	r2, r3, #24
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3306      	adds	r3, #6
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	041b      	lsls	r3, r3, #16
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3305      	adds	r3, #5
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	021b      	lsls	r3, r3, #8
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	3204      	adds	r2, #4
 8002f70:	7812      	ldrb	r2, [r2, #0]
 8002f72:	4610      	mov	r0, r2
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	6811      	ldr	r1, [r2, #0]
 8002f78:	ea43 0200 	orr.w	r2, r3, r0
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	440b      	add	r3, r1
 8002f82:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002f86:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3303      	adds	r3, #3
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	061a      	lsls	r2, r3, #24
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3302      	adds	r3, #2
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	041b      	lsls	r3, r3, #16
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	021b      	lsls	r3, r3, #8
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	7812      	ldrb	r2, [r2, #0]
 8002fa8:	4610      	mov	r0, r2
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	6811      	ldr	r1, [r2, #0]
 8002fae:	ea43 0200 	orr.w	r2, r3, r0
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	440b      	add	r3, r1
 8002fb8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002fbc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	3318      	adds	r3, #24
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	4413      	add	r3, r2
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	6811      	ldr	r1, [r2, #0]
 8002fd0:	f043 0201 	orr.w	r2, r3, #1
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	3318      	adds	r3, #24
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	440b      	add	r3, r1
 8002fdc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	e00e      	b.n	8003000 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e006      	b.n	8003000 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
  }
}
 8003000:	4618      	mov	r0, r3
 8003002:	3724      	adds	r7, #36	; 0x24
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
 8003018:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003020:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003022:	7dfb      	ldrb	r3, [r7, #23]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d003      	beq.n	8003030 <HAL_CAN_GetRxMessage+0x24>
 8003028:	7dfb      	ldrb	r3, [r7, #23]
 800302a:	2b02      	cmp	r3, #2
 800302c:	f040 80f3 	bne.w	8003216 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10e      	bne.n	8003054 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d116      	bne.n	8003072 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0e7      	b.n	8003224 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d107      	bne.n	8003072 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e0d8      	b.n	8003224 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	331b      	adds	r3, #27
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	4413      	add	r3, r2
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0204 	and.w	r2, r3, #4
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10c      	bne.n	80030aa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	331b      	adds	r3, #27
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	4413      	add	r3, r2
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	0d5b      	lsrs	r3, r3, #21
 80030a0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	e00b      	b.n	80030c2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	331b      	adds	r3, #27
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	4413      	add	r3, r2
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	08db      	lsrs	r3, r3, #3
 80030ba:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	331b      	adds	r3, #27
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	4413      	add	r3, r2
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0202 	and.w	r2, r3, #2
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	331b      	adds	r3, #27
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	4413      	add	r3, r2
 80030e4:	3304      	adds	r3, #4
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 020f 	and.w	r2, r3, #15
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	331b      	adds	r3, #27
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	4413      	add	r3, r2
 80030fc:	3304      	adds	r3, #4
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	0a1b      	lsrs	r3, r3, #8
 8003102:	b2da      	uxtb	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	331b      	adds	r3, #27
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	4413      	add	r3, r2
 8003114:	3304      	adds	r3, #4
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	0c1b      	lsrs	r3, r3, #16
 800311a:	b29a      	uxth	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	4413      	add	r3, r2
 800312a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	b2da      	uxtb	r2, r3
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	4413      	add	r3, r2
 8003140:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	0a1a      	lsrs	r2, r3, #8
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	3301      	adds	r3, #1
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	4413      	add	r3, r2
 800315a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	0c1a      	lsrs	r2, r3, #16
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	3302      	adds	r3, #2
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	4413      	add	r3, r2
 8003174:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	0e1a      	lsrs	r2, r3, #24
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	3303      	adds	r3, #3
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	4413      	add	r3, r2
 800318e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	3304      	adds	r3, #4
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	0a1a      	lsrs	r2, r3, #8
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	3305      	adds	r3, #5
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	4413      	add	r3, r2
 80031c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	0c1a      	lsrs	r2, r3, #16
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	3306      	adds	r3, #6
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	4413      	add	r3, r2
 80031da:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	0e1a      	lsrs	r2, r3, #24
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	3307      	adds	r3, #7
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d108      	bne.n	8003202 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0220 	orr.w	r2, r2, #32
 80031fe:	60da      	str	r2, [r3, #12]
 8003200:	e007      	b.n	8003212 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f042 0220 	orr.w	r2, r2, #32
 8003210:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	e006      	b.n	8003224 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
  }
}
 8003224:	4618      	mov	r0, r3
 8003226:	371c      	adds	r7, #28
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003240:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d002      	beq.n	800324e <HAL_CAN_ActivateNotification+0x1e>
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d109      	bne.n	8003262 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6959      	ldr	r1, [r3, #20]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	e006      	b.n	8003270 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
  }
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08a      	sub	sp, #40	; 0x28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003284:	2300      	movs	r3, #0
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d07c      	beq.n	80033bc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d023      	beq.n	8003314 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2201      	movs	r2, #1
 80032d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f983 	bl	80035ea <HAL_CAN_TxMailbox0CompleteCallback>
 80032e4:	e016      	b.n	8003314 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d004      	beq.n	80032fa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032f6:	627b      	str	r3, [r7, #36]	; 0x24
 80032f8:	e00c      	b.n	8003314 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b00      	cmp	r3, #0
 8003302:	d004      	beq.n	800330e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
 800330c:	e002      	b.n	8003314 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f989 	bl	8003626 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331a:	2b00      	cmp	r3, #0
 800331c:	d024      	beq.n	8003368 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003326:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f963 	bl	80035fe <HAL_CAN_TxMailbox1CompleteCallback>
 8003338:	e016      	b.n	8003368 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003340:	2b00      	cmp	r3, #0
 8003342:	d004      	beq.n	800334e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
 800334c:	e00c      	b.n	8003368 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003354:	2b00      	cmp	r3, #0
 8003356:	d004      	beq.n	8003362 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
 8003360:	e002      	b.n	8003368 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f969 	bl	800363a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d024      	beq.n	80033bc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800337a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f943 	bl	8003612 <HAL_CAN_TxMailbox2CompleteCallback>
 800338c:	e016      	b.n	80033bc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d004      	beq.n	80033a2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
 80033a0:	e00c      	b.n	80033bc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d004      	beq.n	80033b6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
 80033b4:	e002      	b.n	80033bc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f949 	bl	800364e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00c      	beq.n	80033e0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d007      	beq.n	80033e0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2210      	movs	r2, #16
 80033de:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00b      	beq.n	8003402 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d006      	beq.n	8003402 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2208      	movs	r2, #8
 80033fa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f93a 	bl	8003676 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d009      	beq.n	8003420 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f921 	bl	8003662 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00c      	beq.n	8003444 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800343a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2210      	movs	r2, #16
 8003442:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00b      	beq.n	8003466 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d006      	beq.n	8003466 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2208      	movs	r2, #8
 800345e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f91c 	bl	800369e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b00      	cmp	r3, #0
 800346e:	d009      	beq.n	8003484 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f903 	bl	800368a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00b      	beq.n	80034a6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b00      	cmp	r3, #0
 8003496:	d006      	beq.n	80034a6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2210      	movs	r2, #16
 800349e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f906 	bl	80036b2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00b      	beq.n	80034c8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d006      	beq.n	80034c8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2208      	movs	r2, #8
 80034c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f8ff 	bl	80036c6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d07b      	beq.n	80035ca <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d072      	beq.n	80035c2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d008      	beq.n	80034f8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d008      	beq.n	8003514 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	f043 0302 	orr.w	r3, r3, #2
 8003512:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800351a:	2b00      	cmp	r3, #0
 800351c:	d008      	beq.n	8003530 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	f043 0304 	orr.w	r3, r3, #4
 800352e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003536:	2b00      	cmp	r3, #0
 8003538:	d043      	beq.n	80035c2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003540:	2b00      	cmp	r3, #0
 8003542:	d03e      	beq.n	80035c2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800354a:	2b60      	cmp	r3, #96	; 0x60
 800354c:	d02b      	beq.n	80035a6 <HAL_CAN_IRQHandler+0x32a>
 800354e:	2b60      	cmp	r3, #96	; 0x60
 8003550:	d82e      	bhi.n	80035b0 <HAL_CAN_IRQHandler+0x334>
 8003552:	2b50      	cmp	r3, #80	; 0x50
 8003554:	d022      	beq.n	800359c <HAL_CAN_IRQHandler+0x320>
 8003556:	2b50      	cmp	r3, #80	; 0x50
 8003558:	d82a      	bhi.n	80035b0 <HAL_CAN_IRQHandler+0x334>
 800355a:	2b40      	cmp	r3, #64	; 0x40
 800355c:	d019      	beq.n	8003592 <HAL_CAN_IRQHandler+0x316>
 800355e:	2b40      	cmp	r3, #64	; 0x40
 8003560:	d826      	bhi.n	80035b0 <HAL_CAN_IRQHandler+0x334>
 8003562:	2b30      	cmp	r3, #48	; 0x30
 8003564:	d010      	beq.n	8003588 <HAL_CAN_IRQHandler+0x30c>
 8003566:	2b30      	cmp	r3, #48	; 0x30
 8003568:	d822      	bhi.n	80035b0 <HAL_CAN_IRQHandler+0x334>
 800356a:	2b10      	cmp	r3, #16
 800356c:	d002      	beq.n	8003574 <HAL_CAN_IRQHandler+0x2f8>
 800356e:	2b20      	cmp	r3, #32
 8003570:	d005      	beq.n	800357e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003572:	e01d      	b.n	80035b0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	f043 0308 	orr.w	r3, r3, #8
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800357c:	e019      	b.n	80035b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	f043 0310 	orr.w	r3, r3, #16
 8003584:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003586:	e014      	b.n	80035b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	f043 0320 	orr.w	r3, r3, #32
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003590:	e00f      	b.n	80035b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003598:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800359a:	e00a      	b.n	80035b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035a4:	e005      	b.n	80035b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035ae:	e000      	b.n	80035b2 <HAL_CAN_IRQHandler+0x336>
            break;
 80035b0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	699a      	ldr	r2, [r3, #24]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80035c0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2204      	movs	r2, #4
 80035c8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f87c 	bl	80036da <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80035e2:	bf00      	nop
 80035e4:	3728      	adds	r7, #40	; 0x28
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
	...

080036f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003700:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <__NVIC_SetPriorityGrouping+0x44>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800370c:	4013      	ands	r3, r2
 800370e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800371c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003722:	4a04      	ldr	r2, [pc, #16]	; (8003734 <__NVIC_SetPriorityGrouping+0x44>)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	60d3      	str	r3, [r2, #12]
}
 8003728:	bf00      	nop
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800373c:	4b04      	ldr	r3, [pc, #16]	; (8003750 <__NVIC_GetPriorityGrouping+0x18>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	0a1b      	lsrs	r3, r3, #8
 8003742:	f003 0307 	and.w	r3, r3, #7
}
 8003746:	4618      	mov	r0, r3
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	e000ed00 	.word	0xe000ed00

08003754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800375e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003762:	2b00      	cmp	r3, #0
 8003764:	db0b      	blt.n	800377e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	f003 021f 	and.w	r2, r3, #31
 800376c:	4907      	ldr	r1, [pc, #28]	; (800378c <__NVIC_EnableIRQ+0x38>)
 800376e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	2001      	movs	r0, #1
 8003776:	fa00 f202 	lsl.w	r2, r0, r2
 800377a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	e000e100 	.word	0xe000e100

08003790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	6039      	str	r1, [r7, #0]
 800379a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800379c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	db0a      	blt.n	80037ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	490c      	ldr	r1, [pc, #48]	; (80037dc <__NVIC_SetPriority+0x4c>)
 80037aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ae:	0112      	lsls	r2, r2, #4
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	440b      	add	r3, r1
 80037b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037b8:	e00a      	b.n	80037d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	4908      	ldr	r1, [pc, #32]	; (80037e0 <__NVIC_SetPriority+0x50>)
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	3b04      	subs	r3, #4
 80037c8:	0112      	lsls	r2, r2, #4
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	440b      	add	r3, r1
 80037ce:	761a      	strb	r2, [r3, #24]
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	e000e100 	.word	0xe000e100
 80037e0:	e000ed00 	.word	0xe000ed00

080037e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b089      	sub	sp, #36	; 0x24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f1c3 0307 	rsb	r3, r3, #7
 80037fe:	2b04      	cmp	r3, #4
 8003800:	bf28      	it	cs
 8003802:	2304      	movcs	r3, #4
 8003804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3304      	adds	r3, #4
 800380a:	2b06      	cmp	r3, #6
 800380c:	d902      	bls.n	8003814 <NVIC_EncodePriority+0x30>
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	3b03      	subs	r3, #3
 8003812:	e000      	b.n	8003816 <NVIC_EncodePriority+0x32>
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003818:	f04f 32ff 	mov.w	r2, #4294967295
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43da      	mvns	r2, r3
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	401a      	ands	r2, r3
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800382c:	f04f 31ff 	mov.w	r1, #4294967295
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	fa01 f303 	lsl.w	r3, r1, r3
 8003836:	43d9      	mvns	r1, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800383c:	4313      	orrs	r3, r2
         );
}
 800383e:	4618      	mov	r0, r3
 8003840:	3724      	adds	r7, #36	; 0x24
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
	...

0800384c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3b01      	subs	r3, #1
 8003858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800385c:	d301      	bcc.n	8003862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800385e:	2301      	movs	r3, #1
 8003860:	e00f      	b.n	8003882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003862:	4a0a      	ldr	r2, [pc, #40]	; (800388c <SysTick_Config+0x40>)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3b01      	subs	r3, #1
 8003868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800386a:	210f      	movs	r1, #15
 800386c:	f04f 30ff 	mov.w	r0, #4294967295
 8003870:	f7ff ff8e 	bl	8003790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <SysTick_Config+0x40>)
 8003876:	2200      	movs	r2, #0
 8003878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800387a:	4b04      	ldr	r3, [pc, #16]	; (800388c <SysTick_Config+0x40>)
 800387c:	2207      	movs	r2, #7
 800387e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	e000e010 	.word	0xe000e010

08003890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff ff29 	bl	80036f0 <__NVIC_SetPriorityGrouping>
}
 800389e:	bf00      	nop
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b086      	sub	sp, #24
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	4603      	mov	r3, r0
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038b8:	f7ff ff3e 	bl	8003738 <__NVIC_GetPriorityGrouping>
 80038bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	6978      	ldr	r0, [r7, #20]
 80038c4:	f7ff ff8e 	bl	80037e4 <NVIC_EncodePriority>
 80038c8:	4602      	mov	r2, r0
 80038ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ce:	4611      	mov	r1, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff ff5d 	bl	8003790 <__NVIC_SetPriority>
}
 80038d6:	bf00      	nop
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	4603      	mov	r3, r0
 80038e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff ff31 	bl	8003754 <__NVIC_EnableIRQ>
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7ff ffa2 	bl	800384c <SysTick_Config>
 8003908:	4603      	mov	r3, r0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e00e      	b.n	8003942 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	795b      	ldrb	r3, [r3, #5]
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d105      	bne.n	800393a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7fd fd95 	bl	8001464 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800394c:	b480      	push	{r7}
 800394e:	b089      	sub	sp, #36	; 0x24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800395a:	2300      	movs	r3, #0
 800395c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800395e:	2300      	movs	r3, #0
 8003960:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
 8003966:	e165      	b.n	8003c34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003968:	2201      	movs	r2, #1
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	4013      	ands	r3, r2
 800397a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	429a      	cmp	r2, r3
 8003982:	f040 8154 	bne.w	8003c2e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	2b01      	cmp	r3, #1
 8003990:	d005      	beq.n	800399e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800399a:	2b02      	cmp	r3, #2
 800399c:	d130      	bne.n	8003a00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	2203      	movs	r2, #3
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	4013      	ands	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039d4:	2201      	movs	r2, #1
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4013      	ands	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	091b      	lsrs	r3, r3, #4
 80039ea:	f003 0201 	and.w	r2, r3, #1
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f003 0303 	and.w	r3, r3, #3
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d017      	beq.n	8003a3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	2203      	movs	r2, #3
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4013      	ands	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f003 0303 	and.w	r3, r3, #3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d123      	bne.n	8003a90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	08da      	lsrs	r2, r3, #3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3208      	adds	r2, #8
 8003a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	220f      	movs	r2, #15
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	43db      	mvns	r3, r3
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	08da      	lsrs	r2, r3, #3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	3208      	adds	r2, #8
 8003a8a:	69b9      	ldr	r1, [r7, #24]
 8003a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 0203 	and.w	r2, r3, #3
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 80ae 	beq.w	8003c2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	4b5d      	ldr	r3, [pc, #372]	; (8003c4c <HAL_GPIO_Init+0x300>)
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ada:	4a5c      	ldr	r2, [pc, #368]	; (8003c4c <HAL_GPIO_Init+0x300>)
 8003adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ae2:	4b5a      	ldr	r3, [pc, #360]	; (8003c4c <HAL_GPIO_Init+0x300>)
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003aee:	4a58      	ldr	r2, [pc, #352]	; (8003c50 <HAL_GPIO_Init+0x304>)
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	089b      	lsrs	r3, r3, #2
 8003af4:	3302      	adds	r3, #2
 8003af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	220f      	movs	r2, #15
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a4f      	ldr	r2, [pc, #316]	; (8003c54 <HAL_GPIO_Init+0x308>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d025      	beq.n	8003b66 <HAL_GPIO_Init+0x21a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a4e      	ldr	r2, [pc, #312]	; (8003c58 <HAL_GPIO_Init+0x30c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d01f      	beq.n	8003b62 <HAL_GPIO_Init+0x216>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a4d      	ldr	r2, [pc, #308]	; (8003c5c <HAL_GPIO_Init+0x310>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d019      	beq.n	8003b5e <HAL_GPIO_Init+0x212>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a4c      	ldr	r2, [pc, #304]	; (8003c60 <HAL_GPIO_Init+0x314>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d013      	beq.n	8003b5a <HAL_GPIO_Init+0x20e>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a4b      	ldr	r2, [pc, #300]	; (8003c64 <HAL_GPIO_Init+0x318>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00d      	beq.n	8003b56 <HAL_GPIO_Init+0x20a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a4a      	ldr	r2, [pc, #296]	; (8003c68 <HAL_GPIO_Init+0x31c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d007      	beq.n	8003b52 <HAL_GPIO_Init+0x206>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a49      	ldr	r2, [pc, #292]	; (8003c6c <HAL_GPIO_Init+0x320>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d101      	bne.n	8003b4e <HAL_GPIO_Init+0x202>
 8003b4a:	2306      	movs	r3, #6
 8003b4c:	e00c      	b.n	8003b68 <HAL_GPIO_Init+0x21c>
 8003b4e:	2307      	movs	r3, #7
 8003b50:	e00a      	b.n	8003b68 <HAL_GPIO_Init+0x21c>
 8003b52:	2305      	movs	r3, #5
 8003b54:	e008      	b.n	8003b68 <HAL_GPIO_Init+0x21c>
 8003b56:	2304      	movs	r3, #4
 8003b58:	e006      	b.n	8003b68 <HAL_GPIO_Init+0x21c>
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e004      	b.n	8003b68 <HAL_GPIO_Init+0x21c>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e002      	b.n	8003b68 <HAL_GPIO_Init+0x21c>
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <HAL_GPIO_Init+0x21c>
 8003b66:	2300      	movs	r3, #0
 8003b68:	69fa      	ldr	r2, [r7, #28]
 8003b6a:	f002 0203 	and.w	r2, r2, #3
 8003b6e:	0092      	lsls	r2, r2, #2
 8003b70:	4093      	lsls	r3, r2
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b78:	4935      	ldr	r1, [pc, #212]	; (8003c50 <HAL_GPIO_Init+0x304>)
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	089b      	lsrs	r3, r3, #2
 8003b7e:	3302      	adds	r3, #2
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b86:	4b3a      	ldr	r3, [pc, #232]	; (8003c70 <HAL_GPIO_Init+0x324>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	4013      	ands	r3, r2
 8003b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003baa:	4a31      	ldr	r2, [pc, #196]	; (8003c70 <HAL_GPIO_Init+0x324>)
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bb0:	4b2f      	ldr	r3, [pc, #188]	; (8003c70 <HAL_GPIO_Init+0x324>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bd4:	4a26      	ldr	r2, [pc, #152]	; (8003c70 <HAL_GPIO_Init+0x324>)
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bda:	4b25      	ldr	r3, [pc, #148]	; (8003c70 <HAL_GPIO_Init+0x324>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	43db      	mvns	r3, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4013      	ands	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bfe:	4a1c      	ldr	r2, [pc, #112]	; (8003c70 <HAL_GPIO_Init+0x324>)
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c04:	4b1a      	ldr	r3, [pc, #104]	; (8003c70 <HAL_GPIO_Init+0x324>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4013      	ands	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c28:	4a11      	ldr	r2, [pc, #68]	; (8003c70 <HAL_GPIO_Init+0x324>)
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	3301      	adds	r3, #1
 8003c32:	61fb      	str	r3, [r7, #28]
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	2b0f      	cmp	r3, #15
 8003c38:	f67f ae96 	bls.w	8003968 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c3c:	bf00      	nop
 8003c3e:	bf00      	nop
 8003c40:	3724      	adds	r7, #36	; 0x24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	40013800 	.word	0x40013800
 8003c54:	40020000 	.word	0x40020000
 8003c58:	40020400 	.word	0x40020400
 8003c5c:	40020800 	.word	0x40020800
 8003c60:	40020c00 	.word	0x40020c00
 8003c64:	40021000 	.word	0x40021000
 8003c68:	40021400 	.word	0x40021400
 8003c6c:	40021800 	.word	0x40021800
 8003c70:	40013c00 	.word	0x40013c00

08003c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	807b      	strh	r3, [r7, #2]
 8003c80:	4613      	mov	r3, r2
 8003c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c84:	787b      	ldrb	r3, [r7, #1]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c8a:	887a      	ldrh	r2, [r7, #2]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c90:	e003      	b.n	8003c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c92:	887b      	ldrh	r3, [r7, #2]
 8003c94:	041a      	lsls	r2, r3, #16
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	619a      	str	r2, [r3, #24]
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
	...

08003ca8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003cb2:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cb4:	695a      	ldr	r2, [r3, #20]
 8003cb6:	88fb      	ldrh	r3, [r7, #6]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d006      	beq.n	8003ccc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cbe:	4a05      	ldr	r2, [pc, #20]	; (8003cd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cc0:	88fb      	ldrh	r3, [r7, #6]
 8003cc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cc4:	88fb      	ldrh	r3, [r7, #6]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 f806 	bl	8003cd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ccc:	bf00      	nop
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40013c00 	.word	0x40013c00

08003cd8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
	...

08003cf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e12b      	b.n	8003f5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d106      	bne.n	8003d1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7fd fbc6 	bl	80014a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2224      	movs	r2, #36	; 0x24
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0201 	bic.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d54:	f000 fa02 	bl	800415c <HAL_RCC_GetPCLK1Freq>
 8003d58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	4a81      	ldr	r2, [pc, #516]	; (8003f64 <HAL_I2C_Init+0x274>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d807      	bhi.n	8003d74 <HAL_I2C_Init+0x84>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4a80      	ldr	r2, [pc, #512]	; (8003f68 <HAL_I2C_Init+0x278>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	bf94      	ite	ls
 8003d6c:	2301      	movls	r3, #1
 8003d6e:	2300      	movhi	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	e006      	b.n	8003d82 <HAL_I2C_Init+0x92>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4a7d      	ldr	r2, [pc, #500]	; (8003f6c <HAL_I2C_Init+0x27c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	bf94      	ite	ls
 8003d7c:	2301      	movls	r3, #1
 8003d7e:	2300      	movhi	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e0e7      	b.n	8003f5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4a78      	ldr	r2, [pc, #480]	; (8003f70 <HAL_I2C_Init+0x280>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	0c9b      	lsrs	r3, r3, #18
 8003d94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	4a6a      	ldr	r2, [pc, #424]	; (8003f64 <HAL_I2C_Init+0x274>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d802      	bhi.n	8003dc4 <HAL_I2C_Init+0xd4>
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	e009      	b.n	8003dd8 <HAL_I2C_Init+0xe8>
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003dca:	fb02 f303 	mul.w	r3, r2, r3
 8003dce:	4a69      	ldr	r2, [pc, #420]	; (8003f74 <HAL_I2C_Init+0x284>)
 8003dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd4:	099b      	lsrs	r3, r3, #6
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6812      	ldr	r2, [r2, #0]
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003dea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	495c      	ldr	r1, [pc, #368]	; (8003f64 <HAL_I2C_Init+0x274>)
 8003df4:	428b      	cmp	r3, r1
 8003df6:	d819      	bhi.n	8003e2c <HAL_I2C_Init+0x13c>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	1e59      	subs	r1, r3, #1
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e06:	1c59      	adds	r1, r3, #1
 8003e08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e0c:	400b      	ands	r3, r1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <HAL_I2C_Init+0x138>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	1e59      	subs	r1, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e20:	3301      	adds	r3, #1
 8003e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e26:	e051      	b.n	8003ecc <HAL_I2C_Init+0x1dc>
 8003e28:	2304      	movs	r3, #4
 8003e2a:	e04f      	b.n	8003ecc <HAL_I2C_Init+0x1dc>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d111      	bne.n	8003e58 <HAL_I2C_Init+0x168>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	1e58      	subs	r0, r3, #1
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6859      	ldr	r1, [r3, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	440b      	add	r3, r1
 8003e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e46:	3301      	adds	r3, #1
 8003e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	bf0c      	ite	eq
 8003e50:	2301      	moveq	r3, #1
 8003e52:	2300      	movne	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	e012      	b.n	8003e7e <HAL_I2C_Init+0x18e>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	1e58      	subs	r0, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6859      	ldr	r1, [r3, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	0099      	lsls	r1, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e6e:	3301      	adds	r3, #1
 8003e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	bf0c      	ite	eq
 8003e78:	2301      	moveq	r3, #1
 8003e7a:	2300      	movne	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <HAL_I2C_Init+0x196>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e022      	b.n	8003ecc <HAL_I2C_Init+0x1dc>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10e      	bne.n	8003eac <HAL_I2C_Init+0x1bc>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	1e58      	subs	r0, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6859      	ldr	r1, [r3, #4]
 8003e96:	460b      	mov	r3, r1
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	440b      	add	r3, r1
 8003e9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eaa:	e00f      	b.n	8003ecc <HAL_I2C_Init+0x1dc>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	1e58      	subs	r0, r3, #1
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6859      	ldr	r1, [r3, #4]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	0099      	lsls	r1, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	6809      	ldr	r1, [r1, #0]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69da      	ldr	r2, [r3, #28]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003efa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6911      	ldr	r1, [r2, #16]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	68d2      	ldr	r2, [r2, #12]
 8003f06:	4311      	orrs	r1, r2
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6812      	ldr	r2, [r2, #0]
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695a      	ldr	r2, [r3, #20]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0201 	orr.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	000186a0 	.word	0x000186a0
 8003f68:	001e847f 	.word	0x001e847f
 8003f6c:	003d08ff 	.word	0x003d08ff
 8003f70:	431bde83 	.word	0x431bde83
 8003f74:	10624dd3 	.word	0x10624dd3

08003f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0cc      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f8c:	4b68      	ldr	r3, [pc, #416]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 030f 	and.w	r3, r3, #15
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d90c      	bls.n	8003fb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9a:	4b65      	ldr	r3, [pc, #404]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa2:	4b63      	ldr	r3, [pc, #396]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d001      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e0b8      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d020      	beq.n	8004002 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fcc:	4b59      	ldr	r3, [pc, #356]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	4a58      	ldr	r2, [pc, #352]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fe4:	4b53      	ldr	r3, [pc, #332]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	4a52      	ldr	r2, [pc, #328]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff0:	4b50      	ldr	r3, [pc, #320]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	494d      	ldr	r1, [pc, #308]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d044      	beq.n	8004098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d107      	bne.n	8004026 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004016:	4b47      	ldr	r3, [pc, #284]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d119      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e07f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d003      	beq.n	8004036 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004032:	2b03      	cmp	r3, #3
 8004034:	d107      	bne.n	8004046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004036:	4b3f      	ldr	r3, [pc, #252]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e06f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004046:	4b3b      	ldr	r3, [pc, #236]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e067      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004056:	4b37      	ldr	r3, [pc, #220]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f023 0203 	bic.w	r2, r3, #3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4934      	ldr	r1, [pc, #208]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	4313      	orrs	r3, r2
 8004066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004068:	f7fe fb38 	bl	80026dc <HAL_GetTick>
 800406c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406e:	e00a      	b.n	8004086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004070:	f7fe fb34 	bl	80026dc <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	; 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e04f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004086:	4b2b      	ldr	r3, [pc, #172]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 020c 	and.w	r2, r3, #12
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	429a      	cmp	r2, r3
 8004096:	d1eb      	bne.n	8004070 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004098:	4b25      	ldr	r3, [pc, #148]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d20c      	bcs.n	80040c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b22      	ldr	r3, [pc, #136]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ae:	4b20      	ldr	r3, [pc, #128]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e032      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040cc:	4b19      	ldr	r3, [pc, #100]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4916      	ldr	r1, [pc, #88]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d009      	beq.n	80040fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ea:	4b12      	ldr	r3, [pc, #72]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	490e      	ldr	r1, [pc, #56]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040fe:	f000 fb7f 	bl	8004800 <HAL_RCC_GetSysClockFreq>
 8004102:	4602      	mov	r2, r0
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	091b      	lsrs	r3, r3, #4
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	490a      	ldr	r1, [pc, #40]	; (8004138 <HAL_RCC_ClockConfig+0x1c0>)
 8004110:	5ccb      	ldrb	r3, [r1, r3]
 8004112:	fa22 f303 	lsr.w	r3, r2, r3
 8004116:	4a09      	ldr	r2, [pc, #36]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8004118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800411a:	4b09      	ldr	r3, [pc, #36]	; (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f7fe fa98 	bl	8002654 <HAL_InitTick>

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40023c00 	.word	0x40023c00
 8004134:	40023800 	.word	0x40023800
 8004138:	0800bba0 	.word	0x0800bba0
 800413c:	20000000 	.word	0x20000000
 8004140:	20000004 	.word	0x20000004

08004144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004148:	4b03      	ldr	r3, [pc, #12]	; (8004158 <HAL_RCC_GetHCLKFreq+0x14>)
 800414a:	681b      	ldr	r3, [r3, #0]
}
 800414c:	4618      	mov	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	20000000 	.word	0x20000000

0800415c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004160:	f7ff fff0 	bl	8004144 <HAL_RCC_GetHCLKFreq>
 8004164:	4602      	mov	r2, r0
 8004166:	4b05      	ldr	r3, [pc, #20]	; (800417c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	0a9b      	lsrs	r3, r3, #10
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	4903      	ldr	r1, [pc, #12]	; (8004180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004172:	5ccb      	ldrb	r3, [r1, r3]
 8004174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004178:	4618      	mov	r0, r3
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40023800 	.word	0x40023800
 8004180:	0800bbb0 	.word	0x0800bbb0

08004184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004188:	f7ff ffdc 	bl	8004144 <HAL_RCC_GetHCLKFreq>
 800418c:	4602      	mov	r2, r0
 800418e:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	0b5b      	lsrs	r3, r3, #13
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	4903      	ldr	r1, [pc, #12]	; (80041a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800419a:	5ccb      	ldrb	r3, [r1, r3]
 800419c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40023800 	.word	0x40023800
 80041a8:	0800bbb0 	.word	0x0800bbb0

080041ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08c      	sub	sp, #48	; 0x30
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d010      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80041e4:	4b6f      	ldr	r3, [pc, #444]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80041e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041ea:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	496c      	ldr	r1, [pc, #432]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004202:	2301      	movs	r3, #1
 8004204:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d010      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004212:	4b64      	ldr	r3, [pc, #400]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004218:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004220:	4960      	ldr	r1, [pc, #384]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004230:	2301      	movs	r3, #1
 8004232:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	d017      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004240:	4b58      	ldr	r3, [pc, #352]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004246:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424e:	4955      	ldr	r1, [pc, #340]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800425e:	d101      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004260:	2301      	movs	r3, #1
 8004262:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800426c:	2301      	movs	r3, #1
 800426e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0308 	and.w	r3, r3, #8
 8004278:	2b00      	cmp	r3, #0
 800427a:	d017      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800427c:	4b49      	ldr	r3, [pc, #292]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800427e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004282:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428a:	4946      	ldr	r1, [pc, #280]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800429a:	d101      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800429c:	2301      	movs	r3, #1
 800429e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80042a8:	2301      	movs	r3, #1
 80042aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 808a 	beq.w	80043ce <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042ba:	2300      	movs	r3, #0
 80042bc:	60bb      	str	r3, [r7, #8]
 80042be:	4b39      	ldr	r3, [pc, #228]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	4a38      	ldr	r2, [pc, #224]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c8:	6413      	str	r3, [r2, #64]	; 0x40
 80042ca:	4b36      	ldr	r3, [pc, #216]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80042d6:	4b34      	ldr	r3, [pc, #208]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a33      	ldr	r2, [pc, #204]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80042dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042e2:	f7fe f9fb 	bl	80026dc <HAL_GetTick>
 80042e6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042e8:	e008      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80042ea:	f7fe f9f7 	bl	80026dc <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e278      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042fc:	4b2a      	ldr	r3, [pc, #168]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004308:	4b26      	ldr	r3, [pc, #152]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800430a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004310:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d02f      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004320:	6a3a      	ldr	r2, [r7, #32]
 8004322:	429a      	cmp	r2, r3
 8004324:	d028      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004326:	4b1f      	ldr	r3, [pc, #124]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004330:	4b1e      	ldr	r3, [pc, #120]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004332:	2201      	movs	r2, #1
 8004334:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004336:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800433c:	4a19      	ldr	r2, [pc, #100]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004342:	4b18      	ldr	r3, [pc, #96]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b01      	cmp	r3, #1
 800434c:	d114      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800434e:	f7fe f9c5 	bl	80026dc <HAL_GetTick>
 8004352:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004354:	e00a      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004356:	f7fe f9c1 	bl	80026dc <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	f241 3288 	movw	r2, #5000	; 0x1388
 8004364:	4293      	cmp	r3, r2
 8004366:	d901      	bls.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e240      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436c:	4b0d      	ldr	r3, [pc, #52]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800436e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0ee      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004380:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004384:	d114      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004386:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800439a:	4902      	ldr	r1, [pc, #8]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800439c:	4313      	orrs	r3, r2
 800439e:	608b      	str	r3, [r1, #8]
 80043a0:	e00c      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80043a2:	bf00      	nop
 80043a4:	40023800 	.word	0x40023800
 80043a8:	40007000 	.word	0x40007000
 80043ac:	42470e40 	.word	0x42470e40
 80043b0:	4b4a      	ldr	r3, [pc, #296]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	4a49      	ldr	r2, [pc, #292]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80043ba:	6093      	str	r3, [r2, #8]
 80043bc:	4b47      	ldr	r3, [pc, #284]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c8:	4944      	ldr	r1, [pc, #272]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0310 	and.w	r3, r3, #16
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d004      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80043e0:	4b3f      	ldr	r3, [pc, #252]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80043e2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80043f0:	4b3a      	ldr	r3, [pc, #232]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fe:	4937      	ldr	r1, [pc, #220]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004400:	4313      	orrs	r3, r2
 8004402:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004412:	4b32      	ldr	r3, [pc, #200]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004418:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004420:	492e      	ldr	r1, [pc, #184]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004430:	2b00      	cmp	r3, #0
 8004432:	d011      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004434:	4b29      	ldr	r3, [pc, #164]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800443a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004442:	4926      	ldr	r1, [pc, #152]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004444:	4313      	orrs	r3, r2
 8004446:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004452:	d101      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004454:	2301      	movs	r3, #1
 8004456:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004464:	4b1d      	ldr	r3, [pc, #116]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800446a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004472:	491a      	ldr	r1, [pc, #104]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004482:	2b00      	cmp	r3, #0
 8004484:	d011      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004486:	4b15      	ldr	r3, [pc, #84]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800448c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004494:	4911      	ldr	r1, [pc, #68]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044a4:	d101      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80044a6:	2301      	movs	r3, #1
 80044a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80044aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d005      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044b8:	f040 80ff 	bne.w	80046ba <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044bc:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044c2:	f7fe f90b 	bl	80026dc <HAL_GetTick>
 80044c6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044c8:	e00e      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044ca:	f7fe f907 	bl	80026dc <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d907      	bls.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e188      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x642>
 80044dc:	40023800 	.word	0x40023800
 80044e0:	424711e0 	.word	0x424711e0
 80044e4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044e8:	4b7e      	ldr	r3, [pc, #504]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1ea      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004504:	2b00      	cmp	r3, #0
 8004506:	d009      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004510:	2b00      	cmp	r3, #0
 8004512:	d028      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004518:	2b00      	cmp	r3, #0
 800451a:	d124      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800451c:	4b71      	ldr	r3, [pc, #452]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800451e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004522:	0c1b      	lsrs	r3, r3, #16
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	3301      	adds	r3, #1
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800452e:	4b6d      	ldr	r3, [pc, #436]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004534:	0e1b      	lsrs	r3, r3, #24
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	019b      	lsls	r3, r3, #6
 8004546:	431a      	orrs	r2, r3
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	085b      	lsrs	r3, r3, #1
 800454c:	3b01      	subs	r3, #1
 800454e:	041b      	lsls	r3, r3, #16
 8004550:	431a      	orrs	r2, r3
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	061b      	lsls	r3, r3, #24
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	071b      	lsls	r3, r3, #28
 800455e:	4961      	ldr	r1, [pc, #388]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	2b00      	cmp	r3, #0
 8004570:	d004      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800457a:	d00a      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004584:	2b00      	cmp	r3, #0
 8004586:	d035      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004590:	d130      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004592:	4b54      	ldr	r3, [pc, #336]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004598:	0c1b      	lsrs	r3, r3, #16
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	3301      	adds	r3, #1
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045a4:	4b4f      	ldr	r3, [pc, #316]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045aa:	0f1b      	lsrs	r3, r3, #28
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	019b      	lsls	r3, r3, #6
 80045bc:	431a      	orrs	r2, r3
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	085b      	lsrs	r3, r3, #1
 80045c2:	3b01      	subs	r3, #1
 80045c4:	041b      	lsls	r3, r3, #16
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	061b      	lsls	r3, r3, #24
 80045ce:	431a      	orrs	r2, r3
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	071b      	lsls	r3, r3, #28
 80045d4:	4943      	ldr	r1, [pc, #268]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80045dc:	4b41      	ldr	r3, [pc, #260]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e2:	f023 021f 	bic.w	r2, r3, #31
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ea:	3b01      	subs	r3, #1
 80045ec:	493d      	ldr	r1, [pc, #244]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d029      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004604:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004608:	d124      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800460a:	4b36      	ldr	r3, [pc, #216]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800460c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004610:	0c1b      	lsrs	r3, r3, #16
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	3301      	adds	r3, #1
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800461c:	4b31      	ldr	r3, [pc, #196]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800461e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004622:	0f1b      	lsrs	r3, r3, #28
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	019b      	lsls	r3, r3, #6
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	085b      	lsrs	r3, r3, #1
 800463c:	3b01      	subs	r3, #1
 800463e:	041b      	lsls	r3, r3, #16
 8004640:	431a      	orrs	r2, r3
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	061b      	lsls	r3, r3, #24
 8004646:	431a      	orrs	r2, r3
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	071b      	lsls	r3, r3, #28
 800464c:	4925      	ldr	r1, [pc, #148]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800465c:	2b00      	cmp	r3, #0
 800465e:	d016      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	019b      	lsls	r3, r3, #6
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	085b      	lsrs	r3, r3, #1
 8004672:	3b01      	subs	r3, #1
 8004674:	041b      	lsls	r3, r3, #16
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	061b      	lsls	r3, r3, #24
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	071b      	lsls	r3, r3, #28
 8004686:	4917      	ldr	r1, [pc, #92]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800468e:	4b16      	ldr	r3, [pc, #88]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004690:	2201      	movs	r2, #1
 8004692:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004694:	f7fe f822 	bl	80026dc <HAL_GetTick>
 8004698:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800469a:	e008      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800469c:	f7fe f81e 	bl	80026dc <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e09f      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046ae:	4b0d      	ldr	r3, [pc, #52]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0f0      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80046ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046bc:	2b01      	cmp	r3, #1
 80046be:	f040 8095 	bne.w	80047ec <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80046c2:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046c8:	f7fe f808 	bl	80026dc <HAL_GetTick>
 80046cc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046ce:	e00f      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80046d0:	f7fe f804 	bl	80026dc <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d908      	bls.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e085      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x642>
 80046e2:	bf00      	nop
 80046e4:	40023800 	.word	0x40023800
 80046e8:	42470068 	.word	0x42470068
 80046ec:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046f0:	4b41      	ldr	r3, [pc, #260]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046fc:	d0e8      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0304 	and.w	r3, r3, #4
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470e:	2b00      	cmp	r3, #0
 8004710:	d009      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800471a:	2b00      	cmp	r3, #0
 800471c:	d02b      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004722:	2b00      	cmp	r3, #0
 8004724:	d127      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004726:	4b34      	ldr	r3, [pc, #208]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472c:	0c1b      	lsrs	r3, r3, #16
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	3301      	adds	r3, #1
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699a      	ldr	r2, [r3, #24]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	019b      	lsls	r3, r3, #6
 8004742:	431a      	orrs	r2, r3
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	085b      	lsrs	r3, r3, #1
 8004748:	3b01      	subs	r3, #1
 800474a:	041b      	lsls	r3, r3, #16
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	061b      	lsls	r3, r3, #24
 8004754:	4928      	ldr	r1, [pc, #160]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800475c:	4b26      	ldr	r3, [pc, #152]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800475e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004762:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	3b01      	subs	r3, #1
 800476c:	021b      	lsls	r3, r3, #8
 800476e:	4922      	ldr	r1, [pc, #136]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004770:	4313      	orrs	r3, r2
 8004772:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477e:	2b00      	cmp	r3, #0
 8004780:	d01d      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800478a:	d118      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800478c:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004792:	0e1b      	lsrs	r3, r3, #24
 8004794:	f003 030f 	and.w	r3, r3, #15
 8004798:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699a      	ldr	r2, [r3, #24]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	019b      	lsls	r3, r3, #6
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	085b      	lsrs	r3, r3, #1
 80047ac:	3b01      	subs	r3, #1
 80047ae:	041b      	lsls	r3, r3, #16
 80047b0:	431a      	orrs	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	061b      	lsls	r3, r3, #24
 80047b6:	4910      	ldr	r1, [pc, #64]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80047be:	4b0f      	ldr	r3, [pc, #60]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80047c0:	2201      	movs	r2, #1
 80047c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047c4:	f7fd ff8a 	bl	80026dc <HAL_GetTick>
 80047c8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047ca:	e008      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80047cc:	f7fd ff86 	bl	80026dc <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e007      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047ea:	d1ef      	bne.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3730      	adds	r7, #48	; 0x30
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	40023800 	.word	0x40023800
 80047fc:	42470070 	.word	0x42470070

08004800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004804:	b0a6      	sub	sp, #152	; 0x98
 8004806:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8004814:	2300      	movs	r3, #0
 8004816:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004826:	4bc8      	ldr	r3, [pc, #800]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x348>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 030c 	and.w	r3, r3, #12
 800482e:	2b0c      	cmp	r3, #12
 8004830:	f200 817e 	bhi.w	8004b30 <HAL_RCC_GetSysClockFreq+0x330>
 8004834:	a201      	add	r2, pc, #4	; (adr r2, 800483c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483a:	bf00      	nop
 800483c:	08004871 	.word	0x08004871
 8004840:	08004b31 	.word	0x08004b31
 8004844:	08004b31 	.word	0x08004b31
 8004848:	08004b31 	.word	0x08004b31
 800484c:	08004879 	.word	0x08004879
 8004850:	08004b31 	.word	0x08004b31
 8004854:	08004b31 	.word	0x08004b31
 8004858:	08004b31 	.word	0x08004b31
 800485c:	08004881 	.word	0x08004881
 8004860:	08004b31 	.word	0x08004b31
 8004864:	08004b31 	.word	0x08004b31
 8004868:	08004b31 	.word	0x08004b31
 800486c:	080049eb 	.word	0x080049eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004870:	4bb6      	ldr	r3, [pc, #728]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x34c>)
 8004872:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8004876:	e15f      	b.n	8004b38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004878:	4bb5      	ldr	r3, [pc, #724]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x350>)
 800487a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800487e:	e15b      	b.n	8004b38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004880:	4bb1      	ldr	r3, [pc, #708]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x348>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004888:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800488c:	4bae      	ldr	r3, [pc, #696]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x348>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d031      	beq.n	80048fc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004898:	4bab      	ldr	r3, [pc, #684]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x348>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	099b      	lsrs	r3, r3, #6
 800489e:	2200      	movs	r2, #0
 80048a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80048a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048aa:	663b      	str	r3, [r7, #96]	; 0x60
 80048ac:	2300      	movs	r3, #0
 80048ae:	667b      	str	r3, [r7, #100]	; 0x64
 80048b0:	4ba7      	ldr	r3, [pc, #668]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x350>)
 80048b2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80048b6:	462a      	mov	r2, r5
 80048b8:	fb03 f202 	mul.w	r2, r3, r2
 80048bc:	2300      	movs	r3, #0
 80048be:	4621      	mov	r1, r4
 80048c0:	fb01 f303 	mul.w	r3, r1, r3
 80048c4:	4413      	add	r3, r2
 80048c6:	4aa2      	ldr	r2, [pc, #648]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x350>)
 80048c8:	4621      	mov	r1, r4
 80048ca:	fba1 1202 	umull	r1, r2, r1, r2
 80048ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80048d0:	460a      	mov	r2, r1
 80048d2:	67ba      	str	r2, [r7, #120]	; 0x78
 80048d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80048d6:	4413      	add	r3, r2
 80048d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048de:	2200      	movs	r2, #0
 80048e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80048e2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80048e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048e8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80048ec:	f7fb fce0 	bl	80002b0 <__aeabi_uldivmod>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4613      	mov	r3, r2
 80048f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80048fa:	e064      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048fc:	4b92      	ldr	r3, [pc, #584]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x348>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	099b      	lsrs	r3, r3, #6
 8004902:	2200      	movs	r2, #0
 8004904:	653b      	str	r3, [r7, #80]	; 0x50
 8004906:	657a      	str	r2, [r7, #84]	; 0x54
 8004908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800490a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004910:	2300      	movs	r3, #0
 8004912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004914:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004918:	4622      	mov	r2, r4
 800491a:	462b      	mov	r3, r5
 800491c:	f04f 0000 	mov.w	r0, #0
 8004920:	f04f 0100 	mov.w	r1, #0
 8004924:	0159      	lsls	r1, r3, #5
 8004926:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800492a:	0150      	lsls	r0, r2, #5
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	4621      	mov	r1, r4
 8004932:	1a51      	subs	r1, r2, r1
 8004934:	6139      	str	r1, [r7, #16]
 8004936:	4629      	mov	r1, r5
 8004938:	eb63 0301 	sbc.w	r3, r3, r1
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800494a:	4659      	mov	r1, fp
 800494c:	018b      	lsls	r3, r1, #6
 800494e:	4651      	mov	r1, sl
 8004950:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004954:	4651      	mov	r1, sl
 8004956:	018a      	lsls	r2, r1, #6
 8004958:	4651      	mov	r1, sl
 800495a:	ebb2 0801 	subs.w	r8, r2, r1
 800495e:	4659      	mov	r1, fp
 8004960:	eb63 0901 	sbc.w	r9, r3, r1
 8004964:	f04f 0200 	mov.w	r2, #0
 8004968:	f04f 0300 	mov.w	r3, #0
 800496c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004970:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004974:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004978:	4690      	mov	r8, r2
 800497a:	4699      	mov	r9, r3
 800497c:	4623      	mov	r3, r4
 800497e:	eb18 0303 	adds.w	r3, r8, r3
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	462b      	mov	r3, r5
 8004986:	eb49 0303 	adc.w	r3, r9, r3
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004998:	4629      	mov	r1, r5
 800499a:	028b      	lsls	r3, r1, #10
 800499c:	4621      	mov	r1, r4
 800499e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049a2:	4621      	mov	r1, r4
 80049a4:	028a      	lsls	r2, r1, #10
 80049a6:	4610      	mov	r0, r2
 80049a8:	4619      	mov	r1, r3
 80049aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049ae:	2200      	movs	r2, #0
 80049b0:	643b      	str	r3, [r7, #64]	; 0x40
 80049b2:	647a      	str	r2, [r7, #68]	; 0x44
 80049b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049b8:	f7fb fc7a 	bl	80002b0 <__aeabi_uldivmod>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	4613      	mov	r3, r2
 80049c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049c6:	4b60      	ldr	r3, [pc, #384]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x348>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	0c1b      	lsrs	r3, r3, #16
 80049cc:	f003 0303 	and.w	r3, r3, #3
 80049d0:	3301      	adds	r3, #1
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80049d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80049e8:	e0a6      	b.n	8004b38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049ea:	4b57      	ldr	r3, [pc, #348]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x348>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049f6:	4b54      	ldr	r3, [pc, #336]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x348>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d02a      	beq.n	8004a58 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a02:	4b51      	ldr	r3, [pc, #324]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	099b      	lsrs	r3, r3, #6
 8004a08:	2200      	movs	r2, #0
 8004a0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a14:	2100      	movs	r1, #0
 8004a16:	4b4e      	ldr	r3, [pc, #312]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x350>)
 8004a18:	fb03 f201 	mul.w	r2, r3, r1
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	fb00 f303 	mul.w	r3, r0, r3
 8004a22:	4413      	add	r3, r2
 8004a24:	4a4a      	ldr	r2, [pc, #296]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x350>)
 8004a26:	fba0 1202 	umull	r1, r2, r0, r2
 8004a2a:	677a      	str	r2, [r7, #116]	; 0x74
 8004a2c:	460a      	mov	r2, r1
 8004a2e:	673a      	str	r2, [r7, #112]	; 0x70
 8004a30:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004a32:	4413      	add	r3, r2
 8004a34:	677b      	str	r3, [r7, #116]	; 0x74
 8004a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a3e:	637a      	str	r2, [r7, #52]	; 0x34
 8004a40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a44:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004a48:	f7fb fc32 	bl	80002b0 <__aeabi_uldivmod>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4613      	mov	r3, r2
 8004a52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a56:	e05b      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a58:	4b3b      	ldr	r3, [pc, #236]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	099b      	lsrs	r3, r3, #6
 8004a5e:	2200      	movs	r2, #0
 8004a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6a:	623b      	str	r3, [r7, #32]
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a74:	4642      	mov	r2, r8
 8004a76:	464b      	mov	r3, r9
 8004a78:	f04f 0000 	mov.w	r0, #0
 8004a7c:	f04f 0100 	mov.w	r1, #0
 8004a80:	0159      	lsls	r1, r3, #5
 8004a82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a86:	0150      	lsls	r0, r2, #5
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4641      	mov	r1, r8
 8004a8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a92:	4649      	mov	r1, r9
 8004a94:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004aa4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004aa8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004aac:	ebb2 040a 	subs.w	r4, r2, sl
 8004ab0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	00eb      	lsls	r3, r5, #3
 8004abe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ac2:	00e2      	lsls	r2, r4, #3
 8004ac4:	4614      	mov	r4, r2
 8004ac6:	461d      	mov	r5, r3
 8004ac8:	4643      	mov	r3, r8
 8004aca:	18e3      	adds	r3, r4, r3
 8004acc:	603b      	str	r3, [r7, #0]
 8004ace:	464b      	mov	r3, r9
 8004ad0:	eb45 0303 	adc.w	r3, r5, r3
 8004ad4:	607b      	str	r3, [r7, #4]
 8004ad6:	f04f 0200 	mov.w	r2, #0
 8004ada:	f04f 0300 	mov.w	r3, #0
 8004ade:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ae2:	4629      	mov	r1, r5
 8004ae4:	028b      	lsls	r3, r1, #10
 8004ae6:	4621      	mov	r1, r4
 8004ae8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004aec:	4621      	mov	r1, r4
 8004aee:	028a      	lsls	r2, r1, #10
 8004af0:	4610      	mov	r0, r2
 8004af2:	4619      	mov	r1, r3
 8004af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004af8:	2200      	movs	r2, #0
 8004afa:	61bb      	str	r3, [r7, #24]
 8004afc:	61fa      	str	r2, [r7, #28]
 8004afe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b02:	f7fb fbd5 	bl	80002b0 <__aeabi_uldivmod>
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b10:	4b0d      	ldr	r3, [pc, #52]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	0f1b      	lsrs	r3, r3, #28
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8004b1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004b2e:	e003      	b.n	8004b38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b30:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x34c>)
 8004b32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004b36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3798      	adds	r7, #152	; 0x98
 8004b40:	46bd      	mov	sp, r7
 8004b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b46:	bf00      	nop
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	00f42400 	.word	0x00f42400
 8004b50:	017d7840 	.word	0x017d7840

08004b54 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e28d      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 8083 	beq.w	8004c7a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b74:	4b94      	ldr	r3, [pc, #592]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 030c 	and.w	r3, r3, #12
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d019      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b80:	4b91      	ldr	r3, [pc, #580]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d106      	bne.n	8004b9a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b8c:	4b8e      	ldr	r3, [pc, #568]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b98:	d00c      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b9a:	4b8b      	ldr	r3, [pc, #556]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ba2:	2b0c      	cmp	r3, #12
 8004ba4:	d112      	bne.n	8004bcc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ba6:	4b88      	ldr	r3, [pc, #544]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bb2:	d10b      	bne.n	8004bcc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb4:	4b84      	ldr	r3, [pc, #528]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d05b      	beq.n	8004c78 <HAL_RCC_OscConfig+0x124>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d157      	bne.n	8004c78 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e25a      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd4:	d106      	bne.n	8004be4 <HAL_RCC_OscConfig+0x90>
 8004bd6:	4b7c      	ldr	r3, [pc, #496]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a7b      	ldr	r2, [pc, #492]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	e01d      	b.n	8004c20 <HAL_RCC_OscConfig+0xcc>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bec:	d10c      	bne.n	8004c08 <HAL_RCC_OscConfig+0xb4>
 8004bee:	4b76      	ldr	r3, [pc, #472]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a75      	ldr	r2, [pc, #468]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	4b73      	ldr	r3, [pc, #460]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a72      	ldr	r2, [pc, #456]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	e00b      	b.n	8004c20 <HAL_RCC_OscConfig+0xcc>
 8004c08:	4b6f      	ldr	r3, [pc, #444]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a6e      	ldr	r2, [pc, #440]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	4b6c      	ldr	r3, [pc, #432]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a6b      	ldr	r2, [pc, #428]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d013      	beq.n	8004c50 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c28:	f7fd fd58 	bl	80026dc <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c30:	f7fd fd54 	bl	80026dc <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b64      	cmp	r3, #100	; 0x64
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e21f      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c42:	4b61      	ldr	r3, [pc, #388]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0f0      	beq.n	8004c30 <HAL_RCC_OscConfig+0xdc>
 8004c4e:	e014      	b.n	8004c7a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c50:	f7fd fd44 	bl	80026dc <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c58:	f7fd fd40 	bl	80026dc <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b64      	cmp	r3, #100	; 0x64
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e20b      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c6a:	4b57      	ldr	r3, [pc, #348]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f0      	bne.n	8004c58 <HAL_RCC_OscConfig+0x104>
 8004c76:	e000      	b.n	8004c7a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d06f      	beq.n	8004d66 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c86:	4b50      	ldr	r3, [pc, #320]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 030c 	and.w	r3, r3, #12
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d017      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c92:	4b4d      	ldr	r3, [pc, #308]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d105      	bne.n	8004caa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c9e:	4b4a      	ldr	r3, [pc, #296]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00b      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004caa:	4b47      	ldr	r3, [pc, #284]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cb2:	2b0c      	cmp	r3, #12
 8004cb4:	d11c      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cb6:	4b44      	ldr	r3, [pc, #272]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d116      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cc2:	4b41      	ldr	r3, [pc, #260]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d005      	beq.n	8004cda <HAL_RCC_OscConfig+0x186>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d001      	beq.n	8004cda <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e1d3      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cda:	4b3b      	ldr	r3, [pc, #236]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	4937      	ldr	r1, [pc, #220]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cee:	e03a      	b.n	8004d66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d020      	beq.n	8004d3a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cf8:	4b34      	ldr	r3, [pc, #208]	; (8004dcc <HAL_RCC_OscConfig+0x278>)
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfe:	f7fd fced 	bl	80026dc <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d06:	f7fd fce9 	bl	80026dc <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e1b4      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d18:	4b2b      	ldr	r3, [pc, #172]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f0      	beq.n	8004d06 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d24:	4b28      	ldr	r3, [pc, #160]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	4925      	ldr	r1, [pc, #148]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	600b      	str	r3, [r1, #0]
 8004d38:	e015      	b.n	8004d66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d3a:	4b24      	ldr	r3, [pc, #144]	; (8004dcc <HAL_RCC_OscConfig+0x278>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fd fccc 	bl	80026dc <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d48:	f7fd fcc8 	bl	80026dc <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e193      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d5a:	4b1b      	ldr	r3, [pc, #108]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f0      	bne.n	8004d48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d036      	beq.n	8004de0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d016      	beq.n	8004da8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d7a:	4b15      	ldr	r3, [pc, #84]	; (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d80:	f7fd fcac 	bl	80026dc <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d86:	e008      	b.n	8004d9a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d88:	f7fd fca8 	bl	80026dc <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e173      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0f0      	beq.n	8004d88 <HAL_RCC_OscConfig+0x234>
 8004da6:	e01b      	b.n	8004de0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004da8:	4b09      	ldr	r3, [pc, #36]	; (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dae:	f7fd fc95 	bl	80026dc <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db4:	e00e      	b.n	8004dd4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004db6:	f7fd fc91 	bl	80026dc <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d907      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e15c      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	42470000 	.word	0x42470000
 8004dd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd4:	4b8a      	ldr	r3, [pc, #552]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1ea      	bne.n	8004db6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 8097 	beq.w	8004f1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dee:	2300      	movs	r3, #0
 8004df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004df2:	4b83      	ldr	r3, [pc, #524]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10f      	bne.n	8004e1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60bb      	str	r3, [r7, #8]
 8004e02:	4b7f      	ldr	r3, [pc, #508]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	4a7e      	ldr	r2, [pc, #504]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e0e:	4b7c      	ldr	r3, [pc, #496]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e16:	60bb      	str	r3, [r7, #8]
 8004e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e1e:	4b79      	ldr	r3, [pc, #484]	; (8005004 <HAL_RCC_OscConfig+0x4b0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d118      	bne.n	8004e5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e2a:	4b76      	ldr	r3, [pc, #472]	; (8005004 <HAL_RCC_OscConfig+0x4b0>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a75      	ldr	r2, [pc, #468]	; (8005004 <HAL_RCC_OscConfig+0x4b0>)
 8004e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e36:	f7fd fc51 	bl	80026dc <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e3e:	f7fd fc4d 	bl	80026dc <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e118      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e50:	4b6c      	ldr	r3, [pc, #432]	; (8005004 <HAL_RCC_OscConfig+0x4b0>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0f0      	beq.n	8004e3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d106      	bne.n	8004e72 <HAL_RCC_OscConfig+0x31e>
 8004e64:	4b66      	ldr	r3, [pc, #408]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e68:	4a65      	ldr	r2, [pc, #404]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e6a:	f043 0301 	orr.w	r3, r3, #1
 8004e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e70:	e01c      	b.n	8004eac <HAL_RCC_OscConfig+0x358>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2b05      	cmp	r3, #5
 8004e78:	d10c      	bne.n	8004e94 <HAL_RCC_OscConfig+0x340>
 8004e7a:	4b61      	ldr	r3, [pc, #388]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7e:	4a60      	ldr	r2, [pc, #384]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e80:	f043 0304 	orr.w	r3, r3, #4
 8004e84:	6713      	str	r3, [r2, #112]	; 0x70
 8004e86:	4b5e      	ldr	r3, [pc, #376]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8a:	4a5d      	ldr	r2, [pc, #372]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e8c:	f043 0301 	orr.w	r3, r3, #1
 8004e90:	6713      	str	r3, [r2, #112]	; 0x70
 8004e92:	e00b      	b.n	8004eac <HAL_RCC_OscConfig+0x358>
 8004e94:	4b5a      	ldr	r3, [pc, #360]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e98:	4a59      	ldr	r2, [pc, #356]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e9a:	f023 0301 	bic.w	r3, r3, #1
 8004e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea0:	4b57      	ldr	r3, [pc, #348]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea4:	4a56      	ldr	r2, [pc, #344]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004ea6:	f023 0304 	bic.w	r3, r3, #4
 8004eaa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d015      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb4:	f7fd fc12 	bl	80026dc <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eba:	e00a      	b.n	8004ed2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ebc:	f7fd fc0e 	bl	80026dc <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e0d7      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed2:	4b4b      	ldr	r3, [pc, #300]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0ee      	beq.n	8004ebc <HAL_RCC_OscConfig+0x368>
 8004ede:	e014      	b.n	8004f0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee0:	f7fd fbfc 	bl	80026dc <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee6:	e00a      	b.n	8004efe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ee8:	f7fd fbf8 	bl	80026dc <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e0c1      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004efe:	4b40      	ldr	r3, [pc, #256]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1ee      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d105      	bne.n	8004f1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f10:	4b3b      	ldr	r3, [pc, #236]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	4a3a      	ldr	r2, [pc, #232]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 80ad 	beq.w	8005080 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f26:	4b36      	ldr	r3, [pc, #216]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 030c 	and.w	r3, r3, #12
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d060      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d145      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f3a:	4b33      	ldr	r3, [pc, #204]	; (8005008 <HAL_RCC_OscConfig+0x4b4>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f40:	f7fd fbcc 	bl	80026dc <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f48:	f7fd fbc8 	bl	80026dc <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e093      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5a:	4b29      	ldr	r3, [pc, #164]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f0      	bne.n	8004f48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69da      	ldr	r2, [r3, #28]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	019b      	lsls	r3, r3, #6
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	085b      	lsrs	r3, r3, #1
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	041b      	lsls	r3, r3, #16
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f88:	061b      	lsls	r3, r3, #24
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f90:	071b      	lsls	r3, r3, #28
 8004f92:	491b      	ldr	r1, [pc, #108]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f98:	4b1b      	ldr	r3, [pc, #108]	; (8005008 <HAL_RCC_OscConfig+0x4b4>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9e:	f7fd fb9d 	bl	80026dc <HAL_GetTick>
 8004fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fa6:	f7fd fb99 	bl	80026dc <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e064      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb8:	4b11      	ldr	r3, [pc, #68]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0f0      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x452>
 8004fc4:	e05c      	b.n	8005080 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc6:	4b10      	ldr	r3, [pc, #64]	; (8005008 <HAL_RCC_OscConfig+0x4b4>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fcc:	f7fd fb86 	bl	80026dc <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fd4:	f7fd fb82 	bl	80026dc <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e04d      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe6:	4b06      	ldr	r3, [pc, #24]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x480>
 8004ff2:	e045      	b.n	8005080 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d107      	bne.n	800500c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e040      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
 8005000:	40023800 	.word	0x40023800
 8005004:	40007000 	.word	0x40007000
 8005008:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800500c:	4b1f      	ldr	r3, [pc, #124]	; (800508c <HAL_RCC_OscConfig+0x538>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d030      	beq.n	800507c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005024:	429a      	cmp	r2, r3
 8005026:	d129      	bne.n	800507c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005032:	429a      	cmp	r2, r3
 8005034:	d122      	bne.n	800507c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800503c:	4013      	ands	r3, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005042:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005044:	4293      	cmp	r3, r2
 8005046:	d119      	bne.n	800507c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005052:	085b      	lsrs	r3, r3, #1
 8005054:	3b01      	subs	r3, #1
 8005056:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005058:	429a      	cmp	r2, r3
 800505a:	d10f      	bne.n	800507c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005066:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005068:	429a      	cmp	r2, r3
 800506a:	d107      	bne.n	800507c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005076:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005078:	429a      	cmp	r2, r3
 800507a:	d001      	beq.n	8005080 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e000      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	40023800 	.word	0x40023800

08005090 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e066      	b.n	8005174 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	7f5b      	ldrb	r3, [r3, #29]
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d105      	bne.n	80050bc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7fc facc 	bl	8001654 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	22ca      	movs	r2, #202	; 0xca
 80050c8:	625a      	str	r2, [r3, #36]	; 0x24
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2253      	movs	r2, #83	; 0x53
 80050d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f87a 	bl	80051cc <RTC_EnterInitMode>
 80050d8:	4603      	mov	r3, r0
 80050da:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d12c      	bne.n	800513c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80050f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6899      	ldr	r1, [r3, #8]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	68d2      	ldr	r2, [r2, #12]
 800511c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6919      	ldr	r1, [r3, #16]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	041a      	lsls	r2, r3, #16
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f881 	bl	800523a <RTC_ExitInitMode>
 8005138:	4603      	mov	r3, r0
 800513a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800513c:	7bfb      	ldrb	r3, [r7, #15]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d113      	bne.n	800516a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005150:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	699a      	ldr	r2, [r3, #24]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	22ff      	movs	r2, #255	; 0xff
 8005170:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005172:	7bfb      	ldrb	r3, [r7, #15]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005196:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005198:	f7fd faa0 	bl	80026dc <HAL_GetTick>
 800519c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800519e:	e009      	b.n	80051b4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80051a0:	f7fd fa9c 	bl	80026dc <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051ae:	d901      	bls.n	80051b4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e007      	b.n	80051c4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f003 0320 	and.w	r3, r3, #32
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0ee      	beq.n	80051a0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d122      	bne.n	8005230 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68da      	ldr	r2, [r3, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051f8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051fa:	f7fd fa6f 	bl	80026dc <HAL_GetTick>
 80051fe:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005200:	e00c      	b.n	800521c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005202:	f7fd fa6b 	bl	80026dc <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005210:	d904      	bls.n	800521c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2204      	movs	r2, #4
 8005216:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005226:	2b00      	cmp	r3, #0
 8005228:	d102      	bne.n	8005230 <RTC_EnterInitMode+0x64>
 800522a:	7bfb      	ldrb	r3, [r7, #15]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d1e8      	bne.n	8005202 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005230:	7bfb      	ldrb	r3, [r7, #15]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b084      	sub	sp, #16
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005242:	2300      	movs	r3, #0
 8005244:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005254:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 0320 	and.w	r3, r3, #32
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10a      	bne.n	800527a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7ff ff89 	bl	800517c <HAL_RTC_WaitForSynchro>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d004      	beq.n	800527a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2204      	movs	r2, #4
 8005274:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800527a:	7bfb      	ldrb	r3, [r7, #15]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e07b      	b.n	800538e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	2b00      	cmp	r3, #0
 800529c:	d108      	bne.n	80052b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052a6:	d009      	beq.n	80052bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	61da      	str	r2, [r3, #28]
 80052ae:	e005      	b.n	80052bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d106      	bne.n	80052dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7fc f9e6 	bl	80016a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005304:	431a      	orrs	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	431a      	orrs	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800532c:	431a      	orrs	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005340:	ea42 0103 	orr.w	r1, r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005348:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	0c1b      	lsrs	r3, r3, #16
 800535a:	f003 0104 	and.w	r1, r3, #4
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	f003 0210 	and.w	r2, r3, #16
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800537c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b082      	sub	sp, #8
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e041      	b.n	800542c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d106      	bne.n	80053c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7fc fa61 	bl	8001884 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2202      	movs	r2, #2
 80053c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3304      	adds	r3, #4
 80053d2:	4619      	mov	r1, r3
 80053d4:	4610      	mov	r0, r2
 80053d6:	f000 fa11 	bl	80057fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e041      	b.n	80054ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d106      	bne.n	8005460 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f839 	bl	80054d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3304      	adds	r3, #4
 8005470:	4619      	mov	r1, r3
 8005472:	4610      	mov	r0, r2
 8005474:	f000 f9c2 	bl	80057fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
	...

080054e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054f4:	2300      	movs	r3, #0
 80054f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d101      	bne.n	8005506 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005502:	2302      	movs	r3, #2
 8005504:	e0ae      	b.n	8005664 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b0c      	cmp	r3, #12
 8005512:	f200 809f 	bhi.w	8005654 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005516:	a201      	add	r2, pc, #4	; (adr r2, 800551c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551c:	08005551 	.word	0x08005551
 8005520:	08005655 	.word	0x08005655
 8005524:	08005655 	.word	0x08005655
 8005528:	08005655 	.word	0x08005655
 800552c:	08005591 	.word	0x08005591
 8005530:	08005655 	.word	0x08005655
 8005534:	08005655 	.word	0x08005655
 8005538:	08005655 	.word	0x08005655
 800553c:	080055d3 	.word	0x080055d3
 8005540:	08005655 	.word	0x08005655
 8005544:	08005655 	.word	0x08005655
 8005548:	08005655 	.word	0x08005655
 800554c:	08005613 	.word	0x08005613
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68b9      	ldr	r1, [r7, #8]
 8005556:	4618      	mov	r0, r3
 8005558:	f000 f9f0 	bl	800593c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699a      	ldr	r2, [r3, #24]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0208 	orr.w	r2, r2, #8
 800556a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699a      	ldr	r2, [r3, #24]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0204 	bic.w	r2, r2, #4
 800557a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6999      	ldr	r1, [r3, #24]
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	691a      	ldr	r2, [r3, #16]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	619a      	str	r2, [r3, #24]
      break;
 800558e:	e064      	b.n	800565a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68b9      	ldr	r1, [r7, #8]
 8005596:	4618      	mov	r0, r3
 8005598:	f000 fa40 	bl	8005a1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699a      	ldr	r2, [r3, #24]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699a      	ldr	r2, [r3, #24]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6999      	ldr	r1, [r3, #24]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	021a      	lsls	r2, r3, #8
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	619a      	str	r2, [r3, #24]
      break;
 80055d0:	e043      	b.n	800565a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68b9      	ldr	r1, [r7, #8]
 80055d8:	4618      	mov	r0, r3
 80055da:	f000 fa95 	bl	8005b08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69da      	ldr	r2, [r3, #28]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f042 0208 	orr.w	r2, r2, #8
 80055ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	69da      	ldr	r2, [r3, #28]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0204 	bic.w	r2, r2, #4
 80055fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	69d9      	ldr	r1, [r3, #28]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	691a      	ldr	r2, [r3, #16]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	430a      	orrs	r2, r1
 800560e:	61da      	str	r2, [r3, #28]
      break;
 8005610:	e023      	b.n	800565a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68b9      	ldr	r1, [r7, #8]
 8005618:	4618      	mov	r0, r3
 800561a:	f000 fae9 	bl	8005bf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69da      	ldr	r2, [r3, #28]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800562c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69da      	ldr	r2, [r3, #28]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800563c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69d9      	ldr	r1, [r3, #28]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	021a      	lsls	r2, r3, #8
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	61da      	str	r2, [r3, #28]
      break;
 8005652:	e002      	b.n	800565a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	75fb      	strb	r3, [r7, #23]
      break;
 8005658:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005662:	7dfb      	ldrb	r3, [r7, #23]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3718      	adds	r7, #24
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005676:	2300      	movs	r3, #0
 8005678:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_TIM_ConfigClockSource+0x1c>
 8005684:	2302      	movs	r3, #2
 8005686:	e0b4      	b.n	80057f2 <HAL_TIM_ConfigClockSource+0x186>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c0:	d03e      	beq.n	8005740 <HAL_TIM_ConfigClockSource+0xd4>
 80056c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c6:	f200 8087 	bhi.w	80057d8 <HAL_TIM_ConfigClockSource+0x16c>
 80056ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ce:	f000 8086 	beq.w	80057de <HAL_TIM_ConfigClockSource+0x172>
 80056d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d6:	d87f      	bhi.n	80057d8 <HAL_TIM_ConfigClockSource+0x16c>
 80056d8:	2b70      	cmp	r3, #112	; 0x70
 80056da:	d01a      	beq.n	8005712 <HAL_TIM_ConfigClockSource+0xa6>
 80056dc:	2b70      	cmp	r3, #112	; 0x70
 80056de:	d87b      	bhi.n	80057d8 <HAL_TIM_ConfigClockSource+0x16c>
 80056e0:	2b60      	cmp	r3, #96	; 0x60
 80056e2:	d050      	beq.n	8005786 <HAL_TIM_ConfigClockSource+0x11a>
 80056e4:	2b60      	cmp	r3, #96	; 0x60
 80056e6:	d877      	bhi.n	80057d8 <HAL_TIM_ConfigClockSource+0x16c>
 80056e8:	2b50      	cmp	r3, #80	; 0x50
 80056ea:	d03c      	beq.n	8005766 <HAL_TIM_ConfigClockSource+0xfa>
 80056ec:	2b50      	cmp	r3, #80	; 0x50
 80056ee:	d873      	bhi.n	80057d8 <HAL_TIM_ConfigClockSource+0x16c>
 80056f0:	2b40      	cmp	r3, #64	; 0x40
 80056f2:	d058      	beq.n	80057a6 <HAL_TIM_ConfigClockSource+0x13a>
 80056f4:	2b40      	cmp	r3, #64	; 0x40
 80056f6:	d86f      	bhi.n	80057d8 <HAL_TIM_ConfigClockSource+0x16c>
 80056f8:	2b30      	cmp	r3, #48	; 0x30
 80056fa:	d064      	beq.n	80057c6 <HAL_TIM_ConfigClockSource+0x15a>
 80056fc:	2b30      	cmp	r3, #48	; 0x30
 80056fe:	d86b      	bhi.n	80057d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005700:	2b20      	cmp	r3, #32
 8005702:	d060      	beq.n	80057c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005704:	2b20      	cmp	r3, #32
 8005706:	d867      	bhi.n	80057d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005708:	2b00      	cmp	r3, #0
 800570a:	d05c      	beq.n	80057c6 <HAL_TIM_ConfigClockSource+0x15a>
 800570c:	2b10      	cmp	r3, #16
 800570e:	d05a      	beq.n	80057c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005710:	e062      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6818      	ldr	r0, [r3, #0]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	6899      	ldr	r1, [r3, #8]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	f000 fb35 	bl	8005d90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005734:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	609a      	str	r2, [r3, #8]
      break;
 800573e:	e04f      	b.n	80057e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6818      	ldr	r0, [r3, #0]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	6899      	ldr	r1, [r3, #8]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f000 fb1e 	bl	8005d90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689a      	ldr	r2, [r3, #8]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005762:	609a      	str	r2, [r3, #8]
      break;
 8005764:	e03c      	b.n	80057e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6818      	ldr	r0, [r3, #0]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	6859      	ldr	r1, [r3, #4]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	461a      	mov	r2, r3
 8005774:	f000 fa92 	bl	8005c9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2150      	movs	r1, #80	; 0x50
 800577e:	4618      	mov	r0, r3
 8005780:	f000 faeb 	bl	8005d5a <TIM_ITRx_SetConfig>
      break;
 8005784:	e02c      	b.n	80057e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6818      	ldr	r0, [r3, #0]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	6859      	ldr	r1, [r3, #4]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	461a      	mov	r2, r3
 8005794:	f000 fab1 	bl	8005cfa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2160      	movs	r1, #96	; 0x60
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 fadb 	bl	8005d5a <TIM_ITRx_SetConfig>
      break;
 80057a4:	e01c      	b.n	80057e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6818      	ldr	r0, [r3, #0]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	6859      	ldr	r1, [r3, #4]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	461a      	mov	r2, r3
 80057b4:	f000 fa72 	bl	8005c9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2140      	movs	r1, #64	; 0x40
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 facb 	bl	8005d5a <TIM_ITRx_SetConfig>
      break;
 80057c4:	e00c      	b.n	80057e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4619      	mov	r1, r3
 80057d0:	4610      	mov	r0, r2
 80057d2:	f000 fac2 	bl	8005d5a <TIM_ITRx_SetConfig>
      break;
 80057d6:	e003      	b.n	80057e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	73fb      	strb	r3, [r7, #15]
      break;
 80057dc:	e000      	b.n	80057e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
	...

080057fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a40      	ldr	r2, [pc, #256]	; (8005910 <TIM_Base_SetConfig+0x114>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d013      	beq.n	800583c <TIM_Base_SetConfig+0x40>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800581a:	d00f      	beq.n	800583c <TIM_Base_SetConfig+0x40>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a3d      	ldr	r2, [pc, #244]	; (8005914 <TIM_Base_SetConfig+0x118>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d00b      	beq.n	800583c <TIM_Base_SetConfig+0x40>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a3c      	ldr	r2, [pc, #240]	; (8005918 <TIM_Base_SetConfig+0x11c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d007      	beq.n	800583c <TIM_Base_SetConfig+0x40>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a3b      	ldr	r2, [pc, #236]	; (800591c <TIM_Base_SetConfig+0x120>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d003      	beq.n	800583c <TIM_Base_SetConfig+0x40>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a3a      	ldr	r2, [pc, #232]	; (8005920 <TIM_Base_SetConfig+0x124>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d108      	bne.n	800584e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4313      	orrs	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a2f      	ldr	r2, [pc, #188]	; (8005910 <TIM_Base_SetConfig+0x114>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d02b      	beq.n	80058ae <TIM_Base_SetConfig+0xb2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585c:	d027      	beq.n	80058ae <TIM_Base_SetConfig+0xb2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a2c      	ldr	r2, [pc, #176]	; (8005914 <TIM_Base_SetConfig+0x118>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d023      	beq.n	80058ae <TIM_Base_SetConfig+0xb2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a2b      	ldr	r2, [pc, #172]	; (8005918 <TIM_Base_SetConfig+0x11c>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d01f      	beq.n	80058ae <TIM_Base_SetConfig+0xb2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a2a      	ldr	r2, [pc, #168]	; (800591c <TIM_Base_SetConfig+0x120>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d01b      	beq.n	80058ae <TIM_Base_SetConfig+0xb2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a29      	ldr	r2, [pc, #164]	; (8005920 <TIM_Base_SetConfig+0x124>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d017      	beq.n	80058ae <TIM_Base_SetConfig+0xb2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a28      	ldr	r2, [pc, #160]	; (8005924 <TIM_Base_SetConfig+0x128>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d013      	beq.n	80058ae <TIM_Base_SetConfig+0xb2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a27      	ldr	r2, [pc, #156]	; (8005928 <TIM_Base_SetConfig+0x12c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d00f      	beq.n	80058ae <TIM_Base_SetConfig+0xb2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a26      	ldr	r2, [pc, #152]	; (800592c <TIM_Base_SetConfig+0x130>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d00b      	beq.n	80058ae <TIM_Base_SetConfig+0xb2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a25      	ldr	r2, [pc, #148]	; (8005930 <TIM_Base_SetConfig+0x134>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d007      	beq.n	80058ae <TIM_Base_SetConfig+0xb2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a24      	ldr	r2, [pc, #144]	; (8005934 <TIM_Base_SetConfig+0x138>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d003      	beq.n	80058ae <TIM_Base_SetConfig+0xb2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a23      	ldr	r2, [pc, #140]	; (8005938 <TIM_Base_SetConfig+0x13c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d108      	bne.n	80058c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	4313      	orrs	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a0a      	ldr	r2, [pc, #40]	; (8005910 <TIM_Base_SetConfig+0x114>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d003      	beq.n	80058f4 <TIM_Base_SetConfig+0xf8>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a0c      	ldr	r2, [pc, #48]	; (8005920 <TIM_Base_SetConfig+0x124>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d103      	bne.n	80058fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	691a      	ldr	r2, [r3, #16]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	615a      	str	r2, [r3, #20]
}
 8005902:	bf00      	nop
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	40010000 	.word	0x40010000
 8005914:	40000400 	.word	0x40000400
 8005918:	40000800 	.word	0x40000800
 800591c:	40000c00 	.word	0x40000c00
 8005920:	40010400 	.word	0x40010400
 8005924:	40014000 	.word	0x40014000
 8005928:	40014400 	.word	0x40014400
 800592c:	40014800 	.word	0x40014800
 8005930:	40001800 	.word	0x40001800
 8005934:	40001c00 	.word	0x40001c00
 8005938:	40002000 	.word	0x40002000

0800593c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	f023 0201 	bic.w	r2, r3, #1
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0303 	bic.w	r3, r3, #3
 8005972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f023 0302 	bic.w	r3, r3, #2
 8005984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	4313      	orrs	r3, r2
 800598e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a20      	ldr	r2, [pc, #128]	; (8005a14 <TIM_OC1_SetConfig+0xd8>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d003      	beq.n	80059a0 <TIM_OC1_SetConfig+0x64>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a1f      	ldr	r2, [pc, #124]	; (8005a18 <TIM_OC1_SetConfig+0xdc>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d10c      	bne.n	80059ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f023 0308 	bic.w	r3, r3, #8
 80059a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f023 0304 	bic.w	r3, r3, #4
 80059b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a15      	ldr	r2, [pc, #84]	; (8005a14 <TIM_OC1_SetConfig+0xd8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d003      	beq.n	80059ca <TIM_OC1_SetConfig+0x8e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a14      	ldr	r2, [pc, #80]	; (8005a18 <TIM_OC1_SetConfig+0xdc>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d111      	bne.n	80059ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	621a      	str	r2, [r3, #32]
}
 8005a08:	bf00      	nop
 8005a0a:	371c      	adds	r7, #28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	40010000 	.word	0x40010000
 8005a18:	40010400 	.word	0x40010400

08005a1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b087      	sub	sp, #28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	f023 0210 	bic.w	r2, r3, #16
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	021b      	lsls	r3, r3, #8
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f023 0320 	bic.w	r3, r3, #32
 8005a66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	011b      	lsls	r3, r3, #4
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a22      	ldr	r2, [pc, #136]	; (8005b00 <TIM_OC2_SetConfig+0xe4>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d003      	beq.n	8005a84 <TIM_OC2_SetConfig+0x68>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a21      	ldr	r2, [pc, #132]	; (8005b04 <TIM_OC2_SetConfig+0xe8>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d10d      	bne.n	8005aa0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	011b      	lsls	r3, r3, #4
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a17      	ldr	r2, [pc, #92]	; (8005b00 <TIM_OC2_SetConfig+0xe4>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d003      	beq.n	8005ab0 <TIM_OC2_SetConfig+0x94>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a16      	ldr	r2, [pc, #88]	; (8005b04 <TIM_OC2_SetConfig+0xe8>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d113      	bne.n	8005ad8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ab6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005abe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	621a      	str	r2, [r3, #32]
}
 8005af2:	bf00      	nop
 8005af4:	371c      	adds	r7, #28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	40010000 	.word	0x40010000
 8005b04:	40010400 	.word	0x40010400

08005b08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f023 0303 	bic.w	r3, r3, #3
 8005b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	021b      	lsls	r3, r3, #8
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a21      	ldr	r2, [pc, #132]	; (8005be8 <TIM_OC3_SetConfig+0xe0>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d003      	beq.n	8005b6e <TIM_OC3_SetConfig+0x66>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a20      	ldr	r2, [pc, #128]	; (8005bec <TIM_OC3_SetConfig+0xe4>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d10d      	bne.n	8005b8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	021b      	lsls	r3, r3, #8
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a16      	ldr	r2, [pc, #88]	; (8005be8 <TIM_OC3_SetConfig+0xe0>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d003      	beq.n	8005b9a <TIM_OC3_SetConfig+0x92>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a15      	ldr	r2, [pc, #84]	; (8005bec <TIM_OC3_SetConfig+0xe4>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d113      	bne.n	8005bc2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	011b      	lsls	r3, r3, #4
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	011b      	lsls	r3, r3, #4
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	621a      	str	r2, [r3, #32]
}
 8005bdc:	bf00      	nop
 8005bde:	371c      	adds	r7, #28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	40010000 	.word	0x40010000
 8005bec:	40010400 	.word	0x40010400

08005bf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	021b      	lsls	r3, r3, #8
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	031b      	lsls	r3, r3, #12
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a12      	ldr	r2, [pc, #72]	; (8005c94 <TIM_OC4_SetConfig+0xa4>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d003      	beq.n	8005c58 <TIM_OC4_SetConfig+0x68>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a11      	ldr	r2, [pc, #68]	; (8005c98 <TIM_OC4_SetConfig+0xa8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d109      	bne.n	8005c6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	019b      	lsls	r3, r3, #6
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	621a      	str	r2, [r3, #32]
}
 8005c86:	bf00      	nop
 8005c88:	371c      	adds	r7, #28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	40010000 	.word	0x40010000
 8005c98:	40010400 	.word	0x40010400

08005c9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	f023 0201 	bic.w	r2, r3, #1
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f023 030a 	bic.w	r3, r3, #10
 8005cd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	621a      	str	r2, [r3, #32]
}
 8005cee:	bf00      	nop
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b087      	sub	sp, #28
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	60f8      	str	r0, [r7, #12]
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	f023 0210 	bic.w	r2, r3, #16
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	031b      	lsls	r3, r3, #12
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	011b      	lsls	r3, r3, #4
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	621a      	str	r2, [r3, #32]
}
 8005d4e:	bf00      	nop
 8005d50:	371c      	adds	r7, #28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	f043 0307 	orr.w	r3, r3, #7
 8005d7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	609a      	str	r2, [r3, #8]
}
 8005d84:	bf00      	nop
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b087      	sub	sp, #28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005daa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	021a      	lsls	r2, r3, #8
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	431a      	orrs	r2, r3
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	609a      	str	r2, [r3, #8]
}
 8005dc4:	bf00      	nop
 8005dc6:	371c      	adds	r7, #28
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d101      	bne.n	8005de8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005de4:	2302      	movs	r3, #2
 8005de6:	e05a      	b.n	8005e9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a21      	ldr	r2, [pc, #132]	; (8005eac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d022      	beq.n	8005e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e34:	d01d      	beq.n	8005e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a1d      	ldr	r2, [pc, #116]	; (8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d018      	beq.n	8005e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a1b      	ldr	r2, [pc, #108]	; (8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d013      	beq.n	8005e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a1a      	ldr	r2, [pc, #104]	; (8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d00e      	beq.n	8005e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a18      	ldr	r2, [pc, #96]	; (8005ebc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d009      	beq.n	8005e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a17      	ldr	r2, [pc, #92]	; (8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d004      	beq.n	8005e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a15      	ldr	r2, [pc, #84]	; (8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d10c      	bne.n	8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	40010000 	.word	0x40010000
 8005eb0:	40000400 	.word	0x40000400
 8005eb4:	40000800 	.word	0x40000800
 8005eb8:	40000c00 	.word	0x40000c00
 8005ebc:	40010400 	.word	0x40010400
 8005ec0:	40014000 	.word	0x40014000
 8005ec4:	40001800 	.word	0x40001800

08005ec8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d101      	bne.n	8005ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	e03d      	b.n	8005f60 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e03f      	b.n	8005ffe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d106      	bne.n	8005f98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fb fcd2 	bl	800193c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2224      	movs	r2, #36	; 0x24
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f929 	bl	8006208 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	691a      	ldr	r2, [r3, #16]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	695a      	ldr	r2, [r3, #20]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68da      	ldr	r2, [r3, #12]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fe4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b08a      	sub	sp, #40	; 0x28
 800600a:	af02      	add	r7, sp, #8
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	603b      	str	r3, [r7, #0]
 8006012:	4613      	mov	r3, r2
 8006014:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b20      	cmp	r3, #32
 8006024:	d17c      	bne.n	8006120 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <HAL_UART_Transmit+0x2c>
 800602c:	88fb      	ldrh	r3, [r7, #6]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e075      	b.n	8006122 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_UART_Transmit+0x3e>
 8006040:	2302      	movs	r3, #2
 8006042:	e06e      	b.n	8006122 <HAL_UART_Transmit+0x11c>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2221      	movs	r2, #33	; 0x21
 8006056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800605a:	f7fc fb3f 	bl	80026dc <HAL_GetTick>
 800605e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	88fa      	ldrh	r2, [r7, #6]
 8006064:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	88fa      	ldrh	r2, [r7, #6]
 800606a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006074:	d108      	bne.n	8006088 <HAL_UART_Transmit+0x82>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d104      	bne.n	8006088 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800607e:	2300      	movs	r3, #0
 8006080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	61bb      	str	r3, [r7, #24]
 8006086:	e003      	b.n	8006090 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800608c:	2300      	movs	r3, #0
 800608e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006098:	e02a      	b.n	80060f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	2200      	movs	r2, #0
 80060a2:	2180      	movs	r1, #128	; 0x80
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 f840 	bl	800612a <UART_WaitOnFlagUntilTimeout>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e036      	b.n	8006122 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10b      	bne.n	80060d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	881b      	ldrh	r3, [r3, #0]
 80060be:	461a      	mov	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	3302      	adds	r3, #2
 80060ce:	61bb      	str	r3, [r7, #24]
 80060d0:	e007      	b.n	80060e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	781a      	ldrb	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	3301      	adds	r3, #1
 80060e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	3b01      	subs	r3, #1
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1cf      	bne.n	800609a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2200      	movs	r2, #0
 8006102:	2140      	movs	r1, #64	; 0x40
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 f810 	bl	800612a <UART_WaitOnFlagUntilTimeout>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e006      	b.n	8006122 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2220      	movs	r2, #32
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	e000      	b.n	8006122 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006120:	2302      	movs	r3, #2
  }
}
 8006122:	4618      	mov	r0, r3
 8006124:	3720      	adds	r7, #32
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b090      	sub	sp, #64	; 0x40
 800612e:	af00      	add	r7, sp, #0
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	60b9      	str	r1, [r7, #8]
 8006134:	603b      	str	r3, [r7, #0]
 8006136:	4613      	mov	r3, r2
 8006138:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800613a:	e050      	b.n	80061de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800613c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800613e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006142:	d04c      	beq.n	80061de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006146:	2b00      	cmp	r3, #0
 8006148:	d007      	beq.n	800615a <UART_WaitOnFlagUntilTimeout+0x30>
 800614a:	f7fc fac7 	bl	80026dc <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006156:	429a      	cmp	r2, r3
 8006158:	d241      	bcs.n	80061de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	330c      	adds	r3, #12
 8006160:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006164:	e853 3f00 	ldrex	r3, [r3]
 8006168:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006170:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	330c      	adds	r3, #12
 8006178:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800617a:	637a      	str	r2, [r7, #52]	; 0x34
 800617c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006180:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006182:	e841 2300 	strex	r3, r2, [r1]
 8006186:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1e5      	bne.n	800615a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3314      	adds	r3, #20
 8006194:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	e853 3f00 	ldrex	r3, [r3]
 800619c:	613b      	str	r3, [r7, #16]
   return(result);
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f023 0301 	bic.w	r3, r3, #1
 80061a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3314      	adds	r3, #20
 80061ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061ae:	623a      	str	r2, [r7, #32]
 80061b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b2:	69f9      	ldr	r1, [r7, #28]
 80061b4:	6a3a      	ldr	r2, [r7, #32]
 80061b6:	e841 2300 	strex	r3, r2, [r1]
 80061ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1e5      	bne.n	800618e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e00f      	b.n	80061fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	4013      	ands	r3, r2
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	bf0c      	ite	eq
 80061ee:	2301      	moveq	r3, #1
 80061f0:	2300      	movne	r3, #0
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	461a      	mov	r2, r3
 80061f6:	79fb      	ldrb	r3, [r7, #7]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d09f      	beq.n	800613c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3740      	adds	r7, #64	; 0x40
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
	...

08006208 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800620c:	b0c0      	sub	sp, #256	; 0x100
 800620e:	af00      	add	r7, sp, #0
 8006210:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006224:	68d9      	ldr	r1, [r3, #12]
 8006226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	ea40 0301 	orr.w	r3, r0, r1
 8006230:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	431a      	orrs	r2, r3
 8006240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	431a      	orrs	r2, r3
 8006248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	4313      	orrs	r3, r2
 8006250:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006260:	f021 010c 	bic.w	r1, r1, #12
 8006264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800626e:	430b      	orrs	r3, r1
 8006270:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800627e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006282:	6999      	ldr	r1, [r3, #24]
 8006284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	ea40 0301 	orr.w	r3, r0, r1
 800628e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	4b8f      	ldr	r3, [pc, #572]	; (80064d4 <UART_SetConfig+0x2cc>)
 8006298:	429a      	cmp	r2, r3
 800629a:	d005      	beq.n	80062a8 <UART_SetConfig+0xa0>
 800629c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	4b8d      	ldr	r3, [pc, #564]	; (80064d8 <UART_SetConfig+0x2d0>)
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d104      	bne.n	80062b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062a8:	f7fd ff6c 	bl	8004184 <HAL_RCC_GetPCLK2Freq>
 80062ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80062b0:	e003      	b.n	80062ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062b2:	f7fd ff53 	bl	800415c <HAL_RCC_GetPCLK1Freq>
 80062b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062be:	69db      	ldr	r3, [r3, #28]
 80062c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062c4:	f040 810c 	bne.w	80064e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062cc:	2200      	movs	r2, #0
 80062ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80062d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80062da:	4622      	mov	r2, r4
 80062dc:	462b      	mov	r3, r5
 80062de:	1891      	adds	r1, r2, r2
 80062e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80062e2:	415b      	adcs	r3, r3
 80062e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80062ea:	4621      	mov	r1, r4
 80062ec:	eb12 0801 	adds.w	r8, r2, r1
 80062f0:	4629      	mov	r1, r5
 80062f2:	eb43 0901 	adc.w	r9, r3, r1
 80062f6:	f04f 0200 	mov.w	r2, #0
 80062fa:	f04f 0300 	mov.w	r3, #0
 80062fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006302:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006306:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800630a:	4690      	mov	r8, r2
 800630c:	4699      	mov	r9, r3
 800630e:	4623      	mov	r3, r4
 8006310:	eb18 0303 	adds.w	r3, r8, r3
 8006314:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006318:	462b      	mov	r3, r5
 800631a:	eb49 0303 	adc.w	r3, r9, r3
 800631e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800632e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006332:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006336:	460b      	mov	r3, r1
 8006338:	18db      	adds	r3, r3, r3
 800633a:	653b      	str	r3, [r7, #80]	; 0x50
 800633c:	4613      	mov	r3, r2
 800633e:	eb42 0303 	adc.w	r3, r2, r3
 8006342:	657b      	str	r3, [r7, #84]	; 0x54
 8006344:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006348:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800634c:	f7f9 ffb0 	bl	80002b0 <__aeabi_uldivmod>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	4b61      	ldr	r3, [pc, #388]	; (80064dc <UART_SetConfig+0x2d4>)
 8006356:	fba3 2302 	umull	r2, r3, r3, r2
 800635a:	095b      	lsrs	r3, r3, #5
 800635c:	011c      	lsls	r4, r3, #4
 800635e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006362:	2200      	movs	r2, #0
 8006364:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006368:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800636c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006370:	4642      	mov	r2, r8
 8006372:	464b      	mov	r3, r9
 8006374:	1891      	adds	r1, r2, r2
 8006376:	64b9      	str	r1, [r7, #72]	; 0x48
 8006378:	415b      	adcs	r3, r3
 800637a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800637c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006380:	4641      	mov	r1, r8
 8006382:	eb12 0a01 	adds.w	sl, r2, r1
 8006386:	4649      	mov	r1, r9
 8006388:	eb43 0b01 	adc.w	fp, r3, r1
 800638c:	f04f 0200 	mov.w	r2, #0
 8006390:	f04f 0300 	mov.w	r3, #0
 8006394:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006398:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800639c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063a0:	4692      	mov	sl, r2
 80063a2:	469b      	mov	fp, r3
 80063a4:	4643      	mov	r3, r8
 80063a6:	eb1a 0303 	adds.w	r3, sl, r3
 80063aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063ae:	464b      	mov	r3, r9
 80063b0:	eb4b 0303 	adc.w	r3, fp, r3
 80063b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80063c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063cc:	460b      	mov	r3, r1
 80063ce:	18db      	adds	r3, r3, r3
 80063d0:	643b      	str	r3, [r7, #64]	; 0x40
 80063d2:	4613      	mov	r3, r2
 80063d4:	eb42 0303 	adc.w	r3, r2, r3
 80063d8:	647b      	str	r3, [r7, #68]	; 0x44
 80063da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80063de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80063e2:	f7f9 ff65 	bl	80002b0 <__aeabi_uldivmod>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	4611      	mov	r1, r2
 80063ec:	4b3b      	ldr	r3, [pc, #236]	; (80064dc <UART_SetConfig+0x2d4>)
 80063ee:	fba3 2301 	umull	r2, r3, r3, r1
 80063f2:	095b      	lsrs	r3, r3, #5
 80063f4:	2264      	movs	r2, #100	; 0x64
 80063f6:	fb02 f303 	mul.w	r3, r2, r3
 80063fa:	1acb      	subs	r3, r1, r3
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006402:	4b36      	ldr	r3, [pc, #216]	; (80064dc <UART_SetConfig+0x2d4>)
 8006404:	fba3 2302 	umull	r2, r3, r3, r2
 8006408:	095b      	lsrs	r3, r3, #5
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006410:	441c      	add	r4, r3
 8006412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006416:	2200      	movs	r2, #0
 8006418:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800641c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006420:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006424:	4642      	mov	r2, r8
 8006426:	464b      	mov	r3, r9
 8006428:	1891      	adds	r1, r2, r2
 800642a:	63b9      	str	r1, [r7, #56]	; 0x38
 800642c:	415b      	adcs	r3, r3
 800642e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006430:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006434:	4641      	mov	r1, r8
 8006436:	1851      	adds	r1, r2, r1
 8006438:	6339      	str	r1, [r7, #48]	; 0x30
 800643a:	4649      	mov	r1, r9
 800643c:	414b      	adcs	r3, r1
 800643e:	637b      	str	r3, [r7, #52]	; 0x34
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800644c:	4659      	mov	r1, fp
 800644e:	00cb      	lsls	r3, r1, #3
 8006450:	4651      	mov	r1, sl
 8006452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006456:	4651      	mov	r1, sl
 8006458:	00ca      	lsls	r2, r1, #3
 800645a:	4610      	mov	r0, r2
 800645c:	4619      	mov	r1, r3
 800645e:	4603      	mov	r3, r0
 8006460:	4642      	mov	r2, r8
 8006462:	189b      	adds	r3, r3, r2
 8006464:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006468:	464b      	mov	r3, r9
 800646a:	460a      	mov	r2, r1
 800646c:	eb42 0303 	adc.w	r3, r2, r3
 8006470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006480:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006484:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006488:	460b      	mov	r3, r1
 800648a:	18db      	adds	r3, r3, r3
 800648c:	62bb      	str	r3, [r7, #40]	; 0x28
 800648e:	4613      	mov	r3, r2
 8006490:	eb42 0303 	adc.w	r3, r2, r3
 8006494:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006496:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800649a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800649e:	f7f9 ff07 	bl	80002b0 <__aeabi_uldivmod>
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	4b0d      	ldr	r3, [pc, #52]	; (80064dc <UART_SetConfig+0x2d4>)
 80064a8:	fba3 1302 	umull	r1, r3, r3, r2
 80064ac:	095b      	lsrs	r3, r3, #5
 80064ae:	2164      	movs	r1, #100	; 0x64
 80064b0:	fb01 f303 	mul.w	r3, r1, r3
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	3332      	adds	r3, #50	; 0x32
 80064ba:	4a08      	ldr	r2, [pc, #32]	; (80064dc <UART_SetConfig+0x2d4>)
 80064bc:	fba2 2303 	umull	r2, r3, r2, r3
 80064c0:	095b      	lsrs	r3, r3, #5
 80064c2:	f003 0207 	and.w	r2, r3, #7
 80064c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4422      	add	r2, r4
 80064ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064d0:	e105      	b.n	80066de <UART_SetConfig+0x4d6>
 80064d2:	bf00      	nop
 80064d4:	40011000 	.word	0x40011000
 80064d8:	40011400 	.word	0x40011400
 80064dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064e4:	2200      	movs	r2, #0
 80064e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80064ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80064f2:	4642      	mov	r2, r8
 80064f4:	464b      	mov	r3, r9
 80064f6:	1891      	adds	r1, r2, r2
 80064f8:	6239      	str	r1, [r7, #32]
 80064fa:	415b      	adcs	r3, r3
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
 80064fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006502:	4641      	mov	r1, r8
 8006504:	1854      	adds	r4, r2, r1
 8006506:	4649      	mov	r1, r9
 8006508:	eb43 0501 	adc.w	r5, r3, r1
 800650c:	f04f 0200 	mov.w	r2, #0
 8006510:	f04f 0300 	mov.w	r3, #0
 8006514:	00eb      	lsls	r3, r5, #3
 8006516:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800651a:	00e2      	lsls	r2, r4, #3
 800651c:	4614      	mov	r4, r2
 800651e:	461d      	mov	r5, r3
 8006520:	4643      	mov	r3, r8
 8006522:	18e3      	adds	r3, r4, r3
 8006524:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006528:	464b      	mov	r3, r9
 800652a:	eb45 0303 	adc.w	r3, r5, r3
 800652e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800653e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006542:	f04f 0200 	mov.w	r2, #0
 8006546:	f04f 0300 	mov.w	r3, #0
 800654a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800654e:	4629      	mov	r1, r5
 8006550:	008b      	lsls	r3, r1, #2
 8006552:	4621      	mov	r1, r4
 8006554:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006558:	4621      	mov	r1, r4
 800655a:	008a      	lsls	r2, r1, #2
 800655c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006560:	f7f9 fea6 	bl	80002b0 <__aeabi_uldivmod>
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	4b60      	ldr	r3, [pc, #384]	; (80066ec <UART_SetConfig+0x4e4>)
 800656a:	fba3 2302 	umull	r2, r3, r3, r2
 800656e:	095b      	lsrs	r3, r3, #5
 8006570:	011c      	lsls	r4, r3, #4
 8006572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006576:	2200      	movs	r2, #0
 8006578:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800657c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006580:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006584:	4642      	mov	r2, r8
 8006586:	464b      	mov	r3, r9
 8006588:	1891      	adds	r1, r2, r2
 800658a:	61b9      	str	r1, [r7, #24]
 800658c:	415b      	adcs	r3, r3
 800658e:	61fb      	str	r3, [r7, #28]
 8006590:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006594:	4641      	mov	r1, r8
 8006596:	1851      	adds	r1, r2, r1
 8006598:	6139      	str	r1, [r7, #16]
 800659a:	4649      	mov	r1, r9
 800659c:	414b      	adcs	r3, r1
 800659e:	617b      	str	r3, [r7, #20]
 80065a0:	f04f 0200 	mov.w	r2, #0
 80065a4:	f04f 0300 	mov.w	r3, #0
 80065a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065ac:	4659      	mov	r1, fp
 80065ae:	00cb      	lsls	r3, r1, #3
 80065b0:	4651      	mov	r1, sl
 80065b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065b6:	4651      	mov	r1, sl
 80065b8:	00ca      	lsls	r2, r1, #3
 80065ba:	4610      	mov	r0, r2
 80065bc:	4619      	mov	r1, r3
 80065be:	4603      	mov	r3, r0
 80065c0:	4642      	mov	r2, r8
 80065c2:	189b      	adds	r3, r3, r2
 80065c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065c8:	464b      	mov	r3, r9
 80065ca:	460a      	mov	r2, r1
 80065cc:	eb42 0303 	adc.w	r3, r2, r3
 80065d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80065de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80065e0:	f04f 0200 	mov.w	r2, #0
 80065e4:	f04f 0300 	mov.w	r3, #0
 80065e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80065ec:	4649      	mov	r1, r9
 80065ee:	008b      	lsls	r3, r1, #2
 80065f0:	4641      	mov	r1, r8
 80065f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065f6:	4641      	mov	r1, r8
 80065f8:	008a      	lsls	r2, r1, #2
 80065fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80065fe:	f7f9 fe57 	bl	80002b0 <__aeabi_uldivmod>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	4b39      	ldr	r3, [pc, #228]	; (80066ec <UART_SetConfig+0x4e4>)
 8006608:	fba3 1302 	umull	r1, r3, r3, r2
 800660c:	095b      	lsrs	r3, r3, #5
 800660e:	2164      	movs	r1, #100	; 0x64
 8006610:	fb01 f303 	mul.w	r3, r1, r3
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	011b      	lsls	r3, r3, #4
 8006618:	3332      	adds	r3, #50	; 0x32
 800661a:	4a34      	ldr	r2, [pc, #208]	; (80066ec <UART_SetConfig+0x4e4>)
 800661c:	fba2 2303 	umull	r2, r3, r2, r3
 8006620:	095b      	lsrs	r3, r3, #5
 8006622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006626:	441c      	add	r4, r3
 8006628:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800662c:	2200      	movs	r2, #0
 800662e:	673b      	str	r3, [r7, #112]	; 0x70
 8006630:	677a      	str	r2, [r7, #116]	; 0x74
 8006632:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006636:	4642      	mov	r2, r8
 8006638:	464b      	mov	r3, r9
 800663a:	1891      	adds	r1, r2, r2
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	415b      	adcs	r3, r3
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006646:	4641      	mov	r1, r8
 8006648:	1851      	adds	r1, r2, r1
 800664a:	6039      	str	r1, [r7, #0]
 800664c:	4649      	mov	r1, r9
 800664e:	414b      	adcs	r3, r1
 8006650:	607b      	str	r3, [r7, #4]
 8006652:	f04f 0200 	mov.w	r2, #0
 8006656:	f04f 0300 	mov.w	r3, #0
 800665a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800665e:	4659      	mov	r1, fp
 8006660:	00cb      	lsls	r3, r1, #3
 8006662:	4651      	mov	r1, sl
 8006664:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006668:	4651      	mov	r1, sl
 800666a:	00ca      	lsls	r2, r1, #3
 800666c:	4610      	mov	r0, r2
 800666e:	4619      	mov	r1, r3
 8006670:	4603      	mov	r3, r0
 8006672:	4642      	mov	r2, r8
 8006674:	189b      	adds	r3, r3, r2
 8006676:	66bb      	str	r3, [r7, #104]	; 0x68
 8006678:	464b      	mov	r3, r9
 800667a:	460a      	mov	r2, r1
 800667c:	eb42 0303 	adc.w	r3, r2, r3
 8006680:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	663b      	str	r3, [r7, #96]	; 0x60
 800668c:	667a      	str	r2, [r7, #100]	; 0x64
 800668e:	f04f 0200 	mov.w	r2, #0
 8006692:	f04f 0300 	mov.w	r3, #0
 8006696:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800669a:	4649      	mov	r1, r9
 800669c:	008b      	lsls	r3, r1, #2
 800669e:	4641      	mov	r1, r8
 80066a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066a4:	4641      	mov	r1, r8
 80066a6:	008a      	lsls	r2, r1, #2
 80066a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80066ac:	f7f9 fe00 	bl	80002b0 <__aeabi_uldivmod>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4b0d      	ldr	r3, [pc, #52]	; (80066ec <UART_SetConfig+0x4e4>)
 80066b6:	fba3 1302 	umull	r1, r3, r3, r2
 80066ba:	095b      	lsrs	r3, r3, #5
 80066bc:	2164      	movs	r1, #100	; 0x64
 80066be:	fb01 f303 	mul.w	r3, r1, r3
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	011b      	lsls	r3, r3, #4
 80066c6:	3332      	adds	r3, #50	; 0x32
 80066c8:	4a08      	ldr	r2, [pc, #32]	; (80066ec <UART_SetConfig+0x4e4>)
 80066ca:	fba2 2303 	umull	r2, r3, r2, r3
 80066ce:	095b      	lsrs	r3, r3, #5
 80066d0:	f003 020f 	and.w	r2, r3, #15
 80066d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4422      	add	r2, r4
 80066dc:	609a      	str	r2, [r3, #8]
}
 80066de:	bf00      	nop
 80066e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80066e4:	46bd      	mov	sp, r7
 80066e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066ea:	bf00      	nop
 80066ec:	51eb851f 	.word	0x51eb851f

080066f0 <__NVIC_SetPriority>:
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	4603      	mov	r3, r0
 80066f8:	6039      	str	r1, [r7, #0]
 80066fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006700:	2b00      	cmp	r3, #0
 8006702:	db0a      	blt.n	800671a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	b2da      	uxtb	r2, r3
 8006708:	490c      	ldr	r1, [pc, #48]	; (800673c <__NVIC_SetPriority+0x4c>)
 800670a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800670e:	0112      	lsls	r2, r2, #4
 8006710:	b2d2      	uxtb	r2, r2
 8006712:	440b      	add	r3, r1
 8006714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006718:	e00a      	b.n	8006730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	b2da      	uxtb	r2, r3
 800671e:	4908      	ldr	r1, [pc, #32]	; (8006740 <__NVIC_SetPriority+0x50>)
 8006720:	79fb      	ldrb	r3, [r7, #7]
 8006722:	f003 030f 	and.w	r3, r3, #15
 8006726:	3b04      	subs	r3, #4
 8006728:	0112      	lsls	r2, r2, #4
 800672a:	b2d2      	uxtb	r2, r2
 800672c:	440b      	add	r3, r1
 800672e:	761a      	strb	r2, [r3, #24]
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	e000e100 	.word	0xe000e100
 8006740:	e000ed00 	.word	0xe000ed00

08006744 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006744:	b580      	push	{r7, lr}
 8006746:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006748:	2100      	movs	r1, #0
 800674a:	f06f 0004 	mvn.w	r0, #4
 800674e:	f7ff ffcf 	bl	80066f0 <__NVIC_SetPriority>
#endif
}
 8006752:	bf00      	nop
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800675e:	f3ef 8305 	mrs	r3, IPSR
 8006762:	603b      	str	r3, [r7, #0]
  return(result);
 8006764:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800676a:	f06f 0305 	mvn.w	r3, #5
 800676e:	607b      	str	r3, [r7, #4]
 8006770:	e00c      	b.n	800678c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006772:	4b0a      	ldr	r3, [pc, #40]	; (800679c <osKernelInitialize+0x44>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d105      	bne.n	8006786 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800677a:	4b08      	ldr	r3, [pc, #32]	; (800679c <osKernelInitialize+0x44>)
 800677c:	2201      	movs	r2, #1
 800677e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006780:	2300      	movs	r3, #0
 8006782:	607b      	str	r3, [r7, #4]
 8006784:	e002      	b.n	800678c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006786:	f04f 33ff 	mov.w	r3, #4294967295
 800678a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800678c:	687b      	ldr	r3, [r7, #4]
}
 800678e:	4618      	mov	r0, r3
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	200015f0 	.word	0x200015f0

080067a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067a6:	f3ef 8305 	mrs	r3, IPSR
 80067aa:	603b      	str	r3, [r7, #0]
  return(result);
 80067ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80067b2:	f06f 0305 	mvn.w	r3, #5
 80067b6:	607b      	str	r3, [r7, #4]
 80067b8:	e010      	b.n	80067dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80067ba:	4b0b      	ldr	r3, [pc, #44]	; (80067e8 <osKernelStart+0x48>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d109      	bne.n	80067d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80067c2:	f7ff ffbf 	bl	8006744 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80067c6:	4b08      	ldr	r3, [pc, #32]	; (80067e8 <osKernelStart+0x48>)
 80067c8:	2202      	movs	r2, #2
 80067ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80067cc:	f001 fa48 	bl	8007c60 <vTaskStartScheduler>
      stat = osOK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	607b      	str	r3, [r7, #4]
 80067d4:	e002      	b.n	80067dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80067d6:	f04f 33ff 	mov.w	r3, #4294967295
 80067da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80067dc:	687b      	ldr	r3, [r7, #4]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	200015f0 	.word	0x200015f0

080067ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08e      	sub	sp, #56	; 0x38
 80067f0:	af04      	add	r7, sp, #16
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80067f8:	2300      	movs	r3, #0
 80067fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067fc:	f3ef 8305 	mrs	r3, IPSR
 8006800:	617b      	str	r3, [r7, #20]
  return(result);
 8006802:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006804:	2b00      	cmp	r3, #0
 8006806:	d17e      	bne.n	8006906 <osThreadNew+0x11a>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d07b      	beq.n	8006906 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800680e:	2380      	movs	r3, #128	; 0x80
 8006810:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006812:	2318      	movs	r3, #24
 8006814:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006816:	2300      	movs	r3, #0
 8006818:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800681a:	f04f 33ff 	mov.w	r3, #4294967295
 800681e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d045      	beq.n	80068b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d002      	beq.n	8006834 <osThreadNew+0x48>
        name = attr->name;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d008      	beq.n	800685a <osThreadNew+0x6e>
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	2b38      	cmp	r3, #56	; 0x38
 800684c:	d805      	bhi.n	800685a <osThreadNew+0x6e>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	2b00      	cmp	r3, #0
 8006858:	d001      	beq.n	800685e <osThreadNew+0x72>
        return (NULL);
 800685a:	2300      	movs	r3, #0
 800685c:	e054      	b.n	8006908 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d003      	beq.n	800686e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	089b      	lsrs	r3, r3, #2
 800686c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00e      	beq.n	8006894 <osThreadNew+0xa8>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	2b5b      	cmp	r3, #91	; 0x5b
 800687c:	d90a      	bls.n	8006894 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006882:	2b00      	cmp	r3, #0
 8006884:	d006      	beq.n	8006894 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d002      	beq.n	8006894 <osThreadNew+0xa8>
        mem = 1;
 800688e:	2301      	movs	r3, #1
 8006890:	61bb      	str	r3, [r7, #24]
 8006892:	e010      	b.n	80068b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10c      	bne.n	80068b6 <osThreadNew+0xca>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d108      	bne.n	80068b6 <osThreadNew+0xca>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d104      	bne.n	80068b6 <osThreadNew+0xca>
          mem = 0;
 80068ac:	2300      	movs	r3, #0
 80068ae:	61bb      	str	r3, [r7, #24]
 80068b0:	e001      	b.n	80068b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80068b2:	2300      	movs	r3, #0
 80068b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d110      	bne.n	80068de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068c4:	9202      	str	r2, [sp, #8]
 80068c6:	9301      	str	r3, [sp, #4]
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	6a3a      	ldr	r2, [r7, #32]
 80068d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 ffee 	bl	80078b4 <xTaskCreateStatic>
 80068d8:	4603      	mov	r3, r0
 80068da:	613b      	str	r3, [r7, #16]
 80068dc:	e013      	b.n	8006906 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d110      	bne.n	8006906 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	f107 0310 	add.w	r3, r7, #16
 80068ec:	9301      	str	r3, [sp, #4]
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f001 f839 	bl	800796e <xTaskCreate>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d001      	beq.n	8006906 <osThreadNew+0x11a>
            hTask = NULL;
 8006902:	2300      	movs	r3, #0
 8006904:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006906:	693b      	ldr	r3, [r7, #16]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3728      	adds	r7, #40	; 0x28
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006918:	f3ef 8305 	mrs	r3, IPSR
 800691c:	60bb      	str	r3, [r7, #8]
  return(result);
 800691e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <osDelay+0x1c>
    stat = osErrorISR;
 8006924:	f06f 0305 	mvn.w	r3, #5
 8006928:	60fb      	str	r3, [r7, #12]
 800692a:	e007      	b.n	800693c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800692c:	2300      	movs	r3, #0
 800692e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d002      	beq.n	800693c <osDelay+0x2c>
      vTaskDelay(ticks);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f001 f95e 	bl	8007bf8 <vTaskDelay>
    }
  }

  return (stat);
 800693c:	68fb      	ldr	r3, [r7, #12]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8006946:	b580      	push	{r7, lr}
 8006948:	b084      	sub	sp, #16
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f002 fb94 	bl	800907c <pvTimerGetTimerID>
 8006954:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d005      	beq.n	8006968 <TimerCallback+0x22>
    callb->func (callb->arg);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	6852      	ldr	r2, [r2, #4]
 8006964:	4610      	mov	r0, r2
 8006966:	4798      	blx	r3
  }
}
 8006968:	bf00      	nop
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8006970:	b580      	push	{r7, lr}
 8006972:	b08c      	sub	sp, #48	; 0x30
 8006974:	af02      	add	r7, sp, #8
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	607a      	str	r2, [r7, #4]
 800697a:	603b      	str	r3, [r7, #0]
 800697c:	460b      	mov	r3, r1
 800697e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8006980:	2300      	movs	r3, #0
 8006982:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006984:	f3ef 8305 	mrs	r3, IPSR
 8006988:	613b      	str	r3, [r7, #16]
  return(result);
 800698a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800698c:	2b00      	cmp	r3, #0
 800698e:	d163      	bne.n	8006a58 <osTimerNew+0xe8>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d060      	beq.n	8006a58 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8006996:	2008      	movs	r0, #8
 8006998:	f002 fdde 	bl	8009558 <pvPortMalloc>
 800699c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d059      	beq.n	8006a58 <osTimerNew+0xe8>
      callb->func = func;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80069b0:	7afb      	ldrb	r3, [r7, #11]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d102      	bne.n	80069bc <osTimerNew+0x4c>
        reload = pdFALSE;
 80069b6:	2300      	movs	r3, #0
 80069b8:	61fb      	str	r3, [r7, #28]
 80069ba:	e001      	b.n	80069c0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80069bc:	2301      	movs	r3, #1
 80069be:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80069c0:	f04f 33ff 	mov.w	r3, #4294967295
 80069c4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80069c6:	2300      	movs	r3, #0
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d01c      	beq.n	8006a0a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d002      	beq.n	80069de <osTimerNew+0x6e>
          name = attr->name;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d006      	beq.n	80069f4 <osTimerNew+0x84>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	2b2b      	cmp	r3, #43	; 0x2b
 80069ec:	d902      	bls.n	80069f4 <osTimerNew+0x84>
          mem = 1;
 80069ee:	2301      	movs	r3, #1
 80069f0:	61bb      	str	r3, [r7, #24]
 80069f2:	e00c      	b.n	8006a0e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d108      	bne.n	8006a0e <osTimerNew+0x9e>
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d104      	bne.n	8006a0e <osTimerNew+0x9e>
            mem = 0;
 8006a04:	2300      	movs	r3, #0
 8006a06:	61bb      	str	r3, [r7, #24]
 8006a08:	e001      	b.n	8006a0e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d10c      	bne.n	8006a2e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	9301      	str	r3, [sp, #4]
 8006a1a:	4b12      	ldr	r3, [pc, #72]	; (8006a64 <osTimerNew+0xf4>)
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	69fa      	ldr	r2, [r7, #28]
 8006a22:	2101      	movs	r1, #1
 8006a24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a26:	f001 ffaa 	bl	800897e <xTimerCreateStatic>
 8006a2a:	6238      	str	r0, [r7, #32]
 8006a2c:	e00b      	b.n	8006a46 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d108      	bne.n	8006a46 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8006a34:	4b0b      	ldr	r3, [pc, #44]	; (8006a64 <osTimerNew+0xf4>)
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	69fa      	ldr	r2, [r7, #28]
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a40:	f001 ff7c 	bl	800893c <xTimerCreate>
 8006a44:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d105      	bne.n	8006a58 <osTimerNew+0xe8>
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d002      	beq.n	8006a58 <osTimerNew+0xe8>
        vPortFree (callb);
 8006a52:	6978      	ldr	r0, [r7, #20]
 8006a54:	f002 fe4c 	bl	80096f0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8006a58:	6a3b      	ldr	r3, [r7, #32]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3728      	adds	r7, #40	; 0x28
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	08006947 	.word	0x08006947

08006a68 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b088      	sub	sp, #32
 8006a6c:	af02      	add	r7, sp, #8
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a76:	f3ef 8305 	mrs	r3, IPSR
 8006a7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <osTimerStart+0x22>
    stat = osErrorISR;
 8006a82:	f06f 0305 	mvn.w	r3, #5
 8006a86:	617b      	str	r3, [r7, #20]
 8006a88:	e017      	b.n	8006aba <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d103      	bne.n	8006a98 <osTimerStart+0x30>
    stat = osErrorParameter;
 8006a90:	f06f 0303 	mvn.w	r3, #3
 8006a94:	617b      	str	r3, [r7, #20]
 8006a96:	e010      	b.n	8006aba <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8006a98:	2300      	movs	r3, #0
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	2104      	movs	r1, #4
 8006aa2:	6938      	ldr	r0, [r7, #16]
 8006aa4:	f001 ffe4 	bl	8008a70 <xTimerGenericCommand>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d102      	bne.n	8006ab4 <osTimerStart+0x4c>
      stat = osOK;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	617b      	str	r3, [r7, #20]
 8006ab2:	e002      	b.n	8006aba <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8006ab4:	f06f 0302 	mvn.w	r3, #2
 8006ab8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006aba:	697b      	ldr	r3, [r7, #20]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	4a07      	ldr	r2, [pc, #28]	; (8006af0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006ad4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	4a06      	ldr	r2, [pc, #24]	; (8006af4 <vApplicationGetIdleTaskMemory+0x30>)
 8006ada:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2280      	movs	r2, #128	; 0x80
 8006ae0:	601a      	str	r2, [r3, #0]
}
 8006ae2:	bf00      	nop
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	200015f4 	.word	0x200015f4
 8006af4:	20001650 	.word	0x20001650

08006af8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4a07      	ldr	r2, [pc, #28]	; (8006b24 <vApplicationGetTimerTaskMemory+0x2c>)
 8006b08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	4a06      	ldr	r2, [pc, #24]	; (8006b28 <vApplicationGetTimerTaskMemory+0x30>)
 8006b0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b16:	601a      	str	r2, [r3, #0]
}
 8006b18:	bf00      	nop
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr
 8006b24:	20001850 	.word	0x20001850
 8006b28:	200018ac 	.word	0x200018ac

08006b2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f103 0208 	add.w	r2, r3, #8
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f04f 32ff 	mov.w	r2, #4294967295
 8006b44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f103 0208 	add.w	r2, r3, #8
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f103 0208 	add.w	r2, r3, #8
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b7a:	bf00      	nop
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b86:	b480      	push	{r7}
 8006b88:	b085      	sub	sp, #20
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	689a      	ldr	r2, [r3, #8]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	1c5a      	adds	r2, r3, #1
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	601a      	str	r2, [r3, #0]
}
 8006bc2:	bf00      	nop
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b085      	sub	sp, #20
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be4:	d103      	bne.n	8006bee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	60fb      	str	r3, [r7, #12]
 8006bec:	e00c      	b.n	8006c08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	3308      	adds	r3, #8
 8006bf2:	60fb      	str	r3, [r7, #12]
 8006bf4:	e002      	b.n	8006bfc <vListInsert+0x2e>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	60fb      	str	r3, [r7, #12]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d2f6      	bcs.n	8006bf6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	683a      	ldr	r2, [r7, #0]
 8006c16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	683a      	ldr	r2, [r7, #0]
 8006c22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	1c5a      	adds	r2, r3, #1
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	601a      	str	r2, [r3, #0]
}
 8006c34:	bf00      	nop
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	6892      	ldr	r2, [r2, #8]
 8006c56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	6852      	ldr	r2, [r2, #4]
 8006c60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d103      	bne.n	8006c74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689a      	ldr	r2, [r3, #8]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	1e5a      	subs	r2, r3, #1
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10a      	bne.n	8006cbe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006cba:	bf00      	nop
 8006cbc:	e7fe      	b.n	8006cbc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006cbe:	f002 fb29 	bl	8009314 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cca:	68f9      	ldr	r1, [r7, #12]
 8006ccc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006cce:	fb01 f303 	mul.w	r3, r1, r3
 8006cd2:	441a      	add	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	68f9      	ldr	r1, [r7, #12]
 8006cf2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006cf4:	fb01 f303 	mul.w	r3, r1, r3
 8006cf8:	441a      	add	r2, r3
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	22ff      	movs	r2, #255	; 0xff
 8006d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	22ff      	movs	r2, #255	; 0xff
 8006d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d114      	bne.n	8006d3e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d01a      	beq.n	8006d52 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	3310      	adds	r3, #16
 8006d20:	4618      	mov	r0, r3
 8006d22:	f001 fa27 	bl	8008174 <xTaskRemoveFromEventList>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d012      	beq.n	8006d52 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006d2c:	4b0c      	ldr	r3, [pc, #48]	; (8006d60 <xQueueGenericReset+0xcc>)
 8006d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	e009      	b.n	8006d52 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	3310      	adds	r3, #16
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7ff fef2 	bl	8006b2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	3324      	adds	r3, #36	; 0x24
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7ff feed 	bl	8006b2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d52:	f002 fb0f 	bl	8009374 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006d56:	2301      	movs	r3, #1
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	e000ed04 	.word	0xe000ed04

08006d64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b08e      	sub	sp, #56	; 0x38
 8006d68:	af02      	add	r7, sp, #8
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
 8006d70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10a      	bne.n	8006d8e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d8a:	bf00      	nop
 8006d8c:	e7fe      	b.n	8006d8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10a      	bne.n	8006daa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d98:	f383 8811 	msr	BASEPRI, r3
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006da6:	bf00      	nop
 8006da8:	e7fe      	b.n	8006da8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d002      	beq.n	8006db6 <xQueueGenericCreateStatic+0x52>
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <xQueueGenericCreateStatic+0x56>
 8006db6:	2301      	movs	r3, #1
 8006db8:	e000      	b.n	8006dbc <xQueueGenericCreateStatic+0x58>
 8006dba:	2300      	movs	r3, #0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10a      	bne.n	8006dd6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	623b      	str	r3, [r7, #32]
}
 8006dd2:	bf00      	nop
 8006dd4:	e7fe      	b.n	8006dd4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d102      	bne.n	8006de2 <xQueueGenericCreateStatic+0x7e>
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d101      	bne.n	8006de6 <xQueueGenericCreateStatic+0x82>
 8006de2:	2301      	movs	r3, #1
 8006de4:	e000      	b.n	8006de8 <xQueueGenericCreateStatic+0x84>
 8006de6:	2300      	movs	r3, #0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10a      	bne.n	8006e02 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	61fb      	str	r3, [r7, #28]
}
 8006dfe:	bf00      	nop
 8006e00:	e7fe      	b.n	8006e00 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006e02:	2350      	movs	r3, #80	; 0x50
 8006e04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	2b50      	cmp	r3, #80	; 0x50
 8006e0a:	d00a      	beq.n	8006e22 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e10:	f383 8811 	msr	BASEPRI, r3
 8006e14:	f3bf 8f6f 	isb	sy
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	61bb      	str	r3, [r7, #24]
}
 8006e1e:	bf00      	nop
 8006e20:	e7fe      	b.n	8006e20 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006e22:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00d      	beq.n	8006e4a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e36:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	68b9      	ldr	r1, [r7, #8]
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 f805 	bl	8006e54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3730      	adds	r7, #48	; 0x30
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
 8006e60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d103      	bne.n	8006e70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	601a      	str	r2, [r3, #0]
 8006e6e:	e002      	b.n	8006e76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e82:	2101      	movs	r1, #1
 8006e84:	69b8      	ldr	r0, [r7, #24]
 8006e86:	f7ff ff05 	bl	8006c94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	78fa      	ldrb	r2, [r7, #3]
 8006e8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e92:	bf00      	nop
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
	...

08006e9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b08e      	sub	sp, #56	; 0x38
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
 8006ea8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10a      	bne.n	8006ece <xQueueGenericSend+0x32>
	__asm volatile
 8006eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006eca:	bf00      	nop
 8006ecc:	e7fe      	b.n	8006ecc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d103      	bne.n	8006edc <xQueueGenericSend+0x40>
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <xQueueGenericSend+0x44>
 8006edc:	2301      	movs	r3, #1
 8006ede:	e000      	b.n	8006ee2 <xQueueGenericSend+0x46>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10a      	bne.n	8006efc <xQueueGenericSend+0x60>
	__asm volatile
 8006ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eea:	f383 8811 	msr	BASEPRI, r3
 8006eee:	f3bf 8f6f 	isb	sy
 8006ef2:	f3bf 8f4f 	dsb	sy
 8006ef6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ef8:	bf00      	nop
 8006efa:	e7fe      	b.n	8006efa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d103      	bne.n	8006f0a <xQueueGenericSend+0x6e>
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d101      	bne.n	8006f0e <xQueueGenericSend+0x72>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e000      	b.n	8006f10 <xQueueGenericSend+0x74>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10a      	bne.n	8006f2a <xQueueGenericSend+0x8e>
	__asm volatile
 8006f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f18:	f383 8811 	msr	BASEPRI, r3
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	623b      	str	r3, [r7, #32]
}
 8006f26:	bf00      	nop
 8006f28:	e7fe      	b.n	8006f28 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f2a:	f001 fae1 	bl	80084f0 <xTaskGetSchedulerState>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d102      	bne.n	8006f3a <xQueueGenericSend+0x9e>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <xQueueGenericSend+0xa2>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e000      	b.n	8006f40 <xQueueGenericSend+0xa4>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10a      	bne.n	8006f5a <xQueueGenericSend+0xbe>
	__asm volatile
 8006f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	61fb      	str	r3, [r7, #28]
}
 8006f56:	bf00      	nop
 8006f58:	e7fe      	b.n	8006f58 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f5a:	f002 f9db 	bl	8009314 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d302      	bcc.n	8006f70 <xQueueGenericSend+0xd4>
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d129      	bne.n	8006fc4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f70:	683a      	ldr	r2, [r7, #0]
 8006f72:	68b9      	ldr	r1, [r7, #8]
 8006f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f76:	f000 fb2f 	bl	80075d8 <prvCopyDataToQueue>
 8006f7a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d010      	beq.n	8006fa6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f86:	3324      	adds	r3, #36	; 0x24
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f001 f8f3 	bl	8008174 <xTaskRemoveFromEventList>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d013      	beq.n	8006fbc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f94:	4b3f      	ldr	r3, [pc, #252]	; (8007094 <xQueueGenericSend+0x1f8>)
 8006f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	f3bf 8f6f 	isb	sy
 8006fa4:	e00a      	b.n	8006fbc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d007      	beq.n	8006fbc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006fac:	4b39      	ldr	r3, [pc, #228]	; (8007094 <xQueueGenericSend+0x1f8>)
 8006fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006fbc:	f002 f9da 	bl	8009374 <vPortExitCritical>
				return pdPASS;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e063      	b.n	800708c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d103      	bne.n	8006fd2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fca:	f002 f9d3 	bl	8009374 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	e05c      	b.n	800708c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d106      	bne.n	8006fe6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fd8:	f107 0314 	add.w	r3, r7, #20
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f001 f92d 	bl	800823c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fe6:	f002 f9c5 	bl	8009374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fea:	f000 fe9f 	bl	8007d2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fee:	f002 f991 	bl	8009314 <vPortEnterCritical>
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ff8:	b25b      	sxtb	r3, r3
 8006ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffe:	d103      	bne.n	8007008 <xQueueGenericSend+0x16c>
 8007000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007002:	2200      	movs	r2, #0
 8007004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800700e:	b25b      	sxtb	r3, r3
 8007010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007014:	d103      	bne.n	800701e <xQueueGenericSend+0x182>
 8007016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800701e:	f002 f9a9 	bl	8009374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007022:	1d3a      	adds	r2, r7, #4
 8007024:	f107 0314 	add.w	r3, r7, #20
 8007028:	4611      	mov	r1, r2
 800702a:	4618      	mov	r0, r3
 800702c:	f001 f91c 	bl	8008268 <xTaskCheckForTimeOut>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d124      	bne.n	8007080 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007036:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007038:	f000 fbc6 	bl	80077c8 <prvIsQueueFull>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d018      	beq.n	8007074 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007044:	3310      	adds	r3, #16
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	4611      	mov	r1, r2
 800704a:	4618      	mov	r0, r3
 800704c:	f001 f842 	bl	80080d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007052:	f000 fb51 	bl	80076f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007056:	f000 fe77 	bl	8007d48 <xTaskResumeAll>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	f47f af7c 	bne.w	8006f5a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007062:	4b0c      	ldr	r3, [pc, #48]	; (8007094 <xQueueGenericSend+0x1f8>)
 8007064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	e772      	b.n	8006f5a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007076:	f000 fb3f 	bl	80076f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800707a:	f000 fe65 	bl	8007d48 <xTaskResumeAll>
 800707e:	e76c      	b.n	8006f5a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007082:	f000 fb39 	bl	80076f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007086:	f000 fe5f 	bl	8007d48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800708a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800708c:	4618      	mov	r0, r3
 800708e:	3738      	adds	r7, #56	; 0x38
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	e000ed04 	.word	0xe000ed04

08007098 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b090      	sub	sp, #64	; 0x40
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
 80070a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80070aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10a      	bne.n	80070c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80070b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070c2:	bf00      	nop
 80070c4:	e7fe      	b.n	80070c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d103      	bne.n	80070d4 <xQueueGenericSendFromISR+0x3c>
 80070cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d101      	bne.n	80070d8 <xQueueGenericSendFromISR+0x40>
 80070d4:	2301      	movs	r3, #1
 80070d6:	e000      	b.n	80070da <xQueueGenericSendFromISR+0x42>
 80070d8:	2300      	movs	r3, #0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10a      	bne.n	80070f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80070de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070f0:	bf00      	nop
 80070f2:	e7fe      	b.n	80070f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d103      	bne.n	8007102 <xQueueGenericSendFromISR+0x6a>
 80070fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d101      	bne.n	8007106 <xQueueGenericSendFromISR+0x6e>
 8007102:	2301      	movs	r3, #1
 8007104:	e000      	b.n	8007108 <xQueueGenericSendFromISR+0x70>
 8007106:	2300      	movs	r3, #0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10a      	bne.n	8007122 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	623b      	str	r3, [r7, #32]
}
 800711e:	bf00      	nop
 8007120:	e7fe      	b.n	8007120 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007122:	f002 f9d9 	bl	80094d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007126:	f3ef 8211 	mrs	r2, BASEPRI
 800712a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	61fa      	str	r2, [r7, #28]
 800713c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800713e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007140:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800714a:	429a      	cmp	r2, r3
 800714c:	d302      	bcc.n	8007154 <xQueueGenericSendFromISR+0xbc>
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b02      	cmp	r3, #2
 8007152:	d12f      	bne.n	80071b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800715a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800715e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007162:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	68b9      	ldr	r1, [r7, #8]
 8007168:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800716a:	f000 fa35 	bl	80075d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800716e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007176:	d112      	bne.n	800719e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717c:	2b00      	cmp	r3, #0
 800717e:	d016      	beq.n	80071ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007182:	3324      	adds	r3, #36	; 0x24
 8007184:	4618      	mov	r0, r3
 8007186:	f000 fff5 	bl	8008174 <xTaskRemoveFromEventList>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00e      	beq.n	80071ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00b      	beq.n	80071ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	e007      	b.n	80071ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800719e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80071a2:	3301      	adds	r3, #1
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	b25a      	sxtb	r2, r3
 80071a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80071ae:	2301      	movs	r3, #1
 80071b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80071b2:	e001      	b.n	80071b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80071b4:	2300      	movs	r3, #0
 80071b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80071c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3740      	adds	r7, #64	; 0x40
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
	...

080071d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b08c      	sub	sp, #48	; 0x30
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80071dc:	2300      	movs	r3, #0
 80071de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10a      	bne.n	8007200 <xQueueReceive+0x30>
	__asm volatile
 80071ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	623b      	str	r3, [r7, #32]
}
 80071fc:	bf00      	nop
 80071fe:	e7fe      	b.n	80071fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d103      	bne.n	800720e <xQueueReceive+0x3e>
 8007206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <xQueueReceive+0x42>
 800720e:	2301      	movs	r3, #1
 8007210:	e000      	b.n	8007214 <xQueueReceive+0x44>
 8007212:	2300      	movs	r3, #0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10a      	bne.n	800722e <xQueueReceive+0x5e>
	__asm volatile
 8007218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721c:	f383 8811 	msr	BASEPRI, r3
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	61fb      	str	r3, [r7, #28]
}
 800722a:	bf00      	nop
 800722c:	e7fe      	b.n	800722c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800722e:	f001 f95f 	bl	80084f0 <xTaskGetSchedulerState>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d102      	bne.n	800723e <xQueueReceive+0x6e>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <xQueueReceive+0x72>
 800723e:	2301      	movs	r3, #1
 8007240:	e000      	b.n	8007244 <xQueueReceive+0x74>
 8007242:	2300      	movs	r3, #0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10a      	bne.n	800725e <xQueueReceive+0x8e>
	__asm volatile
 8007248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	61bb      	str	r3, [r7, #24]
}
 800725a:	bf00      	nop
 800725c:	e7fe      	b.n	800725c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800725e:	f002 f859 	bl	8009314 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007266:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726a:	2b00      	cmp	r3, #0
 800726c:	d01f      	beq.n	80072ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800726e:	68b9      	ldr	r1, [r7, #8]
 8007270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007272:	f000 fa1b 	bl	80076ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	1e5a      	subs	r2, r3, #1
 800727a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800727e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00f      	beq.n	80072a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007288:	3310      	adds	r3, #16
 800728a:	4618      	mov	r0, r3
 800728c:	f000 ff72 	bl	8008174 <xTaskRemoveFromEventList>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d007      	beq.n	80072a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007296:	4b3d      	ldr	r3, [pc, #244]	; (800738c <xQueueReceive+0x1bc>)
 8007298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800729c:	601a      	str	r2, [r3, #0]
 800729e:	f3bf 8f4f 	dsb	sy
 80072a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80072a6:	f002 f865 	bl	8009374 <vPortExitCritical>
				return pdPASS;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e069      	b.n	8007382 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d103      	bne.n	80072bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80072b4:	f002 f85e 	bl	8009374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80072b8:	2300      	movs	r3, #0
 80072ba:	e062      	b.n	8007382 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d106      	bne.n	80072d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072c2:	f107 0310 	add.w	r3, r7, #16
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 ffb8 	bl	800823c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072cc:	2301      	movs	r3, #1
 80072ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072d0:	f002 f850 	bl	8009374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072d4:	f000 fd2a 	bl	8007d2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072d8:	f002 f81c 	bl	8009314 <vPortEnterCritical>
 80072dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072e2:	b25b      	sxtb	r3, r3
 80072e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e8:	d103      	bne.n	80072f2 <xQueueReceive+0x122>
 80072ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072f8:	b25b      	sxtb	r3, r3
 80072fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fe:	d103      	bne.n	8007308 <xQueueReceive+0x138>
 8007300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007302:	2200      	movs	r2, #0
 8007304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007308:	f002 f834 	bl	8009374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800730c:	1d3a      	adds	r2, r7, #4
 800730e:	f107 0310 	add.w	r3, r7, #16
 8007312:	4611      	mov	r1, r2
 8007314:	4618      	mov	r0, r3
 8007316:	f000 ffa7 	bl	8008268 <xTaskCheckForTimeOut>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d123      	bne.n	8007368 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007322:	f000 fa3b 	bl	800779c <prvIsQueueEmpty>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d017      	beq.n	800735c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800732c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732e:	3324      	adds	r3, #36	; 0x24
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	4611      	mov	r1, r2
 8007334:	4618      	mov	r0, r3
 8007336:	f000 fecd 	bl	80080d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800733a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800733c:	f000 f9dc 	bl	80076f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007340:	f000 fd02 	bl	8007d48 <xTaskResumeAll>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d189      	bne.n	800725e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800734a:	4b10      	ldr	r3, [pc, #64]	; (800738c <xQueueReceive+0x1bc>)
 800734c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007350:	601a      	str	r2, [r3, #0]
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	e780      	b.n	800725e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800735c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800735e:	f000 f9cb 	bl	80076f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007362:	f000 fcf1 	bl	8007d48 <xTaskResumeAll>
 8007366:	e77a      	b.n	800725e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800736a:	f000 f9c5 	bl	80076f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800736e:	f000 fceb 	bl	8007d48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007374:	f000 fa12 	bl	800779c <prvIsQueueEmpty>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	f43f af6f 	beq.w	800725e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007380:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007382:	4618      	mov	r0, r3
 8007384:	3730      	adds	r7, #48	; 0x30
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	e000ed04 	.word	0xe000ed04

08007390 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b08e      	sub	sp, #56	; 0x38
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800739a:	2300      	movs	r3, #0
 800739c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80073a2:	2300      	movs	r3, #0
 80073a4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80073a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10a      	bne.n	80073c2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80073ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b0:	f383 8811 	msr	BASEPRI, r3
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	623b      	str	r3, [r7, #32]
}
 80073be:	bf00      	nop
 80073c0:	e7fe      	b.n	80073c0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80073c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80073ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	61fb      	str	r3, [r7, #28]
}
 80073dc:	bf00      	nop
 80073de:	e7fe      	b.n	80073de <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073e0:	f001 f886 	bl	80084f0 <xTaskGetSchedulerState>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d102      	bne.n	80073f0 <xQueueSemaphoreTake+0x60>
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d101      	bne.n	80073f4 <xQueueSemaphoreTake+0x64>
 80073f0:	2301      	movs	r3, #1
 80073f2:	e000      	b.n	80073f6 <xQueueSemaphoreTake+0x66>
 80073f4:	2300      	movs	r3, #0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10a      	bne.n	8007410 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80073fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	61bb      	str	r3, [r7, #24]
}
 800740c:	bf00      	nop
 800740e:	e7fe      	b.n	800740e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007410:	f001 ff80 	bl	8009314 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007418:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800741a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741c:	2b00      	cmp	r3, #0
 800741e:	d024      	beq.n	800746a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	1e5a      	subs	r2, r3, #1
 8007424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007426:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d104      	bne.n	800743a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007430:	f001 f9d4 	bl	80087dc <pvTaskIncrementMutexHeldCount>
 8007434:	4602      	mov	r2, r0
 8007436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007438:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800743a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00f      	beq.n	8007462 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007444:	3310      	adds	r3, #16
 8007446:	4618      	mov	r0, r3
 8007448:	f000 fe94 	bl	8008174 <xTaskRemoveFromEventList>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d007      	beq.n	8007462 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007452:	4b54      	ldr	r3, [pc, #336]	; (80075a4 <xQueueSemaphoreTake+0x214>)
 8007454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007462:	f001 ff87 	bl	8009374 <vPortExitCritical>
				return pdPASS;
 8007466:	2301      	movs	r3, #1
 8007468:	e097      	b.n	800759a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d111      	bne.n	8007494 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00a      	beq.n	800748c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747a:	f383 8811 	msr	BASEPRI, r3
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	617b      	str	r3, [r7, #20]
}
 8007488:	bf00      	nop
 800748a:	e7fe      	b.n	800748a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800748c:	f001 ff72 	bl	8009374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007490:	2300      	movs	r3, #0
 8007492:	e082      	b.n	800759a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007496:	2b00      	cmp	r3, #0
 8007498:	d106      	bne.n	80074a8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800749a:	f107 030c 	add.w	r3, r7, #12
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 fecc 	bl	800823c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074a4:	2301      	movs	r3, #1
 80074a6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074a8:	f001 ff64 	bl	8009374 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074ac:	f000 fc3e 	bl	8007d2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074b0:	f001 ff30 	bl	8009314 <vPortEnterCritical>
 80074b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074ba:	b25b      	sxtb	r3, r3
 80074bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c0:	d103      	bne.n	80074ca <xQueueSemaphoreTake+0x13a>
 80074c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074d0:	b25b      	sxtb	r3, r3
 80074d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d6:	d103      	bne.n	80074e0 <xQueueSemaphoreTake+0x150>
 80074d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074e0:	f001 ff48 	bl	8009374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074e4:	463a      	mov	r2, r7
 80074e6:	f107 030c 	add.w	r3, r7, #12
 80074ea:	4611      	mov	r1, r2
 80074ec:	4618      	mov	r0, r3
 80074ee:	f000 febb 	bl	8008268 <xTaskCheckForTimeOut>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d132      	bne.n	800755e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074fa:	f000 f94f 	bl	800779c <prvIsQueueEmpty>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d026      	beq.n	8007552 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d109      	bne.n	8007520 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800750c:	f001 ff02 	bl	8009314 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	4618      	mov	r0, r3
 8007516:	f001 f809 	bl	800852c <xTaskPriorityInherit>
 800751a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800751c:	f001 ff2a 	bl	8009374 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007522:	3324      	adds	r3, #36	; 0x24
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	4611      	mov	r1, r2
 8007528:	4618      	mov	r0, r3
 800752a:	f000 fdd3 	bl	80080d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800752e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007530:	f000 f8e2 	bl	80076f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007534:	f000 fc08 	bl	8007d48 <xTaskResumeAll>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	f47f af68 	bne.w	8007410 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007540:	4b18      	ldr	r3, [pc, #96]	; (80075a4 <xQueueSemaphoreTake+0x214>)
 8007542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007546:	601a      	str	r2, [r3, #0]
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	e75e      	b.n	8007410 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007554:	f000 f8d0 	bl	80076f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007558:	f000 fbf6 	bl	8007d48 <xTaskResumeAll>
 800755c:	e758      	b.n	8007410 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800755e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007560:	f000 f8ca 	bl	80076f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007564:	f000 fbf0 	bl	8007d48 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007568:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800756a:	f000 f917 	bl	800779c <prvIsQueueEmpty>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	f43f af4d 	beq.w	8007410 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00d      	beq.n	8007598 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800757c:	f001 feca 	bl	8009314 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007580:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007582:	f000 f811 	bl	80075a8 <prvGetDisinheritPriorityAfterTimeout>
 8007586:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800758e:	4618      	mov	r0, r3
 8007590:	f001 f8a2 	bl	80086d8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007594:	f001 feee 	bl	8009374 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007598:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800759a:	4618      	mov	r0, r3
 800759c:	3738      	adds	r7, #56	; 0x38
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	e000ed04 	.word	0xe000ed04

080075a8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d006      	beq.n	80075c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80075c2:	60fb      	str	r3, [r7, #12]
 80075c4:	e001      	b.n	80075ca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80075c6:	2300      	movs	r3, #0
 80075c8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80075ca:	68fb      	ldr	r3, [r7, #12]
	}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80075e4:	2300      	movs	r3, #0
 80075e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10d      	bne.n	8007612 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d14d      	bne.n	800769a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	4618      	mov	r0, r3
 8007604:	f000 fffa 	bl	80085fc <xTaskPriorityDisinherit>
 8007608:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	609a      	str	r2, [r3, #8]
 8007610:	e043      	b.n	800769a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d119      	bne.n	800764c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6858      	ldr	r0, [r3, #4]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007620:	461a      	mov	r2, r3
 8007622:	68b9      	ldr	r1, [r7, #8]
 8007624:	f003 fc76 	bl	800af14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007630:	441a      	add	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	429a      	cmp	r2, r3
 8007640:	d32b      	bcc.n	800769a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	605a      	str	r2, [r3, #4]
 800764a:	e026      	b.n	800769a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	68d8      	ldr	r0, [r3, #12]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007654:	461a      	mov	r2, r3
 8007656:	68b9      	ldr	r1, [r7, #8]
 8007658:	f003 fc5c 	bl	800af14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	68da      	ldr	r2, [r3, #12]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007664:	425b      	negs	r3, r3
 8007666:	441a      	add	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	68da      	ldr	r2, [r3, #12]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	429a      	cmp	r2, r3
 8007676:	d207      	bcs.n	8007688 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	689a      	ldr	r2, [r3, #8]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007680:	425b      	negs	r3, r3
 8007682:	441a      	add	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2b02      	cmp	r3, #2
 800768c:	d105      	bne.n	800769a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d002      	beq.n	800769a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	3b01      	subs	r3, #1
 8007698:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	1c5a      	adds	r2, r3, #1
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80076a2:	697b      	ldr	r3, [r7, #20]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d018      	beq.n	80076f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68da      	ldr	r2, [r3, #12]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c6:	441a      	add	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68da      	ldr	r2, [r3, #12]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d303      	bcc.n	80076e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	68d9      	ldr	r1, [r3, #12]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e8:	461a      	mov	r2, r3
 80076ea:	6838      	ldr	r0, [r7, #0]
 80076ec:	f003 fc12 	bl	800af14 <memcpy>
	}
}
 80076f0:	bf00      	nop
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007700:	f001 fe08 	bl	8009314 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800770a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800770c:	e011      	b.n	8007732 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007712:	2b00      	cmp	r3, #0
 8007714:	d012      	beq.n	800773c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	3324      	adds	r3, #36	; 0x24
 800771a:	4618      	mov	r0, r3
 800771c:	f000 fd2a 	bl	8008174 <xTaskRemoveFromEventList>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007726:	f000 fe01 	bl	800832c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800772a:	7bfb      	ldrb	r3, [r7, #15]
 800772c:	3b01      	subs	r3, #1
 800772e:	b2db      	uxtb	r3, r3
 8007730:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007736:	2b00      	cmp	r3, #0
 8007738:	dce9      	bgt.n	800770e <prvUnlockQueue+0x16>
 800773a:	e000      	b.n	800773e <prvUnlockQueue+0x46>
					break;
 800773c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	22ff      	movs	r2, #255	; 0xff
 8007742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007746:	f001 fe15 	bl	8009374 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800774a:	f001 fde3 	bl	8009314 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007754:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007756:	e011      	b.n	800777c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d012      	beq.n	8007786 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	3310      	adds	r3, #16
 8007764:	4618      	mov	r0, r3
 8007766:	f000 fd05 	bl	8008174 <xTaskRemoveFromEventList>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d001      	beq.n	8007774 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007770:	f000 fddc 	bl	800832c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007774:	7bbb      	ldrb	r3, [r7, #14]
 8007776:	3b01      	subs	r3, #1
 8007778:	b2db      	uxtb	r3, r3
 800777a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800777c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007780:	2b00      	cmp	r3, #0
 8007782:	dce9      	bgt.n	8007758 <prvUnlockQueue+0x60>
 8007784:	e000      	b.n	8007788 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007786:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	22ff      	movs	r2, #255	; 0xff
 800778c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007790:	f001 fdf0 	bl	8009374 <vPortExitCritical>
}
 8007794:	bf00      	nop
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077a4:	f001 fdb6 	bl	8009314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d102      	bne.n	80077b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80077b0:	2301      	movs	r3, #1
 80077b2:	60fb      	str	r3, [r7, #12]
 80077b4:	e001      	b.n	80077ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80077b6:	2300      	movs	r3, #0
 80077b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077ba:	f001 fddb 	bl	8009374 <vPortExitCritical>

	return xReturn;
 80077be:	68fb      	ldr	r3, [r7, #12]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077d0:	f001 fda0 	bl	8009314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077dc:	429a      	cmp	r2, r3
 80077de:	d102      	bne.n	80077e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80077e0:	2301      	movs	r3, #1
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	e001      	b.n	80077ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80077e6:	2300      	movs	r3, #0
 80077e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077ea:	f001 fdc3 	bl	8009374 <vPortExitCritical>

	return xReturn;
 80077ee:	68fb      	ldr	r3, [r7, #12]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007802:	2300      	movs	r3, #0
 8007804:	60fb      	str	r3, [r7, #12]
 8007806:	e014      	b.n	8007832 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007808:	4a0f      	ldr	r2, [pc, #60]	; (8007848 <vQueueAddToRegistry+0x50>)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10b      	bne.n	800782c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007814:	490c      	ldr	r1, [pc, #48]	; (8007848 <vQueueAddToRegistry+0x50>)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	683a      	ldr	r2, [r7, #0]
 800781a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800781e:	4a0a      	ldr	r2, [pc, #40]	; (8007848 <vQueueAddToRegistry+0x50>)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	00db      	lsls	r3, r3, #3
 8007824:	4413      	add	r3, r2
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800782a:	e006      	b.n	800783a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	3301      	adds	r3, #1
 8007830:	60fb      	str	r3, [r7, #12]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2b07      	cmp	r3, #7
 8007836:	d9e7      	bls.n	8007808 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007838:	bf00      	nop
 800783a:	bf00      	nop
 800783c:	3714      	adds	r7, #20
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	20001cac 	.word	0x20001cac

0800784c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800785c:	f001 fd5a 	bl	8009314 <vPortEnterCritical>
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007866:	b25b      	sxtb	r3, r3
 8007868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800786c:	d103      	bne.n	8007876 <vQueueWaitForMessageRestricted+0x2a>
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800787c:	b25b      	sxtb	r3, r3
 800787e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007882:	d103      	bne.n	800788c <vQueueWaitForMessageRestricted+0x40>
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800788c:	f001 fd72 	bl	8009374 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007894:	2b00      	cmp	r3, #0
 8007896:	d106      	bne.n	80078a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	3324      	adds	r3, #36	; 0x24
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	68b9      	ldr	r1, [r7, #8]
 80078a0:	4618      	mov	r0, r3
 80078a2:	f000 fc3b 	bl	800811c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80078a6:	6978      	ldr	r0, [r7, #20]
 80078a8:	f7ff ff26 	bl	80076f8 <prvUnlockQueue>
	}
 80078ac:	bf00      	nop
 80078ae:	3718      	adds	r7, #24
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b08e      	sub	sp, #56	; 0x38
 80078b8:	af04      	add	r7, sp, #16
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
 80078c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80078c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10a      	bne.n	80078de <xTaskCreateStatic+0x2a>
	__asm volatile
 80078c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	623b      	str	r3, [r7, #32]
}
 80078da:	bf00      	nop
 80078dc:	e7fe      	b.n	80078dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80078de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d10a      	bne.n	80078fa <xTaskCreateStatic+0x46>
	__asm volatile
 80078e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e8:	f383 8811 	msr	BASEPRI, r3
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	61fb      	str	r3, [r7, #28]
}
 80078f6:	bf00      	nop
 80078f8:	e7fe      	b.n	80078f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80078fa:	235c      	movs	r3, #92	; 0x5c
 80078fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	2b5c      	cmp	r3, #92	; 0x5c
 8007902:	d00a      	beq.n	800791a <xTaskCreateStatic+0x66>
	__asm volatile
 8007904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007908:	f383 8811 	msr	BASEPRI, r3
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	61bb      	str	r3, [r7, #24]
}
 8007916:	bf00      	nop
 8007918:	e7fe      	b.n	8007918 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800791a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800791c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791e:	2b00      	cmp	r3, #0
 8007920:	d01e      	beq.n	8007960 <xTaskCreateStatic+0xac>
 8007922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007924:	2b00      	cmp	r3, #0
 8007926:	d01b      	beq.n	8007960 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800792c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007930:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007934:	2202      	movs	r2, #2
 8007936:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800793a:	2300      	movs	r3, #0
 800793c:	9303      	str	r3, [sp, #12]
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	9302      	str	r3, [sp, #8]
 8007942:	f107 0314 	add.w	r3, r7, #20
 8007946:	9301      	str	r3, [sp, #4]
 8007948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	68b9      	ldr	r1, [r7, #8]
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f000 f850 	bl	80079f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007958:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800795a:	f000 f8dd 	bl	8007b18 <prvAddNewTaskToReadyList>
 800795e:	e001      	b.n	8007964 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007960:	2300      	movs	r3, #0
 8007962:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007964:	697b      	ldr	r3, [r7, #20]
	}
 8007966:	4618      	mov	r0, r3
 8007968:	3728      	adds	r7, #40	; 0x28
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800796e:	b580      	push	{r7, lr}
 8007970:	b08c      	sub	sp, #48	; 0x30
 8007972:	af04      	add	r7, sp, #16
 8007974:	60f8      	str	r0, [r7, #12]
 8007976:	60b9      	str	r1, [r7, #8]
 8007978:	603b      	str	r3, [r7, #0]
 800797a:	4613      	mov	r3, r2
 800797c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800797e:	88fb      	ldrh	r3, [r7, #6]
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4618      	mov	r0, r3
 8007984:	f001 fde8 	bl	8009558 <pvPortMalloc>
 8007988:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00e      	beq.n	80079ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007990:	205c      	movs	r0, #92	; 0x5c
 8007992:	f001 fde1 	bl	8009558 <pvPortMalloc>
 8007996:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	631a      	str	r2, [r3, #48]	; 0x30
 80079a4:	e005      	b.n	80079b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80079a6:	6978      	ldr	r0, [r7, #20]
 80079a8:	f001 fea2 	bl	80096f0 <vPortFree>
 80079ac:	e001      	b.n	80079b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80079ae:	2300      	movs	r3, #0
 80079b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d017      	beq.n	80079e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80079c0:	88fa      	ldrh	r2, [r7, #6]
 80079c2:	2300      	movs	r3, #0
 80079c4:	9303      	str	r3, [sp, #12]
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	9302      	str	r3, [sp, #8]
 80079ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079cc:	9301      	str	r3, [sp, #4]
 80079ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	68b9      	ldr	r1, [r7, #8]
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f000 f80e 	bl	80079f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079dc:	69f8      	ldr	r0, [r7, #28]
 80079de:	f000 f89b 	bl	8007b18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80079e2:	2301      	movs	r3, #1
 80079e4:	61bb      	str	r3, [r7, #24]
 80079e6:	e002      	b.n	80079ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079e8:	f04f 33ff 	mov.w	r3, #4294967295
 80079ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80079ee:	69bb      	ldr	r3, [r7, #24]
	}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3720      	adds	r7, #32
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b088      	sub	sp, #32
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
 8007a04:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	461a      	mov	r2, r3
 8007a10:	21a5      	movs	r1, #165	; 0xa5
 8007a12:	f003 fa8d 	bl	800af30 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a20:	3b01      	subs	r3, #1
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	f023 0307 	bic.w	r3, r3, #7
 8007a2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	f003 0307 	and.w	r3, r3, #7
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00a      	beq.n	8007a50 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3e:	f383 8811 	msr	BASEPRI, r3
 8007a42:	f3bf 8f6f 	isb	sy
 8007a46:	f3bf 8f4f 	dsb	sy
 8007a4a:	617b      	str	r3, [r7, #20]
}
 8007a4c:	bf00      	nop
 8007a4e:	e7fe      	b.n	8007a4e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d01f      	beq.n	8007a96 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a56:	2300      	movs	r3, #0
 8007a58:	61fb      	str	r3, [r7, #28]
 8007a5a:	e012      	b.n	8007a82 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	4413      	add	r3, r2
 8007a62:	7819      	ldrb	r1, [r3, #0]
 8007a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	4413      	add	r3, r2
 8007a6a:	3334      	adds	r3, #52	; 0x34
 8007a6c:	460a      	mov	r2, r1
 8007a6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	4413      	add	r3, r2
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d006      	beq.n	8007a8a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	61fb      	str	r3, [r7, #28]
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	2b0f      	cmp	r3, #15
 8007a86:	d9e9      	bls.n	8007a5c <prvInitialiseNewTask+0x64>
 8007a88:	e000      	b.n	8007a8c <prvInitialiseNewTask+0x94>
			{
				break;
 8007a8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a94:	e003      	b.n	8007a9e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa0:	2b37      	cmp	r3, #55	; 0x37
 8007aa2:	d901      	bls.n	8007aa8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007aa4:	2337      	movs	r3, #55	; 0x37
 8007aa6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ab2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abc:	3304      	adds	r3, #4
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7ff f854 	bl	8006b6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac6:	3318      	adds	r3, #24
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7ff f84f 	bl	8006b6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ad2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007adc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ae2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	68f9      	ldr	r1, [r7, #12]
 8007af6:	69b8      	ldr	r0, [r7, #24]
 8007af8:	f001 fae0 	bl	80090bc <pxPortInitialiseStack>
 8007afc:	4602      	mov	r2, r0
 8007afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b00:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d002      	beq.n	8007b0e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b0e:	bf00      	nop
 8007b10:	3720      	adds	r7, #32
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
	...

08007b18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b20:	f001 fbf8 	bl	8009314 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b24:	4b2d      	ldr	r3, [pc, #180]	; (8007bdc <prvAddNewTaskToReadyList+0xc4>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	4a2c      	ldr	r2, [pc, #176]	; (8007bdc <prvAddNewTaskToReadyList+0xc4>)
 8007b2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b2e:	4b2c      	ldr	r3, [pc, #176]	; (8007be0 <prvAddNewTaskToReadyList+0xc8>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d109      	bne.n	8007b4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b36:	4a2a      	ldr	r2, [pc, #168]	; (8007be0 <prvAddNewTaskToReadyList+0xc8>)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b3c:	4b27      	ldr	r3, [pc, #156]	; (8007bdc <prvAddNewTaskToReadyList+0xc4>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d110      	bne.n	8007b66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b44:	f000 fc16 	bl	8008374 <prvInitialiseTaskLists>
 8007b48:	e00d      	b.n	8007b66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b4a:	4b26      	ldr	r3, [pc, #152]	; (8007be4 <prvAddNewTaskToReadyList+0xcc>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d109      	bne.n	8007b66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b52:	4b23      	ldr	r3, [pc, #140]	; (8007be0 <prvAddNewTaskToReadyList+0xc8>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d802      	bhi.n	8007b66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b60:	4a1f      	ldr	r2, [pc, #124]	; (8007be0 <prvAddNewTaskToReadyList+0xc8>)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b66:	4b20      	ldr	r3, [pc, #128]	; (8007be8 <prvAddNewTaskToReadyList+0xd0>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	4a1e      	ldr	r2, [pc, #120]	; (8007be8 <prvAddNewTaskToReadyList+0xd0>)
 8007b6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b70:	4b1d      	ldr	r3, [pc, #116]	; (8007be8 <prvAddNewTaskToReadyList+0xd0>)
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b7c:	4b1b      	ldr	r3, [pc, #108]	; (8007bec <prvAddNewTaskToReadyList+0xd4>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d903      	bls.n	8007b8c <prvAddNewTaskToReadyList+0x74>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b88:	4a18      	ldr	r2, [pc, #96]	; (8007bec <prvAddNewTaskToReadyList+0xd4>)
 8007b8a:	6013      	str	r3, [r2, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b90:	4613      	mov	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4413      	add	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4a15      	ldr	r2, [pc, #84]	; (8007bf0 <prvAddNewTaskToReadyList+0xd8>)
 8007b9a:	441a      	add	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	3304      	adds	r3, #4
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	4610      	mov	r0, r2
 8007ba4:	f7fe ffef 	bl	8006b86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ba8:	f001 fbe4 	bl	8009374 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007bac:	4b0d      	ldr	r3, [pc, #52]	; (8007be4 <prvAddNewTaskToReadyList+0xcc>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00e      	beq.n	8007bd2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007bb4:	4b0a      	ldr	r3, [pc, #40]	; (8007be0 <prvAddNewTaskToReadyList+0xc8>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d207      	bcs.n	8007bd2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007bc2:	4b0c      	ldr	r3, [pc, #48]	; (8007bf4 <prvAddNewTaskToReadyList+0xdc>)
 8007bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bc8:	601a      	str	r2, [r3, #0]
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bd2:	bf00      	nop
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	200021c0 	.word	0x200021c0
 8007be0:	20001cec 	.word	0x20001cec
 8007be4:	200021cc 	.word	0x200021cc
 8007be8:	200021dc 	.word	0x200021dc
 8007bec:	200021c8 	.word	0x200021c8
 8007bf0:	20001cf0 	.word	0x20001cf0
 8007bf4:	e000ed04 	.word	0xe000ed04

08007bf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007c00:	2300      	movs	r3, #0
 8007c02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d017      	beq.n	8007c3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007c0a:	4b13      	ldr	r3, [pc, #76]	; (8007c58 <vTaskDelay+0x60>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00a      	beq.n	8007c28 <vTaskDelay+0x30>
	__asm volatile
 8007c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c16:	f383 8811 	msr	BASEPRI, r3
 8007c1a:	f3bf 8f6f 	isb	sy
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	60bb      	str	r3, [r7, #8]
}
 8007c24:	bf00      	nop
 8007c26:	e7fe      	b.n	8007c26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007c28:	f000 f880 	bl	8007d2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fde8 	bl	8008804 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c34:	f000 f888 	bl	8007d48 <xTaskResumeAll>
 8007c38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d107      	bne.n	8007c50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007c40:	4b06      	ldr	r3, [pc, #24]	; (8007c5c <vTaskDelay+0x64>)
 8007c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c46:	601a      	str	r2, [r3, #0]
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c50:	bf00      	nop
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	200021e8 	.word	0x200021e8
 8007c5c:	e000ed04 	.word	0xe000ed04

08007c60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b08a      	sub	sp, #40	; 0x28
 8007c64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c66:	2300      	movs	r3, #0
 8007c68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c6e:	463a      	mov	r2, r7
 8007c70:	1d39      	adds	r1, r7, #4
 8007c72:	f107 0308 	add.w	r3, r7, #8
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fe ff24 	bl	8006ac4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	9202      	str	r2, [sp, #8]
 8007c84:	9301      	str	r3, [sp, #4]
 8007c86:	2300      	movs	r3, #0
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	460a      	mov	r2, r1
 8007c8e:	4921      	ldr	r1, [pc, #132]	; (8007d14 <vTaskStartScheduler+0xb4>)
 8007c90:	4821      	ldr	r0, [pc, #132]	; (8007d18 <vTaskStartScheduler+0xb8>)
 8007c92:	f7ff fe0f 	bl	80078b4 <xTaskCreateStatic>
 8007c96:	4603      	mov	r3, r0
 8007c98:	4a20      	ldr	r2, [pc, #128]	; (8007d1c <vTaskStartScheduler+0xbc>)
 8007c9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c9c:	4b1f      	ldr	r3, [pc, #124]	; (8007d1c <vTaskStartScheduler+0xbc>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	617b      	str	r3, [r7, #20]
 8007ca8:	e001      	b.n	8007cae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007caa:	2300      	movs	r3, #0
 8007cac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d102      	bne.n	8007cba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007cb4:	f000 fdfa 	bl	80088ac <xTimerCreateTimerTask>
 8007cb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d116      	bne.n	8007cee <vTaskStartScheduler+0x8e>
	__asm volatile
 8007cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	613b      	str	r3, [r7, #16]
}
 8007cd2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007cd4:	4b12      	ldr	r3, [pc, #72]	; (8007d20 <vTaskStartScheduler+0xc0>)
 8007cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007cdc:	4b11      	ldr	r3, [pc, #68]	; (8007d24 <vTaskStartScheduler+0xc4>)
 8007cde:	2201      	movs	r2, #1
 8007ce0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007ce2:	4b11      	ldr	r3, [pc, #68]	; (8007d28 <vTaskStartScheduler+0xc8>)
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ce8:	f001 fa72 	bl	80091d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007cec:	e00e      	b.n	8007d0c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf4:	d10a      	bne.n	8007d0c <vTaskStartScheduler+0xac>
	__asm volatile
 8007cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	60fb      	str	r3, [r7, #12]
}
 8007d08:	bf00      	nop
 8007d0a:	e7fe      	b.n	8007d0a <vTaskStartScheduler+0xaa>
}
 8007d0c:	bf00      	nop
 8007d0e:	3718      	adds	r7, #24
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	0800b8c0 	.word	0x0800b8c0
 8007d18:	08008345 	.word	0x08008345
 8007d1c:	200021e4 	.word	0x200021e4
 8007d20:	200021e0 	.word	0x200021e0
 8007d24:	200021cc 	.word	0x200021cc
 8007d28:	200021c4 	.word	0x200021c4

08007d2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007d30:	4b04      	ldr	r3, [pc, #16]	; (8007d44 <vTaskSuspendAll+0x18>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	3301      	adds	r3, #1
 8007d36:	4a03      	ldr	r2, [pc, #12]	; (8007d44 <vTaskSuspendAll+0x18>)
 8007d38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007d3a:	bf00      	nop
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	200021e8 	.word	0x200021e8

08007d48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d52:	2300      	movs	r3, #0
 8007d54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d56:	4b42      	ldr	r3, [pc, #264]	; (8007e60 <xTaskResumeAll+0x118>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10a      	bne.n	8007d74 <xTaskResumeAll+0x2c>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	603b      	str	r3, [r7, #0]
}
 8007d70:	bf00      	nop
 8007d72:	e7fe      	b.n	8007d72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d74:	f001 face 	bl	8009314 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d78:	4b39      	ldr	r3, [pc, #228]	; (8007e60 <xTaskResumeAll+0x118>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	4a38      	ldr	r2, [pc, #224]	; (8007e60 <xTaskResumeAll+0x118>)
 8007d80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d82:	4b37      	ldr	r3, [pc, #220]	; (8007e60 <xTaskResumeAll+0x118>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d162      	bne.n	8007e50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d8a:	4b36      	ldr	r3, [pc, #216]	; (8007e64 <xTaskResumeAll+0x11c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d05e      	beq.n	8007e50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d92:	e02f      	b.n	8007df4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d94:	4b34      	ldr	r3, [pc, #208]	; (8007e68 <xTaskResumeAll+0x120>)
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	3318      	adds	r3, #24
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7fe ff4d 	bl	8006c40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	3304      	adds	r3, #4
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe ff48 	bl	8006c40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db4:	4b2d      	ldr	r3, [pc, #180]	; (8007e6c <xTaskResumeAll+0x124>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d903      	bls.n	8007dc4 <xTaskResumeAll+0x7c>
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	4a2a      	ldr	r2, [pc, #168]	; (8007e6c <xTaskResumeAll+0x124>)
 8007dc2:	6013      	str	r3, [r2, #0]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc8:	4613      	mov	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4413      	add	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4a27      	ldr	r2, [pc, #156]	; (8007e70 <xTaskResumeAll+0x128>)
 8007dd2:	441a      	add	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	4619      	mov	r1, r3
 8007dda:	4610      	mov	r0, r2
 8007ddc:	f7fe fed3 	bl	8006b86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de4:	4b23      	ldr	r3, [pc, #140]	; (8007e74 <xTaskResumeAll+0x12c>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d302      	bcc.n	8007df4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007dee:	4b22      	ldr	r3, [pc, #136]	; (8007e78 <xTaskResumeAll+0x130>)
 8007df0:	2201      	movs	r2, #1
 8007df2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007df4:	4b1c      	ldr	r3, [pc, #112]	; (8007e68 <xTaskResumeAll+0x120>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1cb      	bne.n	8007d94 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d001      	beq.n	8007e06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e02:	f000 fb55 	bl	80084b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007e06:	4b1d      	ldr	r3, [pc, #116]	; (8007e7c <xTaskResumeAll+0x134>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d010      	beq.n	8007e34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e12:	f000 f847 	bl	8007ea4 <xTaskIncrementTick>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d002      	beq.n	8007e22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007e1c:	4b16      	ldr	r3, [pc, #88]	; (8007e78 <xTaskResumeAll+0x130>)
 8007e1e:	2201      	movs	r2, #1
 8007e20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	3b01      	subs	r3, #1
 8007e26:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1f1      	bne.n	8007e12 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007e2e:	4b13      	ldr	r3, [pc, #76]	; (8007e7c <xTaskResumeAll+0x134>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e34:	4b10      	ldr	r3, [pc, #64]	; (8007e78 <xTaskResumeAll+0x130>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d009      	beq.n	8007e50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e40:	4b0f      	ldr	r3, [pc, #60]	; (8007e80 <xTaskResumeAll+0x138>)
 8007e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e46:	601a      	str	r2, [r3, #0]
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e50:	f001 fa90 	bl	8009374 <vPortExitCritical>

	return xAlreadyYielded;
 8007e54:	68bb      	ldr	r3, [r7, #8]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	200021e8 	.word	0x200021e8
 8007e64:	200021c0 	.word	0x200021c0
 8007e68:	20002180 	.word	0x20002180
 8007e6c:	200021c8 	.word	0x200021c8
 8007e70:	20001cf0 	.word	0x20001cf0
 8007e74:	20001cec 	.word	0x20001cec
 8007e78:	200021d4 	.word	0x200021d4
 8007e7c:	200021d0 	.word	0x200021d0
 8007e80:	e000ed04 	.word	0xe000ed04

08007e84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e8a:	4b05      	ldr	r3, [pc, #20]	; (8007ea0 <xTaskGetTickCount+0x1c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e90:	687b      	ldr	r3, [r7, #4]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	200021c4 	.word	0x200021c4

08007ea4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007eae:	4b4f      	ldr	r3, [pc, #316]	; (8007fec <xTaskIncrementTick+0x148>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f040 808f 	bne.w	8007fd6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007eb8:	4b4d      	ldr	r3, [pc, #308]	; (8007ff0 <xTaskIncrementTick+0x14c>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ec0:	4a4b      	ldr	r2, [pc, #300]	; (8007ff0 <xTaskIncrementTick+0x14c>)
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d120      	bne.n	8007f0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ecc:	4b49      	ldr	r3, [pc, #292]	; (8007ff4 <xTaskIncrementTick+0x150>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00a      	beq.n	8007eec <xTaskIncrementTick+0x48>
	__asm volatile
 8007ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eda:	f383 8811 	msr	BASEPRI, r3
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f3bf 8f4f 	dsb	sy
 8007ee6:	603b      	str	r3, [r7, #0]
}
 8007ee8:	bf00      	nop
 8007eea:	e7fe      	b.n	8007eea <xTaskIncrementTick+0x46>
 8007eec:	4b41      	ldr	r3, [pc, #260]	; (8007ff4 <xTaskIncrementTick+0x150>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	60fb      	str	r3, [r7, #12]
 8007ef2:	4b41      	ldr	r3, [pc, #260]	; (8007ff8 <xTaskIncrementTick+0x154>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a3f      	ldr	r2, [pc, #252]	; (8007ff4 <xTaskIncrementTick+0x150>)
 8007ef8:	6013      	str	r3, [r2, #0]
 8007efa:	4a3f      	ldr	r2, [pc, #252]	; (8007ff8 <xTaskIncrementTick+0x154>)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6013      	str	r3, [r2, #0]
 8007f00:	4b3e      	ldr	r3, [pc, #248]	; (8007ffc <xTaskIncrementTick+0x158>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	3301      	adds	r3, #1
 8007f06:	4a3d      	ldr	r2, [pc, #244]	; (8007ffc <xTaskIncrementTick+0x158>)
 8007f08:	6013      	str	r3, [r2, #0]
 8007f0a:	f000 fad1 	bl	80084b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f0e:	4b3c      	ldr	r3, [pc, #240]	; (8008000 <xTaskIncrementTick+0x15c>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d349      	bcc.n	8007fac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f18:	4b36      	ldr	r3, [pc, #216]	; (8007ff4 <xTaskIncrementTick+0x150>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d104      	bne.n	8007f2c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f22:	4b37      	ldr	r3, [pc, #220]	; (8008000 <xTaskIncrementTick+0x15c>)
 8007f24:	f04f 32ff 	mov.w	r2, #4294967295
 8007f28:	601a      	str	r2, [r3, #0]
					break;
 8007f2a:	e03f      	b.n	8007fac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f2c:	4b31      	ldr	r3, [pc, #196]	; (8007ff4 <xTaskIncrementTick+0x150>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d203      	bcs.n	8007f4c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f44:	4a2e      	ldr	r2, [pc, #184]	; (8008000 <xTaskIncrementTick+0x15c>)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f4a:	e02f      	b.n	8007fac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	3304      	adds	r3, #4
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7fe fe75 	bl	8006c40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d004      	beq.n	8007f68 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	3318      	adds	r3, #24
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fe fe6c 	bl	8006c40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f6c:	4b25      	ldr	r3, [pc, #148]	; (8008004 <xTaskIncrementTick+0x160>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d903      	bls.n	8007f7c <xTaskIncrementTick+0xd8>
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f78:	4a22      	ldr	r2, [pc, #136]	; (8008004 <xTaskIncrementTick+0x160>)
 8007f7a:	6013      	str	r3, [r2, #0]
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f80:	4613      	mov	r3, r2
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4413      	add	r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	4a1f      	ldr	r2, [pc, #124]	; (8008008 <xTaskIncrementTick+0x164>)
 8007f8a:	441a      	add	r2, r3
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	3304      	adds	r3, #4
 8007f90:	4619      	mov	r1, r3
 8007f92:	4610      	mov	r0, r2
 8007f94:	f7fe fdf7 	bl	8006b86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f9c:	4b1b      	ldr	r3, [pc, #108]	; (800800c <xTaskIncrementTick+0x168>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d3b8      	bcc.n	8007f18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007faa:	e7b5      	b.n	8007f18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007fac:	4b17      	ldr	r3, [pc, #92]	; (800800c <xTaskIncrementTick+0x168>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb2:	4915      	ldr	r1, [pc, #84]	; (8008008 <xTaskIncrementTick+0x164>)
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4413      	add	r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	440b      	add	r3, r1
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d901      	bls.n	8007fc8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007fc8:	4b11      	ldr	r3, [pc, #68]	; (8008010 <xTaskIncrementTick+0x16c>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d007      	beq.n	8007fe0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	617b      	str	r3, [r7, #20]
 8007fd4:	e004      	b.n	8007fe0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007fd6:	4b0f      	ldr	r3, [pc, #60]	; (8008014 <xTaskIncrementTick+0x170>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	4a0d      	ldr	r2, [pc, #52]	; (8008014 <xTaskIncrementTick+0x170>)
 8007fde:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007fe0:	697b      	ldr	r3, [r7, #20]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3718      	adds	r7, #24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	200021e8 	.word	0x200021e8
 8007ff0:	200021c4 	.word	0x200021c4
 8007ff4:	20002178 	.word	0x20002178
 8007ff8:	2000217c 	.word	0x2000217c
 8007ffc:	200021d8 	.word	0x200021d8
 8008000:	200021e0 	.word	0x200021e0
 8008004:	200021c8 	.word	0x200021c8
 8008008:	20001cf0 	.word	0x20001cf0
 800800c:	20001cec 	.word	0x20001cec
 8008010:	200021d4 	.word	0x200021d4
 8008014:	200021d0 	.word	0x200021d0

08008018 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800801e:	4b28      	ldr	r3, [pc, #160]	; (80080c0 <vTaskSwitchContext+0xa8>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008026:	4b27      	ldr	r3, [pc, #156]	; (80080c4 <vTaskSwitchContext+0xac>)
 8008028:	2201      	movs	r2, #1
 800802a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800802c:	e041      	b.n	80080b2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800802e:	4b25      	ldr	r3, [pc, #148]	; (80080c4 <vTaskSwitchContext+0xac>)
 8008030:	2200      	movs	r2, #0
 8008032:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008034:	4b24      	ldr	r3, [pc, #144]	; (80080c8 <vTaskSwitchContext+0xb0>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	60fb      	str	r3, [r7, #12]
 800803a:	e010      	b.n	800805e <vTaskSwitchContext+0x46>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d10a      	bne.n	8008058 <vTaskSwitchContext+0x40>
	__asm volatile
 8008042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008046:	f383 8811 	msr	BASEPRI, r3
 800804a:	f3bf 8f6f 	isb	sy
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	607b      	str	r3, [r7, #4]
}
 8008054:	bf00      	nop
 8008056:	e7fe      	b.n	8008056 <vTaskSwitchContext+0x3e>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	3b01      	subs	r3, #1
 800805c:	60fb      	str	r3, [r7, #12]
 800805e:	491b      	ldr	r1, [pc, #108]	; (80080cc <vTaskSwitchContext+0xb4>)
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	4613      	mov	r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4413      	add	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	440b      	add	r3, r1
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d0e4      	beq.n	800803c <vTaskSwitchContext+0x24>
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	4613      	mov	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4a13      	ldr	r2, [pc, #76]	; (80080cc <vTaskSwitchContext+0xb4>)
 800807e:	4413      	add	r3, r2
 8008080:	60bb      	str	r3, [r7, #8]
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	685a      	ldr	r2, [r3, #4]
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	605a      	str	r2, [r3, #4]
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	685a      	ldr	r2, [r3, #4]
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	3308      	adds	r3, #8
 8008094:	429a      	cmp	r2, r3
 8008096:	d104      	bne.n	80080a2 <vTaskSwitchContext+0x8a>
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	685a      	ldr	r2, [r3, #4]
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	605a      	str	r2, [r3, #4]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	4a09      	ldr	r2, [pc, #36]	; (80080d0 <vTaskSwitchContext+0xb8>)
 80080aa:	6013      	str	r3, [r2, #0]
 80080ac:	4a06      	ldr	r2, [pc, #24]	; (80080c8 <vTaskSwitchContext+0xb0>)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6013      	str	r3, [r2, #0]
}
 80080b2:	bf00      	nop
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	200021e8 	.word	0x200021e8
 80080c4:	200021d4 	.word	0x200021d4
 80080c8:	200021c8 	.word	0x200021c8
 80080cc:	20001cf0 	.word	0x20001cf0
 80080d0:	20001cec 	.word	0x20001cec

080080d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10a      	bne.n	80080fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80080e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e8:	f383 8811 	msr	BASEPRI, r3
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	60fb      	str	r3, [r7, #12]
}
 80080f6:	bf00      	nop
 80080f8:	e7fe      	b.n	80080f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080fa:	4b07      	ldr	r3, [pc, #28]	; (8008118 <vTaskPlaceOnEventList+0x44>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	3318      	adds	r3, #24
 8008100:	4619      	mov	r1, r3
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7fe fd63 	bl	8006bce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008108:	2101      	movs	r1, #1
 800810a:	6838      	ldr	r0, [r7, #0]
 800810c:	f000 fb7a 	bl	8008804 <prvAddCurrentTaskToDelayedList>
}
 8008110:	bf00      	nop
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	20001cec 	.word	0x20001cec

0800811c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10a      	bne.n	8008144 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800812e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	617b      	str	r3, [r7, #20]
}
 8008140:	bf00      	nop
 8008142:	e7fe      	b.n	8008142 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008144:	4b0a      	ldr	r3, [pc, #40]	; (8008170 <vTaskPlaceOnEventListRestricted+0x54>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	3318      	adds	r3, #24
 800814a:	4619      	mov	r1, r3
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f7fe fd1a 	bl	8006b86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d002      	beq.n	800815e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008158:	f04f 33ff 	mov.w	r3, #4294967295
 800815c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800815e:	6879      	ldr	r1, [r7, #4]
 8008160:	68b8      	ldr	r0, [r7, #8]
 8008162:	f000 fb4f 	bl	8008804 <prvAddCurrentTaskToDelayedList>
	}
 8008166:	bf00      	nop
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	20001cec 	.word	0x20001cec

08008174 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10a      	bne.n	80081a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800818a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	60fb      	str	r3, [r7, #12]
}
 800819c:	bf00      	nop
 800819e:	e7fe      	b.n	800819e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	3318      	adds	r3, #24
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7fe fd4b 	bl	8006c40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081aa:	4b1e      	ldr	r3, [pc, #120]	; (8008224 <xTaskRemoveFromEventList+0xb0>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d11d      	bne.n	80081ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	3304      	adds	r3, #4
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7fe fd42 	bl	8006c40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c0:	4b19      	ldr	r3, [pc, #100]	; (8008228 <xTaskRemoveFromEventList+0xb4>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d903      	bls.n	80081d0 <xTaskRemoveFromEventList+0x5c>
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081cc:	4a16      	ldr	r2, [pc, #88]	; (8008228 <xTaskRemoveFromEventList+0xb4>)
 80081ce:	6013      	str	r3, [r2, #0]
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d4:	4613      	mov	r3, r2
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	4413      	add	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4a13      	ldr	r2, [pc, #76]	; (800822c <xTaskRemoveFromEventList+0xb8>)
 80081de:	441a      	add	r2, r3
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	3304      	adds	r3, #4
 80081e4:	4619      	mov	r1, r3
 80081e6:	4610      	mov	r0, r2
 80081e8:	f7fe fccd 	bl	8006b86 <vListInsertEnd>
 80081ec:	e005      	b.n	80081fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	3318      	adds	r3, #24
 80081f2:	4619      	mov	r1, r3
 80081f4:	480e      	ldr	r0, [pc, #56]	; (8008230 <xTaskRemoveFromEventList+0xbc>)
 80081f6:	f7fe fcc6 	bl	8006b86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081fe:	4b0d      	ldr	r3, [pc, #52]	; (8008234 <xTaskRemoveFromEventList+0xc0>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008204:	429a      	cmp	r2, r3
 8008206:	d905      	bls.n	8008214 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008208:	2301      	movs	r3, #1
 800820a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800820c:	4b0a      	ldr	r3, [pc, #40]	; (8008238 <xTaskRemoveFromEventList+0xc4>)
 800820e:	2201      	movs	r2, #1
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	e001      	b.n	8008218 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008214:	2300      	movs	r3, #0
 8008216:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008218:	697b      	ldr	r3, [r7, #20]
}
 800821a:	4618      	mov	r0, r3
 800821c:	3718      	adds	r7, #24
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	200021e8 	.word	0x200021e8
 8008228:	200021c8 	.word	0x200021c8
 800822c:	20001cf0 	.word	0x20001cf0
 8008230:	20002180 	.word	0x20002180
 8008234:	20001cec 	.word	0x20001cec
 8008238:	200021d4 	.word	0x200021d4

0800823c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008244:	4b06      	ldr	r3, [pc, #24]	; (8008260 <vTaskInternalSetTimeOutState+0x24>)
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800824c:	4b05      	ldr	r3, [pc, #20]	; (8008264 <vTaskInternalSetTimeOutState+0x28>)
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	605a      	str	r2, [r3, #4]
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr
 8008260:	200021d8 	.word	0x200021d8
 8008264:	200021c4 	.word	0x200021c4

08008268 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b088      	sub	sp, #32
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d10a      	bne.n	800828e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827c:	f383 8811 	msr	BASEPRI, r3
 8008280:	f3bf 8f6f 	isb	sy
 8008284:	f3bf 8f4f 	dsb	sy
 8008288:	613b      	str	r3, [r7, #16]
}
 800828a:	bf00      	nop
 800828c:	e7fe      	b.n	800828c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10a      	bne.n	80082aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	60fb      	str	r3, [r7, #12]
}
 80082a6:	bf00      	nop
 80082a8:	e7fe      	b.n	80082a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80082aa:	f001 f833 	bl	8009314 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80082ae:	4b1d      	ldr	r3, [pc, #116]	; (8008324 <xTaskCheckForTimeOut+0xbc>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	69ba      	ldr	r2, [r7, #24]
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c6:	d102      	bne.n	80082ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80082c8:	2300      	movs	r3, #0
 80082ca:	61fb      	str	r3, [r7, #28]
 80082cc:	e023      	b.n	8008316 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	4b15      	ldr	r3, [pc, #84]	; (8008328 <xTaskCheckForTimeOut+0xc0>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d007      	beq.n	80082ea <xTaskCheckForTimeOut+0x82>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	69ba      	ldr	r2, [r7, #24]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d302      	bcc.n	80082ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80082e4:	2301      	movs	r3, #1
 80082e6:	61fb      	str	r3, [r7, #28]
 80082e8:	e015      	b.n	8008316 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d20b      	bcs.n	800830c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	1ad2      	subs	r2, r2, r3
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f7ff ff9b 	bl	800823c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008306:	2300      	movs	r3, #0
 8008308:	61fb      	str	r3, [r7, #28]
 800830a:	e004      	b.n	8008316 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	2200      	movs	r2, #0
 8008310:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008312:	2301      	movs	r3, #1
 8008314:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008316:	f001 f82d 	bl	8009374 <vPortExitCritical>

	return xReturn;
 800831a:	69fb      	ldr	r3, [r7, #28]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3720      	adds	r7, #32
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	200021c4 	.word	0x200021c4
 8008328:	200021d8 	.word	0x200021d8

0800832c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800832c:	b480      	push	{r7}
 800832e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008330:	4b03      	ldr	r3, [pc, #12]	; (8008340 <vTaskMissedYield+0x14>)
 8008332:	2201      	movs	r2, #1
 8008334:	601a      	str	r2, [r3, #0]
}
 8008336:	bf00      	nop
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr
 8008340:	200021d4 	.word	0x200021d4

08008344 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800834c:	f000 f852 	bl	80083f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008350:	4b06      	ldr	r3, [pc, #24]	; (800836c <prvIdleTask+0x28>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2b01      	cmp	r3, #1
 8008356:	d9f9      	bls.n	800834c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008358:	4b05      	ldr	r3, [pc, #20]	; (8008370 <prvIdleTask+0x2c>)
 800835a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800835e:	601a      	str	r2, [r3, #0]
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008368:	e7f0      	b.n	800834c <prvIdleTask+0x8>
 800836a:	bf00      	nop
 800836c:	20001cf0 	.word	0x20001cf0
 8008370:	e000ed04 	.word	0xe000ed04

08008374 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800837a:	2300      	movs	r3, #0
 800837c:	607b      	str	r3, [r7, #4]
 800837e:	e00c      	b.n	800839a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	4613      	mov	r3, r2
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4413      	add	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4a12      	ldr	r2, [pc, #72]	; (80083d4 <prvInitialiseTaskLists+0x60>)
 800838c:	4413      	add	r3, r2
 800838e:	4618      	mov	r0, r3
 8008390:	f7fe fbcc 	bl	8006b2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	3301      	adds	r3, #1
 8008398:	607b      	str	r3, [r7, #4]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b37      	cmp	r3, #55	; 0x37
 800839e:	d9ef      	bls.n	8008380 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80083a0:	480d      	ldr	r0, [pc, #52]	; (80083d8 <prvInitialiseTaskLists+0x64>)
 80083a2:	f7fe fbc3 	bl	8006b2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80083a6:	480d      	ldr	r0, [pc, #52]	; (80083dc <prvInitialiseTaskLists+0x68>)
 80083a8:	f7fe fbc0 	bl	8006b2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80083ac:	480c      	ldr	r0, [pc, #48]	; (80083e0 <prvInitialiseTaskLists+0x6c>)
 80083ae:	f7fe fbbd 	bl	8006b2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80083b2:	480c      	ldr	r0, [pc, #48]	; (80083e4 <prvInitialiseTaskLists+0x70>)
 80083b4:	f7fe fbba 	bl	8006b2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80083b8:	480b      	ldr	r0, [pc, #44]	; (80083e8 <prvInitialiseTaskLists+0x74>)
 80083ba:	f7fe fbb7 	bl	8006b2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80083be:	4b0b      	ldr	r3, [pc, #44]	; (80083ec <prvInitialiseTaskLists+0x78>)
 80083c0:	4a05      	ldr	r2, [pc, #20]	; (80083d8 <prvInitialiseTaskLists+0x64>)
 80083c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80083c4:	4b0a      	ldr	r3, [pc, #40]	; (80083f0 <prvInitialiseTaskLists+0x7c>)
 80083c6:	4a05      	ldr	r2, [pc, #20]	; (80083dc <prvInitialiseTaskLists+0x68>)
 80083c8:	601a      	str	r2, [r3, #0]
}
 80083ca:	bf00      	nop
 80083cc:	3708      	adds	r7, #8
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	20001cf0 	.word	0x20001cf0
 80083d8:	20002150 	.word	0x20002150
 80083dc:	20002164 	.word	0x20002164
 80083e0:	20002180 	.word	0x20002180
 80083e4:	20002194 	.word	0x20002194
 80083e8:	200021ac 	.word	0x200021ac
 80083ec:	20002178 	.word	0x20002178
 80083f0:	2000217c 	.word	0x2000217c

080083f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083fa:	e019      	b.n	8008430 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80083fc:	f000 ff8a 	bl	8009314 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008400:	4b10      	ldr	r3, [pc, #64]	; (8008444 <prvCheckTasksWaitingTermination+0x50>)
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	3304      	adds	r3, #4
 800840c:	4618      	mov	r0, r3
 800840e:	f7fe fc17 	bl	8006c40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008412:	4b0d      	ldr	r3, [pc, #52]	; (8008448 <prvCheckTasksWaitingTermination+0x54>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3b01      	subs	r3, #1
 8008418:	4a0b      	ldr	r2, [pc, #44]	; (8008448 <prvCheckTasksWaitingTermination+0x54>)
 800841a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800841c:	4b0b      	ldr	r3, [pc, #44]	; (800844c <prvCheckTasksWaitingTermination+0x58>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3b01      	subs	r3, #1
 8008422:	4a0a      	ldr	r2, [pc, #40]	; (800844c <prvCheckTasksWaitingTermination+0x58>)
 8008424:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008426:	f000 ffa5 	bl	8009374 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f810 	bl	8008450 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008430:	4b06      	ldr	r3, [pc, #24]	; (800844c <prvCheckTasksWaitingTermination+0x58>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1e1      	bne.n	80083fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008438:	bf00      	nop
 800843a:	bf00      	nop
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	20002194 	.word	0x20002194
 8008448:	200021c0 	.word	0x200021c0
 800844c:	200021a8 	.word	0x200021a8

08008450 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800845e:	2b00      	cmp	r3, #0
 8008460:	d108      	bne.n	8008474 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008466:	4618      	mov	r0, r3
 8008468:	f001 f942 	bl	80096f0 <vPortFree>
				vPortFree( pxTCB );
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f001 f93f 	bl	80096f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008472:	e018      	b.n	80084a6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800847a:	2b01      	cmp	r3, #1
 800847c:	d103      	bne.n	8008486 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f001 f936 	bl	80096f0 <vPortFree>
	}
 8008484:	e00f      	b.n	80084a6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800848c:	2b02      	cmp	r3, #2
 800848e:	d00a      	beq.n	80084a6 <prvDeleteTCB+0x56>
	__asm volatile
 8008490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008494:	f383 8811 	msr	BASEPRI, r3
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	60fb      	str	r3, [r7, #12]
}
 80084a2:	bf00      	nop
 80084a4:	e7fe      	b.n	80084a4 <prvDeleteTCB+0x54>
	}
 80084a6:	bf00      	nop
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
	...

080084b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084b6:	4b0c      	ldr	r3, [pc, #48]	; (80084e8 <prvResetNextTaskUnblockTime+0x38>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d104      	bne.n	80084ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80084c0:	4b0a      	ldr	r3, [pc, #40]	; (80084ec <prvResetNextTaskUnblockTime+0x3c>)
 80084c2:	f04f 32ff 	mov.w	r2, #4294967295
 80084c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80084c8:	e008      	b.n	80084dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084ca:	4b07      	ldr	r3, [pc, #28]	; (80084e8 <prvResetNextTaskUnblockTime+0x38>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	4a04      	ldr	r2, [pc, #16]	; (80084ec <prvResetNextTaskUnblockTime+0x3c>)
 80084da:	6013      	str	r3, [r2, #0]
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr
 80084e8:	20002178 	.word	0x20002178
 80084ec:	200021e0 	.word	0x200021e0

080084f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80084f6:	4b0b      	ldr	r3, [pc, #44]	; (8008524 <xTaskGetSchedulerState+0x34>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d102      	bne.n	8008504 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80084fe:	2301      	movs	r3, #1
 8008500:	607b      	str	r3, [r7, #4]
 8008502:	e008      	b.n	8008516 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008504:	4b08      	ldr	r3, [pc, #32]	; (8008528 <xTaskGetSchedulerState+0x38>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d102      	bne.n	8008512 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800850c:	2302      	movs	r3, #2
 800850e:	607b      	str	r3, [r7, #4]
 8008510:	e001      	b.n	8008516 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008512:	2300      	movs	r3, #0
 8008514:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008516:	687b      	ldr	r3, [r7, #4]
	}
 8008518:	4618      	mov	r0, r3
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr
 8008524:	200021cc 	.word	0x200021cc
 8008528:	200021e8 	.word	0x200021e8

0800852c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008538:	2300      	movs	r3, #0
 800853a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d051      	beq.n	80085e6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008546:	4b2a      	ldr	r3, [pc, #168]	; (80085f0 <xTaskPriorityInherit+0xc4>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854c:	429a      	cmp	r2, r3
 800854e:	d241      	bcs.n	80085d4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	2b00      	cmp	r3, #0
 8008556:	db06      	blt.n	8008566 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008558:	4b25      	ldr	r3, [pc, #148]	; (80085f0 <xTaskPriorityInherit+0xc4>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	6959      	ldr	r1, [r3, #20]
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856e:	4613      	mov	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	4413      	add	r3, r2
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	4a1f      	ldr	r2, [pc, #124]	; (80085f4 <xTaskPriorityInherit+0xc8>)
 8008578:	4413      	add	r3, r2
 800857a:	4299      	cmp	r1, r3
 800857c:	d122      	bne.n	80085c4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	3304      	adds	r3, #4
 8008582:	4618      	mov	r0, r3
 8008584:	f7fe fb5c 	bl	8006c40 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008588:	4b19      	ldr	r3, [pc, #100]	; (80085f0 <xTaskPriorityInherit+0xc4>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008596:	4b18      	ldr	r3, [pc, #96]	; (80085f8 <xTaskPriorityInherit+0xcc>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	429a      	cmp	r2, r3
 800859c:	d903      	bls.n	80085a6 <xTaskPriorityInherit+0x7a>
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a2:	4a15      	ldr	r2, [pc, #84]	; (80085f8 <xTaskPriorityInherit+0xcc>)
 80085a4:	6013      	str	r3, [r2, #0]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085aa:	4613      	mov	r3, r2
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	4413      	add	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4a10      	ldr	r2, [pc, #64]	; (80085f4 <xTaskPriorityInherit+0xc8>)
 80085b4:	441a      	add	r2, r3
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	3304      	adds	r3, #4
 80085ba:	4619      	mov	r1, r3
 80085bc:	4610      	mov	r0, r2
 80085be:	f7fe fae2 	bl	8006b86 <vListInsertEnd>
 80085c2:	e004      	b.n	80085ce <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80085c4:	4b0a      	ldr	r3, [pc, #40]	; (80085f0 <xTaskPriorityInherit+0xc4>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80085ce:	2301      	movs	r3, #1
 80085d0:	60fb      	str	r3, [r7, #12]
 80085d2:	e008      	b.n	80085e6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085d8:	4b05      	ldr	r3, [pc, #20]	; (80085f0 <xTaskPriorityInherit+0xc4>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085de:	429a      	cmp	r2, r3
 80085e0:	d201      	bcs.n	80085e6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80085e2:	2301      	movs	r3, #1
 80085e4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80085e6:	68fb      	ldr	r3, [r7, #12]
	}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	20001cec 	.word	0x20001cec
 80085f4:	20001cf0 	.word	0x20001cf0
 80085f8:	200021c8 	.word	0x200021c8

080085fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008608:	2300      	movs	r3, #0
 800860a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d056      	beq.n	80086c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008612:	4b2e      	ldr	r3, [pc, #184]	; (80086cc <xTaskPriorityDisinherit+0xd0>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	693a      	ldr	r2, [r7, #16]
 8008618:	429a      	cmp	r2, r3
 800861a:	d00a      	beq.n	8008632 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	60fb      	str	r3, [r7, #12]
}
 800862e:	bf00      	nop
 8008630:	e7fe      	b.n	8008630 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008636:	2b00      	cmp	r3, #0
 8008638:	d10a      	bne.n	8008650 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800863a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863e:	f383 8811 	msr	BASEPRI, r3
 8008642:	f3bf 8f6f 	isb	sy
 8008646:	f3bf 8f4f 	dsb	sy
 800864a:	60bb      	str	r3, [r7, #8]
}
 800864c:	bf00      	nop
 800864e:	e7fe      	b.n	800864e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008654:	1e5a      	subs	r2, r3, #1
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008662:	429a      	cmp	r2, r3
 8008664:	d02c      	beq.n	80086c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800866a:	2b00      	cmp	r3, #0
 800866c:	d128      	bne.n	80086c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	3304      	adds	r3, #4
 8008672:	4618      	mov	r0, r3
 8008674:	f7fe fae4 	bl	8006c40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008684:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008690:	4b0f      	ldr	r3, [pc, #60]	; (80086d0 <xTaskPriorityDisinherit+0xd4>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	429a      	cmp	r2, r3
 8008696:	d903      	bls.n	80086a0 <xTaskPriorityDisinherit+0xa4>
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869c:	4a0c      	ldr	r2, [pc, #48]	; (80086d0 <xTaskPriorityDisinherit+0xd4>)
 800869e:	6013      	str	r3, [r2, #0]
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a4:	4613      	mov	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	4413      	add	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4a09      	ldr	r2, [pc, #36]	; (80086d4 <xTaskPriorityDisinherit+0xd8>)
 80086ae:	441a      	add	r2, r3
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	3304      	adds	r3, #4
 80086b4:	4619      	mov	r1, r3
 80086b6:	4610      	mov	r0, r2
 80086b8:	f7fe fa65 	bl	8006b86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80086bc:	2301      	movs	r3, #1
 80086be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086c0:	697b      	ldr	r3, [r7, #20]
	}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3718      	adds	r7, #24
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	20001cec 	.word	0x20001cec
 80086d0:	200021c8 	.word	0x200021c8
 80086d4:	20001cf0 	.word	0x20001cf0

080086d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b088      	sub	sp, #32
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80086e6:	2301      	movs	r3, #1
 80086e8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d06a      	beq.n	80087c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d10a      	bne.n	800870e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80086f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fc:	f383 8811 	msr	BASEPRI, r3
 8008700:	f3bf 8f6f 	isb	sy
 8008704:	f3bf 8f4f 	dsb	sy
 8008708:	60fb      	str	r3, [r7, #12]
}
 800870a:	bf00      	nop
 800870c:	e7fe      	b.n	800870c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008712:	683a      	ldr	r2, [r7, #0]
 8008714:	429a      	cmp	r2, r3
 8008716:	d902      	bls.n	800871e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	61fb      	str	r3, [r7, #28]
 800871c:	e002      	b.n	8008724 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008722:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008728:	69fa      	ldr	r2, [r7, #28]
 800872a:	429a      	cmp	r2, r3
 800872c:	d04b      	beq.n	80087c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	429a      	cmp	r2, r3
 8008736:	d146      	bne.n	80087c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008738:	4b25      	ldr	r3, [pc, #148]	; (80087d0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	69ba      	ldr	r2, [r7, #24]
 800873e:	429a      	cmp	r2, r3
 8008740:	d10a      	bne.n	8008758 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	60bb      	str	r3, [r7, #8]
}
 8008754:	bf00      	nop
 8008756:	e7fe      	b.n	8008756 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	69fa      	ldr	r2, [r7, #28]
 8008762:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	2b00      	cmp	r3, #0
 800876a:	db04      	blt.n	8008776 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	6959      	ldr	r1, [r3, #20]
 800877a:	693a      	ldr	r2, [r7, #16]
 800877c:	4613      	mov	r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	4413      	add	r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4a13      	ldr	r2, [pc, #76]	; (80087d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008786:	4413      	add	r3, r2
 8008788:	4299      	cmp	r1, r3
 800878a:	d11c      	bne.n	80087c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	3304      	adds	r3, #4
 8008790:	4618      	mov	r0, r3
 8008792:	f7fe fa55 	bl	8006c40 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800879a:	4b0f      	ldr	r3, [pc, #60]	; (80087d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d903      	bls.n	80087aa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a6:	4a0c      	ldr	r2, [pc, #48]	; (80087d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80087a8:	6013      	str	r3, [r2, #0]
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ae:	4613      	mov	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4413      	add	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4a07      	ldr	r2, [pc, #28]	; (80087d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80087b8:	441a      	add	r2, r3
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	3304      	adds	r3, #4
 80087be:	4619      	mov	r1, r3
 80087c0:	4610      	mov	r0, r2
 80087c2:	f7fe f9e0 	bl	8006b86 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087c6:	bf00      	nop
 80087c8:	3720      	adds	r7, #32
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	20001cec 	.word	0x20001cec
 80087d4:	20001cf0 	.word	0x20001cf0
 80087d8:	200021c8 	.word	0x200021c8

080087dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80087dc:	b480      	push	{r7}
 80087de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80087e0:	4b07      	ldr	r3, [pc, #28]	; (8008800 <pvTaskIncrementMutexHeldCount+0x24>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d004      	beq.n	80087f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80087e8:	4b05      	ldr	r3, [pc, #20]	; (8008800 <pvTaskIncrementMutexHeldCount+0x24>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80087ee:	3201      	adds	r2, #1
 80087f0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80087f2:	4b03      	ldr	r3, [pc, #12]	; (8008800 <pvTaskIncrementMutexHeldCount+0x24>)
 80087f4:	681b      	ldr	r3, [r3, #0]
	}
 80087f6:	4618      	mov	r0, r3
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr
 8008800:	20001cec 	.word	0x20001cec

08008804 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800880e:	4b21      	ldr	r3, [pc, #132]	; (8008894 <prvAddCurrentTaskToDelayedList+0x90>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008814:	4b20      	ldr	r3, [pc, #128]	; (8008898 <prvAddCurrentTaskToDelayedList+0x94>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	3304      	adds	r3, #4
 800881a:	4618      	mov	r0, r3
 800881c:	f7fe fa10 	bl	8006c40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008826:	d10a      	bne.n	800883e <prvAddCurrentTaskToDelayedList+0x3a>
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d007      	beq.n	800883e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800882e:	4b1a      	ldr	r3, [pc, #104]	; (8008898 <prvAddCurrentTaskToDelayedList+0x94>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	3304      	adds	r3, #4
 8008834:	4619      	mov	r1, r3
 8008836:	4819      	ldr	r0, [pc, #100]	; (800889c <prvAddCurrentTaskToDelayedList+0x98>)
 8008838:	f7fe f9a5 	bl	8006b86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800883c:	e026      	b.n	800888c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4413      	add	r3, r2
 8008844:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008846:	4b14      	ldr	r3, [pc, #80]	; (8008898 <prvAddCurrentTaskToDelayedList+0x94>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68ba      	ldr	r2, [r7, #8]
 800884c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	429a      	cmp	r2, r3
 8008854:	d209      	bcs.n	800886a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008856:	4b12      	ldr	r3, [pc, #72]	; (80088a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	4b0f      	ldr	r3, [pc, #60]	; (8008898 <prvAddCurrentTaskToDelayedList+0x94>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	3304      	adds	r3, #4
 8008860:	4619      	mov	r1, r3
 8008862:	4610      	mov	r0, r2
 8008864:	f7fe f9b3 	bl	8006bce <vListInsert>
}
 8008868:	e010      	b.n	800888c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800886a:	4b0e      	ldr	r3, [pc, #56]	; (80088a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	4b0a      	ldr	r3, [pc, #40]	; (8008898 <prvAddCurrentTaskToDelayedList+0x94>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	3304      	adds	r3, #4
 8008874:	4619      	mov	r1, r3
 8008876:	4610      	mov	r0, r2
 8008878:	f7fe f9a9 	bl	8006bce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800887c:	4b0a      	ldr	r3, [pc, #40]	; (80088a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68ba      	ldr	r2, [r7, #8]
 8008882:	429a      	cmp	r2, r3
 8008884:	d202      	bcs.n	800888c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008886:	4a08      	ldr	r2, [pc, #32]	; (80088a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	6013      	str	r3, [r2, #0]
}
 800888c:	bf00      	nop
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	200021c4 	.word	0x200021c4
 8008898:	20001cec 	.word	0x20001cec
 800889c:	200021ac 	.word	0x200021ac
 80088a0:	2000217c 	.word	0x2000217c
 80088a4:	20002178 	.word	0x20002178
 80088a8:	200021e0 	.word	0x200021e0

080088ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b08a      	sub	sp, #40	; 0x28
 80088b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80088b2:	2300      	movs	r3, #0
 80088b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80088b6:	f000 fba1 	bl	8008ffc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80088ba:	4b1c      	ldr	r3, [pc, #112]	; (800892c <xTimerCreateTimerTask+0x80>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d021      	beq.n	8008906 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80088c2:	2300      	movs	r3, #0
 80088c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80088c6:	2300      	movs	r3, #0
 80088c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80088ca:	1d3a      	adds	r2, r7, #4
 80088cc:	f107 0108 	add.w	r1, r7, #8
 80088d0:	f107 030c 	add.w	r3, r7, #12
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7fe f90f 	bl	8006af8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80088da:	6879      	ldr	r1, [r7, #4]
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	9202      	str	r2, [sp, #8]
 80088e2:	9301      	str	r3, [sp, #4]
 80088e4:	2302      	movs	r3, #2
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	2300      	movs	r3, #0
 80088ea:	460a      	mov	r2, r1
 80088ec:	4910      	ldr	r1, [pc, #64]	; (8008930 <xTimerCreateTimerTask+0x84>)
 80088ee:	4811      	ldr	r0, [pc, #68]	; (8008934 <xTimerCreateTimerTask+0x88>)
 80088f0:	f7fe ffe0 	bl	80078b4 <xTaskCreateStatic>
 80088f4:	4603      	mov	r3, r0
 80088f6:	4a10      	ldr	r2, [pc, #64]	; (8008938 <xTimerCreateTimerTask+0x8c>)
 80088f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80088fa:	4b0f      	ldr	r3, [pc, #60]	; (8008938 <xTimerCreateTimerTask+0x8c>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d001      	beq.n	8008906 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008902:	2301      	movs	r3, #1
 8008904:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10a      	bne.n	8008922 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800890c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008910:	f383 8811 	msr	BASEPRI, r3
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	613b      	str	r3, [r7, #16]
}
 800891e:	bf00      	nop
 8008920:	e7fe      	b.n	8008920 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008922:	697b      	ldr	r3, [r7, #20]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3718      	adds	r7, #24
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	2000221c 	.word	0x2000221c
 8008930:	0800b8c8 	.word	0x0800b8c8
 8008934:	08008ba5 	.word	0x08008ba5
 8008938:	20002220 	.word	0x20002220

0800893c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800893c:	b580      	push	{r7, lr}
 800893e:	b088      	sub	sp, #32
 8008940:	af02      	add	r7, sp, #8
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	607a      	str	r2, [r7, #4]
 8008948:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800894a:	202c      	movs	r0, #44	; 0x2c
 800894c:	f000 fe04 	bl	8009558 <pvPortMalloc>
 8008950:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00d      	beq.n	8008974 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	2200      	movs	r2, #0
 800895c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	9301      	str	r3, [sp, #4]
 8008964:	6a3b      	ldr	r3, [r7, #32]
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	68b9      	ldr	r1, [r7, #8]
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f000 f843 	bl	80089fa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008974:	697b      	ldr	r3, [r7, #20]
	}
 8008976:	4618      	mov	r0, r3
 8008978:	3718      	adds	r7, #24
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800897e:	b580      	push	{r7, lr}
 8008980:	b08a      	sub	sp, #40	; 0x28
 8008982:	af02      	add	r7, sp, #8
 8008984:	60f8      	str	r0, [r7, #12]
 8008986:	60b9      	str	r1, [r7, #8]
 8008988:	607a      	str	r2, [r7, #4]
 800898a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800898c:	232c      	movs	r3, #44	; 0x2c
 800898e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	2b2c      	cmp	r3, #44	; 0x2c
 8008994:	d00a      	beq.n	80089ac <xTimerCreateStatic+0x2e>
	__asm volatile
 8008996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899a:	f383 8811 	msr	BASEPRI, r3
 800899e:	f3bf 8f6f 	isb	sy
 80089a2:	f3bf 8f4f 	dsb	sy
 80089a6:	61bb      	str	r3, [r7, #24]
}
 80089a8:	bf00      	nop
 80089aa:	e7fe      	b.n	80089aa <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80089ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80089ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10a      	bne.n	80089ca <xTimerCreateStatic+0x4c>
	__asm volatile
 80089b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b8:	f383 8811 	msr	BASEPRI, r3
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	617b      	str	r3, [r7, #20]
}
 80089c6:	bf00      	nop
 80089c8:	e7fe      	b.n	80089c8 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80089ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089cc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00d      	beq.n	80089f0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	2202      	movs	r2, #2
 80089d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	9301      	str	r3, [sp, #4]
 80089e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	68b9      	ldr	r1, [r7, #8]
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f000 f805 	bl	80089fa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80089f0:	69fb      	ldr	r3, [r7, #28]
	}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3720      	adds	r7, #32
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b086      	sub	sp, #24
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	60f8      	str	r0, [r7, #12]
 8008a02:	60b9      	str	r1, [r7, #8]
 8008a04:	607a      	str	r2, [r7, #4]
 8008a06:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d10a      	bne.n	8008a24 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8008a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	617b      	str	r3, [r7, #20]
}
 8008a20:	bf00      	nop
 8008a22:	e7fe      	b.n	8008a22 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d01e      	beq.n	8008a68 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008a2a:	f000 fae7 	bl	8008ffc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a36:	68ba      	ldr	r2, [r7, #8]
 8008a38:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3c:	683a      	ldr	r2, [r7, #0]
 8008a3e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	6a3a      	ldr	r2, [r7, #32]
 8008a44:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a48:	3304      	adds	r3, #4
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fe f88e 	bl	8006b6c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d008      	beq.n	8008a68 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a5c:	f043 0304 	orr.w	r3, r3, #4
 8008a60:	b2da      	uxtb	r2, r3
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008a68:	bf00      	nop
 8008a6a:	3718      	adds	r7, #24
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b08a      	sub	sp, #40	; 0x28
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
 8008a7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10a      	bne.n	8008a9e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8c:	f383 8811 	msr	BASEPRI, r3
 8008a90:	f3bf 8f6f 	isb	sy
 8008a94:	f3bf 8f4f 	dsb	sy
 8008a98:	623b      	str	r3, [r7, #32]
}
 8008a9a:	bf00      	nop
 8008a9c:	e7fe      	b.n	8008a9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008a9e:	4b1a      	ldr	r3, [pc, #104]	; (8008b08 <xTimerGenericCommand+0x98>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d02a      	beq.n	8008afc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	2b05      	cmp	r3, #5
 8008ab6:	dc18      	bgt.n	8008aea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008ab8:	f7ff fd1a 	bl	80084f0 <xTaskGetSchedulerState>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d109      	bne.n	8008ad6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008ac2:	4b11      	ldr	r3, [pc, #68]	; (8008b08 <xTimerGenericCommand+0x98>)
 8008ac4:	6818      	ldr	r0, [r3, #0]
 8008ac6:	f107 0110 	add.w	r1, r7, #16
 8008aca:	2300      	movs	r3, #0
 8008acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ace:	f7fe f9e5 	bl	8006e9c <xQueueGenericSend>
 8008ad2:	6278      	str	r0, [r7, #36]	; 0x24
 8008ad4:	e012      	b.n	8008afc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ad6:	4b0c      	ldr	r3, [pc, #48]	; (8008b08 <xTimerGenericCommand+0x98>)
 8008ad8:	6818      	ldr	r0, [r3, #0]
 8008ada:	f107 0110 	add.w	r1, r7, #16
 8008ade:	2300      	movs	r3, #0
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f7fe f9db 	bl	8006e9c <xQueueGenericSend>
 8008ae6:	6278      	str	r0, [r7, #36]	; 0x24
 8008ae8:	e008      	b.n	8008afc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008aea:	4b07      	ldr	r3, [pc, #28]	; (8008b08 <xTimerGenericCommand+0x98>)
 8008aec:	6818      	ldr	r0, [r3, #0]
 8008aee:	f107 0110 	add.w	r1, r7, #16
 8008af2:	2300      	movs	r3, #0
 8008af4:	683a      	ldr	r2, [r7, #0]
 8008af6:	f7fe facf 	bl	8007098 <xQueueGenericSendFromISR>
 8008afa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3728      	adds	r7, #40	; 0x28
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	2000221c 	.word	0x2000221c

08008b0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b088      	sub	sp, #32
 8008b10:	af02      	add	r7, sp, #8
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b16:	4b22      	ldr	r3, [pc, #136]	; (8008ba0 <prvProcessExpiredTimer+0x94>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	3304      	adds	r3, #4
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7fe f88b 	bl	8006c40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b30:	f003 0304 	and.w	r3, r3, #4
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d022      	beq.n	8008b7e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	699a      	ldr	r2, [r3, #24]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	18d1      	adds	r1, r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	6978      	ldr	r0, [r7, #20]
 8008b46:	f000 f8d1 	bl	8008cec <prvInsertTimerInActiveList>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d01f      	beq.n	8008b90 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b50:	2300      	movs	r3, #0
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	2300      	movs	r3, #0
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	2100      	movs	r1, #0
 8008b5a:	6978      	ldr	r0, [r7, #20]
 8008b5c:	f7ff ff88 	bl	8008a70 <xTimerGenericCommand>
 8008b60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d113      	bne.n	8008b90 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6c:	f383 8811 	msr	BASEPRI, r3
 8008b70:	f3bf 8f6f 	isb	sy
 8008b74:	f3bf 8f4f 	dsb	sy
 8008b78:	60fb      	str	r3, [r7, #12]
}
 8008b7a:	bf00      	nop
 8008b7c:	e7fe      	b.n	8008b7c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b84:	f023 0301 	bic.w	r3, r3, #1
 8008b88:	b2da      	uxtb	r2, r3
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	6a1b      	ldr	r3, [r3, #32]
 8008b94:	6978      	ldr	r0, [r7, #20]
 8008b96:	4798      	blx	r3
}
 8008b98:	bf00      	nop
 8008b9a:	3718      	adds	r7, #24
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	20002214 	.word	0x20002214

08008ba4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008bac:	f107 0308 	add.w	r3, r7, #8
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f000 f857 	bl	8008c64 <prvGetNextExpireTime>
 8008bb6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	4619      	mov	r1, r3
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f000 f803 	bl	8008bc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008bc2:	f000 f8d5 	bl	8008d70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008bc6:	e7f1      	b.n	8008bac <prvTimerTask+0x8>

08008bc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008bd2:	f7ff f8ab 	bl	8007d2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008bd6:	f107 0308 	add.w	r3, r7, #8
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f000 f866 	bl	8008cac <prvSampleTimeNow>
 8008be0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d130      	bne.n	8008c4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d10a      	bne.n	8008c04 <prvProcessTimerOrBlockTask+0x3c>
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d806      	bhi.n	8008c04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008bf6:	f7ff f8a7 	bl	8007d48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008bfa:	68f9      	ldr	r1, [r7, #12]
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f7ff ff85 	bl	8008b0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008c02:	e024      	b.n	8008c4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d008      	beq.n	8008c1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008c0a:	4b13      	ldr	r3, [pc, #76]	; (8008c58 <prvProcessTimerOrBlockTask+0x90>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d101      	bne.n	8008c18 <prvProcessTimerOrBlockTask+0x50>
 8008c14:	2301      	movs	r3, #1
 8008c16:	e000      	b.n	8008c1a <prvProcessTimerOrBlockTask+0x52>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008c1c:	4b0f      	ldr	r3, [pc, #60]	; (8008c5c <prvProcessTimerOrBlockTask+0x94>)
 8008c1e:	6818      	ldr	r0, [r3, #0]
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	1ad3      	subs	r3, r2, r3
 8008c26:	683a      	ldr	r2, [r7, #0]
 8008c28:	4619      	mov	r1, r3
 8008c2a:	f7fe fe0f 	bl	800784c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008c2e:	f7ff f88b 	bl	8007d48 <xTaskResumeAll>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10a      	bne.n	8008c4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008c38:	4b09      	ldr	r3, [pc, #36]	; (8008c60 <prvProcessTimerOrBlockTask+0x98>)
 8008c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c3e:	601a      	str	r2, [r3, #0]
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	f3bf 8f6f 	isb	sy
}
 8008c48:	e001      	b.n	8008c4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008c4a:	f7ff f87d 	bl	8007d48 <xTaskResumeAll>
}
 8008c4e:	bf00      	nop
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	20002218 	.word	0x20002218
 8008c5c:	2000221c 	.word	0x2000221c
 8008c60:	e000ed04 	.word	0xe000ed04

08008c64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c6c:	4b0e      	ldr	r3, [pc, #56]	; (8008ca8 <prvGetNextExpireTime+0x44>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d101      	bne.n	8008c7a <prvGetNextExpireTime+0x16>
 8008c76:	2201      	movs	r2, #1
 8008c78:	e000      	b.n	8008c7c <prvGetNextExpireTime+0x18>
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d105      	bne.n	8008c94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c88:	4b07      	ldr	r3, [pc, #28]	; (8008ca8 <prvGetNextExpireTime+0x44>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	60fb      	str	r3, [r7, #12]
 8008c92:	e001      	b.n	8008c98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008c94:	2300      	movs	r3, #0
 8008c96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008c98:	68fb      	ldr	r3, [r7, #12]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3714      	adds	r7, #20
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	20002214 	.word	0x20002214

08008cac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008cb4:	f7ff f8e6 	bl	8007e84 <xTaskGetTickCount>
 8008cb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008cba:	4b0b      	ldr	r3, [pc, #44]	; (8008ce8 <prvSampleTimeNow+0x3c>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d205      	bcs.n	8008cd0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008cc4:	f000 f936 	bl	8008f34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	601a      	str	r2, [r3, #0]
 8008cce:	e002      	b.n	8008cd6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008cd6:	4a04      	ldr	r2, [pc, #16]	; (8008ce8 <prvSampleTimeNow+0x3c>)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	20002224 	.word	0x20002224

08008cec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b086      	sub	sp, #24
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	607a      	str	r2, [r7, #4]
 8008cf8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	68ba      	ldr	r2, [r7, #8]
 8008d02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d812      	bhi.n	8008d38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	1ad2      	subs	r2, r2, r3
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	699b      	ldr	r3, [r3, #24]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d302      	bcc.n	8008d26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008d20:	2301      	movs	r3, #1
 8008d22:	617b      	str	r3, [r7, #20]
 8008d24:	e01b      	b.n	8008d5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008d26:	4b10      	ldr	r3, [pc, #64]	; (8008d68 <prvInsertTimerInActiveList+0x7c>)
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	4619      	mov	r1, r3
 8008d30:	4610      	mov	r0, r2
 8008d32:	f7fd ff4c 	bl	8006bce <vListInsert>
 8008d36:	e012      	b.n	8008d5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d206      	bcs.n	8008d4e <prvInsertTimerInActiveList+0x62>
 8008d40:	68ba      	ldr	r2, [r7, #8]
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d302      	bcc.n	8008d4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	617b      	str	r3, [r7, #20]
 8008d4c:	e007      	b.n	8008d5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d4e:	4b07      	ldr	r3, [pc, #28]	; (8008d6c <prvInsertTimerInActiveList+0x80>)
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	3304      	adds	r3, #4
 8008d56:	4619      	mov	r1, r3
 8008d58:	4610      	mov	r0, r2
 8008d5a:	f7fd ff38 	bl	8006bce <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008d5e:	697b      	ldr	r3, [r7, #20]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3718      	adds	r7, #24
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	20002218 	.word	0x20002218
 8008d6c:	20002214 	.word	0x20002214

08008d70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b08e      	sub	sp, #56	; 0x38
 8008d74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d76:	e0ca      	b.n	8008f0e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	da18      	bge.n	8008db0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008d7e:	1d3b      	adds	r3, r7, #4
 8008d80:	3304      	adds	r3, #4
 8008d82:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10a      	bne.n	8008da0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8e:	f383 8811 	msr	BASEPRI, r3
 8008d92:	f3bf 8f6f 	isb	sy
 8008d96:	f3bf 8f4f 	dsb	sy
 8008d9a:	61fb      	str	r3, [r7, #28]
}
 8008d9c:	bf00      	nop
 8008d9e:	e7fe      	b.n	8008d9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008da6:	6850      	ldr	r0, [r2, #4]
 8008da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008daa:	6892      	ldr	r2, [r2, #8]
 8008dac:	4611      	mov	r1, r2
 8008dae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f2c0 80aa 	blt.w	8008f0c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dbe:	695b      	ldr	r3, [r3, #20]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d004      	beq.n	8008dce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc6:	3304      	adds	r3, #4
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7fd ff39 	bl	8006c40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008dce:	463b      	mov	r3, r7
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7ff ff6b 	bl	8008cac <prvSampleTimeNow>
 8008dd6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2b09      	cmp	r3, #9
 8008ddc:	f200 8097 	bhi.w	8008f0e <prvProcessReceivedCommands+0x19e>
 8008de0:	a201      	add	r2, pc, #4	; (adr r2, 8008de8 <prvProcessReceivedCommands+0x78>)
 8008de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de6:	bf00      	nop
 8008de8:	08008e11 	.word	0x08008e11
 8008dec:	08008e11 	.word	0x08008e11
 8008df0:	08008e11 	.word	0x08008e11
 8008df4:	08008e85 	.word	0x08008e85
 8008df8:	08008e99 	.word	0x08008e99
 8008dfc:	08008ee3 	.word	0x08008ee3
 8008e00:	08008e11 	.word	0x08008e11
 8008e04:	08008e11 	.word	0x08008e11
 8008e08:	08008e85 	.word	0x08008e85
 8008e0c:	08008e99 	.word	0x08008e99
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e16:	f043 0301 	orr.w	r3, r3, #1
 8008e1a:	b2da      	uxtb	r2, r3
 8008e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008e22:	68ba      	ldr	r2, [r7, #8]
 8008e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e26:	699b      	ldr	r3, [r3, #24]
 8008e28:	18d1      	adds	r1, r2, r3
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e30:	f7ff ff5c 	bl	8008cec <prvInsertTimerInActiveList>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d069      	beq.n	8008f0e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3c:	6a1b      	ldr	r3, [r3, #32]
 8008e3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e48:	f003 0304 	and.w	r3, r3, #4
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d05e      	beq.n	8008f0e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008e50:	68ba      	ldr	r2, [r7, #8]
 8008e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e54:	699b      	ldr	r3, [r3, #24]
 8008e56:	441a      	add	r2, r3
 8008e58:	2300      	movs	r3, #0
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	2100      	movs	r1, #0
 8008e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e62:	f7ff fe05 	bl	8008a70 <xTimerGenericCommand>
 8008e66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008e68:	6a3b      	ldr	r3, [r7, #32]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d14f      	bne.n	8008f0e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e72:	f383 8811 	msr	BASEPRI, r3
 8008e76:	f3bf 8f6f 	isb	sy
 8008e7a:	f3bf 8f4f 	dsb	sy
 8008e7e:	61bb      	str	r3, [r7, #24]
}
 8008e80:	bf00      	nop
 8008e82:	e7fe      	b.n	8008e82 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e8a:	f023 0301 	bic.w	r3, r3, #1
 8008e8e:	b2da      	uxtb	r2, r3
 8008e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008e96:	e03a      	b.n	8008f0e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e9e:	f043 0301 	orr.w	r3, r3, #1
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10a      	bne.n	8008ece <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	617b      	str	r3, [r7, #20]
}
 8008eca:	bf00      	nop
 8008ecc:	e7fe      	b.n	8008ecc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed0:	699a      	ldr	r2, [r3, #24]
 8008ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed4:	18d1      	adds	r1, r2, r3
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008edc:	f7ff ff06 	bl	8008cec <prvInsertTimerInActiveList>
					break;
 8008ee0:	e015      	b.n	8008f0e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ee8:	f003 0302 	and.w	r3, r3, #2
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d103      	bne.n	8008ef8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ef2:	f000 fbfd 	bl	80096f0 <vPortFree>
 8008ef6:	e00a      	b.n	8008f0e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008efe:	f023 0301 	bic.w	r3, r3, #1
 8008f02:	b2da      	uxtb	r2, r3
 8008f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008f0a:	e000      	b.n	8008f0e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008f0c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f0e:	4b08      	ldr	r3, [pc, #32]	; (8008f30 <prvProcessReceivedCommands+0x1c0>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	1d39      	adds	r1, r7, #4
 8008f14:	2200      	movs	r2, #0
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7fe f95a 	bl	80071d0 <xQueueReceive>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f47f af2a 	bne.w	8008d78 <prvProcessReceivedCommands+0x8>
	}
}
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop
 8008f28:	3730      	adds	r7, #48	; 0x30
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	2000221c 	.word	0x2000221c

08008f34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b088      	sub	sp, #32
 8008f38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f3a:	e048      	b.n	8008fce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f3c:	4b2d      	ldr	r3, [pc, #180]	; (8008ff4 <prvSwitchTimerLists+0xc0>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f46:	4b2b      	ldr	r3, [pc, #172]	; (8008ff4 <prvSwitchTimerLists+0xc0>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	3304      	adds	r3, #4
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7fd fe73 	bl	8006c40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6a1b      	ldr	r3, [r3, #32]
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f68:	f003 0304 	and.w	r3, r3, #4
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d02e      	beq.n	8008fce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	693a      	ldr	r2, [r7, #16]
 8008f76:	4413      	add	r3, r2
 8008f78:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d90e      	bls.n	8008fa0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	68ba      	ldr	r2, [r7, #8]
 8008f86:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f8e:	4b19      	ldr	r3, [pc, #100]	; (8008ff4 <prvSwitchTimerLists+0xc0>)
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	3304      	adds	r3, #4
 8008f96:	4619      	mov	r1, r3
 8008f98:	4610      	mov	r0, r2
 8008f9a:	f7fd fe18 	bl	8006bce <vListInsert>
 8008f9e:	e016      	b.n	8008fce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	693a      	ldr	r2, [r7, #16]
 8008fa8:	2100      	movs	r1, #0
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f7ff fd60 	bl	8008a70 <xTimerGenericCommand>
 8008fb0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d10a      	bne.n	8008fce <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	603b      	str	r3, [r7, #0]
}
 8008fca:	bf00      	nop
 8008fcc:	e7fe      	b.n	8008fcc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008fce:	4b09      	ldr	r3, [pc, #36]	; (8008ff4 <prvSwitchTimerLists+0xc0>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d1b1      	bne.n	8008f3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008fd8:	4b06      	ldr	r3, [pc, #24]	; (8008ff4 <prvSwitchTimerLists+0xc0>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008fde:	4b06      	ldr	r3, [pc, #24]	; (8008ff8 <prvSwitchTimerLists+0xc4>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a04      	ldr	r2, [pc, #16]	; (8008ff4 <prvSwitchTimerLists+0xc0>)
 8008fe4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008fe6:	4a04      	ldr	r2, [pc, #16]	; (8008ff8 <prvSwitchTimerLists+0xc4>)
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	6013      	str	r3, [r2, #0]
}
 8008fec:	bf00      	nop
 8008fee:	3718      	adds	r7, #24
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	20002214 	.word	0x20002214
 8008ff8:	20002218 	.word	0x20002218

08008ffc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009002:	f000 f987 	bl	8009314 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009006:	4b15      	ldr	r3, [pc, #84]	; (800905c <prvCheckForValidListAndQueue+0x60>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d120      	bne.n	8009050 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800900e:	4814      	ldr	r0, [pc, #80]	; (8009060 <prvCheckForValidListAndQueue+0x64>)
 8009010:	f7fd fd8c 	bl	8006b2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009014:	4813      	ldr	r0, [pc, #76]	; (8009064 <prvCheckForValidListAndQueue+0x68>)
 8009016:	f7fd fd89 	bl	8006b2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800901a:	4b13      	ldr	r3, [pc, #76]	; (8009068 <prvCheckForValidListAndQueue+0x6c>)
 800901c:	4a10      	ldr	r2, [pc, #64]	; (8009060 <prvCheckForValidListAndQueue+0x64>)
 800901e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009020:	4b12      	ldr	r3, [pc, #72]	; (800906c <prvCheckForValidListAndQueue+0x70>)
 8009022:	4a10      	ldr	r2, [pc, #64]	; (8009064 <prvCheckForValidListAndQueue+0x68>)
 8009024:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009026:	2300      	movs	r3, #0
 8009028:	9300      	str	r3, [sp, #0]
 800902a:	4b11      	ldr	r3, [pc, #68]	; (8009070 <prvCheckForValidListAndQueue+0x74>)
 800902c:	4a11      	ldr	r2, [pc, #68]	; (8009074 <prvCheckForValidListAndQueue+0x78>)
 800902e:	2110      	movs	r1, #16
 8009030:	200a      	movs	r0, #10
 8009032:	f7fd fe97 	bl	8006d64 <xQueueGenericCreateStatic>
 8009036:	4603      	mov	r3, r0
 8009038:	4a08      	ldr	r2, [pc, #32]	; (800905c <prvCheckForValidListAndQueue+0x60>)
 800903a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800903c:	4b07      	ldr	r3, [pc, #28]	; (800905c <prvCheckForValidListAndQueue+0x60>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d005      	beq.n	8009050 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009044:	4b05      	ldr	r3, [pc, #20]	; (800905c <prvCheckForValidListAndQueue+0x60>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	490b      	ldr	r1, [pc, #44]	; (8009078 <prvCheckForValidListAndQueue+0x7c>)
 800904a:	4618      	mov	r0, r3
 800904c:	f7fe fbd4 	bl	80077f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009050:	f000 f990 	bl	8009374 <vPortExitCritical>
}
 8009054:	bf00      	nop
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	2000221c 	.word	0x2000221c
 8009060:	200021ec 	.word	0x200021ec
 8009064:	20002200 	.word	0x20002200
 8009068:	20002214 	.word	0x20002214
 800906c:	20002218 	.word	0x20002218
 8009070:	200022c8 	.word	0x200022c8
 8009074:	20002228 	.word	0x20002228
 8009078:	0800b8d0 	.word	0x0800b8d0

0800907c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b086      	sub	sp, #24
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d10a      	bne.n	80090a4 <pvTimerGetTimerID+0x28>
	__asm volatile
 800908e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009092:	f383 8811 	msr	BASEPRI, r3
 8009096:	f3bf 8f6f 	isb	sy
 800909a:	f3bf 8f4f 	dsb	sy
 800909e:	60fb      	str	r3, [r7, #12]
}
 80090a0:	bf00      	nop
 80090a2:	e7fe      	b.n	80090a2 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80090a4:	f000 f936 	bl	8009314 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	69db      	ldr	r3, [r3, #28]
 80090ac:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80090ae:	f000 f961 	bl	8009374 <vPortExitCritical>

	return pvReturn;
 80090b2:	693b      	ldr	r3, [r7, #16]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3718      	adds	r7, #24
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80090bc:	b480      	push	{r7}
 80090be:	b085      	sub	sp, #20
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	3b04      	subs	r3, #4
 80090cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80090d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	3b04      	subs	r3, #4
 80090da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	f023 0201 	bic.w	r2, r3, #1
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	3b04      	subs	r3, #4
 80090ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80090ec:	4a0c      	ldr	r2, [pc, #48]	; (8009120 <pxPortInitialiseStack+0x64>)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	3b14      	subs	r3, #20
 80090f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	3b04      	subs	r3, #4
 8009102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f06f 0202 	mvn.w	r2, #2
 800910a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	3b20      	subs	r3, #32
 8009110:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009112:	68fb      	ldr	r3, [r7, #12]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3714      	adds	r7, #20
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr
 8009120:	08009125 	.word	0x08009125

08009124 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800912a:	2300      	movs	r3, #0
 800912c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800912e:	4b12      	ldr	r3, [pc, #72]	; (8009178 <prvTaskExitError+0x54>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009136:	d00a      	beq.n	800914e <prvTaskExitError+0x2a>
	__asm volatile
 8009138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913c:	f383 8811 	msr	BASEPRI, r3
 8009140:	f3bf 8f6f 	isb	sy
 8009144:	f3bf 8f4f 	dsb	sy
 8009148:	60fb      	str	r3, [r7, #12]
}
 800914a:	bf00      	nop
 800914c:	e7fe      	b.n	800914c <prvTaskExitError+0x28>
	__asm volatile
 800914e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	60bb      	str	r3, [r7, #8]
}
 8009160:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009162:	bf00      	nop
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d0fc      	beq.n	8009164 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800916a:	bf00      	nop
 800916c:	bf00      	nop
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr
 8009178:	2000000c 	.word	0x2000000c
 800917c:	00000000 	.word	0x00000000

08009180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009180:	4b07      	ldr	r3, [pc, #28]	; (80091a0 <pxCurrentTCBConst2>)
 8009182:	6819      	ldr	r1, [r3, #0]
 8009184:	6808      	ldr	r0, [r1, #0]
 8009186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800918a:	f380 8809 	msr	PSP, r0
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	f04f 0000 	mov.w	r0, #0
 8009196:	f380 8811 	msr	BASEPRI, r0
 800919a:	4770      	bx	lr
 800919c:	f3af 8000 	nop.w

080091a0 <pxCurrentTCBConst2>:
 80091a0:	20001cec 	.word	0x20001cec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80091a4:	bf00      	nop
 80091a6:	bf00      	nop

080091a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80091a8:	4808      	ldr	r0, [pc, #32]	; (80091cc <prvPortStartFirstTask+0x24>)
 80091aa:	6800      	ldr	r0, [r0, #0]
 80091ac:	6800      	ldr	r0, [r0, #0]
 80091ae:	f380 8808 	msr	MSP, r0
 80091b2:	f04f 0000 	mov.w	r0, #0
 80091b6:	f380 8814 	msr	CONTROL, r0
 80091ba:	b662      	cpsie	i
 80091bc:	b661      	cpsie	f
 80091be:	f3bf 8f4f 	dsb	sy
 80091c2:	f3bf 8f6f 	isb	sy
 80091c6:	df00      	svc	0
 80091c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80091ca:	bf00      	nop
 80091cc:	e000ed08 	.word	0xe000ed08

080091d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80091d6:	4b46      	ldr	r3, [pc, #280]	; (80092f0 <xPortStartScheduler+0x120>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a46      	ldr	r2, [pc, #280]	; (80092f4 <xPortStartScheduler+0x124>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d10a      	bne.n	80091f6 <xPortStartScheduler+0x26>
	__asm volatile
 80091e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e4:	f383 8811 	msr	BASEPRI, r3
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	613b      	str	r3, [r7, #16]
}
 80091f2:	bf00      	nop
 80091f4:	e7fe      	b.n	80091f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80091f6:	4b3e      	ldr	r3, [pc, #248]	; (80092f0 <xPortStartScheduler+0x120>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a3f      	ldr	r2, [pc, #252]	; (80092f8 <xPortStartScheduler+0x128>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d10a      	bne.n	8009216 <xPortStartScheduler+0x46>
	__asm volatile
 8009200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	60fb      	str	r3, [r7, #12]
}
 8009212:	bf00      	nop
 8009214:	e7fe      	b.n	8009214 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009216:	4b39      	ldr	r3, [pc, #228]	; (80092fc <xPortStartScheduler+0x12c>)
 8009218:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	b2db      	uxtb	r3, r3
 8009220:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	22ff      	movs	r2, #255	; 0xff
 8009226:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	b2db      	uxtb	r3, r3
 800922e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009230:	78fb      	ldrb	r3, [r7, #3]
 8009232:	b2db      	uxtb	r3, r3
 8009234:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009238:	b2da      	uxtb	r2, r3
 800923a:	4b31      	ldr	r3, [pc, #196]	; (8009300 <xPortStartScheduler+0x130>)
 800923c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800923e:	4b31      	ldr	r3, [pc, #196]	; (8009304 <xPortStartScheduler+0x134>)
 8009240:	2207      	movs	r2, #7
 8009242:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009244:	e009      	b.n	800925a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009246:	4b2f      	ldr	r3, [pc, #188]	; (8009304 <xPortStartScheduler+0x134>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3b01      	subs	r3, #1
 800924c:	4a2d      	ldr	r2, [pc, #180]	; (8009304 <xPortStartScheduler+0x134>)
 800924e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009250:	78fb      	ldrb	r3, [r7, #3]
 8009252:	b2db      	uxtb	r3, r3
 8009254:	005b      	lsls	r3, r3, #1
 8009256:	b2db      	uxtb	r3, r3
 8009258:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800925a:	78fb      	ldrb	r3, [r7, #3]
 800925c:	b2db      	uxtb	r3, r3
 800925e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009262:	2b80      	cmp	r3, #128	; 0x80
 8009264:	d0ef      	beq.n	8009246 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009266:	4b27      	ldr	r3, [pc, #156]	; (8009304 <xPortStartScheduler+0x134>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f1c3 0307 	rsb	r3, r3, #7
 800926e:	2b04      	cmp	r3, #4
 8009270:	d00a      	beq.n	8009288 <xPortStartScheduler+0xb8>
	__asm volatile
 8009272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009276:	f383 8811 	msr	BASEPRI, r3
 800927a:	f3bf 8f6f 	isb	sy
 800927e:	f3bf 8f4f 	dsb	sy
 8009282:	60bb      	str	r3, [r7, #8]
}
 8009284:	bf00      	nop
 8009286:	e7fe      	b.n	8009286 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009288:	4b1e      	ldr	r3, [pc, #120]	; (8009304 <xPortStartScheduler+0x134>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	021b      	lsls	r3, r3, #8
 800928e:	4a1d      	ldr	r2, [pc, #116]	; (8009304 <xPortStartScheduler+0x134>)
 8009290:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009292:	4b1c      	ldr	r3, [pc, #112]	; (8009304 <xPortStartScheduler+0x134>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800929a:	4a1a      	ldr	r2, [pc, #104]	; (8009304 <xPortStartScheduler+0x134>)
 800929c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80092a6:	4b18      	ldr	r3, [pc, #96]	; (8009308 <xPortStartScheduler+0x138>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a17      	ldr	r2, [pc, #92]	; (8009308 <xPortStartScheduler+0x138>)
 80092ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80092b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80092b2:	4b15      	ldr	r3, [pc, #84]	; (8009308 <xPortStartScheduler+0x138>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a14      	ldr	r2, [pc, #80]	; (8009308 <xPortStartScheduler+0x138>)
 80092b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80092bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80092be:	f000 f8dd 	bl	800947c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80092c2:	4b12      	ldr	r3, [pc, #72]	; (800930c <xPortStartScheduler+0x13c>)
 80092c4:	2200      	movs	r2, #0
 80092c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80092c8:	f000 f8fc 	bl	80094c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80092cc:	4b10      	ldr	r3, [pc, #64]	; (8009310 <xPortStartScheduler+0x140>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a0f      	ldr	r2, [pc, #60]	; (8009310 <xPortStartScheduler+0x140>)
 80092d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80092d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80092d8:	f7ff ff66 	bl	80091a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80092dc:	f7fe fe9c 	bl	8008018 <vTaskSwitchContext>
	prvTaskExitError();
 80092e0:	f7ff ff20 	bl	8009124 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3718      	adds	r7, #24
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	e000ed00 	.word	0xe000ed00
 80092f4:	410fc271 	.word	0x410fc271
 80092f8:	410fc270 	.word	0x410fc270
 80092fc:	e000e400 	.word	0xe000e400
 8009300:	20002318 	.word	0x20002318
 8009304:	2000231c 	.word	0x2000231c
 8009308:	e000ed20 	.word	0xe000ed20
 800930c:	2000000c 	.word	0x2000000c
 8009310:	e000ef34 	.word	0xe000ef34

08009314 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
	__asm volatile
 800931a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931e:	f383 8811 	msr	BASEPRI, r3
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	607b      	str	r3, [r7, #4]
}
 800932c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800932e:	4b0f      	ldr	r3, [pc, #60]	; (800936c <vPortEnterCritical+0x58>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	3301      	adds	r3, #1
 8009334:	4a0d      	ldr	r2, [pc, #52]	; (800936c <vPortEnterCritical+0x58>)
 8009336:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009338:	4b0c      	ldr	r3, [pc, #48]	; (800936c <vPortEnterCritical+0x58>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d10f      	bne.n	8009360 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009340:	4b0b      	ldr	r3, [pc, #44]	; (8009370 <vPortEnterCritical+0x5c>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	b2db      	uxtb	r3, r3
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00a      	beq.n	8009360 <vPortEnterCritical+0x4c>
	__asm volatile
 800934a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	603b      	str	r3, [r7, #0]
}
 800935c:	bf00      	nop
 800935e:	e7fe      	b.n	800935e <vPortEnterCritical+0x4a>
	}
}
 8009360:	bf00      	nop
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr
 800936c:	2000000c 	.word	0x2000000c
 8009370:	e000ed04 	.word	0xe000ed04

08009374 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800937a:	4b12      	ldr	r3, [pc, #72]	; (80093c4 <vPortExitCritical+0x50>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d10a      	bne.n	8009398 <vPortExitCritical+0x24>
	__asm volatile
 8009382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009386:	f383 8811 	msr	BASEPRI, r3
 800938a:	f3bf 8f6f 	isb	sy
 800938e:	f3bf 8f4f 	dsb	sy
 8009392:	607b      	str	r3, [r7, #4]
}
 8009394:	bf00      	nop
 8009396:	e7fe      	b.n	8009396 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009398:	4b0a      	ldr	r3, [pc, #40]	; (80093c4 <vPortExitCritical+0x50>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	3b01      	subs	r3, #1
 800939e:	4a09      	ldr	r2, [pc, #36]	; (80093c4 <vPortExitCritical+0x50>)
 80093a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80093a2:	4b08      	ldr	r3, [pc, #32]	; (80093c4 <vPortExitCritical+0x50>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d105      	bne.n	80093b6 <vPortExitCritical+0x42>
 80093aa:	2300      	movs	r3, #0
 80093ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	f383 8811 	msr	BASEPRI, r3
}
 80093b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80093b6:	bf00      	nop
 80093b8:	370c      	adds	r7, #12
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop
 80093c4:	2000000c 	.word	0x2000000c
	...

080093d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80093d0:	f3ef 8009 	mrs	r0, PSP
 80093d4:	f3bf 8f6f 	isb	sy
 80093d8:	4b15      	ldr	r3, [pc, #84]	; (8009430 <pxCurrentTCBConst>)
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	f01e 0f10 	tst.w	lr, #16
 80093e0:	bf08      	it	eq
 80093e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80093e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ea:	6010      	str	r0, [r2, #0]
 80093ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80093f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80093f4:	f380 8811 	msr	BASEPRI, r0
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f7fe fe0a 	bl	8008018 <vTaskSwitchContext>
 8009404:	f04f 0000 	mov.w	r0, #0
 8009408:	f380 8811 	msr	BASEPRI, r0
 800940c:	bc09      	pop	{r0, r3}
 800940e:	6819      	ldr	r1, [r3, #0]
 8009410:	6808      	ldr	r0, [r1, #0]
 8009412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009416:	f01e 0f10 	tst.w	lr, #16
 800941a:	bf08      	it	eq
 800941c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009420:	f380 8809 	msr	PSP, r0
 8009424:	f3bf 8f6f 	isb	sy
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	f3af 8000 	nop.w

08009430 <pxCurrentTCBConst>:
 8009430:	20001cec 	.word	0x20001cec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009434:	bf00      	nop
 8009436:	bf00      	nop

08009438 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
	__asm volatile
 800943e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	607b      	str	r3, [r7, #4]
}
 8009450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009452:	f7fe fd27 	bl	8007ea4 <xTaskIncrementTick>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d003      	beq.n	8009464 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800945c:	4b06      	ldr	r3, [pc, #24]	; (8009478 <xPortSysTickHandler+0x40>)
 800945e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009462:	601a      	str	r2, [r3, #0]
 8009464:	2300      	movs	r3, #0
 8009466:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	f383 8811 	msr	BASEPRI, r3
}
 800946e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009470:	bf00      	nop
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}
 8009478:	e000ed04 	.word	0xe000ed04

0800947c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800947c:	b480      	push	{r7}
 800947e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009480:	4b0b      	ldr	r3, [pc, #44]	; (80094b0 <vPortSetupTimerInterrupt+0x34>)
 8009482:	2200      	movs	r2, #0
 8009484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009486:	4b0b      	ldr	r3, [pc, #44]	; (80094b4 <vPortSetupTimerInterrupt+0x38>)
 8009488:	2200      	movs	r2, #0
 800948a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800948c:	4b0a      	ldr	r3, [pc, #40]	; (80094b8 <vPortSetupTimerInterrupt+0x3c>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a0a      	ldr	r2, [pc, #40]	; (80094bc <vPortSetupTimerInterrupt+0x40>)
 8009492:	fba2 2303 	umull	r2, r3, r2, r3
 8009496:	099b      	lsrs	r3, r3, #6
 8009498:	4a09      	ldr	r2, [pc, #36]	; (80094c0 <vPortSetupTimerInterrupt+0x44>)
 800949a:	3b01      	subs	r3, #1
 800949c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800949e:	4b04      	ldr	r3, [pc, #16]	; (80094b0 <vPortSetupTimerInterrupt+0x34>)
 80094a0:	2207      	movs	r2, #7
 80094a2:	601a      	str	r2, [r3, #0]
}
 80094a4:	bf00      	nop
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr
 80094ae:	bf00      	nop
 80094b0:	e000e010 	.word	0xe000e010
 80094b4:	e000e018 	.word	0xe000e018
 80094b8:	20000000 	.word	0x20000000
 80094bc:	10624dd3 	.word	0x10624dd3
 80094c0:	e000e014 	.word	0xe000e014

080094c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80094c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80094d4 <vPortEnableVFP+0x10>
 80094c8:	6801      	ldr	r1, [r0, #0]
 80094ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80094ce:	6001      	str	r1, [r0, #0]
 80094d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80094d2:	bf00      	nop
 80094d4:	e000ed88 	.word	0xe000ed88

080094d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80094de:	f3ef 8305 	mrs	r3, IPSR
 80094e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2b0f      	cmp	r3, #15
 80094e8:	d914      	bls.n	8009514 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80094ea:	4a17      	ldr	r2, [pc, #92]	; (8009548 <vPortValidateInterruptPriority+0x70>)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	4413      	add	r3, r2
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80094f4:	4b15      	ldr	r3, [pc, #84]	; (800954c <vPortValidateInterruptPriority+0x74>)
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	7afa      	ldrb	r2, [r7, #11]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d20a      	bcs.n	8009514 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80094fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009502:	f383 8811 	msr	BASEPRI, r3
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	607b      	str	r3, [r7, #4]
}
 8009510:	bf00      	nop
 8009512:	e7fe      	b.n	8009512 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009514:	4b0e      	ldr	r3, [pc, #56]	; (8009550 <vPortValidateInterruptPriority+0x78>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800951c:	4b0d      	ldr	r3, [pc, #52]	; (8009554 <vPortValidateInterruptPriority+0x7c>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	429a      	cmp	r2, r3
 8009522:	d90a      	bls.n	800953a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009528:	f383 8811 	msr	BASEPRI, r3
 800952c:	f3bf 8f6f 	isb	sy
 8009530:	f3bf 8f4f 	dsb	sy
 8009534:	603b      	str	r3, [r7, #0]
}
 8009536:	bf00      	nop
 8009538:	e7fe      	b.n	8009538 <vPortValidateInterruptPriority+0x60>
	}
 800953a:	bf00      	nop
 800953c:	3714      	adds	r7, #20
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop
 8009548:	e000e3f0 	.word	0xe000e3f0
 800954c:	20002318 	.word	0x20002318
 8009550:	e000ed0c 	.word	0xe000ed0c
 8009554:	2000231c 	.word	0x2000231c

08009558 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b08a      	sub	sp, #40	; 0x28
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009560:	2300      	movs	r3, #0
 8009562:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009564:	f7fe fbe2 	bl	8007d2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009568:	4b5b      	ldr	r3, [pc, #364]	; (80096d8 <pvPortMalloc+0x180>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d101      	bne.n	8009574 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009570:	f000 f920 	bl	80097b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009574:	4b59      	ldr	r3, [pc, #356]	; (80096dc <pvPortMalloc+0x184>)
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4013      	ands	r3, r2
 800957c:	2b00      	cmp	r3, #0
 800957e:	f040 8093 	bne.w	80096a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d01d      	beq.n	80095c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009588:	2208      	movs	r2, #8
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4413      	add	r3, r2
 800958e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f003 0307 	and.w	r3, r3, #7
 8009596:	2b00      	cmp	r3, #0
 8009598:	d014      	beq.n	80095c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f023 0307 	bic.w	r3, r3, #7
 80095a0:	3308      	adds	r3, #8
 80095a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f003 0307 	and.w	r3, r3, #7
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00a      	beq.n	80095c4 <pvPortMalloc+0x6c>
	__asm volatile
 80095ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b2:	f383 8811 	msr	BASEPRI, r3
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	617b      	str	r3, [r7, #20]
}
 80095c0:	bf00      	nop
 80095c2:	e7fe      	b.n	80095c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d06e      	beq.n	80096a8 <pvPortMalloc+0x150>
 80095ca:	4b45      	ldr	r3, [pc, #276]	; (80096e0 <pvPortMalloc+0x188>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d869      	bhi.n	80096a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80095d4:	4b43      	ldr	r3, [pc, #268]	; (80096e4 <pvPortMalloc+0x18c>)
 80095d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80095d8:	4b42      	ldr	r3, [pc, #264]	; (80096e4 <pvPortMalloc+0x18c>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095de:	e004      	b.n	80095ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80095e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80095e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d903      	bls.n	80095fc <pvPortMalloc+0xa4>
 80095f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1f1      	bne.n	80095e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80095fc:	4b36      	ldr	r3, [pc, #216]	; (80096d8 <pvPortMalloc+0x180>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009602:	429a      	cmp	r2, r3
 8009604:	d050      	beq.n	80096a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009606:	6a3b      	ldr	r3, [r7, #32]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2208      	movs	r2, #8
 800960c:	4413      	add	r3, r2
 800960e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	6a3b      	ldr	r3, [r7, #32]
 8009616:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961a:	685a      	ldr	r2, [r3, #4]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	1ad2      	subs	r2, r2, r3
 8009620:	2308      	movs	r3, #8
 8009622:	005b      	lsls	r3, r3, #1
 8009624:	429a      	cmp	r2, r3
 8009626:	d91f      	bls.n	8009668 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4413      	add	r3, r2
 800962e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	f003 0307 	and.w	r3, r3, #7
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00a      	beq.n	8009650 <pvPortMalloc+0xf8>
	__asm volatile
 800963a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	613b      	str	r3, [r7, #16]
}
 800964c:	bf00      	nop
 800964e:	e7fe      	b.n	800964e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009652:	685a      	ldr	r2, [r3, #4]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	1ad2      	subs	r2, r2, r3
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800965c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009662:	69b8      	ldr	r0, [r7, #24]
 8009664:	f000 f908 	bl	8009878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009668:	4b1d      	ldr	r3, [pc, #116]	; (80096e0 <pvPortMalloc+0x188>)
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	1ad3      	subs	r3, r2, r3
 8009672:	4a1b      	ldr	r2, [pc, #108]	; (80096e0 <pvPortMalloc+0x188>)
 8009674:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009676:	4b1a      	ldr	r3, [pc, #104]	; (80096e0 <pvPortMalloc+0x188>)
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	4b1b      	ldr	r3, [pc, #108]	; (80096e8 <pvPortMalloc+0x190>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	429a      	cmp	r2, r3
 8009680:	d203      	bcs.n	800968a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009682:	4b17      	ldr	r3, [pc, #92]	; (80096e0 <pvPortMalloc+0x188>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a18      	ldr	r2, [pc, #96]	; (80096e8 <pvPortMalloc+0x190>)
 8009688:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800968a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968c:	685a      	ldr	r2, [r3, #4]
 800968e:	4b13      	ldr	r3, [pc, #76]	; (80096dc <pvPortMalloc+0x184>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	431a      	orrs	r2, r3
 8009694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009696:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969a:	2200      	movs	r2, #0
 800969c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800969e:	4b13      	ldr	r3, [pc, #76]	; (80096ec <pvPortMalloc+0x194>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	3301      	adds	r3, #1
 80096a4:	4a11      	ldr	r2, [pc, #68]	; (80096ec <pvPortMalloc+0x194>)
 80096a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80096a8:	f7fe fb4e 	bl	8007d48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	f003 0307 	and.w	r3, r3, #7
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00a      	beq.n	80096cc <pvPortMalloc+0x174>
	__asm volatile
 80096b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ba:	f383 8811 	msr	BASEPRI, r3
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	f3bf 8f4f 	dsb	sy
 80096c6:	60fb      	str	r3, [r7, #12]
}
 80096c8:	bf00      	nop
 80096ca:	e7fe      	b.n	80096ca <pvPortMalloc+0x172>
	return pvReturn;
 80096cc:	69fb      	ldr	r3, [r7, #28]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3728      	adds	r7, #40	; 0x28
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	20005f28 	.word	0x20005f28
 80096dc:	20005f3c 	.word	0x20005f3c
 80096e0:	20005f2c 	.word	0x20005f2c
 80096e4:	20005f20 	.word	0x20005f20
 80096e8:	20005f30 	.word	0x20005f30
 80096ec:	20005f34 	.word	0x20005f34

080096f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b086      	sub	sp, #24
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d04d      	beq.n	800979e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009702:	2308      	movs	r3, #8
 8009704:	425b      	negs	r3, r3
 8009706:	697a      	ldr	r2, [r7, #20]
 8009708:	4413      	add	r3, r2
 800970a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	685a      	ldr	r2, [r3, #4]
 8009714:	4b24      	ldr	r3, [pc, #144]	; (80097a8 <vPortFree+0xb8>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4013      	ands	r3, r2
 800971a:	2b00      	cmp	r3, #0
 800971c:	d10a      	bne.n	8009734 <vPortFree+0x44>
	__asm volatile
 800971e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	60fb      	str	r3, [r7, #12]
}
 8009730:	bf00      	nop
 8009732:	e7fe      	b.n	8009732 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d00a      	beq.n	8009752 <vPortFree+0x62>
	__asm volatile
 800973c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009740:	f383 8811 	msr	BASEPRI, r3
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	60bb      	str	r3, [r7, #8]
}
 800974e:	bf00      	nop
 8009750:	e7fe      	b.n	8009750 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	685a      	ldr	r2, [r3, #4]
 8009756:	4b14      	ldr	r3, [pc, #80]	; (80097a8 <vPortFree+0xb8>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4013      	ands	r3, r2
 800975c:	2b00      	cmp	r3, #0
 800975e:	d01e      	beq.n	800979e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d11a      	bne.n	800979e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	685a      	ldr	r2, [r3, #4]
 800976c:	4b0e      	ldr	r3, [pc, #56]	; (80097a8 <vPortFree+0xb8>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	43db      	mvns	r3, r3
 8009772:	401a      	ands	r2, r3
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009778:	f7fe fad8 	bl	8007d2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	685a      	ldr	r2, [r3, #4]
 8009780:	4b0a      	ldr	r3, [pc, #40]	; (80097ac <vPortFree+0xbc>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4413      	add	r3, r2
 8009786:	4a09      	ldr	r2, [pc, #36]	; (80097ac <vPortFree+0xbc>)
 8009788:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800978a:	6938      	ldr	r0, [r7, #16]
 800978c:	f000 f874 	bl	8009878 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009790:	4b07      	ldr	r3, [pc, #28]	; (80097b0 <vPortFree+0xc0>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	3301      	adds	r3, #1
 8009796:	4a06      	ldr	r2, [pc, #24]	; (80097b0 <vPortFree+0xc0>)
 8009798:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800979a:	f7fe fad5 	bl	8007d48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800979e:	bf00      	nop
 80097a0:	3718      	adds	r7, #24
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	20005f3c 	.word	0x20005f3c
 80097ac:	20005f2c 	.word	0x20005f2c
 80097b0:	20005f38 	.word	0x20005f38

080097b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80097ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80097be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80097c0:	4b27      	ldr	r3, [pc, #156]	; (8009860 <prvHeapInit+0xac>)
 80097c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f003 0307 	and.w	r3, r3, #7
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00c      	beq.n	80097e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	3307      	adds	r3, #7
 80097d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f023 0307 	bic.w	r3, r3, #7
 80097da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80097dc:	68ba      	ldr	r2, [r7, #8]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	1ad3      	subs	r3, r2, r3
 80097e2:	4a1f      	ldr	r2, [pc, #124]	; (8009860 <prvHeapInit+0xac>)
 80097e4:	4413      	add	r3, r2
 80097e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80097ec:	4a1d      	ldr	r2, [pc, #116]	; (8009864 <prvHeapInit+0xb0>)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80097f2:	4b1c      	ldr	r3, [pc, #112]	; (8009864 <prvHeapInit+0xb0>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	68ba      	ldr	r2, [r7, #8]
 80097fc:	4413      	add	r3, r2
 80097fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009800:	2208      	movs	r2, #8
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	1a9b      	subs	r3, r3, r2
 8009806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f023 0307 	bic.w	r3, r3, #7
 800980e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	4a15      	ldr	r2, [pc, #84]	; (8009868 <prvHeapInit+0xb4>)
 8009814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009816:	4b14      	ldr	r3, [pc, #80]	; (8009868 <prvHeapInit+0xb4>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2200      	movs	r2, #0
 800981c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800981e:	4b12      	ldr	r3, [pc, #72]	; (8009868 <prvHeapInit+0xb4>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2200      	movs	r2, #0
 8009824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	1ad2      	subs	r2, r2, r3
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009834:	4b0c      	ldr	r3, [pc, #48]	; (8009868 <prvHeapInit+0xb4>)
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	4a0a      	ldr	r2, [pc, #40]	; (800986c <prvHeapInit+0xb8>)
 8009842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	4a09      	ldr	r2, [pc, #36]	; (8009870 <prvHeapInit+0xbc>)
 800984a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800984c:	4b09      	ldr	r3, [pc, #36]	; (8009874 <prvHeapInit+0xc0>)
 800984e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009852:	601a      	str	r2, [r3, #0]
}
 8009854:	bf00      	nop
 8009856:	3714      	adds	r7, #20
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr
 8009860:	20002320 	.word	0x20002320
 8009864:	20005f20 	.word	0x20005f20
 8009868:	20005f28 	.word	0x20005f28
 800986c:	20005f30 	.word	0x20005f30
 8009870:	20005f2c 	.word	0x20005f2c
 8009874:	20005f3c 	.word	0x20005f3c

08009878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009878:	b480      	push	{r7}
 800987a:	b085      	sub	sp, #20
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009880:	4b28      	ldr	r3, [pc, #160]	; (8009924 <prvInsertBlockIntoFreeList+0xac>)
 8009882:	60fb      	str	r3, [r7, #12]
 8009884:	e002      	b.n	800988c <prvInsertBlockIntoFreeList+0x14>
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	60fb      	str	r3, [r7, #12]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	429a      	cmp	r2, r3
 8009894:	d8f7      	bhi.n	8009886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	68ba      	ldr	r2, [r7, #8]
 80098a0:	4413      	add	r3, r2
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d108      	bne.n	80098ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	685a      	ldr	r2, [r3, #4]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	441a      	add	r2, r3
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	441a      	add	r2, r3
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d118      	bne.n	8009900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	4b15      	ldr	r3, [pc, #84]	; (8009928 <prvInsertBlockIntoFreeList+0xb0>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d00d      	beq.n	80098f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685a      	ldr	r2, [r3, #4]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	441a      	add	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	601a      	str	r2, [r3, #0]
 80098f4:	e008      	b.n	8009908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80098f6:	4b0c      	ldr	r3, [pc, #48]	; (8009928 <prvInsertBlockIntoFreeList+0xb0>)
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	601a      	str	r2, [r3, #0]
 80098fe:	e003      	b.n	8009908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009908:	68fa      	ldr	r2, [r7, #12]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	429a      	cmp	r2, r3
 800990e:	d002      	beq.n	8009916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009916:	bf00      	nop
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	20005f20 	.word	0x20005f20
 8009928:	20005f28 	.word	0x20005f28

0800992c <APP_timeoutTimerIRQHandler>:
/********************************************************************************/

#if 1 /* Software Timer IRQ Handlers */

void APP_timeoutTimerIRQHandler(void* param)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]

}
 8009934:	bf00      	nop
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <APP_periodicTimerIRQHandler>:

void APP_periodicTimerIRQHandler(void* param)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
	/* msg Tick Counter inc every 10ms */
	__GL.can.msgTickCounter_u32++;
 8009948:	4b17      	ldr	r3, [pc, #92]	; (80099a8 <APP_periodicTimerIRQHandler+0x68>)
 800994a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800994e:	3301      	adds	r3, #1
 8009950:	4a15      	ldr	r2, [pc, #84]	; (80099a8 <APP_periodicTimerIRQHandler+0x68>)
 8009952:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

	static U8 adcSequance;

	adcSequance = __GL.can.msgTickCounter_u32 % 6 ;
 8009956:	4b14      	ldr	r3, [pc, #80]	; (80099a8 <APP_periodicTimerIRQHandler+0x68>)
 8009958:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
 800995c:	4b13      	ldr	r3, [pc, #76]	; (80099ac <APP_periodicTimerIRQHandler+0x6c>)
 800995e:	fba3 2301 	umull	r2, r3, r3, r1
 8009962:	089a      	lsrs	r2, r3, #2
 8009964:	4613      	mov	r3, r2
 8009966:	005b      	lsls	r3, r3, #1
 8009968:	4413      	add	r3, r2
 800996a:	005b      	lsls	r3, r3, #1
 800996c:	1aca      	subs	r2, r1, r3
 800996e:	b2d2      	uxtb	r2, r2
 8009970:	4b0f      	ldr	r3, [pc, #60]	; (80099b0 <APP_periodicTimerIRQHandler+0x70>)
 8009972:	701a      	strb	r2, [r3, #0]
	if( adcSequance == 0 )
 8009974:	4b0e      	ldr	r3, [pc, #56]	; (80099b0 <APP_periodicTimerIRQHandler+0x70>)
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d107      	bne.n	800998c <APP_periodicTimerIRQHandler+0x4c>
	{
		__GL.mainState.flag.adc = TRUE;
 800997c:	4a0a      	ldr	r2, [pc, #40]	; (80099a8 <APP_periodicTimerIRQHandler+0x68>)
 800997e:	f892 3a02 	ldrb.w	r3, [r2, #2562]	; 0xa02
 8009982:	f043 0301 	orr.w	r3, r3, #1
 8009986:	f882 3a02 	strb.w	r3, [r2, #2562]	; 0xa02
	else
	{
		__GL.mainState.flag.adc = FALSE;
	}

}
 800998a:	e006      	b.n	800999a <APP_periodicTimerIRQHandler+0x5a>
		__GL.mainState.flag.adc = FALSE;
 800998c:	4a06      	ldr	r2, [pc, #24]	; (80099a8 <APP_periodicTimerIRQHandler+0x68>)
 800998e:	f892 3a02 	ldrb.w	r3, [r2, #2562]	; 0xa02
 8009992:	f36f 0300 	bfc	r3, #0, #1
 8009996:	f882 3a02 	strb.w	r3, [r2, #2562]	; 0xa02
}
 800999a:	bf00      	nop
 800999c:	370c      	adds	r7, #12
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	20000074 	.word	0x20000074
 80099ac:	aaaaaaab 	.word	0xaaaaaaab
 80099b0:	2000bff8 	.word	0x2000bff8

080099b4 <APP_broadcast01TimerIRQHandler>:


/* BroadCast Timers IRQ Handlers */
//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
void APP_broadcast01TimerIRQHandler(void* param)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
	__GL.can.msgSelect.Flag.ID01 = TRUE;
 80099bc:	4a06      	ldr	r2, [pc, #24]	; (80099d8 <APP_broadcast01TimerIRQHandler+0x24>)
 80099be:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 80099c2:	f043 0301 	orr.w	r3, r3, #1
 80099c6:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304
	Process_CAN_Run();
 80099ca:	f000 fbe7 	bl	800a19c <Process_CAN_Run>
}
 80099ce:	bf00      	nop
 80099d0:	3708      	adds	r7, #8
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	20000074 	.word	0x20000074

080099dc <APP_broadcast02TimerIRQHandler>:
void APP_broadcast02TimerIRQHandler(void* param)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
	__GL.can.msgSelect.Flag.ID02 = TRUE;
 80099e4:	4a06      	ldr	r2, [pc, #24]	; (8009a00 <APP_broadcast02TimerIRQHandler+0x24>)
 80099e6:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 80099ea:	f043 0302 	orr.w	r3, r3, #2
 80099ee:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304
	Process_CAN_Run();
 80099f2:	f000 fbd3 	bl	800a19c <Process_CAN_Run>
}
 80099f6:	bf00      	nop
 80099f8:	3708      	adds	r7, #8
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	20000074 	.word	0x20000074

08009a04 <APP_broadcast03TimerIRQHandler>:
void APP_broadcast03TimerIRQHandler(void* param)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
	__GL.can.msgSelect.Flag.ID03 = TRUE;
 8009a0c:	4a06      	ldr	r2, [pc, #24]	; (8009a28 <APP_broadcast03TimerIRQHandler+0x24>)
 8009a0e:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 8009a12:	f043 0304 	orr.w	r3, r3, #4
 8009a16:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304
	Process_CAN_Run();
 8009a1a:	f000 fbbf 	bl	800a19c <Process_CAN_Run>
}
 8009a1e:	bf00      	nop
 8009a20:	3708      	adds	r7, #8
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	20000074 	.word	0x20000074

08009a2c <APP_broadcast04TimerIRQHandler>:
void APP_broadcast04TimerIRQHandler(void* param)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
	__GL.can.msgSelect.Flag.ID04 = TRUE;
 8009a34:	4a06      	ldr	r2, [pc, #24]	; (8009a50 <APP_broadcast04TimerIRQHandler+0x24>)
 8009a36:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 8009a3a:	f043 0308 	orr.w	r3, r3, #8
 8009a3e:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304
	Process_CAN_Run();
 8009a42:	f000 fbab 	bl	800a19c <Process_CAN_Run>
}
 8009a46:	bf00      	nop
 8009a48:	3708      	adds	r7, #8
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	20000074 	.word	0x20000074

08009a54 <APP_broadcast05TimerIRQHandler>:
void APP_broadcast05TimerIRQHandler(void* param)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
	__GL.can.msgSelect.Flag.ID05 = TRUE;
 8009a5c:	4a06      	ldr	r2, [pc, #24]	; (8009a78 <APP_broadcast05TimerIRQHandler+0x24>)
 8009a5e:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 8009a62:	f043 0310 	orr.w	r3, r3, #16
 8009a66:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304
	Process_CAN_Run();
 8009a6a:	f000 fb97 	bl	800a19c <Process_CAN_Run>
}
 8009a6e:	bf00      	nop
 8009a70:	3708      	adds	r7, #8
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	20000074 	.word	0x20000074

08009a7c <APP_broadcast06TimerIRQHandler>:
void APP_broadcast06TimerIRQHandler(void* param)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
	__GL.can.msgSelect.Flag.ID06 = TRUE;
 8009a84:	4a06      	ldr	r2, [pc, #24]	; (8009aa0 <APP_broadcast06TimerIRQHandler+0x24>)
 8009a86:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 8009a8a:	f043 0320 	orr.w	r3, r3, #32
 8009a8e:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304
	Process_CAN_Run();
 8009a92:	f000 fb83 	bl	800a19c <Process_CAN_Run>
}
 8009a96:	bf00      	nop
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	20000074 	.word	0x20000074

08009aa4 <APP_broadcast07TimerIRQHandler>:
void APP_broadcast07TimerIRQHandler(void* param)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
	__GL.can.msgSelect.Flag.ID07 = TRUE;
 8009aac:	4a06      	ldr	r2, [pc, #24]	; (8009ac8 <APP_broadcast07TimerIRQHandler+0x24>)
 8009aae:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 8009ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ab6:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304
	Process_CAN_Run();
 8009aba:	f000 fb6f 	bl	800a19c <Process_CAN_Run>
}
 8009abe:	bf00      	nop
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	20000074 	.word	0x20000074

08009acc <DEBUG_printThread>:

#endif

#ifdef DEBUG_THREAD
void    DEBUG_printThread(char *threadName, char *threadStatus)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b090      	sub	sp, #64	; 0x40
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]

    char console_message[50] = {0};
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	60fb      	str	r3, [r7, #12]
 8009ada:	f107 0310 	add.w	r3, r7, #16
 8009ade:	222e      	movs	r2, #46	; 0x2e
 8009ae0:	2100      	movs	r1, #0
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f001 fa24 	bl	800af30 <memset>

    sprintf(&console_message[0], "%s is %s. \n", &threadName[0], &threadStatus[0]);
 8009ae8:	f107 000c 	add.w	r0, r7, #12
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	4906      	ldr	r1, [pc, #24]	; (8009b0c <DEBUG_printThread+0x40>)
 8009af2:	f001 fa25 	bl	800af40 <siprintf>

    HAL_UART_Transmit(&DEBUG_UART, (U8 *)&console_message[0], sizeof(console_message), 10);
 8009af6:	f107 010c 	add.w	r1, r7, #12
 8009afa:	230a      	movs	r3, #10
 8009afc:	2232      	movs	r2, #50	; 0x32
 8009afe:	4804      	ldr	r0, [pc, #16]	; (8009b10 <DEBUG_printThread+0x44>)
 8009b00:	f7fc fa81 	bl	8006006 <HAL_UART_Transmit>
    return;
 8009b04:	bf00      	nop

}
 8009b06:	3740      	adds	r7, #64	; 0x40
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	0800b9c4 	.word	0x0800b9c4
 8009b10:	200013d4 	.word	0x200013d4

08009b14 <Initilialise_App>:
#endif


void Initilialise_App(void)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af04      	add	r7, sp, #16
	/***************** Create Static Threads ******************************/

#ifdef BSP_PROCESS_BODYCONTROLMAIN
	xHandle.Process_BodyControlMAIN = xTaskCreateStatic
 8009b1a:	4bac      	ldr	r3, [pc, #688]	; (8009dcc <Initilialise_App+0x2b8>)
 8009b1c:	9302      	str	r3, [sp, #8]
 8009b1e:	4bac      	ldr	r3, [pc, #688]	; (8009dd0 <Initilialise_App+0x2bc>)
 8009b20:	9301      	str	r3, [sp, #4]
 8009b22:	2301      	movs	r3, #1
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	2301      	movs	r3, #1
 8009b28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009b2c:	49a9      	ldr	r1, [pc, #676]	; (8009dd4 <Initilialise_App+0x2c0>)
 8009b2e:	48aa      	ldr	r0, [pc, #680]	; (8009dd8 <Initilialise_App+0x2c4>)
 8009b30:	f7fd fec0 	bl	80078b4 <xTaskCreateStatic>
 8009b34:	4603      	mov	r3, r0
 8009b36:	4aa9      	ldr	r2, [pc, #676]	; (8009ddc <Initilialise_App+0x2c8>)
 8009b38:	6013      	str	r3, [r2, #0]
										);
#endif


#ifdef BSP_PROCESS_ADC
	xHandle.Process_ADC = xTaskCreateStatic
 8009b3a:	4ba9      	ldr	r3, [pc, #676]	; (8009de0 <Initilialise_App+0x2cc>)
 8009b3c:	9302      	str	r3, [sp, #8]
 8009b3e:	4ba9      	ldr	r3, [pc, #676]	; (8009de4 <Initilialise_App+0x2d0>)
 8009b40:	9301      	str	r3, [sp, #4]
 8009b42:	2306      	movs	r3, #6
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	2301      	movs	r3, #1
 8009b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b4c:	49a6      	ldr	r1, [pc, #664]	; (8009de8 <Initilialise_App+0x2d4>)
 8009b4e:	48a7      	ldr	r0, [pc, #668]	; (8009dec <Initilialise_App+0x2d8>)
 8009b50:	f7fd feb0 	bl	80078b4 <xTaskCreateStatic>
 8009b54:	4603      	mov	r3, r0
 8009b56:	4aa1      	ldr	r2, [pc, #644]	; (8009ddc <Initilialise_App+0x2c8>)
 8009b58:	6053      	str	r3, [r2, #4]
										&xTaskBuffer.Process_ADC
										);
#endif

#ifdef BSP_PROCESS_AUDIO
	xHandle.Process_AUDIO = xTaskCreateStatic
 8009b5a:	4ba5      	ldr	r3, [pc, #660]	; (8009df0 <Initilialise_App+0x2dc>)
 8009b5c:	9302      	str	r3, [sp, #8]
 8009b5e:	4ba5      	ldr	r3, [pc, #660]	; (8009df4 <Initilialise_App+0x2e0>)
 8009b60:	9301      	str	r3, [sp, #4]
 8009b62:	230a      	movs	r3, #10
 8009b64:	9300      	str	r3, [sp, #0]
 8009b66:	2301      	movs	r3, #1
 8009b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b6c:	49a2      	ldr	r1, [pc, #648]	; (8009df8 <Initilialise_App+0x2e4>)
 8009b6e:	48a3      	ldr	r0, [pc, #652]	; (8009dfc <Initilialise_App+0x2e8>)
 8009b70:	f7fd fea0 	bl	80078b4 <xTaskCreateStatic>
 8009b74:	4603      	mov	r3, r0
 8009b76:	4a99      	ldr	r2, [pc, #612]	; (8009ddc <Initilialise_App+0x2c8>)
 8009b78:	6093      	str	r3, [r2, #8]
										&xTaskBuffer.Process_AUDIO
										);
#endif

#ifdef BSP_PROCESS_CAN
	xHandle.Process_CAN = xTaskCreateStatic
 8009b7a:	4ba1      	ldr	r3, [pc, #644]	; (8009e00 <Initilialise_App+0x2ec>)
 8009b7c:	9302      	str	r3, [sp, #8]
 8009b7e:	4ba1      	ldr	r3, [pc, #644]	; (8009e04 <Initilialise_App+0x2f0>)
 8009b80:	9301      	str	r3, [sp, #4]
 8009b82:	2305      	movs	r3, #5
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	2301      	movs	r3, #1
 8009b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b8c:	499e      	ldr	r1, [pc, #632]	; (8009e08 <Initilialise_App+0x2f4>)
 8009b8e:	489f      	ldr	r0, [pc, #636]	; (8009e0c <Initilialise_App+0x2f8>)
 8009b90:	f7fd fe90 	bl	80078b4 <xTaskCreateStatic>
 8009b94:	4603      	mov	r3, r0
 8009b96:	4a91      	ldr	r2, [pc, #580]	; (8009ddc <Initilialise_App+0x2c8>)
 8009b98:	60d3      	str	r3, [r2, #12]
										&xTaskBuffer.Process_CAN
										);
#endif

#ifdef BSP_PROCESS_CONTROL
	xHandle.Process_CONTROL = xTaskCreateStatic
 8009b9a:	4b9d      	ldr	r3, [pc, #628]	; (8009e10 <Initilialise_App+0x2fc>)
 8009b9c:	9302      	str	r3, [sp, #8]
 8009b9e:	4b9d      	ldr	r3, [pc, #628]	; (8009e14 <Initilialise_App+0x300>)
 8009ba0:	9301      	str	r3, [sp, #4]
 8009ba2:	2304      	movs	r3, #4
 8009ba4:	9300      	str	r3, [sp, #0]
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bac:	499a      	ldr	r1, [pc, #616]	; (8009e18 <Initilialise_App+0x304>)
 8009bae:	489b      	ldr	r0, [pc, #620]	; (8009e1c <Initilialise_App+0x308>)
 8009bb0:	f7fd fe80 	bl	80078b4 <xTaskCreateStatic>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	4a89      	ldr	r2, [pc, #548]	; (8009ddc <Initilialise_App+0x2c8>)
 8009bb8:	6113      	str	r3, [r2, #16]
										&xTaskBuffer.Process_CONTROL
										);
#endif

#ifdef BSP_PROCESS_FLASH
	xHandle.Process_FLASH = xTaskCreateStatic
 8009bba:	4b99      	ldr	r3, [pc, #612]	; (8009e20 <Initilialise_App+0x30c>)
 8009bbc:	9302      	str	r3, [sp, #8]
 8009bbe:	4b99      	ldr	r3, [pc, #612]	; (8009e24 <Initilialise_App+0x310>)
 8009bc0:	9301      	str	r3, [sp, #4]
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	9300      	str	r3, [sp, #0]
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bcc:	4996      	ldr	r1, [pc, #600]	; (8009e28 <Initilialise_App+0x314>)
 8009bce:	4897      	ldr	r0, [pc, #604]	; (8009e2c <Initilialise_App+0x318>)
 8009bd0:	f7fd fe70 	bl	80078b4 <xTaskCreateStatic>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	4a81      	ldr	r2, [pc, #516]	; (8009ddc <Initilialise_App+0x2c8>)
 8009bd8:	6153      	str	r3, [r2, #20]
										&xTaskBuffer.Process_FLASH
										);
#endif

#ifdef BSP_PROCESS_POWERSWITCH
	xHandle.Process_POWERSWITCH = xTaskCreateStatic
 8009bda:	4b95      	ldr	r3, [pc, #596]	; (8009e30 <Initilialise_App+0x31c>)
 8009bdc:	9302      	str	r3, [sp, #8]
 8009bde:	4b95      	ldr	r3, [pc, #596]	; (8009e34 <Initilialise_App+0x320>)
 8009be0:	9301      	str	r3, [sp, #4]
 8009be2:	2307      	movs	r3, #7
 8009be4:	9300      	str	r3, [sp, #0]
 8009be6:	2301      	movs	r3, #1
 8009be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bec:	4992      	ldr	r1, [pc, #584]	; (8009e38 <Initilialise_App+0x324>)
 8009bee:	4893      	ldr	r0, [pc, #588]	; (8009e3c <Initilialise_App+0x328>)
 8009bf0:	f7fd fe60 	bl	80078b4 <xTaskCreateStatic>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	4a79      	ldr	r2, [pc, #484]	; (8009ddc <Initilialise_App+0x2c8>)
 8009bf8:	6193      	str	r3, [r2, #24]
										&xTaskBuffer.Process_POWERSWITCH
										);
#endif

#ifdef BSP_PROCESS_RTC
	xHandle.Process_RTC = xTaskCreateStatic
 8009bfa:	4b91      	ldr	r3, [pc, #580]	; (8009e40 <Initilialise_App+0x32c>)
 8009bfc:	9302      	str	r3, [sp, #8]
 8009bfe:	4b91      	ldr	r3, [pc, #580]	; (8009e44 <Initilialise_App+0x330>)
 8009c00:	9301      	str	r3, [sp, #4]
 8009c02:	2303      	movs	r3, #3
 8009c04:	9300      	str	r3, [sp, #0]
 8009c06:	2301      	movs	r3, #1
 8009c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c0c:	498e      	ldr	r1, [pc, #568]	; (8009e48 <Initilialise_App+0x334>)
 8009c0e:	488f      	ldr	r0, [pc, #572]	; (8009e4c <Initilialise_App+0x338>)
 8009c10:	f7fd fe50 	bl	80078b4 <xTaskCreateStatic>
 8009c14:	4603      	mov	r3, r0
 8009c16:	4a71      	ldr	r2, [pc, #452]	; (8009ddc <Initilialise_App+0x2c8>)
 8009c18:	61d3      	str	r3, [r2, #28]
										&xTaskBuffer.Process_RTC
										);
#endif

#ifdef BSP_PROCESS_SDCARD
	xHandle.Process_SDCARD = xTaskCreateStatic
 8009c1a:	4b8d      	ldr	r3, [pc, #564]	; (8009e50 <Initilialise_App+0x33c>)
 8009c1c:	9302      	str	r3, [sp, #8]
 8009c1e:	4b8d      	ldr	r3, [pc, #564]	; (8009e54 <Initilialise_App+0x340>)
 8009c20:	9301      	str	r3, [sp, #4]
 8009c22:	2309      	movs	r3, #9
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	2301      	movs	r3, #1
 8009c28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c2c:	498a      	ldr	r1, [pc, #552]	; (8009e58 <Initilialise_App+0x344>)
 8009c2e:	488b      	ldr	r0, [pc, #556]	; (8009e5c <Initilialise_App+0x348>)
 8009c30:	f7fd fe40 	bl	80078b4 <xTaskCreateStatic>
 8009c34:	4603      	mov	r3, r0
 8009c36:	4a69      	ldr	r2, [pc, #420]	; (8009ddc <Initilialise_App+0x2c8>)
 8009c38:	6213      	str	r3, [r2, #32]
										&xTaskBuffer.Process_SDCARD
										);
#endif

#ifdef BSP_PROCESS_TELEMETRY
	xHandle.Process_TELEMETRY = xTaskCreateStatic
 8009c3a:	4b89      	ldr	r3, [pc, #548]	; (8009e60 <Initilialise_App+0x34c>)
 8009c3c:	9302      	str	r3, [sp, #8]
 8009c3e:	4b89      	ldr	r3, [pc, #548]	; (8009e64 <Initilialise_App+0x350>)
 8009c40:	9301      	str	r3, [sp, #4]
 8009c42:	2308      	movs	r3, #8
 8009c44:	9300      	str	r3, [sp, #0]
 8009c46:	2301      	movs	r3, #1
 8009c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c4c:	4986      	ldr	r1, [pc, #536]	; (8009e68 <Initilialise_App+0x354>)
 8009c4e:	4887      	ldr	r0, [pc, #540]	; (8009e6c <Initilialise_App+0x358>)
 8009c50:	f7fd fe30 	bl	80078b4 <xTaskCreateStatic>
 8009c54:	4603      	mov	r3, r0
 8009c56:	4a61      	ldr	r2, [pc, #388]	; (8009ddc <Initilialise_App+0x2c8>)
 8009c58:	6253      	str	r3, [r2, #36]	; 0x24


/********************* Binary Semaphore Create **********************/

#ifdef BSP_PROCESS_ADC
	xSemHandle.Process_ADC 			= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_ADC);
 8009c5a:	2303      	movs	r3, #3
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	4b84      	ldr	r3, [pc, #528]	; (8009e70 <Initilialise_App+0x35c>)
 8009c60:	2200      	movs	r2, #0
 8009c62:	2100      	movs	r1, #0
 8009c64:	2001      	movs	r0, #1
 8009c66:	f7fd f87d 	bl	8006d64 <xQueueGenericCreateStatic>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	4a81      	ldr	r2, [pc, #516]	; (8009e74 <Initilialise_App+0x360>)
 8009c6e:	6013      	str	r3, [r2, #0]
#endif

#ifdef BSP_PROCESS_AUDIO
	xSemHandle.Process_AUDIO 		= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_AUDIO);
 8009c70:	2303      	movs	r3, #3
 8009c72:	9300      	str	r3, [sp, #0]
 8009c74:	4b80      	ldr	r3, [pc, #512]	; (8009e78 <Initilialise_App+0x364>)
 8009c76:	2200      	movs	r2, #0
 8009c78:	2100      	movs	r1, #0
 8009c7a:	2001      	movs	r0, #1
 8009c7c:	f7fd f872 	bl	8006d64 <xQueueGenericCreateStatic>
 8009c80:	4603      	mov	r3, r0
 8009c82:	4a7c      	ldr	r2, [pc, #496]	; (8009e74 <Initilialise_App+0x360>)
 8009c84:	6053      	str	r3, [r2, #4]
#endif

#ifdef BSP_PROCESS_CAN
	xSemHandle.Process_CAN 			= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CAN);
 8009c86:	2303      	movs	r3, #3
 8009c88:	9300      	str	r3, [sp, #0]
 8009c8a:	4b7c      	ldr	r3, [pc, #496]	; (8009e7c <Initilialise_App+0x368>)
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	2100      	movs	r1, #0
 8009c90:	2001      	movs	r0, #1
 8009c92:	f7fd f867 	bl	8006d64 <xQueueGenericCreateStatic>
 8009c96:	4603      	mov	r3, r0
 8009c98:	4a76      	ldr	r2, [pc, #472]	; (8009e74 <Initilialise_App+0x360>)
 8009c9a:	6093      	str	r3, [r2, #8]
#endif

#ifdef BSP_PROCESS_CONTROL
	xSemHandle.Process_CONTROL 		= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CONTROL);
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	9300      	str	r3, [sp, #0]
 8009ca0:	4b77      	ldr	r3, [pc, #476]	; (8009e80 <Initilialise_App+0x36c>)
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	2001      	movs	r0, #1
 8009ca8:	f7fd f85c 	bl	8006d64 <xQueueGenericCreateStatic>
 8009cac:	4603      	mov	r3, r0
 8009cae:	4a71      	ldr	r2, [pc, #452]	; (8009e74 <Initilialise_App+0x360>)
 8009cb0:	60d3      	str	r3, [r2, #12]
#endif

#ifdef BSP_PROCESS_FLASH
	xSemHandle.Process_FLASH 		= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_FLASH);
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	4b73      	ldr	r3, [pc, #460]	; (8009e84 <Initilialise_App+0x370>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	2100      	movs	r1, #0
 8009cbc:	2001      	movs	r0, #1
 8009cbe:	f7fd f851 	bl	8006d64 <xQueueGenericCreateStatic>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	4a6b      	ldr	r2, [pc, #428]	; (8009e74 <Initilialise_App+0x360>)
 8009cc6:	6113      	str	r3, [r2, #16]
#endif

#ifdef BSP_PROCESS_POWERSWITCH
	xSemHandle.Process_POWERSWITCH 	= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_POWERSWITCH);
 8009cc8:	2303      	movs	r3, #3
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	4b6e      	ldr	r3, [pc, #440]	; (8009e88 <Initilialise_App+0x374>)
 8009cce:	2200      	movs	r2, #0
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	2001      	movs	r0, #1
 8009cd4:	f7fd f846 	bl	8006d64 <xQueueGenericCreateStatic>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	4a66      	ldr	r2, [pc, #408]	; (8009e74 <Initilialise_App+0x360>)
 8009cdc:	6153      	str	r3, [r2, #20]
#endif

#ifdef BSP_PROCESS_RTC
	xSemHandle.Process_RTC 			= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_RTC);
 8009cde:	2303      	movs	r3, #3
 8009ce0:	9300      	str	r3, [sp, #0]
 8009ce2:	4b6a      	ldr	r3, [pc, #424]	; (8009e8c <Initilialise_App+0x378>)
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	2001      	movs	r0, #1
 8009cea:	f7fd f83b 	bl	8006d64 <xQueueGenericCreateStatic>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	4a60      	ldr	r2, [pc, #384]	; (8009e74 <Initilialise_App+0x360>)
 8009cf2:	6193      	str	r3, [r2, #24]
#endif

#ifdef BSP_PROCESS_SDCARD
	xSemHandle.Process_SDCARD 		= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_SDCARD);
 8009cf4:	2303      	movs	r3, #3
 8009cf6:	9300      	str	r3, [sp, #0]
 8009cf8:	4b65      	ldr	r3, [pc, #404]	; (8009e90 <Initilialise_App+0x37c>)
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	2001      	movs	r0, #1
 8009d00:	f7fd f830 	bl	8006d64 <xQueueGenericCreateStatic>
 8009d04:	4603      	mov	r3, r0
 8009d06:	4a5b      	ldr	r2, [pc, #364]	; (8009e74 <Initilialise_App+0x360>)
 8009d08:	61d3      	str	r3, [r2, #28]
#endif

#ifdef BSP_PROCESS_TELEMETRY
	xSemHandle.Process_TELEMETRY 	= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_TELEMETRY);
 8009d0a:	2303      	movs	r3, #3
 8009d0c:	9300      	str	r3, [sp, #0]
 8009d0e:	4b61      	ldr	r3, [pc, #388]	; (8009e94 <Initilialise_App+0x380>)
 8009d10:	2200      	movs	r2, #0
 8009d12:	2100      	movs	r1, #0
 8009d14:	2001      	movs	r0, #1
 8009d16:	f7fd f825 	bl	8006d64 <xQueueGenericCreateStatic>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	4a55      	ldr	r2, [pc, #340]	; (8009e74 <Initilialise_App+0x360>)
 8009d1e:	6213      	str	r3, [r2, #32]
#endif


	/************************ Create  Software Timers ***********************************/

    xTimerID.periodic = 	osTimerNew( APP_periodicTimerIRQHandler			,
 8009d20:	4b5d      	ldr	r3, [pc, #372]	; (8009e98 <Initilialise_App+0x384>)
 8009d22:	2200      	movs	r2, #0
 8009d24:	2101      	movs	r1, #1
 8009d26:	485d      	ldr	r0, [pc, #372]	; (8009e9c <Initilialise_App+0x388>)
 8009d28:	f7fc fe22 	bl	8006970 <osTimerNew>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	4a5c      	ldr	r2, [pc, #368]	; (8009ea0 <Initilialise_App+0x38c>)
 8009d30:	6013      	str	r3, [r2, #0]
    									osTimerPeriodic						,
										NULL								,
										&APP_periodic_attributes			);

    xTimerID.timeout  = 	osTimerNew( APP_timeoutTimerIRQHandler			,
 8009d32:	4b5c      	ldr	r3, [pc, #368]	; (8009ea4 <Initilialise_App+0x390>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	2100      	movs	r1, #0
 8009d38:	485b      	ldr	r0, [pc, #364]	; (8009ea8 <Initilialise_App+0x394>)
 8009d3a:	f7fc fe19 	bl	8006970 <osTimerNew>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	4a57      	ldr	r2, [pc, #348]	; (8009ea0 <Initilialise_App+0x38c>)
 8009d42:	6053      	str	r3, [r2, #4]
										NULL								,
										&APP_timeout_attributes				);

    /* Create Broadcast Timers */

    xTimerID.broadcast01 = 	osTimerNew( APP_broadcast01TimerIRQHandler		,
 8009d44:	4b59      	ldr	r3, [pc, #356]	; (8009eac <Initilialise_App+0x398>)
 8009d46:	2200      	movs	r2, #0
 8009d48:	2101      	movs	r1, #1
 8009d4a:	4859      	ldr	r0, [pc, #356]	; (8009eb0 <Initilialise_App+0x39c>)
 8009d4c:	f7fc fe10 	bl	8006970 <osTimerNew>
 8009d50:	4603      	mov	r3, r0
 8009d52:	4a53      	ldr	r2, [pc, #332]	; (8009ea0 <Initilialise_App+0x38c>)
 8009d54:	6093      	str	r3, [r2, #8]
    									osTimerPeriodic						,
										NULL								,
										&APP_broadcast01_attributes			);

    xTimerID.broadcast02 = 	osTimerNew( APP_broadcast02TimerIRQHandler		,
 8009d56:	4b57      	ldr	r3, [pc, #348]	; (8009eb4 <Initilialise_App+0x3a0>)
 8009d58:	2200      	movs	r2, #0
 8009d5a:	2101      	movs	r1, #1
 8009d5c:	4856      	ldr	r0, [pc, #344]	; (8009eb8 <Initilialise_App+0x3a4>)
 8009d5e:	f7fc fe07 	bl	8006970 <osTimerNew>
 8009d62:	4603      	mov	r3, r0
 8009d64:	4a4e      	ldr	r2, [pc, #312]	; (8009ea0 <Initilialise_App+0x38c>)
 8009d66:	60d3      	str	r3, [r2, #12]
    									osTimerPeriodic						,
										NULL								,
										&APP_broadcast02_attributes			);

    xTimerID.broadcast03 = 	osTimerNew( APP_broadcast03TimerIRQHandler		,
 8009d68:	4b54      	ldr	r3, [pc, #336]	; (8009ebc <Initilialise_App+0x3a8>)
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	2101      	movs	r1, #1
 8009d6e:	4854      	ldr	r0, [pc, #336]	; (8009ec0 <Initilialise_App+0x3ac>)
 8009d70:	f7fc fdfe 	bl	8006970 <osTimerNew>
 8009d74:	4603      	mov	r3, r0
 8009d76:	4a4a      	ldr	r2, [pc, #296]	; (8009ea0 <Initilialise_App+0x38c>)
 8009d78:	6113      	str	r3, [r2, #16]
    									osTimerPeriodic						,
										NULL								,
										&APP_broadcast03_attributes			);

    xTimerID.broadcast04 = 	osTimerNew( APP_broadcast04TimerIRQHandler		,
 8009d7a:	4b52      	ldr	r3, [pc, #328]	; (8009ec4 <Initilialise_App+0x3b0>)
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	2101      	movs	r1, #1
 8009d80:	4851      	ldr	r0, [pc, #324]	; (8009ec8 <Initilialise_App+0x3b4>)
 8009d82:	f7fc fdf5 	bl	8006970 <osTimerNew>
 8009d86:	4603      	mov	r3, r0
 8009d88:	4a45      	ldr	r2, [pc, #276]	; (8009ea0 <Initilialise_App+0x38c>)
 8009d8a:	6153      	str	r3, [r2, #20]
    									osTimerPeriodic						,
										NULL								,
										&APP_broadcast04_attributes			);

    xTimerID.broadcast05 = 	osTimerNew( APP_broadcast05TimerIRQHandler		,
 8009d8c:	4b4f      	ldr	r3, [pc, #316]	; (8009ecc <Initilialise_App+0x3b8>)
 8009d8e:	2200      	movs	r2, #0
 8009d90:	2101      	movs	r1, #1
 8009d92:	484f      	ldr	r0, [pc, #316]	; (8009ed0 <Initilialise_App+0x3bc>)
 8009d94:	f7fc fdec 	bl	8006970 <osTimerNew>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	4a41      	ldr	r2, [pc, #260]	; (8009ea0 <Initilialise_App+0x38c>)
 8009d9c:	6193      	str	r3, [r2, #24]
    									osTimerPeriodic						,
										NULL								,
										&APP_broadcast05_attributes			);

    xTimerID.broadcast06 = 	osTimerNew( APP_broadcast06TimerIRQHandler		,
 8009d9e:	4b4d      	ldr	r3, [pc, #308]	; (8009ed4 <Initilialise_App+0x3c0>)
 8009da0:	2200      	movs	r2, #0
 8009da2:	2101      	movs	r1, #1
 8009da4:	484c      	ldr	r0, [pc, #304]	; (8009ed8 <Initilialise_App+0x3c4>)
 8009da6:	f7fc fde3 	bl	8006970 <osTimerNew>
 8009daa:	4603      	mov	r3, r0
 8009dac:	4a3c      	ldr	r2, [pc, #240]	; (8009ea0 <Initilialise_App+0x38c>)
 8009dae:	61d3      	str	r3, [r2, #28]
    									osTimerPeriodic						,
										NULL								,
										&APP_broadcast06_attributes			);

    xTimerID.broadcast07 = 	osTimerNew( APP_broadcast07TimerIRQHandler		,
 8009db0:	4b4a      	ldr	r3, [pc, #296]	; (8009edc <Initilialise_App+0x3c8>)
 8009db2:	2200      	movs	r2, #0
 8009db4:	2101      	movs	r1, #1
 8009db6:	484a      	ldr	r0, [pc, #296]	; (8009ee0 <Initilialise_App+0x3cc>)
 8009db8:	f7fc fdda 	bl	8006970 <osTimerNew>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	4a38      	ldr	r2, [pc, #224]	; (8009ea0 <Initilialise_App+0x38c>)
 8009dc0:	6213      	str	r3, [r2, #32]
//										&APP_broadcast08_attributes			);

    /*
    * 10ms Periodic Timer Start
    */
    osTimerStart(xTimerID.periodic, pdMS_TO_TICKS(10));
 8009dc2:	4b37      	ldr	r3, [pc, #220]	; (8009ea0 <Initilialise_App+0x38c>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	210a      	movs	r1, #10
 8009dc8:	4618      	mov	r0, r3
 8009dca:	e08b      	b.n	8009ee4 <Initilialise_App+0x3d0>
 8009dcc:	20005f40 	.word	0x20005f40
 8009dd0:	200062d8 	.word	0x200062d8
 8009dd4:	0800b9d0 	.word	0x0800b9d0
 8009dd8:	08009f65 	.word	0x08009f65
 8009ddc:	2000bad8 	.word	0x2000bad8
 8009de0:	20005f9c 	.word	0x20005f9c
 8009de4:	200072d8 	.word	0x200072d8
 8009de8:	0800b9e8 	.word	0x0800b9e8
 8009dec:	08009f95 	.word	0x08009f95
 8009df0:	20005ff8 	.word	0x20005ff8
 8009df4:	20007ad8 	.word	0x20007ad8
 8009df8:	0800b9fc 	.word	0x0800b9fc
 8009dfc:	0800a09d 	.word	0x0800a09d
 8009e00:	20006054 	.word	0x20006054
 8009e04:	200082d8 	.word	0x200082d8
 8009e08:	0800ba10 	.word	0x0800ba10
 8009e0c:	0800a11d 	.word	0x0800a11d
 8009e10:	200060b0 	.word	0x200060b0
 8009e14:	20008ad8 	.word	0x20008ad8
 8009e18:	0800ba24 	.word	0x0800ba24
 8009e1c:	0800a225 	.word	0x0800a225
 8009e20:	2000610c 	.word	0x2000610c
 8009e24:	200092d8 	.word	0x200092d8
 8009e28:	0800ba3c 	.word	0x0800ba3c
 8009e2c:	0800a2a5 	.word	0x0800a2a5
 8009e30:	20006168 	.word	0x20006168
 8009e34:	20009ad8 	.word	0x20009ad8
 8009e38:	0800ba50 	.word	0x0800ba50
 8009e3c:	0800a325 	.word	0x0800a325
 8009e40:	200061c4 	.word	0x200061c4
 8009e44:	2000a2d8 	.word	0x2000a2d8
 8009e48:	0800ba60 	.word	0x0800ba60
 8009e4c:	0800a3a5 	.word	0x0800a3a5
 8009e50:	20006220 	.word	0x20006220
 8009e54:	2000aad8 	.word	0x2000aad8
 8009e58:	0800ba74 	.word	0x0800ba74
 8009e5c:	0800a425 	.word	0x0800a425
 8009e60:	2000627c 	.word	0x2000627c
 8009e64:	2000b2d8 	.word	0x2000b2d8
 8009e68:	0800ba88 	.word	0x0800ba88
 8009e6c:	0800a4a5 	.word	0x0800a4a5
 8009e70:	2000bb00 	.word	0x2000bb00
 8009e74:	2000bdd0 	.word	0x2000bdd0
 8009e78:	2000bb50 	.word	0x2000bb50
 8009e7c:	2000bba0 	.word	0x2000bba0
 8009e80:	2000bbf0 	.word	0x2000bbf0
 8009e84:	2000bc40 	.word	0x2000bc40
 8009e88:	2000bc90 	.word	0x2000bc90
 8009e8c:	2000bce0 	.word	0x2000bce0
 8009e90:	2000bd30 	.word	0x2000bd30
 8009e94:	2000bd80 	.word	0x2000bd80
 8009e98:	0800bc34 	.word	0x0800bc34
 8009e9c:	08009941 	.word	0x08009941
 8009ea0:	2000be18 	.word	0x2000be18
 8009ea4:	0800bc44 	.word	0x0800bc44
 8009ea8:	0800992d 	.word	0x0800992d
 8009eac:	0800bbc4 	.word	0x0800bbc4
 8009eb0:	080099b5 	.word	0x080099b5
 8009eb4:	0800bbd4 	.word	0x0800bbd4
 8009eb8:	080099dd 	.word	0x080099dd
 8009ebc:	0800bbe4 	.word	0x0800bbe4
 8009ec0:	08009a05 	.word	0x08009a05
 8009ec4:	0800bbf4 	.word	0x0800bbf4
 8009ec8:	08009a2d 	.word	0x08009a2d
 8009ecc:	0800bc04 	.word	0x0800bc04
 8009ed0:	08009a55 	.word	0x08009a55
 8009ed4:	0800bc14 	.word	0x0800bc14
 8009ed8:	08009a7d 	.word	0x08009a7d
 8009edc:	0800bc24 	.word	0x0800bc24
 8009ee0:	08009aa5 	.word	0x08009aa5
 8009ee4:	f7fc fdc0 	bl	8006a68 <osTimerStart>
    /* Broadcast periodic sw timer start */

    /*
     * Broadcast01 - Start for Message 03
     */
    osTimerStart(xTimerID.broadcast01 , pdMS_TO_TICKS(100));
 8009ee8:	4b19      	ldr	r3, [pc, #100]	; (8009f50 <Initilialise_App+0x43c>)
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	2164      	movs	r1, #100	; 0x64
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7fc fdba 	bl	8006a68 <osTimerStart>

    /*
    * Broadcast02 - Start for Message 04
    */
    osTimerStart(xTimerID.broadcast02 , pdMS_TO_TICKS(200));
 8009ef4:	4b16      	ldr	r3, [pc, #88]	; (8009f50 <Initilialise_App+0x43c>)
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	21c8      	movs	r1, #200	; 0xc8
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7fc fdb4 	bl	8006a68 <osTimerStart>

    /*
    * Broadcast03 - Start for Message 05
    */
    osTimerStart(xTimerID.broadcast03 , pdMS_TO_TICKS(300));
 8009f00:	4b13      	ldr	r3, [pc, #76]	; (8009f50 <Initilialise_App+0x43c>)
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7fc fdad 	bl	8006a68 <osTimerStart>

    /*
     * Broadcast04 - Start for Message 11
     */
    osTimerStart(xTimerID.broadcast01 , pdMS_TO_TICKS(400));
 8009f0e:	4b10      	ldr	r3, [pc, #64]	; (8009f50 <Initilialise_App+0x43c>)
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7fc fda6 	bl	8006a68 <osTimerStart>

    /*
    * Broadcast05 - Start for Message 12
    */
    osTimerStart(xTimerID.broadcast05 , pdMS_TO_TICKS(500));
 8009f1c:	4b0c      	ldr	r3, [pc, #48]	; (8009f50 <Initilialise_App+0x43c>)
 8009f1e:	699b      	ldr	r3, [r3, #24]
 8009f20:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7fc fd9f 	bl	8006a68 <osTimerStart>

    /*
    * Broadcast06 - Start for Message 19
    */
    osTimerStart(xTimerID.broadcast06 , pdMS_TO_TICKS(600));
 8009f2a:	4b09      	ldr	r3, [pc, #36]	; (8009f50 <Initilialise_App+0x43c>)
 8009f2c:	69db      	ldr	r3, [r3, #28]
 8009f2e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fc fd98 	bl	8006a68 <osTimerStart>

    /*
    * Broadcast07 - Start for Message 20
    */
    osTimerStart(xTimerID.broadcast07 , pdMS_TO_TICKS(100));
 8009f38:	4b05      	ldr	r3, [pc, #20]	; (8009f50 <Initilialise_App+0x43c>)
 8009f3a:	6a1b      	ldr	r3, [r3, #32]
 8009f3c:	2164      	movs	r1, #100	; 0x64
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7fc fd92 	bl	8006a68 <osTimerStart>
    vTaskDelay(pdMS_TO_TICKS(10));
 8009f44:	200a      	movs	r0, #10
 8009f46:	f7fd fe57 	bl	8007bf8 <vTaskDelay>

#ifdef DEBUG_MODE
    HAL_UART_Receive_DMA(&huart1, (U8 *)&__GL.DEBUG_Buffer[0], (U8)DEBUG_MSG_SIZE);
#endif

}
 8009f4a:	bf00      	nop
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	2000be18 	.word	0x2000be18

08009f54 <MAIN_App>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void MAIN_App(void)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	af00      	add	r7, sp, #0
	/* Create Threads, Semph, SW Timers */
    Initilialise_App();
 8009f58:	f7ff fddc 	bl	8009b14 <Initilialise_App>
    /* Start Scheduler */
    vTaskStartScheduler();
 8009f5c:	f7fd fe80 	bl	8007c60 <vTaskStartScheduler>

}
 8009f60:	bf00      	nop
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <Process_BodyControlMAIN_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_BodyControlMAIN_TaskHandler(void* param)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]

	BodyControlMAIN_StartUP();
 8009f6c:	f000 fae8 	bl	800a540 <BodyControlMAIN_StartUP>
	while(1)
	{

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_BODYCONTROLMAIN_THREADNAME, "STARTED");
 8009f70:	4905      	ldr	r1, [pc, #20]	; (8009f88 <Process_BodyControlMAIN_TaskHandler+0x24>)
 8009f72:	4806      	ldr	r0, [pc, #24]	; (8009f8c <Process_BodyControlMAIN_TaskHandler+0x28>)
 8009f74:	f7ff fdaa 	bl	8009acc <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        BodyControlMAIN(); /* Main Application */
 8009f78:	f000 fb0a 	bl	800a590 <BodyControlMAIN>
//        Process_SDCARD_Run();
//        Process_TELEMETRY_Run();

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_BODYCONTROLMAIN_THREADNAME, "ENDED");
 8009f7c:	4904      	ldr	r1, [pc, #16]	; (8009f90 <Process_BodyControlMAIN_TaskHandler+0x2c>)
 8009f7e:	4803      	ldr	r0, [pc, #12]	; (8009f8c <Process_BodyControlMAIN_TaskHandler+0x28>)
 8009f80:	f7ff fda4 	bl	8009acc <DEBUG_printThread>
        DEBUG_printThread((char *)PROCESS_BODYCONTROLMAIN_THREADNAME, "STARTED");
 8009f84:	e7f4      	b.n	8009f70 <Process_BodyControlMAIN_TaskHandler+0xc>
 8009f86:	bf00      	nop
 8009f88:	0800ba9c 	.word	0x0800ba9c
 8009f8c:	0800b9d0 	.word	0x0800b9d0
 8009f90:	0800baa4 	.word	0x0800baa4

08009f94 <Process_ADC_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_ADC_TaskHandler(void *params)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af02      	add	r7, sp, #8
 8009f9a:	6078      	str	r0, [r7, #4]
	ModuleADC_StartUP();
 8009f9c:	f000 fb2e 	bl	800a5fc <ModuleADC_StartUP>


 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_ADC = xQueueSemaphoreTake(xSemHandle.Process_ADC, osWaitForever);
 8009fa0:	4b15      	ldr	r3, [pc, #84]	; (8009ff8 <Process_ADC_TaskHandler+0x64>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f7fd f9f1 	bl	8007390 <xQueueSemaphoreTake>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	4a12      	ldr	r2, [pc, #72]	; (8009ffc <Process_ADC_TaskHandler+0x68>)
 8009fb2:	6013      	str	r3, [r2, #0]
	if (pdTRUE == xSemResult.Process_ADC)
 8009fb4:	4b11      	ldr	r3, [pc, #68]	; (8009ffc <Process_ADC_TaskHandler+0x68>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d111      	bne.n	8009fe0 <Process_ADC_TaskHandler+0x4c>
	{

		/* Semph has taken */
		__GL.itc.flag.adc = FALSE;
 8009fbc:	4a10      	ldr	r2, [pc, #64]	; (800a000 <Process_ADC_TaskHandler+0x6c>)
 8009fbe:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 8009fc2:	f36f 0300 	bfc	r3, #0, #1
 8009fc6:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_ADC_THREADNAME, "STARTED");
 8009fca:	490e      	ldr	r1, [pc, #56]	; (800a004 <Process_ADC_TaskHandler+0x70>)
 8009fcc:	480e      	ldr	r0, [pc, #56]	; (800a008 <Process_ADC_TaskHandler+0x74>)
 8009fce:	f7ff fd7d 	bl	8009acc <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleADC_MAIN(); /* Main Application */
 8009fd2:	f000 fb29 	bl	800a628 <ModuleADC_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_ADC_THREADNAME, "ENDED");
 8009fd6:	490d      	ldr	r1, [pc, #52]	; (800a00c <Process_ADC_TaskHandler+0x78>)
 8009fd8:	480b      	ldr	r0, [pc, #44]	; (800a008 <Process_ADC_TaskHandler+0x74>)
 8009fda:	f7ff fd77 	bl	8009acc <DEBUG_printThread>
 8009fde:	e7df      	b.n	8009fa0 <Process_ADC_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_ADC = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_ADC);
 8009fe0:	2303      	movs	r3, #3
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	4b0a      	ldr	r3, [pc, #40]	; (800a010 <Process_ADC_TaskHandler+0x7c>)
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	2100      	movs	r1, #0
 8009fea:	2001      	movs	r0, #1
 8009fec:	f7fc feba 	bl	8006d64 <xQueueGenericCreateStatic>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	4a01      	ldr	r2, [pc, #4]	; (8009ff8 <Process_ADC_TaskHandler+0x64>)
 8009ff4:	6013      	str	r3, [r2, #0]
	xSemResult.Process_ADC = xQueueSemaphoreTake(xSemHandle.Process_ADC, osWaitForever);
 8009ff6:	e7d3      	b.n	8009fa0 <Process_ADC_TaskHandler+0xc>
 8009ff8:	2000bdd0 	.word	0x2000bdd0
 8009ffc:	2000bdf4 	.word	0x2000bdf4
 800a000:	20000074 	.word	0x20000074
 800a004:	0800ba9c 	.word	0x0800ba9c
 800a008:	0800b9e8 	.word	0x0800b9e8
 800a00c:	0800baa4 	.word	0x0800baa4
 800a010:	2000bb00 	.word	0x2000bb00

0800a014 <Process_ADC_Run>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_ADC_Run(void)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af02      	add	r7, sp, #8
/* Message first, release later :) */

#ifdef DEBUG_THREAD
    DEBUG_printThread((char *)PROCESS_ADC_SEMAPHORENAME, "RELEASED");
 800a01a:	4919      	ldr	r1, [pc, #100]	; (800a080 <Process_ADC_Run+0x6c>)
 800a01c:	4819      	ldr	r0, [pc, #100]	; (800a084 <Process_ADC_Run+0x70>)
 800a01e:	f7ff fd55 	bl	8009acc <DEBUG_printThread>
#endif

    xSemResult.Process_ADC = xSemaphoreGive(xSemHandle.Process_ADC);
 800a022:	4b19      	ldr	r3, [pc, #100]	; (800a088 <Process_ADC_Run+0x74>)
 800a024:	6818      	ldr	r0, [r3, #0]
 800a026:	2300      	movs	r3, #0
 800a028:	2200      	movs	r2, #0
 800a02a:	2100      	movs	r1, #0
 800a02c:	f7fc ff36 	bl	8006e9c <xQueueGenericSend>
 800a030:	4603      	mov	r3, r0
 800a032:	4a16      	ldr	r2, [pc, #88]	; (800a08c <Process_ADC_Run+0x78>)
 800a034:	6013      	str	r3, [r2, #0]

    if (pdPASS == xSemResult.Process_ADC)
 800a036:	4b15      	ldr	r3, [pc, #84]	; (800a08c <Process_ADC_Run+0x78>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d107      	bne.n	800a04e <Process_ADC_Run+0x3a>
    {
        /* Bootloader Semaphore is Passed */
    	__GL.itc.flag.adc = TRUE;
 800a03e:	4a14      	ldr	r2, [pc, #80]	; (800a090 <Process_ADC_Run+0x7c>)
 800a040:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a044:	f043 0301 	orr.w	r3, r3, #1
 800a048:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00
   DEBUG_printThread((char *)PROCESS_ADC_SEMAPHORENAME, "ALREADY RUNNING");
#endif

        xSemHandle.Process_ADC = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_ADC);
    }
}
 800a04c:	e015      	b.n	800a07a <Process_ADC_Run+0x66>
    	__GL.itc.flag.adc = FALSE;
 800a04e:	4a10      	ldr	r2, [pc, #64]	; (800a090 <Process_ADC_Run+0x7c>)
 800a050:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a054:	f36f 0300 	bfc	r3, #0, #1
 800a058:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00
   DEBUG_printThread((char *)PROCESS_ADC_SEMAPHORENAME, "ALREADY RUNNING");
 800a05c:	490d      	ldr	r1, [pc, #52]	; (800a094 <Process_ADC_Run+0x80>)
 800a05e:	4809      	ldr	r0, [pc, #36]	; (800a084 <Process_ADC_Run+0x70>)
 800a060:	f7ff fd34 	bl	8009acc <DEBUG_printThread>
        xSemHandle.Process_ADC = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_ADC);
 800a064:	2303      	movs	r3, #3
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	4b0b      	ldr	r3, [pc, #44]	; (800a098 <Process_ADC_Run+0x84>)
 800a06a:	2200      	movs	r2, #0
 800a06c:	2100      	movs	r1, #0
 800a06e:	2001      	movs	r0, #1
 800a070:	f7fc fe78 	bl	8006d64 <xQueueGenericCreateStatic>
 800a074:	4603      	mov	r3, r0
 800a076:	4a04      	ldr	r2, [pc, #16]	; (800a088 <Process_ADC_Run+0x74>)
 800a078:	6013      	str	r3, [r2, #0]
}
 800a07a:	bf00      	nop
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	0800baac 	.word	0x0800baac
 800a084:	0800bab8 	.word	0x0800bab8
 800a088:	2000bdd0 	.word	0x2000bdd0
 800a08c:	2000bdf4 	.word	0x2000bdf4
 800a090:	20000074 	.word	0x20000074
 800a094:	0800bacc 	.word	0x0800bacc
 800a098:	2000bb00 	.word	0x2000bb00

0800a09c <Process_AUDIO_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_AUDIO_TaskHandler(void *params)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af02      	add	r7, sp, #8
 800a0a2:	6078      	str	r0, [r7, #4]
	ModuleAUDIO_StartUP();
 800a0a4:	f000 faf6 	bl	800a694 <ModuleAUDIO_StartUP>

 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_AUDIO = xQueueSemaphoreTake(xSemHandle.Process_AUDIO, osWaitForever);
 800a0a8:	4b15      	ldr	r3, [pc, #84]	; (800a100 <Process_AUDIO_TaskHandler+0x64>)
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	f04f 31ff 	mov.w	r1, #4294967295
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7fd f96d 	bl	8007390 <xQueueSemaphoreTake>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	4a12      	ldr	r2, [pc, #72]	; (800a104 <Process_AUDIO_TaskHandler+0x68>)
 800a0ba:	6053      	str	r3, [r2, #4]
	if (pdTRUE == xSemResult.Process_AUDIO)
 800a0bc:	4b11      	ldr	r3, [pc, #68]	; (800a104 <Process_AUDIO_TaskHandler+0x68>)
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d111      	bne.n	800a0e8 <Process_AUDIO_TaskHandler+0x4c>
	{

		/* Semph has taken */
		__GL.itc.flag.audio = FALSE;
 800a0c4:	4a10      	ldr	r2, [pc, #64]	; (800a108 <Process_AUDIO_TaskHandler+0x6c>)
 800a0c6:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a0ca:	f36f 0341 	bfc	r3, #1, #1
 800a0ce:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_AUDIO_THREADNAME, "STARTED");
 800a0d2:	490e      	ldr	r1, [pc, #56]	; (800a10c <Process_AUDIO_TaskHandler+0x70>)
 800a0d4:	480e      	ldr	r0, [pc, #56]	; (800a110 <Process_AUDIO_TaskHandler+0x74>)
 800a0d6:	f7ff fcf9 	bl	8009acc <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleAUDIO_MAIN(); /* Main Application */
 800a0da:	f000 faf1 	bl	800a6c0 <ModuleAUDIO_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_AUDIO_THREADNAME, "ENDED");
 800a0de:	490d      	ldr	r1, [pc, #52]	; (800a114 <Process_AUDIO_TaskHandler+0x78>)
 800a0e0:	480b      	ldr	r0, [pc, #44]	; (800a110 <Process_AUDIO_TaskHandler+0x74>)
 800a0e2:	f7ff fcf3 	bl	8009acc <DEBUG_printThread>
 800a0e6:	e7df      	b.n	800a0a8 <Process_AUDIO_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_AUDIO = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_AUDIO);
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	4b0a      	ldr	r3, [pc, #40]	; (800a118 <Process_AUDIO_TaskHandler+0x7c>)
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	2001      	movs	r0, #1
 800a0f4:	f7fc fe36 	bl	8006d64 <xQueueGenericCreateStatic>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	4a01      	ldr	r2, [pc, #4]	; (800a100 <Process_AUDIO_TaskHandler+0x64>)
 800a0fc:	6053      	str	r3, [r2, #4]
	xSemResult.Process_AUDIO = xQueueSemaphoreTake(xSemHandle.Process_AUDIO, osWaitForever);
 800a0fe:	e7d3      	b.n	800a0a8 <Process_AUDIO_TaskHandler+0xc>
 800a100:	2000bdd0 	.word	0x2000bdd0
 800a104:	2000bdf4 	.word	0x2000bdf4
 800a108:	20000074 	.word	0x20000074
 800a10c:	0800ba9c 	.word	0x0800ba9c
 800a110:	0800b9fc 	.word	0x0800b9fc
 800a114:	0800baa4 	.word	0x0800baa4
 800a118:	2000bb50 	.word	0x2000bb50

0800a11c <Process_CAN_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_CAN_TaskHandler(void *params)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af02      	add	r7, sp, #8
 800a122:	6078      	str	r0, [r7, #4]
	ModuleCAN_StartUP();
 800a124:	f000 fb38 	bl	800a798 <ModuleCAN_StartUP>


 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_CAN = xQueueSemaphoreTake(xSemHandle.Process_CAN, osWaitForever);
 800a128:	4b15      	ldr	r3, [pc, #84]	; (800a180 <Process_CAN_TaskHandler+0x64>)
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	f04f 31ff 	mov.w	r1, #4294967295
 800a130:	4618      	mov	r0, r3
 800a132:	f7fd f92d 	bl	8007390 <xQueueSemaphoreTake>
 800a136:	4603      	mov	r3, r0
 800a138:	4a12      	ldr	r2, [pc, #72]	; (800a184 <Process_CAN_TaskHandler+0x68>)
 800a13a:	6093      	str	r3, [r2, #8]
	if (pdTRUE == xSemResult.Process_CAN)
 800a13c:	4b11      	ldr	r3, [pc, #68]	; (800a184 <Process_CAN_TaskHandler+0x68>)
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	2b01      	cmp	r3, #1
 800a142:	d111      	bne.n	800a168 <Process_CAN_TaskHandler+0x4c>
	{

		/* Semph has taken */
		__GL.itc.flag.can = FALSE;
 800a144:	4a10      	ldr	r2, [pc, #64]	; (800a188 <Process_CAN_TaskHandler+0x6c>)
 800a146:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a14a:	f36f 0382 	bfc	r3, #2, #1
 800a14e:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_CAN_THREADNAME, "STARTED");
 800a152:	490e      	ldr	r1, [pc, #56]	; (800a18c <Process_CAN_TaskHandler+0x70>)
 800a154:	480e      	ldr	r0, [pc, #56]	; (800a190 <Process_CAN_TaskHandler+0x74>)
 800a156:	f7ff fcb9 	bl	8009acc <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleCAN_MAIN(); /* Main Application */
 800a15a:	f000 fcc1 	bl	800aae0 <ModuleCAN_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_CAN_THREADNAME, "ENDED");
 800a15e:	490d      	ldr	r1, [pc, #52]	; (800a194 <Process_CAN_TaskHandler+0x78>)
 800a160:	480b      	ldr	r0, [pc, #44]	; (800a190 <Process_CAN_TaskHandler+0x74>)
 800a162:	f7ff fcb3 	bl	8009acc <DEBUG_printThread>
 800a166:	e7df      	b.n	800a128 <Process_CAN_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_CAN = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CAN);
 800a168:	2303      	movs	r3, #3
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	4b0a      	ldr	r3, [pc, #40]	; (800a198 <Process_CAN_TaskHandler+0x7c>)
 800a16e:	2200      	movs	r2, #0
 800a170:	2100      	movs	r1, #0
 800a172:	2001      	movs	r0, #1
 800a174:	f7fc fdf6 	bl	8006d64 <xQueueGenericCreateStatic>
 800a178:	4603      	mov	r3, r0
 800a17a:	4a01      	ldr	r2, [pc, #4]	; (800a180 <Process_CAN_TaskHandler+0x64>)
 800a17c:	6093      	str	r3, [r2, #8]
	xSemResult.Process_CAN = xQueueSemaphoreTake(xSemHandle.Process_CAN, osWaitForever);
 800a17e:	e7d3      	b.n	800a128 <Process_CAN_TaskHandler+0xc>
 800a180:	2000bdd0 	.word	0x2000bdd0
 800a184:	2000bdf4 	.word	0x2000bdf4
 800a188:	20000074 	.word	0x20000074
 800a18c:	0800ba9c 	.word	0x0800ba9c
 800a190:	0800ba10 	.word	0x0800ba10
 800a194:	0800baa4 	.word	0x0800baa4
 800a198:	2000bba0 	.word	0x2000bba0

0800a19c <Process_CAN_Run>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_CAN_Run(void)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af02      	add	r7, sp, #8
/* Message first, release later :) */

#ifdef DEBUG_THREAD
    DEBUG_printThread((char *)PROCESS_CAN_SEMAPHORENAME, "RELEASED");
 800a1a2:	4919      	ldr	r1, [pc, #100]	; (800a208 <Process_CAN_Run+0x6c>)
 800a1a4:	4819      	ldr	r0, [pc, #100]	; (800a20c <Process_CAN_Run+0x70>)
 800a1a6:	f7ff fc91 	bl	8009acc <DEBUG_printThread>
#endif

    xSemResult.Process_CAN = xSemaphoreGive(xSemHandle.Process_CAN);
 800a1aa:	4b19      	ldr	r3, [pc, #100]	; (800a210 <Process_CAN_Run+0x74>)
 800a1ac:	6898      	ldr	r0, [r3, #8]
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	f7fc fe72 	bl	8006e9c <xQueueGenericSend>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	4a16      	ldr	r2, [pc, #88]	; (800a214 <Process_CAN_Run+0x78>)
 800a1bc:	6093      	str	r3, [r2, #8]

    if (pdPASS == xSemResult.Process_CAN)
 800a1be:	4b15      	ldr	r3, [pc, #84]	; (800a214 <Process_CAN_Run+0x78>)
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d107      	bne.n	800a1d6 <Process_CAN_Run+0x3a>
    {
        /* Bootloader Semaphore is Passed */
    	__GL.itc.flag.can = TRUE;
 800a1c6:	4a14      	ldr	r2, [pc, #80]	; (800a218 <Process_CAN_Run+0x7c>)
 800a1c8:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a1cc:	f043 0304 	orr.w	r3, r3, #4
 800a1d0:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00
#endif

        xSemHandle.Process_CAN = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CAN);
    }

}
 800a1d4:	e015      	b.n	800a202 <Process_CAN_Run+0x66>
    	__GL.itc.flag.can = FALSE;
 800a1d6:	4a10      	ldr	r2, [pc, #64]	; (800a218 <Process_CAN_Run+0x7c>)
 800a1d8:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a1dc:	f36f 0382 	bfc	r3, #2, #1
 800a1e0:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00
   DEBUG_printThread((char *)PROCESS_CAN_SEMAPHORENAME, "ALREADY RUNNING");
 800a1e4:	490d      	ldr	r1, [pc, #52]	; (800a21c <Process_CAN_Run+0x80>)
 800a1e6:	4809      	ldr	r0, [pc, #36]	; (800a20c <Process_CAN_Run+0x70>)
 800a1e8:	f7ff fc70 	bl	8009acc <DEBUG_printThread>
        xSemHandle.Process_CAN = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CAN);
 800a1ec:	2303      	movs	r3, #3
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	4b0b      	ldr	r3, [pc, #44]	; (800a220 <Process_CAN_Run+0x84>)
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	2100      	movs	r1, #0
 800a1f6:	2001      	movs	r0, #1
 800a1f8:	f7fc fdb4 	bl	8006d64 <xQueueGenericCreateStatic>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	4a04      	ldr	r2, [pc, #16]	; (800a210 <Process_CAN_Run+0x74>)
 800a200:	6093      	str	r3, [r2, #8]
}
 800a202:	bf00      	nop
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	0800baac 	.word	0x0800baac
 800a20c:	0800baf4 	.word	0x0800baf4
 800a210:	2000bdd0 	.word	0x2000bdd0
 800a214:	2000bdf4 	.word	0x2000bdf4
 800a218:	20000074 	.word	0x20000074
 800a21c:	0800bacc 	.word	0x0800bacc
 800a220:	2000bba0 	.word	0x2000bba0

0800a224 <Process_CONTROL_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_CONTROL_TaskHandler(void *params)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af02      	add	r7, sp, #8
 800a22a:	6078      	str	r0, [r7, #4]
	ModuleCONTROL_StartUP();
 800a22c:	f000 fc8e 	bl	800ab4c <ModuleCONTROL_StartUP>

 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_CONTROL = xQueueSemaphoreTake(xSemHandle.Process_CONTROL, osWaitForever);
 800a230:	4b15      	ldr	r3, [pc, #84]	; (800a288 <Process_CONTROL_TaskHandler+0x64>)
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	f04f 31ff 	mov.w	r1, #4294967295
 800a238:	4618      	mov	r0, r3
 800a23a:	f7fd f8a9 	bl	8007390 <xQueueSemaphoreTake>
 800a23e:	4603      	mov	r3, r0
 800a240:	4a12      	ldr	r2, [pc, #72]	; (800a28c <Process_CONTROL_TaskHandler+0x68>)
 800a242:	60d3      	str	r3, [r2, #12]
	if (pdTRUE == xSemResult.Process_CONTROL)
 800a244:	4b11      	ldr	r3, [pc, #68]	; (800a28c <Process_CONTROL_TaskHandler+0x68>)
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d111      	bne.n	800a270 <Process_CONTROL_TaskHandler+0x4c>
	{

		/* Semph has taken */
		__GL.itc.flag.control = FALSE;
 800a24c:	4a10      	ldr	r2, [pc, #64]	; (800a290 <Process_CONTROL_TaskHandler+0x6c>)
 800a24e:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a252:	f36f 03c3 	bfc	r3, #3, #1
 800a256:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_CONTROL_THREADNAME, "STARTED");
 800a25a:	490e      	ldr	r1, [pc, #56]	; (800a294 <Process_CONTROL_TaskHandler+0x70>)
 800a25c:	480e      	ldr	r0, [pc, #56]	; (800a298 <Process_CONTROL_TaskHandler+0x74>)
 800a25e:	f7ff fc35 	bl	8009acc <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleCONTROL_MAIN(); /* Main Application */
 800a262:	f000 fc89 	bl	800ab78 <ModuleCONTROL_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_CONTROL_THREADNAME, "ENDED");
 800a266:	490d      	ldr	r1, [pc, #52]	; (800a29c <Process_CONTROL_TaskHandler+0x78>)
 800a268:	480b      	ldr	r0, [pc, #44]	; (800a298 <Process_CONTROL_TaskHandler+0x74>)
 800a26a:	f7ff fc2f 	bl	8009acc <DEBUG_printThread>
 800a26e:	e7df      	b.n	800a230 <Process_CONTROL_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_CONTROL = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CONTROL);
 800a270:	2303      	movs	r3, #3
 800a272:	9300      	str	r3, [sp, #0]
 800a274:	4b0a      	ldr	r3, [pc, #40]	; (800a2a0 <Process_CONTROL_TaskHandler+0x7c>)
 800a276:	2200      	movs	r2, #0
 800a278:	2100      	movs	r1, #0
 800a27a:	2001      	movs	r0, #1
 800a27c:	f7fc fd72 	bl	8006d64 <xQueueGenericCreateStatic>
 800a280:	4603      	mov	r3, r0
 800a282:	4a01      	ldr	r2, [pc, #4]	; (800a288 <Process_CONTROL_TaskHandler+0x64>)
 800a284:	60d3      	str	r3, [r2, #12]
	xSemResult.Process_CONTROL = xQueueSemaphoreTake(xSemHandle.Process_CONTROL, osWaitForever);
 800a286:	e7d3      	b.n	800a230 <Process_CONTROL_TaskHandler+0xc>
 800a288:	2000bdd0 	.word	0x2000bdd0
 800a28c:	2000bdf4 	.word	0x2000bdf4
 800a290:	20000074 	.word	0x20000074
 800a294:	0800ba9c 	.word	0x0800ba9c
 800a298:	0800ba24 	.word	0x0800ba24
 800a29c:	0800baa4 	.word	0x0800baa4
 800a2a0:	2000bbf0 	.word	0x2000bbf0

0800a2a4 <Process_FLASH_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_FLASH_TaskHandler(void *params)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af02      	add	r7, sp, #8
 800a2aa:	6078      	str	r0, [r7, #4]
	ModuleFLASH_StartUP();
 800a2ac:	f000 fc9a 	bl	800abe4 <ModuleFLASH_StartUP>

 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_FLASH = xQueueSemaphoreTake(xSemHandle.Process_FLASH, osWaitForever);
 800a2b0:	4b15      	ldr	r3, [pc, #84]	; (800a308 <Process_FLASH_TaskHandler+0x64>)
 800a2b2:	691b      	ldr	r3, [r3, #16]
 800a2b4:	f04f 31ff 	mov.w	r1, #4294967295
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7fd f869 	bl	8007390 <xQueueSemaphoreTake>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	4a12      	ldr	r2, [pc, #72]	; (800a30c <Process_FLASH_TaskHandler+0x68>)
 800a2c2:	6113      	str	r3, [r2, #16]
	if (pdTRUE == xSemResult.Process_FLASH)
 800a2c4:	4b11      	ldr	r3, [pc, #68]	; (800a30c <Process_FLASH_TaskHandler+0x68>)
 800a2c6:	691b      	ldr	r3, [r3, #16]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d111      	bne.n	800a2f0 <Process_FLASH_TaskHandler+0x4c>
	{

		/* Semph has taken */
		__GL.itc.flag.flash = FALSE;
 800a2cc:	4a10      	ldr	r2, [pc, #64]	; (800a310 <Process_FLASH_TaskHandler+0x6c>)
 800a2ce:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a2d2:	f36f 1304 	bfc	r3, #4, #1
 800a2d6:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_FLASH_THREADNAME, "STARTED");
 800a2da:	490e      	ldr	r1, [pc, #56]	; (800a314 <Process_FLASH_TaskHandler+0x70>)
 800a2dc:	480e      	ldr	r0, [pc, #56]	; (800a318 <Process_FLASH_TaskHandler+0x74>)
 800a2de:	f7ff fbf5 	bl	8009acc <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleFLASH_MAIN(); /* Main Application */
 800a2e2:	f000 fc95 	bl	800ac10 <ModuleFLASH_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_FLASH_THREADNAME, "ENDED");
 800a2e6:	490d      	ldr	r1, [pc, #52]	; (800a31c <Process_FLASH_TaskHandler+0x78>)
 800a2e8:	480b      	ldr	r0, [pc, #44]	; (800a318 <Process_FLASH_TaskHandler+0x74>)
 800a2ea:	f7ff fbef 	bl	8009acc <DEBUG_printThread>
 800a2ee:	e7df      	b.n	800a2b0 <Process_FLASH_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_FLASH = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_FLASH);
 800a2f0:	2303      	movs	r3, #3
 800a2f2:	9300      	str	r3, [sp, #0]
 800a2f4:	4b0a      	ldr	r3, [pc, #40]	; (800a320 <Process_FLASH_TaskHandler+0x7c>)
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	2100      	movs	r1, #0
 800a2fa:	2001      	movs	r0, #1
 800a2fc:	f7fc fd32 	bl	8006d64 <xQueueGenericCreateStatic>
 800a300:	4603      	mov	r3, r0
 800a302:	4a01      	ldr	r2, [pc, #4]	; (800a308 <Process_FLASH_TaskHandler+0x64>)
 800a304:	6113      	str	r3, [r2, #16]
	xSemResult.Process_FLASH = xQueueSemaphoreTake(xSemHandle.Process_FLASH, osWaitForever);
 800a306:	e7d3      	b.n	800a2b0 <Process_FLASH_TaskHandler+0xc>
 800a308:	2000bdd0 	.word	0x2000bdd0
 800a30c:	2000bdf4 	.word	0x2000bdf4
 800a310:	20000074 	.word	0x20000074
 800a314:	0800ba9c 	.word	0x0800ba9c
 800a318:	0800ba3c 	.word	0x0800ba3c
 800a31c:	0800baa4 	.word	0x0800baa4
 800a320:	2000bc40 	.word	0x2000bc40

0800a324 <Process_POWERSWITCH_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_POWERSWITCH_TaskHandler(void *params)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af02      	add	r7, sp, #8
 800a32a:	6078      	str	r0, [r7, #4]
	ModulePOWERSWITCH_StartUP();
 800a32c:	f000 fca6 	bl	800ac7c <ModulePOWERSWITCH_StartUP>
 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_POWERSWITCH = xQueueSemaphoreTake(xSemHandle.Process_POWERSWITCH, osWaitForever);
 800a330:	4b15      	ldr	r3, [pc, #84]	; (800a388 <Process_POWERSWITCH_TaskHandler+0x64>)
 800a332:	695b      	ldr	r3, [r3, #20]
 800a334:	f04f 31ff 	mov.w	r1, #4294967295
 800a338:	4618      	mov	r0, r3
 800a33a:	f7fd f829 	bl	8007390 <xQueueSemaphoreTake>
 800a33e:	4603      	mov	r3, r0
 800a340:	4a12      	ldr	r2, [pc, #72]	; (800a38c <Process_POWERSWITCH_TaskHandler+0x68>)
 800a342:	6153      	str	r3, [r2, #20]
	if (pdTRUE == xSemResult.Process_FLASH)
 800a344:	4b11      	ldr	r3, [pc, #68]	; (800a38c <Process_POWERSWITCH_TaskHandler+0x68>)
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d111      	bne.n	800a370 <Process_POWERSWITCH_TaskHandler+0x4c>
	{

		/* Semph has taken */
		__GL.itc.flag.powerswitch = FALSE;
 800a34c:	4a10      	ldr	r2, [pc, #64]	; (800a390 <Process_POWERSWITCH_TaskHandler+0x6c>)
 800a34e:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a352:	f36f 1345 	bfc	r3, #5, #1
 800a356:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_POWERSWITCH_THREADNAME, "STARTED");
 800a35a:	490e      	ldr	r1, [pc, #56]	; (800a394 <Process_POWERSWITCH_TaskHandler+0x70>)
 800a35c:	480e      	ldr	r0, [pc, #56]	; (800a398 <Process_POWERSWITCH_TaskHandler+0x74>)
 800a35e:	f7ff fbb5 	bl	8009acc <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModulePOWERSWITCH_MAIN(); /* Main Application */
 800a362:	f000 fca1 	bl	800aca8 <ModulePOWERSWITCH_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_POWERSWITCH_THREADNAME, "ENDED");
 800a366:	490d      	ldr	r1, [pc, #52]	; (800a39c <Process_POWERSWITCH_TaskHandler+0x78>)
 800a368:	480b      	ldr	r0, [pc, #44]	; (800a398 <Process_POWERSWITCH_TaskHandler+0x74>)
 800a36a:	f7ff fbaf 	bl	8009acc <DEBUG_printThread>
 800a36e:	e7df      	b.n	800a330 <Process_POWERSWITCH_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_POWERSWITCH = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_POWERSWITCH);
 800a370:	2303      	movs	r3, #3
 800a372:	9300      	str	r3, [sp, #0]
 800a374:	4b0a      	ldr	r3, [pc, #40]	; (800a3a0 <Process_POWERSWITCH_TaskHandler+0x7c>)
 800a376:	2200      	movs	r2, #0
 800a378:	2100      	movs	r1, #0
 800a37a:	2001      	movs	r0, #1
 800a37c:	f7fc fcf2 	bl	8006d64 <xQueueGenericCreateStatic>
 800a380:	4603      	mov	r3, r0
 800a382:	4a01      	ldr	r2, [pc, #4]	; (800a388 <Process_POWERSWITCH_TaskHandler+0x64>)
 800a384:	6153      	str	r3, [r2, #20]
	xSemResult.Process_POWERSWITCH = xQueueSemaphoreTake(xSemHandle.Process_POWERSWITCH, osWaitForever);
 800a386:	e7d3      	b.n	800a330 <Process_POWERSWITCH_TaskHandler+0xc>
 800a388:	2000bdd0 	.word	0x2000bdd0
 800a38c:	2000bdf4 	.word	0x2000bdf4
 800a390:	20000074 	.word	0x20000074
 800a394:	0800ba9c 	.word	0x0800ba9c
 800a398:	0800ba50 	.word	0x0800ba50
 800a39c:	0800baa4 	.word	0x0800baa4
 800a3a0:	2000bc90 	.word	0x2000bc90

0800a3a4 <Process_RTC_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_RTC_TaskHandler(void *params)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af02      	add	r7, sp, #8
 800a3aa:	6078      	str	r0, [r7, #4]
	ModuleRTC_StartUP();
 800a3ac:	f000 fcb2 	bl	800ad14 <ModuleRTC_StartUP>

 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_RTC = xQueueSemaphoreTake(xSemHandle.Process_RTC, osWaitForever);
 800a3b0:	4b15      	ldr	r3, [pc, #84]	; (800a408 <Process_RTC_TaskHandler+0x64>)
 800a3b2:	699b      	ldr	r3, [r3, #24]
 800a3b4:	f04f 31ff 	mov.w	r1, #4294967295
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7fc ffe9 	bl	8007390 <xQueueSemaphoreTake>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	4a12      	ldr	r2, [pc, #72]	; (800a40c <Process_RTC_TaskHandler+0x68>)
 800a3c2:	6193      	str	r3, [r2, #24]
	if (pdTRUE == xSemResult.Process_RTC)
 800a3c4:	4b11      	ldr	r3, [pc, #68]	; (800a40c <Process_RTC_TaskHandler+0x68>)
 800a3c6:	699b      	ldr	r3, [r3, #24]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d111      	bne.n	800a3f0 <Process_RTC_TaskHandler+0x4c>
	{

		/* Semph has taken */
		__GL.itc.flag.rtc = FALSE;
 800a3cc:	4a10      	ldr	r2, [pc, #64]	; (800a410 <Process_RTC_TaskHandler+0x6c>)
 800a3ce:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a3d2:	f36f 1386 	bfc	r3, #6, #1
 800a3d6:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_RTC_THREADNAME, "STARTED");
 800a3da:	490e      	ldr	r1, [pc, #56]	; (800a414 <Process_RTC_TaskHandler+0x70>)
 800a3dc:	480e      	ldr	r0, [pc, #56]	; (800a418 <Process_RTC_TaskHandler+0x74>)
 800a3de:	f7ff fb75 	bl	8009acc <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleRTC_MAIN(); /* Main Application */
 800a3e2:	f000 fcad 	bl	800ad40 <ModuleRTC_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_RTC_THREADNAME, "ENDED");
 800a3e6:	490d      	ldr	r1, [pc, #52]	; (800a41c <Process_RTC_TaskHandler+0x78>)
 800a3e8:	480b      	ldr	r0, [pc, #44]	; (800a418 <Process_RTC_TaskHandler+0x74>)
 800a3ea:	f7ff fb6f 	bl	8009acc <DEBUG_printThread>
 800a3ee:	e7df      	b.n	800a3b0 <Process_RTC_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_RTC = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_RTC);
 800a3f0:	2303      	movs	r3, #3
 800a3f2:	9300      	str	r3, [sp, #0]
 800a3f4:	4b0a      	ldr	r3, [pc, #40]	; (800a420 <Process_RTC_TaskHandler+0x7c>)
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	2100      	movs	r1, #0
 800a3fa:	2001      	movs	r0, #1
 800a3fc:	f7fc fcb2 	bl	8006d64 <xQueueGenericCreateStatic>
 800a400:	4603      	mov	r3, r0
 800a402:	4a01      	ldr	r2, [pc, #4]	; (800a408 <Process_RTC_TaskHandler+0x64>)
 800a404:	6193      	str	r3, [r2, #24]
	xSemResult.Process_RTC = xQueueSemaphoreTake(xSemHandle.Process_RTC, osWaitForever);
 800a406:	e7d3      	b.n	800a3b0 <Process_RTC_TaskHandler+0xc>
 800a408:	2000bdd0 	.word	0x2000bdd0
 800a40c:	2000bdf4 	.word	0x2000bdf4
 800a410:	20000074 	.word	0x20000074
 800a414:	0800ba9c 	.word	0x0800ba9c
 800a418:	0800ba60 	.word	0x0800ba60
 800a41c:	0800baa4 	.word	0x0800baa4
 800a420:	2000bce0 	.word	0x2000bce0

0800a424 <Process_SDCARD_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_SDCARD_TaskHandler(void *params)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af02      	add	r7, sp, #8
 800a42a:	6078      	str	r0, [r7, #4]
	ModuleSDCARD_StartUP();
 800a42c:	f000 fcbe 	bl	800adac <ModuleSDCARD_StartUP>

 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_SDCARD = xQueueSemaphoreTake(xSemHandle.Process_SDCARD, osWaitForever);
 800a430:	4b15      	ldr	r3, [pc, #84]	; (800a488 <Process_SDCARD_TaskHandler+0x64>)
 800a432:	69db      	ldr	r3, [r3, #28]
 800a434:	f04f 31ff 	mov.w	r1, #4294967295
 800a438:	4618      	mov	r0, r3
 800a43a:	f7fc ffa9 	bl	8007390 <xQueueSemaphoreTake>
 800a43e:	4603      	mov	r3, r0
 800a440:	4a12      	ldr	r2, [pc, #72]	; (800a48c <Process_SDCARD_TaskHandler+0x68>)
 800a442:	61d3      	str	r3, [r2, #28]
	if (pdTRUE == xSemResult.Process_SDCARD)
 800a444:	4b11      	ldr	r3, [pc, #68]	; (800a48c <Process_SDCARD_TaskHandler+0x68>)
 800a446:	69db      	ldr	r3, [r3, #28]
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d111      	bne.n	800a470 <Process_SDCARD_TaskHandler+0x4c>
	{

		/* Semph has taken */
		__GL.itc.flag.sdcard = FALSE;
 800a44c:	4a10      	ldr	r2, [pc, #64]	; (800a490 <Process_SDCARD_TaskHandler+0x6c>)
 800a44e:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a452:	f36f 13c7 	bfc	r3, #7, #1
 800a456:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_SDCARD_THREADNAME, "STARTED");
 800a45a:	490e      	ldr	r1, [pc, #56]	; (800a494 <Process_SDCARD_TaskHandler+0x70>)
 800a45c:	480e      	ldr	r0, [pc, #56]	; (800a498 <Process_SDCARD_TaskHandler+0x74>)
 800a45e:	f7ff fb35 	bl	8009acc <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleSDCARD_MAIN(); /* Main Application */
 800a462:	f000 fcb9 	bl	800add8 <ModuleSDCARD_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_SDCARD_THREADNAME, "ENDED");
 800a466:	490d      	ldr	r1, [pc, #52]	; (800a49c <Process_SDCARD_TaskHandler+0x78>)
 800a468:	480b      	ldr	r0, [pc, #44]	; (800a498 <Process_SDCARD_TaskHandler+0x74>)
 800a46a:	f7ff fb2f 	bl	8009acc <DEBUG_printThread>
 800a46e:	e7df      	b.n	800a430 <Process_SDCARD_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_SDCARD = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_SDCARD);
 800a470:	2303      	movs	r3, #3
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	4b0a      	ldr	r3, [pc, #40]	; (800a4a0 <Process_SDCARD_TaskHandler+0x7c>)
 800a476:	2200      	movs	r2, #0
 800a478:	2100      	movs	r1, #0
 800a47a:	2001      	movs	r0, #1
 800a47c:	f7fc fc72 	bl	8006d64 <xQueueGenericCreateStatic>
 800a480:	4603      	mov	r3, r0
 800a482:	4a01      	ldr	r2, [pc, #4]	; (800a488 <Process_SDCARD_TaskHandler+0x64>)
 800a484:	61d3      	str	r3, [r2, #28]
	xSemResult.Process_SDCARD = xQueueSemaphoreTake(xSemHandle.Process_SDCARD, osWaitForever);
 800a486:	e7d3      	b.n	800a430 <Process_SDCARD_TaskHandler+0xc>
 800a488:	2000bdd0 	.word	0x2000bdd0
 800a48c:	2000bdf4 	.word	0x2000bdf4
 800a490:	20000074 	.word	0x20000074
 800a494:	0800ba9c 	.word	0x0800ba9c
 800a498:	0800ba74 	.word	0x0800ba74
 800a49c:	0800baa4 	.word	0x0800baa4
 800a4a0:	2000bd30 	.word	0x2000bd30

0800a4a4 <Process_TELEMETRY_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_TELEMETRY_TaskHandler(void *params)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af02      	add	r7, sp, #8
 800a4aa:	6078      	str	r0, [r7, #4]
	ModuleTELEMETRY_StartUP();
 800a4ac:	f000 fcca 	bl	800ae44 <ModuleTELEMETRY_StartUP>

 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_TELEMETRY = xQueueSemaphoreTake(xSemHandle.Process_TELEMETRY, osWaitForever);
 800a4b0:	4b15      	ldr	r3, [pc, #84]	; (800a508 <Process_TELEMETRY_TaskHandler+0x64>)
 800a4b2:	6a1b      	ldr	r3, [r3, #32]
 800a4b4:	f04f 31ff 	mov.w	r1, #4294967295
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7fc ff69 	bl	8007390 <xQueueSemaphoreTake>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	4a12      	ldr	r2, [pc, #72]	; (800a50c <Process_TELEMETRY_TaskHandler+0x68>)
 800a4c2:	6213      	str	r3, [r2, #32]
	if (pdTRUE == xSemResult.Process_TELEMETRY)
 800a4c4:	4b11      	ldr	r3, [pc, #68]	; (800a50c <Process_TELEMETRY_TaskHandler+0x68>)
 800a4c6:	6a1b      	ldr	r3, [r3, #32]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d111      	bne.n	800a4f0 <Process_TELEMETRY_TaskHandler+0x4c>
	{
		/* Semph has taken */
		__GL.itc.flag.telemetry = FALSE;
 800a4cc:	4a10      	ldr	r2, [pc, #64]	; (800a510 <Process_TELEMETRY_TaskHandler+0x6c>)
 800a4ce:	f892 3a01 	ldrb.w	r3, [r2, #2561]	; 0xa01
 800a4d2:	f36f 0300 	bfc	r3, #0, #1
 800a4d6:	f882 3a01 	strb.w	r3, [r2, #2561]	; 0xa01

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_TELEMETRY_THREADNAME, "STARTED");
 800a4da:	490e      	ldr	r1, [pc, #56]	; (800a514 <Process_TELEMETRY_TaskHandler+0x70>)
 800a4dc:	480e      	ldr	r0, [pc, #56]	; (800a518 <Process_TELEMETRY_TaskHandler+0x74>)
 800a4de:	f7ff faf5 	bl	8009acc <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleTELEMETRY_MAIN(); /* Main Application */
 800a4e2:	f000 fcc5 	bl	800ae70 <ModuleTELEMETRY_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_TELEMETRY_THREADNAME, "ENDED");
 800a4e6:	490d      	ldr	r1, [pc, #52]	; (800a51c <Process_TELEMETRY_TaskHandler+0x78>)
 800a4e8:	480b      	ldr	r0, [pc, #44]	; (800a518 <Process_TELEMETRY_TaskHandler+0x74>)
 800a4ea:	f7ff faef 	bl	8009acc <DEBUG_printThread>
 800a4ee:	e7df      	b.n	800a4b0 <Process_TELEMETRY_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_TELEMETRY = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_TELEMETRY);
 800a4f0:	2303      	movs	r3, #3
 800a4f2:	9300      	str	r3, [sp, #0]
 800a4f4:	4b0a      	ldr	r3, [pc, #40]	; (800a520 <Process_TELEMETRY_TaskHandler+0x7c>)
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	2100      	movs	r1, #0
 800a4fa:	2001      	movs	r0, #1
 800a4fc:	f7fc fc32 	bl	8006d64 <xQueueGenericCreateStatic>
 800a500:	4603      	mov	r3, r0
 800a502:	4a01      	ldr	r2, [pc, #4]	; (800a508 <Process_TELEMETRY_TaskHandler+0x64>)
 800a504:	6213      	str	r3, [r2, #32]
	xSemResult.Process_TELEMETRY = xQueueSemaphoreTake(xSemHandle.Process_TELEMETRY, osWaitForever);
 800a506:	e7d3      	b.n	800a4b0 <Process_TELEMETRY_TaskHandler+0xc>
 800a508:	2000bdd0 	.word	0x2000bdd0
 800a50c:	2000bdf4 	.word	0x2000bdf4
 800a510:	20000074 	.word	0x20000074
 800a514:	0800ba9c 	.word	0x0800ba9c
 800a518:	0800ba88 	.word	0x0800ba88
 800a51c:	0800baa4 	.word	0x0800baa4
 800a520:	2000bd80 	.word	0x2000bd80

0800a524 <BodyControlMAIN_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void BodyControlMAIN_HWInit(void)
{
 800a524:	b480      	push	{r7}
 800a526:	af00      	add	r7, sp, #0
	
}
 800a528:	bf00      	nop
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr

0800a532 <BodyControlMAIN_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void BodyControlMAIN_SWInit(void)
{
 800a532:	b480      	push	{r7}
 800a534:	af00      	add	r7, sp, #0
	
}
 800a536:	bf00      	nop
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <BodyControlMAIN_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void BodyControlMAIN_StartUP(void)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	af00      	add	r7, sp, #0
	BodyControlMAIN_HWInit();
 800a544:	f7ff ffee 	bl	800a524 <BodyControlMAIN_HWInit>
	BodyControlMAIN_SWInit();
 800a548:	f7ff fff3 	bl	800a532 <BodyControlMAIN_SWInit>
}
 800a54c:	bf00      	nop
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <BodyControlMAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void BodyControlMAIN_Routine(void)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	af00      	add	r7, sp, #0

	if( __GL.mainState.flag.adc == TRUE )
 800a554:	4b09      	ldr	r3, [pc, #36]	; (800a57c <BodyControlMAIN_Routine+0x2c>)
 800a556:	f893 3a02 	ldrb.w	r3, [r3, #2562]	; 0xa02
 800a55a:	f003 0301 	and.w	r3, r3, #1
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	2b00      	cmp	r3, #0
 800a562:	d008      	beq.n	800a576 <BodyControlMAIN_Routine+0x26>
	{
		/* Release Periodically ADC Semph */
		Process_ADC_Run();
 800a564:	f7ff fd56 	bl	800a014 <Process_ADC_Run>
		__GL.mainState.flag.adc = FALSE;
 800a568:	4a04      	ldr	r2, [pc, #16]	; (800a57c <BodyControlMAIN_Routine+0x2c>)
 800a56a:	f892 3a02 	ldrb.w	r3, [r2, #2562]	; 0xa02
 800a56e:	f36f 0300 	bfc	r3, #0, #1
 800a572:	f882 3a02 	strb.w	r3, [r2, #2562]	; 0xa02
	}

}
 800a576:	bf00      	nop
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	20000074 	.word	0x20000074

0800a580 <BodyControlMAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void BodyControlMAIN_Process(void)
{
 800a580:	b480      	push	{r7}
 800a582:	af00      	add	r7, sp, #0

}
 800a584:	bf00      	nop
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr
	...

0800a590 <BodyControlMAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void BodyControlMAIN(void)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	af00      	add	r7, sp, #0

	switch(BodyControlMAIN_State)
 800a594:	4b11      	ldr	r3, [pc, #68]	; (800a5dc <BodyControlMAIN+0x4c>)
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	2b03      	cmp	r3, #3
 800a59a:	d819      	bhi.n	800a5d0 <BodyControlMAIN+0x40>
 800a59c:	a201      	add	r2, pc, #4	; (adr r2, 800a5a4 <BodyControlMAIN+0x14>)
 800a59e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a2:	bf00      	nop
 800a5a4:	0800a5b5 	.word	0x0800a5b5
 800a5a8:	0800a5bd 	.word	0x0800a5bd
 800a5ac:	0800a5c3 	.word	0x0800a5c3
 800a5b0:	0800a5c9 	.word	0x0800a5c9
	{
	    case BodyControlMAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	BodyControlMAIN_State = BodyControlMAIN_State_ROUTINE;
 800a5b4:	4b09      	ldr	r3, [pc, #36]	; (800a5dc <BodyControlMAIN+0x4c>)
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	701a      	strb	r2, [r3, #0]
	    break;
 800a5ba:	e00d      	b.n	800a5d8 <BodyControlMAIN+0x48>

	    case BodyControlMAIN_State_ROUTINE:

	    	BodyControlMAIN_Routine();
 800a5bc:	f7ff ffc8 	bl	800a550 <BodyControlMAIN_Routine>
	    break;
 800a5c0:	e00a      	b.n	800a5d8 <BodyControlMAIN+0x48>

	    case BodyControlMAIN_State_PROCESS:

	    	BodyControlMAIN_Process();
 800a5c2:	f7ff ffdd 	bl	800a580 <BodyControlMAIN_Process>

	    break;
 800a5c6:	e007      	b.n	800a5d8 <BodyControlMAIN+0x48>

	    case BodyControlMAIN_State_SUSPEND:
	    	BodyControlMAIN_State = BodyControlMAIN_State_IDLE;
 800a5c8:	4b04      	ldr	r3, [pc, #16]	; (800a5dc <BodyControlMAIN+0x4c>)
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	701a      	strb	r2, [r3, #0]
	    break;
 800a5ce:	e003      	b.n	800a5d8 <BodyControlMAIN+0x48>

	    default:
	    	BodyControlMAIN_State = BodyControlMAIN_State_SUSPEND;
 800a5d0:	4b02      	ldr	r3, [pc, #8]	; (800a5dc <BodyControlMAIN+0x4c>)
 800a5d2:	2203      	movs	r2, #3
 800a5d4:	701a      	strb	r2, [r3, #0]
	    break;
 800a5d6:	bf00      	nop

	}
}
 800a5d8:	bf00      	nop
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	2000c1b0 	.word	0x2000c1b0

0800a5e0 <ModuleADC_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleADC_HWInit(void)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	af00      	add	r7, sp, #0
	
}
 800a5e4:	bf00      	nop
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr

0800a5ee <ModuleADC_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleADC_SWInit(void)
{
 800a5ee:	b480      	push	{r7}
 800a5f0:	af00      	add	r7, sp, #0
	
}
 800a5f2:	bf00      	nop
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <ModuleADC_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleADC_StartUP(void)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	af00      	add	r7, sp, #0
	ModuleADC_HWInit();
 800a600:	f7ff ffee 	bl	800a5e0 <ModuleADC_HWInit>
	ModuleADC_SWInit();
 800a604:	f7ff fff3 	bl	800a5ee <ModuleADC_SWInit>
}
 800a608:	bf00      	nop
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <ModuleADC_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleADC_MAIN_Routine(void)
{
 800a60c:	b480      	push	{r7}
 800a60e:	af00      	add	r7, sp, #0

}
 800a610:	bf00      	nop
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr

0800a61a <ModuleADC_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleADC_MAIN_Process(void)
{
 800a61a:	b480      	push	{r7}
 800a61c:	af00      	add	r7, sp, #0

}
 800a61e:	bf00      	nop
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <ModuleADC_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleADC_MAIN(void)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	af00      	add	r7, sp, #0
	switch(ModuleADC_MAIN_State)
 800a62c:	4b11      	ldr	r3, [pc, #68]	; (800a674 <ModuleADC_MAIN+0x4c>)
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	2b03      	cmp	r3, #3
 800a632:	d819      	bhi.n	800a668 <ModuleADC_MAIN+0x40>
 800a634:	a201      	add	r2, pc, #4	; (adr r2, 800a63c <ModuleADC_MAIN+0x14>)
 800a636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a63a:	bf00      	nop
 800a63c:	0800a64d 	.word	0x0800a64d
 800a640:	0800a655 	.word	0x0800a655
 800a644:	0800a65b 	.word	0x0800a65b
 800a648:	0800a661 	.word	0x0800a661
	{
	    case ModuleADC_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleADC_MAIN_State = ModuleADC_MAIN_State_ROUTINE;
 800a64c:	4b09      	ldr	r3, [pc, #36]	; (800a674 <ModuleADC_MAIN+0x4c>)
 800a64e:	2201      	movs	r2, #1
 800a650:	701a      	strb	r2, [r3, #0]
	    break;
 800a652:	e00d      	b.n	800a670 <ModuleADC_MAIN+0x48>

	    case ModuleADC_MAIN_State_ROUTINE:

	    	ModuleADC_MAIN_Routine();
 800a654:	f7ff ffda 	bl	800a60c <ModuleADC_MAIN_Routine>
	    break;
 800a658:	e00a      	b.n	800a670 <ModuleADC_MAIN+0x48>

	    case ModuleADC_MAIN_State_PROCESS:

	    	ModuleADC_MAIN_Process();
 800a65a:	f7ff ffde 	bl	800a61a <ModuleADC_MAIN_Process>

	    break;
 800a65e:	e007      	b.n	800a670 <ModuleADC_MAIN+0x48>

	    case ModuleADC_MAIN_State_SUSPEND:
	    	ModuleADC_MAIN_State = ModuleADC_MAIN_State_IDLE;
 800a660:	4b04      	ldr	r3, [pc, #16]	; (800a674 <ModuleADC_MAIN+0x4c>)
 800a662:	2200      	movs	r2, #0
 800a664:	701a      	strb	r2, [r3, #0]
	    break;
 800a666:	e003      	b.n	800a670 <ModuleADC_MAIN+0x48>

	    default:
	    	ModuleADC_MAIN_State = ModuleADC_MAIN_State_SUSPEND;
 800a668:	4b02      	ldr	r3, [pc, #8]	; (800a674 <ModuleADC_MAIN+0x4c>)
 800a66a:	2203      	movs	r2, #3
 800a66c:	701a      	strb	r2, [r3, #0]
	    break;
 800a66e:	bf00      	nop

	}
}
 800a670:	bf00      	nop
 800a672:	bd80      	pop	{r7, pc}
 800a674:	2000c1b1 	.word	0x2000c1b1

0800a678 <ModuleAUDIO_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleAUDIO_HWInit(void)
{
 800a678:	b480      	push	{r7}
 800a67a:	af00      	add	r7, sp, #0

}
 800a67c:	bf00      	nop
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr

0800a686 <ModuleAUDIO_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleAUDIO_SWInit(void)
{
 800a686:	b480      	push	{r7}
 800a688:	af00      	add	r7, sp, #0
	
}
 800a68a:	bf00      	nop
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <ModuleAUDIO_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleAUDIO_StartUP(void)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	af00      	add	r7, sp, #0
	ModuleAUDIO_HWInit();
 800a698:	f7ff ffee 	bl	800a678 <ModuleAUDIO_HWInit>
	ModuleAUDIO_SWInit();
 800a69c:	f7ff fff3 	bl	800a686 <ModuleAUDIO_SWInit>
}
 800a6a0:	bf00      	nop
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <ModuleAUDIO_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleAUDIO_MAIN_Routine(void)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	af00      	add	r7, sp, #0

}
 800a6a8:	bf00      	nop
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr

0800a6b2 <ModuleAUDIO_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleAUDIO_MAIN_Process(void)
{
 800a6b2:	b480      	push	{r7}
 800a6b4:	af00      	add	r7, sp, #0

}
 800a6b6:	bf00      	nop
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <ModuleAUDIO_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleAUDIO_MAIN(void)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	af00      	add	r7, sp, #0

	switch(ModuleAUDIO_MAIN_State)
 800a6c4:	4b11      	ldr	r3, [pc, #68]	; (800a70c <ModuleAUDIO_MAIN+0x4c>)
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	2b03      	cmp	r3, #3
 800a6ca:	d819      	bhi.n	800a700 <ModuleAUDIO_MAIN+0x40>
 800a6cc:	a201      	add	r2, pc, #4	; (adr r2, 800a6d4 <ModuleAUDIO_MAIN+0x14>)
 800a6ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d2:	bf00      	nop
 800a6d4:	0800a6e5 	.word	0x0800a6e5
 800a6d8:	0800a6ed 	.word	0x0800a6ed
 800a6dc:	0800a6f3 	.word	0x0800a6f3
 800a6e0:	0800a6f9 	.word	0x0800a6f9
	{
	    case ModuleAUDIO_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleAUDIO_MAIN_State = ModuleAUDIO_MAIN_State_ROUTINE;
 800a6e4:	4b09      	ldr	r3, [pc, #36]	; (800a70c <ModuleAUDIO_MAIN+0x4c>)
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	701a      	strb	r2, [r3, #0]
	    break;
 800a6ea:	e00d      	b.n	800a708 <ModuleAUDIO_MAIN+0x48>

	    case ModuleAUDIO_MAIN_State_ROUTINE:

	    	ModuleAUDIO_MAIN_Routine();
 800a6ec:	f7ff ffda 	bl	800a6a4 <ModuleAUDIO_MAIN_Routine>
	    break;
 800a6f0:	e00a      	b.n	800a708 <ModuleAUDIO_MAIN+0x48>

	    case ModuleAUDIO_MAIN_State_PROCESS:

	    	ModuleAUDIO_MAIN_Process();
 800a6f2:	f7ff ffde 	bl	800a6b2 <ModuleAUDIO_MAIN_Process>

	    break;
 800a6f6:	e007      	b.n	800a708 <ModuleAUDIO_MAIN+0x48>

	    case ModuleAUDIO_MAIN_State_SUSPEND:
	    	ModuleAUDIO_MAIN_State = ModuleAUDIO_MAIN_State_IDLE;
 800a6f8:	4b04      	ldr	r3, [pc, #16]	; (800a70c <ModuleAUDIO_MAIN+0x4c>)
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	701a      	strb	r2, [r3, #0]
	    break;
 800a6fe:	e003      	b.n	800a708 <ModuleAUDIO_MAIN+0x48>

	    default:
	    	ModuleAUDIO_MAIN_State = ModuleAUDIO_MAIN_State_SUSPEND;
 800a700:	4b02      	ldr	r3, [pc, #8]	; (800a70c <ModuleAUDIO_MAIN+0x4c>)
 800a702:	2203      	movs	r2, #3
 800a704:	701a      	strb	r2, [r3, #0]
	    break;
 800a706:	bf00      	nop

	}
}
 800a708:	bf00      	nop
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	2000c1b2 	.word	0x2000c1b2

0800a710 <ModuleCAN_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleCAN_HWInit(void)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af02      	add	r7, sp, #8
	/* Construction function of protocol */

	EEM_CTOR(&protocol /* Main protocol Class Construct */
 800a716:	4b13      	ldr	r3, [pc, #76]	; (800a764 <ModuleCAN_HWInit+0x54>)
 800a718:	4a13      	ldr	r2, [pc, #76]	; (800a768 <ModuleCAN_HWInit+0x58>)
 800a71a:	9200      	str	r2, [sp, #0]
 800a71c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a71e:	4813      	ldr	r0, [pc, #76]	; (800a76c <ModuleCAN_HWInit+0x5c>)
 800a720:	f7f7 fb25 	bl	8001d6e <EEM_CTOR>
/* Only works for spi2can */
#endif
	);

	/* Init protocol settings in order to 250KBps Bit Rate */
	protocol.ops.EEM_INIT(&protocol.obj);
 800a724:	4b11      	ldr	r3, [pc, #68]	; (800a76c <ModuleCAN_HWInit+0x5c>)
 800a726:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800a72a:	4810      	ldr	r0, [pc, #64]	; (800a76c <ModuleCAN_HWInit+0x5c>)
 800a72c:	4798      	blx	r3

	/* Send Test Data */
	const char testData[ EEM_MAX_SIZE ] = { 0xEE , 0x00 , 0xEE , 0x00 , 0xEE , 0x00 , 0xEE , 0x00 };
 800a72e:	4a10      	ldr	r2, [pc, #64]	; (800a770 <ModuleCAN_HWInit+0x60>)
 800a730:	463b      	mov	r3, r7
 800a732:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a736:	e883 0003 	stmia.w	r3, {r0, r1}
	memcpy(&protocol.obj.canPacket.DATA[0] , &testData[0] , 8);
 800a73a:	463b      	mov	r3, r7
 800a73c:	2208      	movs	r2, #8
 800a73e:	4619      	mov	r1, r3
 800a740:	480c      	ldr	r0, [pc, #48]	; (800a774 <ModuleCAN_HWInit+0x64>)
 800a742:	f000 fbe7 	bl	800af14 <memcpy>
	protocol.obj.canPacket.EXTENDED_ID.identifier = 0x1CFFFFFF;
 800a746:	4b09      	ldr	r3, [pc, #36]	; (800a76c <ModuleCAN_HWInit+0x5c>)
 800a748:	f06f 4263 	mvn.w	r2, #3808428032	; 0xe3000000
 800a74c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 800a750:	4b06      	ldr	r3, [pc, #24]	; (800a76c <ModuleCAN_HWInit+0x5c>)
 800a752:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800a756:	2100      	movs	r1, #0
 800a758:	4807      	ldr	r0, [pc, #28]	; (800a778 <ModuleCAN_HWInit+0x68>)
 800a75a:	4798      	blx	r3
}
 800a75c:	bf00      	nop
 800a75e:	3708      	adds	r7, #8
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	0800bbb8 	.word	0x0800bbb8
 800a768:	20001124 	.word	0x20001124
 800a76c:	2000bffc 	.word	0x2000bffc
 800a770:	0800bb74 	.word	0x0800bb74
 800a774:	2000c09c 	.word	0x2000c09c
 800a778:	2000c098 	.word	0x2000c098

0800a77c <ModuleCAN_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCAN_SWInit(void)
{
 800a77c:	b480      	push	{r7}
 800a77e:	af00      	add	r7, sp, #0
	__GL.can.msgTickCounter_u32 = 0 ;
 800a780:	4b04      	ldr	r3, [pc, #16]	; (800a794 <ModuleCAN_SWInit+0x18>)
 800a782:	2200      	movs	r2, #0
 800a784:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300

}
 800a788:	bf00      	nop
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	20000074 	.word	0x20000074

0800a798 <ModuleCAN_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCAN_StartUP(void)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	af00      	add	r7, sp, #0
	ModuleCAN_HWInit();
 800a79c:	f7ff ffb8 	bl	800a710 <ModuleCAN_HWInit>
	ModuleCAN_SWInit();
 800a7a0:	f7ff ffec 	bl	800a77c <ModuleCAN_SWInit>

}
 800a7a4:	bf00      	nop
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <ModuleCAN_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleCAN_MAIN_Routine(void)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	af00      	add	r7, sp, #0
	if( TRUE == __GL.can.msgSelect.Flag.ID01 )
 800a7ac:	4b3f      	ldr	r3, [pc, #252]	; (800a8ac <ModuleCAN_MAIN_Routine+0x104>)
 800a7ae:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800a7b2:	f003 0301 	and.w	r3, r3, #1
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d006      	beq.n	800a7ca <ModuleCAN_MAIN_Routine+0x22>
	{
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_PROCESS;
 800a7bc:	4b3c      	ldr	r3, [pc, #240]	; (800a8b0 <ModuleCAN_MAIN_Routine+0x108>)
 800a7be:	2202      	movs	r2, #2
 800a7c0:	701a      	strb	r2, [r3, #0]
		ModuleCAN_PROCESS_State	= ModuleCAN_PROCESS_State_MSG01;
 800a7c2:	4b3c      	ldr	r3, [pc, #240]	; (800a8b4 <ModuleCAN_MAIN_Routine+0x10c>)
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	701a      	strb	r2, [r3, #0]
	else
	{
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_SUSPEND;
	}

}
 800a7c8:	e06b      	b.n	800a8a2 <ModuleCAN_MAIN_Routine+0xfa>
	else if( TRUE == __GL.can.msgSelect.Flag.ID02 )
 800a7ca:	4b38      	ldr	r3, [pc, #224]	; (800a8ac <ModuleCAN_MAIN_Routine+0x104>)
 800a7cc:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800a7d0:	f003 0302 	and.w	r3, r3, #2
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d006      	beq.n	800a7e8 <ModuleCAN_MAIN_Routine+0x40>
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_PROCESS;
 800a7da:	4b35      	ldr	r3, [pc, #212]	; (800a8b0 <ModuleCAN_MAIN_Routine+0x108>)
 800a7dc:	2202      	movs	r2, #2
 800a7de:	701a      	strb	r2, [r3, #0]
		ModuleCAN_PROCESS_State	= ModuleCAN_PROCESS_State_MSG02;
 800a7e0:	4b34      	ldr	r3, [pc, #208]	; (800a8b4 <ModuleCAN_MAIN_Routine+0x10c>)
 800a7e2:	2202      	movs	r2, #2
 800a7e4:	701a      	strb	r2, [r3, #0]
}
 800a7e6:	e05c      	b.n	800a8a2 <ModuleCAN_MAIN_Routine+0xfa>
	else if( TRUE == __GL.can.msgSelect.Flag.ID03 )
 800a7e8:	4b30      	ldr	r3, [pc, #192]	; (800a8ac <ModuleCAN_MAIN_Routine+0x104>)
 800a7ea:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800a7ee:	f003 0304 	and.w	r3, r3, #4
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d006      	beq.n	800a806 <ModuleCAN_MAIN_Routine+0x5e>
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_PROCESS;
 800a7f8:	4b2d      	ldr	r3, [pc, #180]	; (800a8b0 <ModuleCAN_MAIN_Routine+0x108>)
 800a7fa:	2202      	movs	r2, #2
 800a7fc:	701a      	strb	r2, [r3, #0]
		ModuleCAN_PROCESS_State	= ModuleCAN_PROCESS_State_MSG03;
 800a7fe:	4b2d      	ldr	r3, [pc, #180]	; (800a8b4 <ModuleCAN_MAIN_Routine+0x10c>)
 800a800:	2203      	movs	r2, #3
 800a802:	701a      	strb	r2, [r3, #0]
}
 800a804:	e04d      	b.n	800a8a2 <ModuleCAN_MAIN_Routine+0xfa>
	else if( TRUE == __GL.can.msgSelect.Flag.ID04 )
 800a806:	4b29      	ldr	r3, [pc, #164]	; (800a8ac <ModuleCAN_MAIN_Routine+0x104>)
 800a808:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800a80c:	f003 0308 	and.w	r3, r3, #8
 800a810:	b2db      	uxtb	r3, r3
 800a812:	2b00      	cmp	r3, #0
 800a814:	d006      	beq.n	800a824 <ModuleCAN_MAIN_Routine+0x7c>
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_PROCESS;
 800a816:	4b26      	ldr	r3, [pc, #152]	; (800a8b0 <ModuleCAN_MAIN_Routine+0x108>)
 800a818:	2202      	movs	r2, #2
 800a81a:	701a      	strb	r2, [r3, #0]
		ModuleCAN_PROCESS_State	= ModuleCAN_PROCESS_State_MSG04;
 800a81c:	4b25      	ldr	r3, [pc, #148]	; (800a8b4 <ModuleCAN_MAIN_Routine+0x10c>)
 800a81e:	2204      	movs	r2, #4
 800a820:	701a      	strb	r2, [r3, #0]
}
 800a822:	e03e      	b.n	800a8a2 <ModuleCAN_MAIN_Routine+0xfa>
	else if( TRUE == __GL.can.msgSelect.Flag.ID05 )
 800a824:	4b21      	ldr	r3, [pc, #132]	; (800a8ac <ModuleCAN_MAIN_Routine+0x104>)
 800a826:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800a82a:	f003 0310 	and.w	r3, r3, #16
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	2b00      	cmp	r3, #0
 800a832:	d006      	beq.n	800a842 <ModuleCAN_MAIN_Routine+0x9a>
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_PROCESS;
 800a834:	4b1e      	ldr	r3, [pc, #120]	; (800a8b0 <ModuleCAN_MAIN_Routine+0x108>)
 800a836:	2202      	movs	r2, #2
 800a838:	701a      	strb	r2, [r3, #0]
		ModuleCAN_PROCESS_State	= ModuleCAN_PROCESS_State_MSG05;
 800a83a:	4b1e      	ldr	r3, [pc, #120]	; (800a8b4 <ModuleCAN_MAIN_Routine+0x10c>)
 800a83c:	2205      	movs	r2, #5
 800a83e:	701a      	strb	r2, [r3, #0]
}
 800a840:	e02f      	b.n	800a8a2 <ModuleCAN_MAIN_Routine+0xfa>
	else if( TRUE == __GL.can.msgSelect.Flag.ID06 )
 800a842:	4b1a      	ldr	r3, [pc, #104]	; (800a8ac <ModuleCAN_MAIN_Routine+0x104>)
 800a844:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800a848:	f003 0320 	and.w	r3, r3, #32
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d006      	beq.n	800a860 <ModuleCAN_MAIN_Routine+0xb8>
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_PROCESS;
 800a852:	4b17      	ldr	r3, [pc, #92]	; (800a8b0 <ModuleCAN_MAIN_Routine+0x108>)
 800a854:	2202      	movs	r2, #2
 800a856:	701a      	strb	r2, [r3, #0]
		ModuleCAN_PROCESS_State	= ModuleCAN_PROCESS_State_MSG06;
 800a858:	4b16      	ldr	r3, [pc, #88]	; (800a8b4 <ModuleCAN_MAIN_Routine+0x10c>)
 800a85a:	2206      	movs	r2, #6
 800a85c:	701a      	strb	r2, [r3, #0]
}
 800a85e:	e020      	b.n	800a8a2 <ModuleCAN_MAIN_Routine+0xfa>
	else if( TRUE == __GL.can.msgSelect.Flag.ID07 )
 800a860:	4b12      	ldr	r3, [pc, #72]	; (800a8ac <ModuleCAN_MAIN_Routine+0x104>)
 800a862:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800a866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d006      	beq.n	800a87e <ModuleCAN_MAIN_Routine+0xd6>
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_PROCESS;
 800a870:	4b0f      	ldr	r3, [pc, #60]	; (800a8b0 <ModuleCAN_MAIN_Routine+0x108>)
 800a872:	2202      	movs	r2, #2
 800a874:	701a      	strb	r2, [r3, #0]
		ModuleCAN_PROCESS_State	= ModuleCAN_PROCESS_State_MSG07;
 800a876:	4b0f      	ldr	r3, [pc, #60]	; (800a8b4 <ModuleCAN_MAIN_Routine+0x10c>)
 800a878:	2207      	movs	r2, #7
 800a87a:	701a      	strb	r2, [r3, #0]
}
 800a87c:	e011      	b.n	800a8a2 <ModuleCAN_MAIN_Routine+0xfa>
	else if( TRUE == __GL.can.msgSelect.Flag.ID08 )
 800a87e:	4b0b      	ldr	r3, [pc, #44]	; (800a8ac <ModuleCAN_MAIN_Routine+0x104>)
 800a880:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800a884:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d006      	beq.n	800a89c <ModuleCAN_MAIN_Routine+0xf4>
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_PROCESS;
 800a88e:	4b08      	ldr	r3, [pc, #32]	; (800a8b0 <ModuleCAN_MAIN_Routine+0x108>)
 800a890:	2202      	movs	r2, #2
 800a892:	701a      	strb	r2, [r3, #0]
		ModuleCAN_PROCESS_State	= ModuleCAN_PROCESS_State_MSG08;
 800a894:	4b07      	ldr	r3, [pc, #28]	; (800a8b4 <ModuleCAN_MAIN_Routine+0x10c>)
 800a896:	2208      	movs	r2, #8
 800a898:	701a      	strb	r2, [r3, #0]
}
 800a89a:	e002      	b.n	800a8a2 <ModuleCAN_MAIN_Routine+0xfa>
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_SUSPEND;
 800a89c:	4b04      	ldr	r3, [pc, #16]	; (800a8b0 <ModuleCAN_MAIN_Routine+0x108>)
 800a89e:	2203      	movs	r2, #3
 800a8a0:	701a      	strb	r2, [r3, #0]
}
 800a8a2:	bf00      	nop
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr
 800a8ac:	20000074 	.word	0x20000074
 800a8b0:	2000c1b3 	.word	0x2000c1b3
 800a8b4:	2000c1b4 	.word	0x2000c1b4

0800a8b8 <ModuleCAN_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCAN_MAIN_Process(void)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	af00      	add	r7, sp, #0
	switch( ModuleCAN_PROCESS_State )
 800a8bc:	4b7a      	ldr	r3, [pc, #488]	; (800aaa8 <ModuleCAN_MAIN_Process+0x1f0>)
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	2b09      	cmp	r3, #9
 800a8c2:	f200 80e6 	bhi.w	800aa92 <ModuleCAN_MAIN_Process+0x1da>
 800a8c6:	a201      	add	r2, pc, #4	; (adr r2, 800a8cc <ModuleCAN_MAIN_Process+0x14>)
 800a8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8cc:	0800aaa1 	.word	0x0800aaa1
 800a8d0:	0800a8f5 	.word	0x0800a8f5
 800a8d4:	0800a92b 	.word	0x0800a92b
 800a8d8:	0800a961 	.word	0x0800a961
 800a8dc:	0800a997 	.word	0x0800a997
 800a8e0:	0800a9cd 	.word	0x0800a9cd
 800a8e4:	0800aa03 	.word	0x0800aa03
 800a8e8:	0800aa39 	.word	0x0800aa39
 800a8ec:	0800aa6f 	.word	0x0800aa6f
 800a8f0:	0800aa85 	.word	0x0800aa85

	case ModuleCAN_PROCESS_State_IDLE  : break;

	case ModuleCAN_PROCESS_State_MSG01  :

		memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message03.payload[0] , 8);
 800a8f4:	2208      	movs	r2, #8
 800a8f6:	496d      	ldr	r1, [pc, #436]	; (800aaac <ModuleCAN_MAIN_Process+0x1f4>)
 800a8f8:	486d      	ldr	r0, [pc, #436]	; (800aab0 <ModuleCAN_MAIN_Process+0x1f8>)
 800a8fa:	f000 fb0b 	bl	800af14 <memcpy>
		protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message03_ID;
 800a8fe:	4b6d      	ldr	r3, [pc, #436]	; (800aab4 <ModuleCAN_MAIN_Process+0x1fc>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a6d      	ldr	r2, [pc, #436]	; (800aab8 <ModuleCAN_MAIN_Process+0x200>)
 800a904:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 800a908:	4b6b      	ldr	r3, [pc, #428]	; (800aab8 <ModuleCAN_MAIN_Process+0x200>)
 800a90a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800a90e:	2100      	movs	r1, #0
 800a910:	486a      	ldr	r0, [pc, #424]	; (800aabc <ModuleCAN_MAIN_Process+0x204>)
 800a912:	4798      	blx	r3

		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800a914:	4b64      	ldr	r3, [pc, #400]	; (800aaa8 <ModuleCAN_MAIN_Process+0x1f0>)
 800a916:	2209      	movs	r2, #9
 800a918:	701a      	strb	r2, [r3, #0]
		__GL.can.msgSelect.Flag.ID01 = FALSE;
 800a91a:	4a69      	ldr	r2, [pc, #420]	; (800aac0 <ModuleCAN_MAIN_Process+0x208>)
 800a91c:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 800a920:	f36f 0300 	bfc	r3, #0, #1
 800a924:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304

	break;
 800a928:	e0bb      	b.n	800aaa2 <ModuleCAN_MAIN_Process+0x1ea>

	case ModuleCAN_PROCESS_State_MSG02 :

		memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message04.payload[0] , 8);
 800a92a:	2208      	movs	r2, #8
 800a92c:	4965      	ldr	r1, [pc, #404]	; (800aac4 <ModuleCAN_MAIN_Process+0x20c>)
 800a92e:	4860      	ldr	r0, [pc, #384]	; (800aab0 <ModuleCAN_MAIN_Process+0x1f8>)
 800a930:	f000 faf0 	bl	800af14 <memcpy>
		protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message04_ID;
 800a934:	4b5f      	ldr	r3, [pc, #380]	; (800aab4 <ModuleCAN_MAIN_Process+0x1fc>)
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	4a5f      	ldr	r2, [pc, #380]	; (800aab8 <ModuleCAN_MAIN_Process+0x200>)
 800a93a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 800a93e:	4b5e      	ldr	r3, [pc, #376]	; (800aab8 <ModuleCAN_MAIN_Process+0x200>)
 800a940:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800a944:	2100      	movs	r1, #0
 800a946:	485d      	ldr	r0, [pc, #372]	; (800aabc <ModuleCAN_MAIN_Process+0x204>)
 800a948:	4798      	blx	r3

		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800a94a:	4b57      	ldr	r3, [pc, #348]	; (800aaa8 <ModuleCAN_MAIN_Process+0x1f0>)
 800a94c:	2209      	movs	r2, #9
 800a94e:	701a      	strb	r2, [r3, #0]
		__GL.can.msgSelect.Flag.ID02 = FALSE;
 800a950:	4a5b      	ldr	r2, [pc, #364]	; (800aac0 <ModuleCAN_MAIN_Process+0x208>)
 800a952:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 800a956:	f36f 0341 	bfc	r3, #1, #1
 800a95a:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304

	break;
 800a95e:	e0a0      	b.n	800aaa2 <ModuleCAN_MAIN_Process+0x1ea>

	case ModuleCAN_PROCESS_State_MSG03 :

		memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message05.payload[0] , 8);
 800a960:	2208      	movs	r2, #8
 800a962:	4959      	ldr	r1, [pc, #356]	; (800aac8 <ModuleCAN_MAIN_Process+0x210>)
 800a964:	4852      	ldr	r0, [pc, #328]	; (800aab0 <ModuleCAN_MAIN_Process+0x1f8>)
 800a966:	f000 fad5 	bl	800af14 <memcpy>
		protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message05_ID;
 800a96a:	4b52      	ldr	r3, [pc, #328]	; (800aab4 <ModuleCAN_MAIN_Process+0x1fc>)
 800a96c:	69db      	ldr	r3, [r3, #28]
 800a96e:	4a52      	ldr	r2, [pc, #328]	; (800aab8 <ModuleCAN_MAIN_Process+0x200>)
 800a970:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 800a974:	4b50      	ldr	r3, [pc, #320]	; (800aab8 <ModuleCAN_MAIN_Process+0x200>)
 800a976:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800a97a:	2100      	movs	r1, #0
 800a97c:	484f      	ldr	r0, [pc, #316]	; (800aabc <ModuleCAN_MAIN_Process+0x204>)
 800a97e:	4798      	blx	r3

		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800a980:	4b49      	ldr	r3, [pc, #292]	; (800aaa8 <ModuleCAN_MAIN_Process+0x1f0>)
 800a982:	2209      	movs	r2, #9
 800a984:	701a      	strb	r2, [r3, #0]
		__GL.can.msgSelect.Flag.ID03 = FALSE;
 800a986:	4a4e      	ldr	r2, [pc, #312]	; (800aac0 <ModuleCAN_MAIN_Process+0x208>)
 800a988:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 800a98c:	f36f 0382 	bfc	r3, #2, #1
 800a990:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304

	break;
 800a994:	e085      	b.n	800aaa2 <ModuleCAN_MAIN_Process+0x1ea>

	case ModuleCAN_PROCESS_State_MSG04 :

		memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message11.payload[0] , 8);
 800a996:	2208      	movs	r2, #8
 800a998:	494c      	ldr	r1, [pc, #304]	; (800aacc <ModuleCAN_MAIN_Process+0x214>)
 800a99a:	4845      	ldr	r0, [pc, #276]	; (800aab0 <ModuleCAN_MAIN_Process+0x1f8>)
 800a99c:	f000 faba 	bl	800af14 <memcpy>
		protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message11_ID;
 800a9a0:	4b44      	ldr	r3, [pc, #272]	; (800aab4 <ModuleCAN_MAIN_Process+0x1fc>)
 800a9a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9a4:	4a44      	ldr	r2, [pc, #272]	; (800aab8 <ModuleCAN_MAIN_Process+0x200>)
 800a9a6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 800a9aa:	4b43      	ldr	r3, [pc, #268]	; (800aab8 <ModuleCAN_MAIN_Process+0x200>)
 800a9ac:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	4842      	ldr	r0, [pc, #264]	; (800aabc <ModuleCAN_MAIN_Process+0x204>)
 800a9b4:	4798      	blx	r3

		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800a9b6:	4b3c      	ldr	r3, [pc, #240]	; (800aaa8 <ModuleCAN_MAIN_Process+0x1f0>)
 800a9b8:	2209      	movs	r2, #9
 800a9ba:	701a      	strb	r2, [r3, #0]
		__GL.can.msgSelect.Flag.ID04 = FALSE;
 800a9bc:	4a40      	ldr	r2, [pc, #256]	; (800aac0 <ModuleCAN_MAIN_Process+0x208>)
 800a9be:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 800a9c2:	f36f 03c3 	bfc	r3, #3, #1
 800a9c6:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304

	break;
 800a9ca:	e06a      	b.n	800aaa2 <ModuleCAN_MAIN_Process+0x1ea>

	case ModuleCAN_PROCESS_State_MSG05 :

		memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message12.payload[0] , 8);
 800a9cc:	2208      	movs	r2, #8
 800a9ce:	4940      	ldr	r1, [pc, #256]	; (800aad0 <ModuleCAN_MAIN_Process+0x218>)
 800a9d0:	4837      	ldr	r0, [pc, #220]	; (800aab0 <ModuleCAN_MAIN_Process+0x1f8>)
 800a9d2:	f000 fa9f 	bl	800af14 <memcpy>
		protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message12_ID;
 800a9d6:	4b37      	ldr	r3, [pc, #220]	; (800aab4 <ModuleCAN_MAIN_Process+0x1fc>)
 800a9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9da:	4a37      	ldr	r2, [pc, #220]	; (800aab8 <ModuleCAN_MAIN_Process+0x200>)
 800a9dc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 800a9e0:	4b35      	ldr	r3, [pc, #212]	; (800aab8 <ModuleCAN_MAIN_Process+0x200>)
 800a9e2:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	4834      	ldr	r0, [pc, #208]	; (800aabc <ModuleCAN_MAIN_Process+0x204>)
 800a9ea:	4798      	blx	r3

		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800a9ec:	4b2e      	ldr	r3, [pc, #184]	; (800aaa8 <ModuleCAN_MAIN_Process+0x1f0>)
 800a9ee:	2209      	movs	r2, #9
 800a9f0:	701a      	strb	r2, [r3, #0]
		__GL.can.msgSelect.Flag.ID05 = FALSE;
 800a9f2:	4a33      	ldr	r2, [pc, #204]	; (800aac0 <ModuleCAN_MAIN_Process+0x208>)
 800a9f4:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 800a9f8:	f36f 1304 	bfc	r3, #4, #1
 800a9fc:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304

	break;
 800aa00:	e04f      	b.n	800aaa2 <ModuleCAN_MAIN_Process+0x1ea>

	case ModuleCAN_PROCESS_State_MSG06 :

		memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message19.payload[0] , 8);
 800aa02:	2208      	movs	r2, #8
 800aa04:	4933      	ldr	r1, [pc, #204]	; (800aad4 <ModuleCAN_MAIN_Process+0x21c>)
 800aa06:	482a      	ldr	r0, [pc, #168]	; (800aab0 <ModuleCAN_MAIN_Process+0x1f8>)
 800aa08:	f000 fa84 	bl	800af14 <memcpy>
		protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message19_ID;
 800aa0c:	4b29      	ldr	r3, [pc, #164]	; (800aab4 <ModuleCAN_MAIN_Process+0x1fc>)
 800aa0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa10:	4a29      	ldr	r2, [pc, #164]	; (800aab8 <ModuleCAN_MAIN_Process+0x200>)
 800aa12:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 800aa16:	4b28      	ldr	r3, [pc, #160]	; (800aab8 <ModuleCAN_MAIN_Process+0x200>)
 800aa18:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800aa1c:	2100      	movs	r1, #0
 800aa1e:	4827      	ldr	r0, [pc, #156]	; (800aabc <ModuleCAN_MAIN_Process+0x204>)
 800aa20:	4798      	blx	r3

		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800aa22:	4b21      	ldr	r3, [pc, #132]	; (800aaa8 <ModuleCAN_MAIN_Process+0x1f0>)
 800aa24:	2209      	movs	r2, #9
 800aa26:	701a      	strb	r2, [r3, #0]
		__GL.can.msgSelect.Flag.ID06 = FALSE;
 800aa28:	4a25      	ldr	r2, [pc, #148]	; (800aac0 <ModuleCAN_MAIN_Process+0x208>)
 800aa2a:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 800aa2e:	f36f 1345 	bfc	r3, #5, #1
 800aa32:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304

	break;
 800aa36:	e034      	b.n	800aaa2 <ModuleCAN_MAIN_Process+0x1ea>

	case ModuleCAN_PROCESS_State_MSG07 :

		memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message20.payload[0] , 8);
 800aa38:	2208      	movs	r2, #8
 800aa3a:	4927      	ldr	r1, [pc, #156]	; (800aad8 <ModuleCAN_MAIN_Process+0x220>)
 800aa3c:	481c      	ldr	r0, [pc, #112]	; (800aab0 <ModuleCAN_MAIN_Process+0x1f8>)
 800aa3e:	f000 fa69 	bl	800af14 <memcpy>
		protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message20_ID;
 800aa42:	4b1c      	ldr	r3, [pc, #112]	; (800aab4 <ModuleCAN_MAIN_Process+0x1fc>)
 800aa44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa46:	4a1c      	ldr	r2, [pc, #112]	; (800aab8 <ModuleCAN_MAIN_Process+0x200>)
 800aa48:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 800aa4c:	4b1a      	ldr	r3, [pc, #104]	; (800aab8 <ModuleCAN_MAIN_Process+0x200>)
 800aa4e:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800aa52:	2100      	movs	r1, #0
 800aa54:	4819      	ldr	r0, [pc, #100]	; (800aabc <ModuleCAN_MAIN_Process+0x204>)
 800aa56:	4798      	blx	r3

		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800aa58:	4b13      	ldr	r3, [pc, #76]	; (800aaa8 <ModuleCAN_MAIN_Process+0x1f0>)
 800aa5a:	2209      	movs	r2, #9
 800aa5c:	701a      	strb	r2, [r3, #0]
		__GL.can.msgSelect.Flag.ID07 = FALSE;
 800aa5e:	4a18      	ldr	r2, [pc, #96]	; (800aac0 <ModuleCAN_MAIN_Process+0x208>)
 800aa60:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 800aa64:	f36f 1386 	bfc	r3, #6, #1
 800aa68:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304

	break;
 800aa6c:	e019      	b.n	800aaa2 <ModuleCAN_MAIN_Process+0x1ea>

	case ModuleCAN_PROCESS_State_MSG08 :

		/* NULL */
		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800aa6e:	4b0e      	ldr	r3, [pc, #56]	; (800aaa8 <ModuleCAN_MAIN_Process+0x1f0>)
 800aa70:	2209      	movs	r2, #9
 800aa72:	701a      	strb	r2, [r3, #0]
		__GL.can.msgSelect.Flag.ID08 = FALSE;
 800aa74:	4a12      	ldr	r2, [pc, #72]	; (800aac0 <ModuleCAN_MAIN_Process+0x208>)
 800aa76:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 800aa7a:	f36f 13c7 	bfc	r3, #7, #1
 800aa7e:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304

	break;
 800aa82:	e00e      	b.n	800aaa2 <ModuleCAN_MAIN_Process+0x1ea>

	case ModuleCAN_PROCESS_State_SUSPEND:

		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_IDLE;
 800aa84:	4b08      	ldr	r3, [pc, #32]	; (800aaa8 <ModuleCAN_MAIN_Process+0x1f0>)
 800aa86:	2200      	movs	r2, #0
 800aa88:	701a      	strb	r2, [r3, #0]
		ModuleCAN_MAIN_State	= ModuleCAN_MAIN_State_SUSPEND;
 800aa8a:	4b14      	ldr	r3, [pc, #80]	; (800aadc <ModuleCAN_MAIN_Process+0x224>)
 800aa8c:	2203      	movs	r2, #3
 800aa8e:	701a      	strb	r2, [r3, #0]
	break;
 800aa90:	e007      	b.n	800aaa2 <ModuleCAN_MAIN_Process+0x1ea>


	default:
		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800aa92:	4b05      	ldr	r3, [pc, #20]	; (800aaa8 <ModuleCAN_MAIN_Process+0x1f0>)
 800aa94:	2209      	movs	r2, #9
 800aa96:	701a      	strb	r2, [r3, #0]
		ModuleCAN_MAIN_State	= ModuleCAN_MAIN_State_SUSPEND;
 800aa98:	4b10      	ldr	r3, [pc, #64]	; (800aadc <ModuleCAN_MAIN_Process+0x224>)
 800aa9a:	2203      	movs	r2, #3
 800aa9c:	701a      	strb	r2, [r3, #0]
	break;
 800aa9e:	e000      	b.n	800aaa2 <ModuleCAN_MAIN_Process+0x1ea>
	case ModuleCAN_PROCESS_State_IDLE  : break;
 800aaa0:	bf00      	nop

	}

}
 800aaa2:	bf00      	nop
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	2000c1b4 	.word	0x2000c1b4
 800aaac:	2000142c 	.word	0x2000142c
 800aab0:	2000c09c 	.word	0x2000c09c
 800aab4:	20001428 	.word	0x20001428
 800aab8:	2000bffc 	.word	0x2000bffc
 800aabc:	2000c098 	.word	0x2000c098
 800aac0:	20000074 	.word	0x20000074
 800aac4:	20001438 	.word	0x20001438
 800aac8:	20001448 	.word	0x20001448
 800aacc:	20001458 	.word	0x20001458
 800aad0:	20001468 	.word	0x20001468
 800aad4:	20001478 	.word	0x20001478
 800aad8:	20001488 	.word	0x20001488
 800aadc:	2000c1b3 	.word	0x2000c1b3

0800aae0 <ModuleCAN_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleCAN_MAIN(void)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	af00      	add	r7, sp, #0
  while(1)
  {
	if( ModuleCAN_MAIN_State == ModuleCAN_MAIN_State_SUSPEND )
 800aae4:	4b11      	ldr	r3, [pc, #68]	; (800ab2c <ModuleCAN_MAIN+0x4c>)
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	2b03      	cmp	r3, #3
 800aaea:	d103      	bne.n	800aaf4 <ModuleCAN_MAIN+0x14>
	{
		ModuleCAN_MAIN_State = ModuleCAN_MAIN_State_IDLE;
 800aaec:	4b0f      	ldr	r3, [pc, #60]	; (800ab2c <ModuleCAN_MAIN+0x4c>)
 800aaee:	2200      	movs	r2, #0
 800aaf0:	701a      	strb	r2, [r3, #0]
		break;
 800aaf2:	e019      	b.n	800ab28 <ModuleCAN_MAIN+0x48>
	}

	switch(ModuleCAN_MAIN_State)
 800aaf4:	4b0d      	ldr	r3, [pc, #52]	; (800ab2c <ModuleCAN_MAIN+0x4c>)
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	2b02      	cmp	r3, #2
 800aafa:	d00d      	beq.n	800ab18 <ModuleCAN_MAIN+0x38>
 800aafc:	2b02      	cmp	r3, #2
 800aafe:	dc0e      	bgt.n	800ab1e <ModuleCAN_MAIN+0x3e>
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d002      	beq.n	800ab0a <ModuleCAN_MAIN+0x2a>
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d004      	beq.n	800ab12 <ModuleCAN_MAIN+0x32>
 800ab08:	e009      	b.n	800ab1e <ModuleCAN_MAIN+0x3e>
#if defined(SPI2CAN_Protocol)
	    	/* Check Can FIFO's each 10 ms semph relases */
	    	EEM_PERIODIC(&protocol.obj.canPacket);
#endif

	    	ModuleCAN_MAIN_State = ModuleCAN_MAIN_State_ROUTINE;
 800ab0a:	4b08      	ldr	r3, [pc, #32]	; (800ab2c <ModuleCAN_MAIN+0x4c>)
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	701a      	strb	r2, [r3, #0]
	    break;
 800ab10:	e009      	b.n	800ab26 <ModuleCAN_MAIN+0x46>

	    case ModuleCAN_MAIN_State_ROUTINE:

	    	ModuleCAN_MAIN_Routine();
 800ab12:	f7ff fe49 	bl	800a7a8 <ModuleCAN_MAIN_Routine>
	    break;
 800ab16:	e006      	b.n	800ab26 <ModuleCAN_MAIN+0x46>

	    case ModuleCAN_MAIN_State_PROCESS:

	    	ModuleCAN_MAIN_Process();
 800ab18:	f7ff fece 	bl	800a8b8 <ModuleCAN_MAIN_Process>

	    break;
 800ab1c:	e003      	b.n	800ab26 <ModuleCAN_MAIN+0x46>

	    default:
	    	ModuleCAN_MAIN_State = ModuleCAN_MAIN_State_SUSPEND;
 800ab1e:	4b03      	ldr	r3, [pc, #12]	; (800ab2c <ModuleCAN_MAIN+0x4c>)
 800ab20:	2203      	movs	r2, #3
 800ab22:	701a      	strb	r2, [r3, #0]
	    break;
 800ab24:	bf00      	nop
	if( ModuleCAN_MAIN_State == ModuleCAN_MAIN_State_SUSPEND )
 800ab26:	e7dd      	b.n	800aae4 <ModuleCAN_MAIN+0x4>
	}
  }
}
 800ab28:	bf00      	nop
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	2000c1b3 	.word	0x2000c1b3

0800ab30 <ModuleCONTROL_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleCONTROL_HWInit(void)
{
 800ab30:	b480      	push	{r7}
 800ab32:	af00      	add	r7, sp, #0

}
 800ab34:	bf00      	nop
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr

0800ab3e <ModuleCONTROL_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCONTROL_SWInit(void)
{
 800ab3e:	b480      	push	{r7}
 800ab40:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait yazilimsal init fonksiyonları
}
 800ab42:	bf00      	nop
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <ModuleCONTROL_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCONTROL_StartUP(void)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	af00      	add	r7, sp, #0
	ModuleCONTROL_HWInit();
 800ab50:	f7ff ffee 	bl	800ab30 <ModuleCONTROL_HWInit>
	ModuleCONTROL_SWInit();
 800ab54:	f7ff fff3 	bl	800ab3e <ModuleCONTROL_SWInit>
}
 800ab58:	bf00      	nop
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <ModuleCONTROL_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleCONTROL_MAIN_Routine(void)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	af00      	add	r7, sp, #0

}
 800ab60:	bf00      	nop
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr

0800ab6a <ModuleCONTROL_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCONTROL_MAIN_Process(void)
{
 800ab6a:	b480      	push	{r7}
 800ab6c:	af00      	add	r7, sp, #0

}
 800ab6e:	bf00      	nop
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <ModuleCONTROL_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleCONTROL_MAIN(void)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	af00      	add	r7, sp, #0

	switch(ModuleCONTROL_MAIN_State)
 800ab7c:	4b11      	ldr	r3, [pc, #68]	; (800abc4 <ModuleCONTROL_MAIN+0x4c>)
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	2b03      	cmp	r3, #3
 800ab82:	d818      	bhi.n	800abb6 <ModuleCONTROL_MAIN+0x3e>
 800ab84:	a201      	add	r2, pc, #4	; (adr r2, 800ab8c <ModuleCONTROL_MAIN+0x14>)
 800ab86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab8a:	bf00      	nop
 800ab8c:	0800ab9d 	.word	0x0800ab9d
 800ab90:	0800aba3 	.word	0x0800aba3
 800ab94:	0800aba9 	.word	0x0800aba9
 800ab98:	0800abaf 	.word	0x0800abaf
	{
	    case ModuleCONTROL_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleCONTROL_MAIN_State = ModuleCONTROL_MAIN_State_ROUTINE;
 800ab9c:	4b09      	ldr	r3, [pc, #36]	; (800abc4 <ModuleCONTROL_MAIN+0x4c>)
 800ab9e:	2201      	movs	r2, #1
 800aba0:	701a      	strb	r2, [r3, #0]


	    case ModuleCONTROL_MAIN_State_ROUTINE:

	    	ModuleCONTROL_MAIN_Routine();
 800aba2:	f7ff ffdb 	bl	800ab5c <ModuleCONTROL_MAIN_Routine>
	    break;
 800aba6:	e00a      	b.n	800abbe <ModuleCONTROL_MAIN+0x46>

	    case ModuleCONTROL_MAIN_State_PROCESS:

	    	ModuleCONTROL_MAIN_Process();
 800aba8:	f7ff ffdf 	bl	800ab6a <ModuleCONTROL_MAIN_Process>

	    break;
 800abac:	e007      	b.n	800abbe <ModuleCONTROL_MAIN+0x46>

	    case ModuleCONTROL_MAIN_State_SUSPEND:
	    	ModuleCONTROL_MAIN_State = ModuleCONTROL_MAIN_State_IDLE;
 800abae:	4b05      	ldr	r3, [pc, #20]	; (800abc4 <ModuleCONTROL_MAIN+0x4c>)
 800abb0:	2200      	movs	r2, #0
 800abb2:	701a      	strb	r2, [r3, #0]
	    break;
 800abb4:	e003      	b.n	800abbe <ModuleCONTROL_MAIN+0x46>

	    default:
	    	ModuleCONTROL_MAIN_State = ModuleCONTROL_MAIN_State_SUSPEND;
 800abb6:	4b03      	ldr	r3, [pc, #12]	; (800abc4 <ModuleCONTROL_MAIN+0x4c>)
 800abb8:	2203      	movs	r2, #3
 800abba:	701a      	strb	r2, [r3, #0]
	    break;
 800abbc:	bf00      	nop

	}

}
 800abbe:	bf00      	nop
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	2000c1b5 	.word	0x2000c1b5

0800abc8 <ModuleFLASH_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleFLASH_HWInit(void)
{
 800abc8:	b480      	push	{r7}
 800abca:	af00      	add	r7, sp, #0
	
}
 800abcc:	bf00      	nop
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr

0800abd6 <ModuleFLASH_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleFLASH_SWInit(void)
{
 800abd6:	b480      	push	{r7}
 800abd8:	af00      	add	r7, sp, #0
	
}
 800abda:	bf00      	nop
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <ModuleFLASH_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleFLASH_StartUP(void)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	af00      	add	r7, sp, #0
	ModuleFLASH_HWInit();
 800abe8:	f7ff ffee 	bl	800abc8 <ModuleFLASH_HWInit>
	ModuleFLASH_SWInit();
 800abec:	f7ff fff3 	bl	800abd6 <ModuleFLASH_SWInit>
}
 800abf0:	bf00      	nop
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <ModuleFLASH_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleFLASH_MAIN_Routine(void)
{
 800abf4:	b480      	push	{r7}
 800abf6:	af00      	add	r7, sp, #0

}
 800abf8:	bf00      	nop
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr

0800ac02 <ModuleFLASH_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleFLASH_MAIN_Process(void)
{
 800ac02:	b480      	push	{r7}
 800ac04:	af00      	add	r7, sp, #0

}
 800ac06:	bf00      	nop
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr

0800ac10 <ModuleFLASH_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleFLASH_MAIN(void)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	af00      	add	r7, sp, #0

	switch(ModuleFLASH_MAIN_State)
 800ac14:	4b11      	ldr	r3, [pc, #68]	; (800ac5c <ModuleFLASH_MAIN+0x4c>)
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	2b03      	cmp	r3, #3
 800ac1a:	d819      	bhi.n	800ac50 <ModuleFLASH_MAIN+0x40>
 800ac1c:	a201      	add	r2, pc, #4	; (adr r2, 800ac24 <ModuleFLASH_MAIN+0x14>)
 800ac1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac22:	bf00      	nop
 800ac24:	0800ac35 	.word	0x0800ac35
 800ac28:	0800ac3d 	.word	0x0800ac3d
 800ac2c:	0800ac43 	.word	0x0800ac43
 800ac30:	0800ac49 	.word	0x0800ac49
	{
	    case ModuleFLASH_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleFLASH_MAIN_State = ModuleFLASH_MAIN_State_ROUTINE;
 800ac34:	4b09      	ldr	r3, [pc, #36]	; (800ac5c <ModuleFLASH_MAIN+0x4c>)
 800ac36:	2201      	movs	r2, #1
 800ac38:	701a      	strb	r2, [r3, #0]
	    break;
 800ac3a:	e00d      	b.n	800ac58 <ModuleFLASH_MAIN+0x48>

	    case ModuleFLASH_MAIN_State_ROUTINE:

	    	ModuleFLASH_MAIN_Routine();
 800ac3c:	f7ff ffda 	bl	800abf4 <ModuleFLASH_MAIN_Routine>
	    break;
 800ac40:	e00a      	b.n	800ac58 <ModuleFLASH_MAIN+0x48>

	    case ModuleFLASH_MAIN_State_PROCESS:

	    	ModuleFLASH_MAIN_Process();
 800ac42:	f7ff ffde 	bl	800ac02 <ModuleFLASH_MAIN_Process>

	    break;
 800ac46:	e007      	b.n	800ac58 <ModuleFLASH_MAIN+0x48>

	    case ModuleFLASH_MAIN_State_SUSPEND:
	    	ModuleFLASH_MAIN_State = ModuleFLASH_MAIN_State_IDLE;
 800ac48:	4b04      	ldr	r3, [pc, #16]	; (800ac5c <ModuleFLASH_MAIN+0x4c>)
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	701a      	strb	r2, [r3, #0]
	    break;
 800ac4e:	e003      	b.n	800ac58 <ModuleFLASH_MAIN+0x48>

	    default:
	    	ModuleFLASH_MAIN_State = ModuleFLASH_MAIN_State_SUSPEND;
 800ac50:	4b02      	ldr	r3, [pc, #8]	; (800ac5c <ModuleFLASH_MAIN+0x4c>)
 800ac52:	2203      	movs	r2, #3
 800ac54:	701a      	strb	r2, [r3, #0]
	    break;
 800ac56:	bf00      	nop

	}

}
 800ac58:	bf00      	nop
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	2000c1b6 	.word	0x2000c1b6

0800ac60 <ModulePOWERSWITCH_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModulePOWERSWITCH_HWInit(void)
{
 800ac60:	b480      	push	{r7}
 800ac62:	af00      	add	r7, sp, #0
	
}
 800ac64:	bf00      	nop
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr

0800ac6e <ModulePOWERSWITCH_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModulePOWERSWITCH_SWInit(void)
{
 800ac6e:	b480      	push	{r7}
 800ac70:	af00      	add	r7, sp, #0
	
}
 800ac72:	bf00      	nop
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <ModulePOWERSWITCH_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModulePOWERSWITCH_StartUP(void)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	af00      	add	r7, sp, #0
	ModulePOWERSWITCH_HWInit();
 800ac80:	f7ff ffee 	bl	800ac60 <ModulePOWERSWITCH_HWInit>
	ModulePOWERSWITCH_SWInit();
 800ac84:	f7ff fff3 	bl	800ac6e <ModulePOWERSWITCH_SWInit>
}
 800ac88:	bf00      	nop
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <ModulePOWERSWITCH_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModulePOWERSWITCH_MAIN_Routine(void)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	af00      	add	r7, sp, #0

}
 800ac90:	bf00      	nop
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr

0800ac9a <ModulePOWERSWITCH_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModulePOWERSWITCH_MAIN_Process(void)
{
 800ac9a:	b480      	push	{r7}
 800ac9c:	af00      	add	r7, sp, #0

}
 800ac9e:	bf00      	nop
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <ModulePOWERSWITCH_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModulePOWERSWITCH_MAIN(void)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	af00      	add	r7, sp, #0

	switch(ModulePOWERSWITCH_MAIN_State)
 800acac:	4b11      	ldr	r3, [pc, #68]	; (800acf4 <ModulePOWERSWITCH_MAIN+0x4c>)
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	2b03      	cmp	r3, #3
 800acb2:	d819      	bhi.n	800ace8 <ModulePOWERSWITCH_MAIN+0x40>
 800acb4:	a201      	add	r2, pc, #4	; (adr r2, 800acbc <ModulePOWERSWITCH_MAIN+0x14>)
 800acb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acba:	bf00      	nop
 800acbc:	0800accd 	.word	0x0800accd
 800acc0:	0800acd5 	.word	0x0800acd5
 800acc4:	0800acdb 	.word	0x0800acdb
 800acc8:	0800ace1 	.word	0x0800ace1
	{
	    case ModulePOWERSWITCH_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModulePOWERSWITCH_MAIN_State = ModulePOWERSWITCH_MAIN_State_ROUTINE;
 800accc:	4b09      	ldr	r3, [pc, #36]	; (800acf4 <ModulePOWERSWITCH_MAIN+0x4c>)
 800acce:	2201      	movs	r2, #1
 800acd0:	701a      	strb	r2, [r3, #0]
	    break;
 800acd2:	e00d      	b.n	800acf0 <ModulePOWERSWITCH_MAIN+0x48>

	    case ModulePOWERSWITCH_MAIN_State_ROUTINE:

	    	ModulePOWERSWITCH_MAIN_Routine();
 800acd4:	f7ff ffda 	bl	800ac8c <ModulePOWERSWITCH_MAIN_Routine>
	    break;
 800acd8:	e00a      	b.n	800acf0 <ModulePOWERSWITCH_MAIN+0x48>

	    case ModulePOWERSWITCH_MAIN_State_PROCESS:

	    	ModulePOWERSWITCH_MAIN_Process();
 800acda:	f7ff ffde 	bl	800ac9a <ModulePOWERSWITCH_MAIN_Process>

	    break;
 800acde:	e007      	b.n	800acf0 <ModulePOWERSWITCH_MAIN+0x48>

	    case ModulePOWERSWITCH_MAIN_State_SUSPEND:
	    	ModulePOWERSWITCH_MAIN_State = ModulePOWERSWITCH_MAIN_State_IDLE;
 800ace0:	4b04      	ldr	r3, [pc, #16]	; (800acf4 <ModulePOWERSWITCH_MAIN+0x4c>)
 800ace2:	2200      	movs	r2, #0
 800ace4:	701a      	strb	r2, [r3, #0]
	    break;
 800ace6:	e003      	b.n	800acf0 <ModulePOWERSWITCH_MAIN+0x48>

	    default:
	    	ModulePOWERSWITCH_MAIN_State = ModulePOWERSWITCH_MAIN_State_SUSPEND;
 800ace8:	4b02      	ldr	r3, [pc, #8]	; (800acf4 <ModulePOWERSWITCH_MAIN+0x4c>)
 800acea:	2203      	movs	r2, #3
 800acec:	701a      	strb	r2, [r3, #0]
	    break;
 800acee:	bf00      	nop

	}

}
 800acf0:	bf00      	nop
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	2000c1b7 	.word	0x2000c1b7

0800acf8 <ModuleRTC_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleRTC_HWInit(void)
{
 800acf8:	b480      	push	{r7}
 800acfa:	af00      	add	r7, sp, #0

}
 800acfc:	bf00      	nop
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr

0800ad06 <ModuleRTC_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleRTC_SWInit(void)
{
 800ad06:	b480      	push	{r7}
 800ad08:	af00      	add	r7, sp, #0
	
}
 800ad0a:	bf00      	nop
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <ModuleRTC_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleRTC_StartUP(void)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	af00      	add	r7, sp, #0
	ModuleRTC_HWInit();
 800ad18:	f7ff ffee 	bl	800acf8 <ModuleRTC_HWInit>
	ModuleRTC_SWInit();
 800ad1c:	f7ff fff3 	bl	800ad06 <ModuleRTC_SWInit>
}
 800ad20:	bf00      	nop
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <ModuleRTC_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleRTC_MAIN_Routine(void)
{
 800ad24:	b480      	push	{r7}
 800ad26:	af00      	add	r7, sp, #0

}
 800ad28:	bf00      	nop
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr

0800ad32 <ModuleRTC_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleRTC_MAIN_Process(void)
{
 800ad32:	b480      	push	{r7}
 800ad34:	af00      	add	r7, sp, #0

}
 800ad36:	bf00      	nop
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <ModuleRTC_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleRTC_MAIN(void)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	af00      	add	r7, sp, #0
	switch(ModuleRTC_MAIN_State)
 800ad44:	4b11      	ldr	r3, [pc, #68]	; (800ad8c <ModuleRTC_MAIN+0x4c>)
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	2b03      	cmp	r3, #3
 800ad4a:	d819      	bhi.n	800ad80 <ModuleRTC_MAIN+0x40>
 800ad4c:	a201      	add	r2, pc, #4	; (adr r2, 800ad54 <ModuleRTC_MAIN+0x14>)
 800ad4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad52:	bf00      	nop
 800ad54:	0800ad65 	.word	0x0800ad65
 800ad58:	0800ad6d 	.word	0x0800ad6d
 800ad5c:	0800ad73 	.word	0x0800ad73
 800ad60:	0800ad79 	.word	0x0800ad79
	{
	    case ModuleRTC_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleRTC_MAIN_State = ModuleRTC_MAIN_State_ROUTINE;
 800ad64:	4b09      	ldr	r3, [pc, #36]	; (800ad8c <ModuleRTC_MAIN+0x4c>)
 800ad66:	2201      	movs	r2, #1
 800ad68:	701a      	strb	r2, [r3, #0]
	    break;
 800ad6a:	e00d      	b.n	800ad88 <ModuleRTC_MAIN+0x48>

	    case ModuleRTC_MAIN_State_ROUTINE:

	    	ModuleRTC_MAIN_Routine();
 800ad6c:	f7ff ffda 	bl	800ad24 <ModuleRTC_MAIN_Routine>
	    break;
 800ad70:	e00a      	b.n	800ad88 <ModuleRTC_MAIN+0x48>

	    case ModuleRTC_MAIN_State_PROCESS:

	    	ModuleRTC_MAIN_Process();
 800ad72:	f7ff ffde 	bl	800ad32 <ModuleRTC_MAIN_Process>

	    break;
 800ad76:	e007      	b.n	800ad88 <ModuleRTC_MAIN+0x48>

	    case ModuleRTC_MAIN_State_SUSPEND:
	    	ModuleRTC_MAIN_State = ModuleRTC_MAIN_State_IDLE;
 800ad78:	4b04      	ldr	r3, [pc, #16]	; (800ad8c <ModuleRTC_MAIN+0x4c>)
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	701a      	strb	r2, [r3, #0]
	    break;
 800ad7e:	e003      	b.n	800ad88 <ModuleRTC_MAIN+0x48>

	    default:
	    	ModuleRTC_MAIN_State = ModuleRTC_MAIN_State_SUSPEND;
 800ad80:	4b02      	ldr	r3, [pc, #8]	; (800ad8c <ModuleRTC_MAIN+0x4c>)
 800ad82:	2203      	movs	r2, #3
 800ad84:	701a      	strb	r2, [r3, #0]
	    break;
 800ad86:	bf00      	nop

	}
}
 800ad88:	bf00      	nop
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	2000c1b8 	.word	0x2000c1b8

0800ad90 <ModuleSDCARD_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleSDCARD_HWInit(void)
{
 800ad90:	b480      	push	{r7}
 800ad92:	af00      	add	r7, sp, #0

}
 800ad94:	bf00      	nop
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr

0800ad9e <ModuleSDCARD_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleSDCARD_SWInit(void)
{
 800ad9e:	b480      	push	{r7}
 800ada0:	af00      	add	r7, sp, #0
	
}
 800ada2:	bf00      	nop
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <ModuleSDCARD_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleSDCARD_StartUP(void)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	af00      	add	r7, sp, #0
	ModuleSDCARD_HWInit();
 800adb0:	f7ff ffee 	bl	800ad90 <ModuleSDCARD_HWInit>
	ModuleSDCARD_SWInit();
 800adb4:	f7ff fff3 	bl	800ad9e <ModuleSDCARD_SWInit>
}
 800adb8:	bf00      	nop
 800adba:	bd80      	pop	{r7, pc}

0800adbc <ModuleSDCARD_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleSDCARD_MAIN_Routine(void)
{
 800adbc:	b480      	push	{r7}
 800adbe:	af00      	add	r7, sp, #0

}
 800adc0:	bf00      	nop
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr

0800adca <ModuleSDCARD_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleSDCARD_MAIN_Process(void)
{
 800adca:	b480      	push	{r7}
 800adcc:	af00      	add	r7, sp, #0

}
 800adce:	bf00      	nop
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <ModuleSDCARD_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleSDCARD_MAIN(void)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	af00      	add	r7, sp, #0
	switch(ModuleSDCARD_MAIN_State)
 800addc:	4b11      	ldr	r3, [pc, #68]	; (800ae24 <ModuleSDCARD_MAIN+0x4c>)
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	2b03      	cmp	r3, #3
 800ade2:	d819      	bhi.n	800ae18 <ModuleSDCARD_MAIN+0x40>
 800ade4:	a201      	add	r2, pc, #4	; (adr r2, 800adec <ModuleSDCARD_MAIN+0x14>)
 800ade6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adea:	bf00      	nop
 800adec:	0800adfd 	.word	0x0800adfd
 800adf0:	0800ae05 	.word	0x0800ae05
 800adf4:	0800ae0b 	.word	0x0800ae0b
 800adf8:	0800ae11 	.word	0x0800ae11
	{
	    case ModuleSDCARD_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleSDCARD_MAIN_State = ModuleSDCARD_MAIN_State_ROUTINE;
 800adfc:	4b09      	ldr	r3, [pc, #36]	; (800ae24 <ModuleSDCARD_MAIN+0x4c>)
 800adfe:	2201      	movs	r2, #1
 800ae00:	701a      	strb	r2, [r3, #0]
	    break;
 800ae02:	e00d      	b.n	800ae20 <ModuleSDCARD_MAIN+0x48>

	    case ModuleSDCARD_MAIN_State_ROUTINE:

	    	ModuleSDCARD_MAIN_Routine();
 800ae04:	f7ff ffda 	bl	800adbc <ModuleSDCARD_MAIN_Routine>
	    break;
 800ae08:	e00a      	b.n	800ae20 <ModuleSDCARD_MAIN+0x48>

	    case ModuleSDCARD_MAIN_State_PROCESS:

	    	ModuleSDCARD_MAIN_Process();
 800ae0a:	f7ff ffde 	bl	800adca <ModuleSDCARD_MAIN_Process>

	    break;
 800ae0e:	e007      	b.n	800ae20 <ModuleSDCARD_MAIN+0x48>

	    case ModuleSDCARD_MAIN_State_SUSPEND:
	    	ModuleSDCARD_MAIN_State = ModuleSDCARD_MAIN_State_IDLE;
 800ae10:	4b04      	ldr	r3, [pc, #16]	; (800ae24 <ModuleSDCARD_MAIN+0x4c>)
 800ae12:	2200      	movs	r2, #0
 800ae14:	701a      	strb	r2, [r3, #0]
	    break;
 800ae16:	e003      	b.n	800ae20 <ModuleSDCARD_MAIN+0x48>

	    default:
	    	ModuleSDCARD_MAIN_State = ModuleSDCARD_MAIN_State_SUSPEND;
 800ae18:	4b02      	ldr	r3, [pc, #8]	; (800ae24 <ModuleSDCARD_MAIN+0x4c>)
 800ae1a:	2203      	movs	r2, #3
 800ae1c:	701a      	strb	r2, [r3, #0]
	    break;
 800ae1e:	bf00      	nop

	}
}
 800ae20:	bf00      	nop
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	2000c1b9 	.word	0x2000c1b9

0800ae28 <ModuleTELEMETRY_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleTELEMETRY_HWInit(void)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	af00      	add	r7, sp, #0
	
}
 800ae2c:	bf00      	nop
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr

0800ae36 <ModuleTELEMETRY_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleTELEMETRY_SWInit(void)
{
 800ae36:	b480      	push	{r7}
 800ae38:	af00      	add	r7, sp, #0
	
}
 800ae3a:	bf00      	nop
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <ModuleTELEMETRY_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleTELEMETRY_StartUP(void)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	af00      	add	r7, sp, #0
	ModuleTELEMETRY_HWInit();
 800ae48:	f7ff ffee 	bl	800ae28 <ModuleTELEMETRY_HWInit>
	ModuleTELEMETRY_SWInit();
 800ae4c:	f7ff fff3 	bl	800ae36 <ModuleTELEMETRY_SWInit>
}
 800ae50:	bf00      	nop
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <ModuleTELEMETRY_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleTELEMETRY_MAIN_Routine(void)
{
 800ae54:	b480      	push	{r7}
 800ae56:	af00      	add	r7, sp, #0

}
 800ae58:	bf00      	nop
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr

0800ae62 <ModuleTELEMETRY_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleTELEMETRY_MAIN_Process(void)
{
 800ae62:	b480      	push	{r7}
 800ae64:	af00      	add	r7, sp, #0

}
 800ae66:	bf00      	nop
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <ModuleTELEMETRY_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleTELEMETRY_MAIN(void)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	af00      	add	r7, sp, #0

	switch(ModuleTELEMETRY_MAIN_State)
 800ae74:	4b11      	ldr	r3, [pc, #68]	; (800aebc <ModuleTELEMETRY_MAIN+0x4c>)
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	2b03      	cmp	r3, #3
 800ae7a:	d819      	bhi.n	800aeb0 <ModuleTELEMETRY_MAIN+0x40>
 800ae7c:	a201      	add	r2, pc, #4	; (adr r2, 800ae84 <ModuleTELEMETRY_MAIN+0x14>)
 800ae7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae82:	bf00      	nop
 800ae84:	0800ae95 	.word	0x0800ae95
 800ae88:	0800ae9d 	.word	0x0800ae9d
 800ae8c:	0800aea3 	.word	0x0800aea3
 800ae90:	0800aea9 	.word	0x0800aea9
	{
	    case ModuleTELEMETRY_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleTELEMETRY_MAIN_State = ModuleTELEMETRY_MAIN_State_ROUTINE;
 800ae94:	4b09      	ldr	r3, [pc, #36]	; (800aebc <ModuleTELEMETRY_MAIN+0x4c>)
 800ae96:	2201      	movs	r2, #1
 800ae98:	701a      	strb	r2, [r3, #0]
	    break;
 800ae9a:	e00d      	b.n	800aeb8 <ModuleTELEMETRY_MAIN+0x48>

	    case ModuleTELEMETRY_MAIN_State_ROUTINE:

	    	ModuleTELEMETRY_MAIN_Routine();
 800ae9c:	f7ff ffda 	bl	800ae54 <ModuleTELEMETRY_MAIN_Routine>
	    break;
 800aea0:	e00a      	b.n	800aeb8 <ModuleTELEMETRY_MAIN+0x48>

	    case ModuleTELEMETRY_MAIN_State_PROCESS:

	    	ModuleTELEMETRY_MAIN_Process();
 800aea2:	f7ff ffde 	bl	800ae62 <ModuleTELEMETRY_MAIN_Process>

	    break;
 800aea6:	e007      	b.n	800aeb8 <ModuleTELEMETRY_MAIN+0x48>

	    case ModuleTELEMETRY_MAIN_State_SUSPEND:
	    	ModuleTELEMETRY_MAIN_State = ModuleTELEMETRY_MAIN_State_IDLE;
 800aea8:	4b04      	ldr	r3, [pc, #16]	; (800aebc <ModuleTELEMETRY_MAIN+0x4c>)
 800aeaa:	2200      	movs	r2, #0
 800aeac:	701a      	strb	r2, [r3, #0]
	    break;
 800aeae:	e003      	b.n	800aeb8 <ModuleTELEMETRY_MAIN+0x48>

	    default:
	    	ModuleTELEMETRY_MAIN_State = ModuleTELEMETRY_MAIN_State_SUSPEND;
 800aeb0:	4b02      	ldr	r3, [pc, #8]	; (800aebc <ModuleTELEMETRY_MAIN+0x4c>)
 800aeb2:	2203      	movs	r2, #3
 800aeb4:	701a      	strb	r2, [r3, #0]
	    break;
 800aeb6:	bf00      	nop

	}

}
 800aeb8:	bf00      	nop
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	2000c1ba 	.word	0x2000c1ba

0800aec0 <__errno>:
 800aec0:	4b01      	ldr	r3, [pc, #4]	; (800aec8 <__errno+0x8>)
 800aec2:	6818      	ldr	r0, [r3, #0]
 800aec4:	4770      	bx	lr
 800aec6:	bf00      	nop
 800aec8:	20000010 	.word	0x20000010

0800aecc <__libc_init_array>:
 800aecc:	b570      	push	{r4, r5, r6, lr}
 800aece:	4d0d      	ldr	r5, [pc, #52]	; (800af04 <__libc_init_array+0x38>)
 800aed0:	4c0d      	ldr	r4, [pc, #52]	; (800af08 <__libc_init_array+0x3c>)
 800aed2:	1b64      	subs	r4, r4, r5
 800aed4:	10a4      	asrs	r4, r4, #2
 800aed6:	2600      	movs	r6, #0
 800aed8:	42a6      	cmp	r6, r4
 800aeda:	d109      	bne.n	800aef0 <__libc_init_array+0x24>
 800aedc:	4d0b      	ldr	r5, [pc, #44]	; (800af0c <__libc_init_array+0x40>)
 800aede:	4c0c      	ldr	r4, [pc, #48]	; (800af10 <__libc_init_array+0x44>)
 800aee0:	f000 fc8e 	bl	800b800 <_init>
 800aee4:	1b64      	subs	r4, r4, r5
 800aee6:	10a4      	asrs	r4, r4, #2
 800aee8:	2600      	movs	r6, #0
 800aeea:	42a6      	cmp	r6, r4
 800aeec:	d105      	bne.n	800aefa <__libc_init_array+0x2e>
 800aeee:	bd70      	pop	{r4, r5, r6, pc}
 800aef0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aef4:	4798      	blx	r3
 800aef6:	3601      	adds	r6, #1
 800aef8:	e7ee      	b.n	800aed8 <__libc_init_array+0xc>
 800aefa:	f855 3b04 	ldr.w	r3, [r5], #4
 800aefe:	4798      	blx	r3
 800af00:	3601      	adds	r6, #1
 800af02:	e7f2      	b.n	800aeea <__libc_init_array+0x1e>
 800af04:	0800bc90 	.word	0x0800bc90
 800af08:	0800bc90 	.word	0x0800bc90
 800af0c:	0800bc90 	.word	0x0800bc90
 800af10:	0800bc94 	.word	0x0800bc94

0800af14 <memcpy>:
 800af14:	440a      	add	r2, r1
 800af16:	4291      	cmp	r1, r2
 800af18:	f100 33ff 	add.w	r3, r0, #4294967295
 800af1c:	d100      	bne.n	800af20 <memcpy+0xc>
 800af1e:	4770      	bx	lr
 800af20:	b510      	push	{r4, lr}
 800af22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af2a:	4291      	cmp	r1, r2
 800af2c:	d1f9      	bne.n	800af22 <memcpy+0xe>
 800af2e:	bd10      	pop	{r4, pc}

0800af30 <memset>:
 800af30:	4402      	add	r2, r0
 800af32:	4603      	mov	r3, r0
 800af34:	4293      	cmp	r3, r2
 800af36:	d100      	bne.n	800af3a <memset+0xa>
 800af38:	4770      	bx	lr
 800af3a:	f803 1b01 	strb.w	r1, [r3], #1
 800af3e:	e7f9      	b.n	800af34 <memset+0x4>

0800af40 <siprintf>:
 800af40:	b40e      	push	{r1, r2, r3}
 800af42:	b500      	push	{lr}
 800af44:	b09c      	sub	sp, #112	; 0x70
 800af46:	ab1d      	add	r3, sp, #116	; 0x74
 800af48:	9002      	str	r0, [sp, #8]
 800af4a:	9006      	str	r0, [sp, #24]
 800af4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800af50:	4809      	ldr	r0, [pc, #36]	; (800af78 <siprintf+0x38>)
 800af52:	9107      	str	r1, [sp, #28]
 800af54:	9104      	str	r1, [sp, #16]
 800af56:	4909      	ldr	r1, [pc, #36]	; (800af7c <siprintf+0x3c>)
 800af58:	f853 2b04 	ldr.w	r2, [r3], #4
 800af5c:	9105      	str	r1, [sp, #20]
 800af5e:	6800      	ldr	r0, [r0, #0]
 800af60:	9301      	str	r3, [sp, #4]
 800af62:	a902      	add	r1, sp, #8
 800af64:	f000 f868 	bl	800b038 <_svfiprintf_r>
 800af68:	9b02      	ldr	r3, [sp, #8]
 800af6a:	2200      	movs	r2, #0
 800af6c:	701a      	strb	r2, [r3, #0]
 800af6e:	b01c      	add	sp, #112	; 0x70
 800af70:	f85d eb04 	ldr.w	lr, [sp], #4
 800af74:	b003      	add	sp, #12
 800af76:	4770      	bx	lr
 800af78:	20000010 	.word	0x20000010
 800af7c:	ffff0208 	.word	0xffff0208

0800af80 <__ssputs_r>:
 800af80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af84:	688e      	ldr	r6, [r1, #8]
 800af86:	429e      	cmp	r6, r3
 800af88:	4682      	mov	sl, r0
 800af8a:	460c      	mov	r4, r1
 800af8c:	4690      	mov	r8, r2
 800af8e:	461f      	mov	r7, r3
 800af90:	d838      	bhi.n	800b004 <__ssputs_r+0x84>
 800af92:	898a      	ldrh	r2, [r1, #12]
 800af94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af98:	d032      	beq.n	800b000 <__ssputs_r+0x80>
 800af9a:	6825      	ldr	r5, [r4, #0]
 800af9c:	6909      	ldr	r1, [r1, #16]
 800af9e:	eba5 0901 	sub.w	r9, r5, r1
 800afa2:	6965      	ldr	r5, [r4, #20]
 800afa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800afa8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800afac:	3301      	adds	r3, #1
 800afae:	444b      	add	r3, r9
 800afb0:	106d      	asrs	r5, r5, #1
 800afb2:	429d      	cmp	r5, r3
 800afb4:	bf38      	it	cc
 800afb6:	461d      	movcc	r5, r3
 800afb8:	0553      	lsls	r3, r2, #21
 800afba:	d531      	bpl.n	800b020 <__ssputs_r+0xa0>
 800afbc:	4629      	mov	r1, r5
 800afbe:	f000 fb55 	bl	800b66c <_malloc_r>
 800afc2:	4606      	mov	r6, r0
 800afc4:	b950      	cbnz	r0, 800afdc <__ssputs_r+0x5c>
 800afc6:	230c      	movs	r3, #12
 800afc8:	f8ca 3000 	str.w	r3, [sl]
 800afcc:	89a3      	ldrh	r3, [r4, #12]
 800afce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afd2:	81a3      	strh	r3, [r4, #12]
 800afd4:	f04f 30ff 	mov.w	r0, #4294967295
 800afd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afdc:	6921      	ldr	r1, [r4, #16]
 800afde:	464a      	mov	r2, r9
 800afe0:	f7ff ff98 	bl	800af14 <memcpy>
 800afe4:	89a3      	ldrh	r3, [r4, #12]
 800afe6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800afea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afee:	81a3      	strh	r3, [r4, #12]
 800aff0:	6126      	str	r6, [r4, #16]
 800aff2:	6165      	str	r5, [r4, #20]
 800aff4:	444e      	add	r6, r9
 800aff6:	eba5 0509 	sub.w	r5, r5, r9
 800affa:	6026      	str	r6, [r4, #0]
 800affc:	60a5      	str	r5, [r4, #8]
 800affe:	463e      	mov	r6, r7
 800b000:	42be      	cmp	r6, r7
 800b002:	d900      	bls.n	800b006 <__ssputs_r+0x86>
 800b004:	463e      	mov	r6, r7
 800b006:	6820      	ldr	r0, [r4, #0]
 800b008:	4632      	mov	r2, r6
 800b00a:	4641      	mov	r1, r8
 800b00c:	f000 faa8 	bl	800b560 <memmove>
 800b010:	68a3      	ldr	r3, [r4, #8]
 800b012:	1b9b      	subs	r3, r3, r6
 800b014:	60a3      	str	r3, [r4, #8]
 800b016:	6823      	ldr	r3, [r4, #0]
 800b018:	4433      	add	r3, r6
 800b01a:	6023      	str	r3, [r4, #0]
 800b01c:	2000      	movs	r0, #0
 800b01e:	e7db      	b.n	800afd8 <__ssputs_r+0x58>
 800b020:	462a      	mov	r2, r5
 800b022:	f000 fb97 	bl	800b754 <_realloc_r>
 800b026:	4606      	mov	r6, r0
 800b028:	2800      	cmp	r0, #0
 800b02a:	d1e1      	bne.n	800aff0 <__ssputs_r+0x70>
 800b02c:	6921      	ldr	r1, [r4, #16]
 800b02e:	4650      	mov	r0, sl
 800b030:	f000 fab0 	bl	800b594 <_free_r>
 800b034:	e7c7      	b.n	800afc6 <__ssputs_r+0x46>
	...

0800b038 <_svfiprintf_r>:
 800b038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b03c:	4698      	mov	r8, r3
 800b03e:	898b      	ldrh	r3, [r1, #12]
 800b040:	061b      	lsls	r3, r3, #24
 800b042:	b09d      	sub	sp, #116	; 0x74
 800b044:	4607      	mov	r7, r0
 800b046:	460d      	mov	r5, r1
 800b048:	4614      	mov	r4, r2
 800b04a:	d50e      	bpl.n	800b06a <_svfiprintf_r+0x32>
 800b04c:	690b      	ldr	r3, [r1, #16]
 800b04e:	b963      	cbnz	r3, 800b06a <_svfiprintf_r+0x32>
 800b050:	2140      	movs	r1, #64	; 0x40
 800b052:	f000 fb0b 	bl	800b66c <_malloc_r>
 800b056:	6028      	str	r0, [r5, #0]
 800b058:	6128      	str	r0, [r5, #16]
 800b05a:	b920      	cbnz	r0, 800b066 <_svfiprintf_r+0x2e>
 800b05c:	230c      	movs	r3, #12
 800b05e:	603b      	str	r3, [r7, #0]
 800b060:	f04f 30ff 	mov.w	r0, #4294967295
 800b064:	e0d1      	b.n	800b20a <_svfiprintf_r+0x1d2>
 800b066:	2340      	movs	r3, #64	; 0x40
 800b068:	616b      	str	r3, [r5, #20]
 800b06a:	2300      	movs	r3, #0
 800b06c:	9309      	str	r3, [sp, #36]	; 0x24
 800b06e:	2320      	movs	r3, #32
 800b070:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b074:	f8cd 800c 	str.w	r8, [sp, #12]
 800b078:	2330      	movs	r3, #48	; 0x30
 800b07a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b224 <_svfiprintf_r+0x1ec>
 800b07e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b082:	f04f 0901 	mov.w	r9, #1
 800b086:	4623      	mov	r3, r4
 800b088:	469a      	mov	sl, r3
 800b08a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b08e:	b10a      	cbz	r2, 800b094 <_svfiprintf_r+0x5c>
 800b090:	2a25      	cmp	r2, #37	; 0x25
 800b092:	d1f9      	bne.n	800b088 <_svfiprintf_r+0x50>
 800b094:	ebba 0b04 	subs.w	fp, sl, r4
 800b098:	d00b      	beq.n	800b0b2 <_svfiprintf_r+0x7a>
 800b09a:	465b      	mov	r3, fp
 800b09c:	4622      	mov	r2, r4
 800b09e:	4629      	mov	r1, r5
 800b0a0:	4638      	mov	r0, r7
 800b0a2:	f7ff ff6d 	bl	800af80 <__ssputs_r>
 800b0a6:	3001      	adds	r0, #1
 800b0a8:	f000 80aa 	beq.w	800b200 <_svfiprintf_r+0x1c8>
 800b0ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0ae:	445a      	add	r2, fp
 800b0b0:	9209      	str	r2, [sp, #36]	; 0x24
 800b0b2:	f89a 3000 	ldrb.w	r3, [sl]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	f000 80a2 	beq.w	800b200 <_svfiprintf_r+0x1c8>
 800b0bc:	2300      	movs	r3, #0
 800b0be:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0c6:	f10a 0a01 	add.w	sl, sl, #1
 800b0ca:	9304      	str	r3, [sp, #16]
 800b0cc:	9307      	str	r3, [sp, #28]
 800b0ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0d2:	931a      	str	r3, [sp, #104]	; 0x68
 800b0d4:	4654      	mov	r4, sl
 800b0d6:	2205      	movs	r2, #5
 800b0d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0dc:	4851      	ldr	r0, [pc, #324]	; (800b224 <_svfiprintf_r+0x1ec>)
 800b0de:	f7f5 f897 	bl	8000210 <memchr>
 800b0e2:	9a04      	ldr	r2, [sp, #16]
 800b0e4:	b9d8      	cbnz	r0, 800b11e <_svfiprintf_r+0xe6>
 800b0e6:	06d0      	lsls	r0, r2, #27
 800b0e8:	bf44      	itt	mi
 800b0ea:	2320      	movmi	r3, #32
 800b0ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0f0:	0711      	lsls	r1, r2, #28
 800b0f2:	bf44      	itt	mi
 800b0f4:	232b      	movmi	r3, #43	; 0x2b
 800b0f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0fa:	f89a 3000 	ldrb.w	r3, [sl]
 800b0fe:	2b2a      	cmp	r3, #42	; 0x2a
 800b100:	d015      	beq.n	800b12e <_svfiprintf_r+0xf6>
 800b102:	9a07      	ldr	r2, [sp, #28]
 800b104:	4654      	mov	r4, sl
 800b106:	2000      	movs	r0, #0
 800b108:	f04f 0c0a 	mov.w	ip, #10
 800b10c:	4621      	mov	r1, r4
 800b10e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b112:	3b30      	subs	r3, #48	; 0x30
 800b114:	2b09      	cmp	r3, #9
 800b116:	d94e      	bls.n	800b1b6 <_svfiprintf_r+0x17e>
 800b118:	b1b0      	cbz	r0, 800b148 <_svfiprintf_r+0x110>
 800b11a:	9207      	str	r2, [sp, #28]
 800b11c:	e014      	b.n	800b148 <_svfiprintf_r+0x110>
 800b11e:	eba0 0308 	sub.w	r3, r0, r8
 800b122:	fa09 f303 	lsl.w	r3, r9, r3
 800b126:	4313      	orrs	r3, r2
 800b128:	9304      	str	r3, [sp, #16]
 800b12a:	46a2      	mov	sl, r4
 800b12c:	e7d2      	b.n	800b0d4 <_svfiprintf_r+0x9c>
 800b12e:	9b03      	ldr	r3, [sp, #12]
 800b130:	1d19      	adds	r1, r3, #4
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	9103      	str	r1, [sp, #12]
 800b136:	2b00      	cmp	r3, #0
 800b138:	bfbb      	ittet	lt
 800b13a:	425b      	neglt	r3, r3
 800b13c:	f042 0202 	orrlt.w	r2, r2, #2
 800b140:	9307      	strge	r3, [sp, #28]
 800b142:	9307      	strlt	r3, [sp, #28]
 800b144:	bfb8      	it	lt
 800b146:	9204      	strlt	r2, [sp, #16]
 800b148:	7823      	ldrb	r3, [r4, #0]
 800b14a:	2b2e      	cmp	r3, #46	; 0x2e
 800b14c:	d10c      	bne.n	800b168 <_svfiprintf_r+0x130>
 800b14e:	7863      	ldrb	r3, [r4, #1]
 800b150:	2b2a      	cmp	r3, #42	; 0x2a
 800b152:	d135      	bne.n	800b1c0 <_svfiprintf_r+0x188>
 800b154:	9b03      	ldr	r3, [sp, #12]
 800b156:	1d1a      	adds	r2, r3, #4
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	9203      	str	r2, [sp, #12]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	bfb8      	it	lt
 800b160:	f04f 33ff 	movlt.w	r3, #4294967295
 800b164:	3402      	adds	r4, #2
 800b166:	9305      	str	r3, [sp, #20]
 800b168:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b234 <_svfiprintf_r+0x1fc>
 800b16c:	7821      	ldrb	r1, [r4, #0]
 800b16e:	2203      	movs	r2, #3
 800b170:	4650      	mov	r0, sl
 800b172:	f7f5 f84d 	bl	8000210 <memchr>
 800b176:	b140      	cbz	r0, 800b18a <_svfiprintf_r+0x152>
 800b178:	2340      	movs	r3, #64	; 0x40
 800b17a:	eba0 000a 	sub.w	r0, r0, sl
 800b17e:	fa03 f000 	lsl.w	r0, r3, r0
 800b182:	9b04      	ldr	r3, [sp, #16]
 800b184:	4303      	orrs	r3, r0
 800b186:	3401      	adds	r4, #1
 800b188:	9304      	str	r3, [sp, #16]
 800b18a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b18e:	4826      	ldr	r0, [pc, #152]	; (800b228 <_svfiprintf_r+0x1f0>)
 800b190:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b194:	2206      	movs	r2, #6
 800b196:	f7f5 f83b 	bl	8000210 <memchr>
 800b19a:	2800      	cmp	r0, #0
 800b19c:	d038      	beq.n	800b210 <_svfiprintf_r+0x1d8>
 800b19e:	4b23      	ldr	r3, [pc, #140]	; (800b22c <_svfiprintf_r+0x1f4>)
 800b1a0:	bb1b      	cbnz	r3, 800b1ea <_svfiprintf_r+0x1b2>
 800b1a2:	9b03      	ldr	r3, [sp, #12]
 800b1a4:	3307      	adds	r3, #7
 800b1a6:	f023 0307 	bic.w	r3, r3, #7
 800b1aa:	3308      	adds	r3, #8
 800b1ac:	9303      	str	r3, [sp, #12]
 800b1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1b0:	4433      	add	r3, r6
 800b1b2:	9309      	str	r3, [sp, #36]	; 0x24
 800b1b4:	e767      	b.n	800b086 <_svfiprintf_r+0x4e>
 800b1b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1ba:	460c      	mov	r4, r1
 800b1bc:	2001      	movs	r0, #1
 800b1be:	e7a5      	b.n	800b10c <_svfiprintf_r+0xd4>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	3401      	adds	r4, #1
 800b1c4:	9305      	str	r3, [sp, #20]
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	f04f 0c0a 	mov.w	ip, #10
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1d2:	3a30      	subs	r2, #48	; 0x30
 800b1d4:	2a09      	cmp	r2, #9
 800b1d6:	d903      	bls.n	800b1e0 <_svfiprintf_r+0x1a8>
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d0c5      	beq.n	800b168 <_svfiprintf_r+0x130>
 800b1dc:	9105      	str	r1, [sp, #20]
 800b1de:	e7c3      	b.n	800b168 <_svfiprintf_r+0x130>
 800b1e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1e4:	4604      	mov	r4, r0
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	e7f0      	b.n	800b1cc <_svfiprintf_r+0x194>
 800b1ea:	ab03      	add	r3, sp, #12
 800b1ec:	9300      	str	r3, [sp, #0]
 800b1ee:	462a      	mov	r2, r5
 800b1f0:	4b0f      	ldr	r3, [pc, #60]	; (800b230 <_svfiprintf_r+0x1f8>)
 800b1f2:	a904      	add	r1, sp, #16
 800b1f4:	4638      	mov	r0, r7
 800b1f6:	f3af 8000 	nop.w
 800b1fa:	1c42      	adds	r2, r0, #1
 800b1fc:	4606      	mov	r6, r0
 800b1fe:	d1d6      	bne.n	800b1ae <_svfiprintf_r+0x176>
 800b200:	89ab      	ldrh	r3, [r5, #12]
 800b202:	065b      	lsls	r3, r3, #25
 800b204:	f53f af2c 	bmi.w	800b060 <_svfiprintf_r+0x28>
 800b208:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b20a:	b01d      	add	sp, #116	; 0x74
 800b20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b210:	ab03      	add	r3, sp, #12
 800b212:	9300      	str	r3, [sp, #0]
 800b214:	462a      	mov	r2, r5
 800b216:	4b06      	ldr	r3, [pc, #24]	; (800b230 <_svfiprintf_r+0x1f8>)
 800b218:	a904      	add	r1, sp, #16
 800b21a:	4638      	mov	r0, r7
 800b21c:	f000 f87a 	bl	800b314 <_printf_i>
 800b220:	e7eb      	b.n	800b1fa <_svfiprintf_r+0x1c2>
 800b222:	bf00      	nop
 800b224:	0800bc54 	.word	0x0800bc54
 800b228:	0800bc5e 	.word	0x0800bc5e
 800b22c:	00000000 	.word	0x00000000
 800b230:	0800af81 	.word	0x0800af81
 800b234:	0800bc5a 	.word	0x0800bc5a

0800b238 <_printf_common>:
 800b238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b23c:	4616      	mov	r6, r2
 800b23e:	4699      	mov	r9, r3
 800b240:	688a      	ldr	r2, [r1, #8]
 800b242:	690b      	ldr	r3, [r1, #16]
 800b244:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b248:	4293      	cmp	r3, r2
 800b24a:	bfb8      	it	lt
 800b24c:	4613      	movlt	r3, r2
 800b24e:	6033      	str	r3, [r6, #0]
 800b250:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b254:	4607      	mov	r7, r0
 800b256:	460c      	mov	r4, r1
 800b258:	b10a      	cbz	r2, 800b25e <_printf_common+0x26>
 800b25a:	3301      	adds	r3, #1
 800b25c:	6033      	str	r3, [r6, #0]
 800b25e:	6823      	ldr	r3, [r4, #0]
 800b260:	0699      	lsls	r1, r3, #26
 800b262:	bf42      	ittt	mi
 800b264:	6833      	ldrmi	r3, [r6, #0]
 800b266:	3302      	addmi	r3, #2
 800b268:	6033      	strmi	r3, [r6, #0]
 800b26a:	6825      	ldr	r5, [r4, #0]
 800b26c:	f015 0506 	ands.w	r5, r5, #6
 800b270:	d106      	bne.n	800b280 <_printf_common+0x48>
 800b272:	f104 0a19 	add.w	sl, r4, #25
 800b276:	68e3      	ldr	r3, [r4, #12]
 800b278:	6832      	ldr	r2, [r6, #0]
 800b27a:	1a9b      	subs	r3, r3, r2
 800b27c:	42ab      	cmp	r3, r5
 800b27e:	dc26      	bgt.n	800b2ce <_printf_common+0x96>
 800b280:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b284:	1e13      	subs	r3, r2, #0
 800b286:	6822      	ldr	r2, [r4, #0]
 800b288:	bf18      	it	ne
 800b28a:	2301      	movne	r3, #1
 800b28c:	0692      	lsls	r2, r2, #26
 800b28e:	d42b      	bmi.n	800b2e8 <_printf_common+0xb0>
 800b290:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b294:	4649      	mov	r1, r9
 800b296:	4638      	mov	r0, r7
 800b298:	47c0      	blx	r8
 800b29a:	3001      	adds	r0, #1
 800b29c:	d01e      	beq.n	800b2dc <_printf_common+0xa4>
 800b29e:	6823      	ldr	r3, [r4, #0]
 800b2a0:	68e5      	ldr	r5, [r4, #12]
 800b2a2:	6832      	ldr	r2, [r6, #0]
 800b2a4:	f003 0306 	and.w	r3, r3, #6
 800b2a8:	2b04      	cmp	r3, #4
 800b2aa:	bf08      	it	eq
 800b2ac:	1aad      	subeq	r5, r5, r2
 800b2ae:	68a3      	ldr	r3, [r4, #8]
 800b2b0:	6922      	ldr	r2, [r4, #16]
 800b2b2:	bf0c      	ite	eq
 800b2b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2b8:	2500      	movne	r5, #0
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	bfc4      	itt	gt
 800b2be:	1a9b      	subgt	r3, r3, r2
 800b2c0:	18ed      	addgt	r5, r5, r3
 800b2c2:	2600      	movs	r6, #0
 800b2c4:	341a      	adds	r4, #26
 800b2c6:	42b5      	cmp	r5, r6
 800b2c8:	d11a      	bne.n	800b300 <_printf_common+0xc8>
 800b2ca:	2000      	movs	r0, #0
 800b2cc:	e008      	b.n	800b2e0 <_printf_common+0xa8>
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	4652      	mov	r2, sl
 800b2d2:	4649      	mov	r1, r9
 800b2d4:	4638      	mov	r0, r7
 800b2d6:	47c0      	blx	r8
 800b2d8:	3001      	adds	r0, #1
 800b2da:	d103      	bne.n	800b2e4 <_printf_common+0xac>
 800b2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2e4:	3501      	adds	r5, #1
 800b2e6:	e7c6      	b.n	800b276 <_printf_common+0x3e>
 800b2e8:	18e1      	adds	r1, r4, r3
 800b2ea:	1c5a      	adds	r2, r3, #1
 800b2ec:	2030      	movs	r0, #48	; 0x30
 800b2ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b2f2:	4422      	add	r2, r4
 800b2f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b2f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b2fc:	3302      	adds	r3, #2
 800b2fe:	e7c7      	b.n	800b290 <_printf_common+0x58>
 800b300:	2301      	movs	r3, #1
 800b302:	4622      	mov	r2, r4
 800b304:	4649      	mov	r1, r9
 800b306:	4638      	mov	r0, r7
 800b308:	47c0      	blx	r8
 800b30a:	3001      	adds	r0, #1
 800b30c:	d0e6      	beq.n	800b2dc <_printf_common+0xa4>
 800b30e:	3601      	adds	r6, #1
 800b310:	e7d9      	b.n	800b2c6 <_printf_common+0x8e>
	...

0800b314 <_printf_i>:
 800b314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b318:	7e0f      	ldrb	r7, [r1, #24]
 800b31a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b31c:	2f78      	cmp	r7, #120	; 0x78
 800b31e:	4691      	mov	r9, r2
 800b320:	4680      	mov	r8, r0
 800b322:	460c      	mov	r4, r1
 800b324:	469a      	mov	sl, r3
 800b326:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b32a:	d807      	bhi.n	800b33c <_printf_i+0x28>
 800b32c:	2f62      	cmp	r7, #98	; 0x62
 800b32e:	d80a      	bhi.n	800b346 <_printf_i+0x32>
 800b330:	2f00      	cmp	r7, #0
 800b332:	f000 80d8 	beq.w	800b4e6 <_printf_i+0x1d2>
 800b336:	2f58      	cmp	r7, #88	; 0x58
 800b338:	f000 80a3 	beq.w	800b482 <_printf_i+0x16e>
 800b33c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b340:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b344:	e03a      	b.n	800b3bc <_printf_i+0xa8>
 800b346:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b34a:	2b15      	cmp	r3, #21
 800b34c:	d8f6      	bhi.n	800b33c <_printf_i+0x28>
 800b34e:	a101      	add	r1, pc, #4	; (adr r1, 800b354 <_printf_i+0x40>)
 800b350:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b354:	0800b3ad 	.word	0x0800b3ad
 800b358:	0800b3c1 	.word	0x0800b3c1
 800b35c:	0800b33d 	.word	0x0800b33d
 800b360:	0800b33d 	.word	0x0800b33d
 800b364:	0800b33d 	.word	0x0800b33d
 800b368:	0800b33d 	.word	0x0800b33d
 800b36c:	0800b3c1 	.word	0x0800b3c1
 800b370:	0800b33d 	.word	0x0800b33d
 800b374:	0800b33d 	.word	0x0800b33d
 800b378:	0800b33d 	.word	0x0800b33d
 800b37c:	0800b33d 	.word	0x0800b33d
 800b380:	0800b4cd 	.word	0x0800b4cd
 800b384:	0800b3f1 	.word	0x0800b3f1
 800b388:	0800b4af 	.word	0x0800b4af
 800b38c:	0800b33d 	.word	0x0800b33d
 800b390:	0800b33d 	.word	0x0800b33d
 800b394:	0800b4ef 	.word	0x0800b4ef
 800b398:	0800b33d 	.word	0x0800b33d
 800b39c:	0800b3f1 	.word	0x0800b3f1
 800b3a0:	0800b33d 	.word	0x0800b33d
 800b3a4:	0800b33d 	.word	0x0800b33d
 800b3a8:	0800b4b7 	.word	0x0800b4b7
 800b3ac:	682b      	ldr	r3, [r5, #0]
 800b3ae:	1d1a      	adds	r2, r3, #4
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	602a      	str	r2, [r5, #0]
 800b3b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e0a3      	b.n	800b508 <_printf_i+0x1f4>
 800b3c0:	6820      	ldr	r0, [r4, #0]
 800b3c2:	6829      	ldr	r1, [r5, #0]
 800b3c4:	0606      	lsls	r6, r0, #24
 800b3c6:	f101 0304 	add.w	r3, r1, #4
 800b3ca:	d50a      	bpl.n	800b3e2 <_printf_i+0xce>
 800b3cc:	680e      	ldr	r6, [r1, #0]
 800b3ce:	602b      	str	r3, [r5, #0]
 800b3d0:	2e00      	cmp	r6, #0
 800b3d2:	da03      	bge.n	800b3dc <_printf_i+0xc8>
 800b3d4:	232d      	movs	r3, #45	; 0x2d
 800b3d6:	4276      	negs	r6, r6
 800b3d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3dc:	485e      	ldr	r0, [pc, #376]	; (800b558 <_printf_i+0x244>)
 800b3de:	230a      	movs	r3, #10
 800b3e0:	e019      	b.n	800b416 <_printf_i+0x102>
 800b3e2:	680e      	ldr	r6, [r1, #0]
 800b3e4:	602b      	str	r3, [r5, #0]
 800b3e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b3ea:	bf18      	it	ne
 800b3ec:	b236      	sxthne	r6, r6
 800b3ee:	e7ef      	b.n	800b3d0 <_printf_i+0xbc>
 800b3f0:	682b      	ldr	r3, [r5, #0]
 800b3f2:	6820      	ldr	r0, [r4, #0]
 800b3f4:	1d19      	adds	r1, r3, #4
 800b3f6:	6029      	str	r1, [r5, #0]
 800b3f8:	0601      	lsls	r1, r0, #24
 800b3fa:	d501      	bpl.n	800b400 <_printf_i+0xec>
 800b3fc:	681e      	ldr	r6, [r3, #0]
 800b3fe:	e002      	b.n	800b406 <_printf_i+0xf2>
 800b400:	0646      	lsls	r6, r0, #25
 800b402:	d5fb      	bpl.n	800b3fc <_printf_i+0xe8>
 800b404:	881e      	ldrh	r6, [r3, #0]
 800b406:	4854      	ldr	r0, [pc, #336]	; (800b558 <_printf_i+0x244>)
 800b408:	2f6f      	cmp	r7, #111	; 0x6f
 800b40a:	bf0c      	ite	eq
 800b40c:	2308      	moveq	r3, #8
 800b40e:	230a      	movne	r3, #10
 800b410:	2100      	movs	r1, #0
 800b412:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b416:	6865      	ldr	r5, [r4, #4]
 800b418:	60a5      	str	r5, [r4, #8]
 800b41a:	2d00      	cmp	r5, #0
 800b41c:	bfa2      	ittt	ge
 800b41e:	6821      	ldrge	r1, [r4, #0]
 800b420:	f021 0104 	bicge.w	r1, r1, #4
 800b424:	6021      	strge	r1, [r4, #0]
 800b426:	b90e      	cbnz	r6, 800b42c <_printf_i+0x118>
 800b428:	2d00      	cmp	r5, #0
 800b42a:	d04d      	beq.n	800b4c8 <_printf_i+0x1b4>
 800b42c:	4615      	mov	r5, r2
 800b42e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b432:	fb03 6711 	mls	r7, r3, r1, r6
 800b436:	5dc7      	ldrb	r7, [r0, r7]
 800b438:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b43c:	4637      	mov	r7, r6
 800b43e:	42bb      	cmp	r3, r7
 800b440:	460e      	mov	r6, r1
 800b442:	d9f4      	bls.n	800b42e <_printf_i+0x11a>
 800b444:	2b08      	cmp	r3, #8
 800b446:	d10b      	bne.n	800b460 <_printf_i+0x14c>
 800b448:	6823      	ldr	r3, [r4, #0]
 800b44a:	07de      	lsls	r6, r3, #31
 800b44c:	d508      	bpl.n	800b460 <_printf_i+0x14c>
 800b44e:	6923      	ldr	r3, [r4, #16]
 800b450:	6861      	ldr	r1, [r4, #4]
 800b452:	4299      	cmp	r1, r3
 800b454:	bfde      	ittt	le
 800b456:	2330      	movle	r3, #48	; 0x30
 800b458:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b45c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b460:	1b52      	subs	r2, r2, r5
 800b462:	6122      	str	r2, [r4, #16]
 800b464:	f8cd a000 	str.w	sl, [sp]
 800b468:	464b      	mov	r3, r9
 800b46a:	aa03      	add	r2, sp, #12
 800b46c:	4621      	mov	r1, r4
 800b46e:	4640      	mov	r0, r8
 800b470:	f7ff fee2 	bl	800b238 <_printf_common>
 800b474:	3001      	adds	r0, #1
 800b476:	d14c      	bne.n	800b512 <_printf_i+0x1fe>
 800b478:	f04f 30ff 	mov.w	r0, #4294967295
 800b47c:	b004      	add	sp, #16
 800b47e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b482:	4835      	ldr	r0, [pc, #212]	; (800b558 <_printf_i+0x244>)
 800b484:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b488:	6829      	ldr	r1, [r5, #0]
 800b48a:	6823      	ldr	r3, [r4, #0]
 800b48c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b490:	6029      	str	r1, [r5, #0]
 800b492:	061d      	lsls	r5, r3, #24
 800b494:	d514      	bpl.n	800b4c0 <_printf_i+0x1ac>
 800b496:	07df      	lsls	r7, r3, #31
 800b498:	bf44      	itt	mi
 800b49a:	f043 0320 	orrmi.w	r3, r3, #32
 800b49e:	6023      	strmi	r3, [r4, #0]
 800b4a0:	b91e      	cbnz	r6, 800b4aa <_printf_i+0x196>
 800b4a2:	6823      	ldr	r3, [r4, #0]
 800b4a4:	f023 0320 	bic.w	r3, r3, #32
 800b4a8:	6023      	str	r3, [r4, #0]
 800b4aa:	2310      	movs	r3, #16
 800b4ac:	e7b0      	b.n	800b410 <_printf_i+0xfc>
 800b4ae:	6823      	ldr	r3, [r4, #0]
 800b4b0:	f043 0320 	orr.w	r3, r3, #32
 800b4b4:	6023      	str	r3, [r4, #0]
 800b4b6:	2378      	movs	r3, #120	; 0x78
 800b4b8:	4828      	ldr	r0, [pc, #160]	; (800b55c <_printf_i+0x248>)
 800b4ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b4be:	e7e3      	b.n	800b488 <_printf_i+0x174>
 800b4c0:	0659      	lsls	r1, r3, #25
 800b4c2:	bf48      	it	mi
 800b4c4:	b2b6      	uxthmi	r6, r6
 800b4c6:	e7e6      	b.n	800b496 <_printf_i+0x182>
 800b4c8:	4615      	mov	r5, r2
 800b4ca:	e7bb      	b.n	800b444 <_printf_i+0x130>
 800b4cc:	682b      	ldr	r3, [r5, #0]
 800b4ce:	6826      	ldr	r6, [r4, #0]
 800b4d0:	6961      	ldr	r1, [r4, #20]
 800b4d2:	1d18      	adds	r0, r3, #4
 800b4d4:	6028      	str	r0, [r5, #0]
 800b4d6:	0635      	lsls	r5, r6, #24
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	d501      	bpl.n	800b4e0 <_printf_i+0x1cc>
 800b4dc:	6019      	str	r1, [r3, #0]
 800b4de:	e002      	b.n	800b4e6 <_printf_i+0x1d2>
 800b4e0:	0670      	lsls	r0, r6, #25
 800b4e2:	d5fb      	bpl.n	800b4dc <_printf_i+0x1c8>
 800b4e4:	8019      	strh	r1, [r3, #0]
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	6123      	str	r3, [r4, #16]
 800b4ea:	4615      	mov	r5, r2
 800b4ec:	e7ba      	b.n	800b464 <_printf_i+0x150>
 800b4ee:	682b      	ldr	r3, [r5, #0]
 800b4f0:	1d1a      	adds	r2, r3, #4
 800b4f2:	602a      	str	r2, [r5, #0]
 800b4f4:	681d      	ldr	r5, [r3, #0]
 800b4f6:	6862      	ldr	r2, [r4, #4]
 800b4f8:	2100      	movs	r1, #0
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	f7f4 fe88 	bl	8000210 <memchr>
 800b500:	b108      	cbz	r0, 800b506 <_printf_i+0x1f2>
 800b502:	1b40      	subs	r0, r0, r5
 800b504:	6060      	str	r0, [r4, #4]
 800b506:	6863      	ldr	r3, [r4, #4]
 800b508:	6123      	str	r3, [r4, #16]
 800b50a:	2300      	movs	r3, #0
 800b50c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b510:	e7a8      	b.n	800b464 <_printf_i+0x150>
 800b512:	6923      	ldr	r3, [r4, #16]
 800b514:	462a      	mov	r2, r5
 800b516:	4649      	mov	r1, r9
 800b518:	4640      	mov	r0, r8
 800b51a:	47d0      	blx	sl
 800b51c:	3001      	adds	r0, #1
 800b51e:	d0ab      	beq.n	800b478 <_printf_i+0x164>
 800b520:	6823      	ldr	r3, [r4, #0]
 800b522:	079b      	lsls	r3, r3, #30
 800b524:	d413      	bmi.n	800b54e <_printf_i+0x23a>
 800b526:	68e0      	ldr	r0, [r4, #12]
 800b528:	9b03      	ldr	r3, [sp, #12]
 800b52a:	4298      	cmp	r0, r3
 800b52c:	bfb8      	it	lt
 800b52e:	4618      	movlt	r0, r3
 800b530:	e7a4      	b.n	800b47c <_printf_i+0x168>
 800b532:	2301      	movs	r3, #1
 800b534:	4632      	mov	r2, r6
 800b536:	4649      	mov	r1, r9
 800b538:	4640      	mov	r0, r8
 800b53a:	47d0      	blx	sl
 800b53c:	3001      	adds	r0, #1
 800b53e:	d09b      	beq.n	800b478 <_printf_i+0x164>
 800b540:	3501      	adds	r5, #1
 800b542:	68e3      	ldr	r3, [r4, #12]
 800b544:	9903      	ldr	r1, [sp, #12]
 800b546:	1a5b      	subs	r3, r3, r1
 800b548:	42ab      	cmp	r3, r5
 800b54a:	dcf2      	bgt.n	800b532 <_printf_i+0x21e>
 800b54c:	e7eb      	b.n	800b526 <_printf_i+0x212>
 800b54e:	2500      	movs	r5, #0
 800b550:	f104 0619 	add.w	r6, r4, #25
 800b554:	e7f5      	b.n	800b542 <_printf_i+0x22e>
 800b556:	bf00      	nop
 800b558:	0800bc65 	.word	0x0800bc65
 800b55c:	0800bc76 	.word	0x0800bc76

0800b560 <memmove>:
 800b560:	4288      	cmp	r0, r1
 800b562:	b510      	push	{r4, lr}
 800b564:	eb01 0402 	add.w	r4, r1, r2
 800b568:	d902      	bls.n	800b570 <memmove+0x10>
 800b56a:	4284      	cmp	r4, r0
 800b56c:	4623      	mov	r3, r4
 800b56e:	d807      	bhi.n	800b580 <memmove+0x20>
 800b570:	1e43      	subs	r3, r0, #1
 800b572:	42a1      	cmp	r1, r4
 800b574:	d008      	beq.n	800b588 <memmove+0x28>
 800b576:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b57a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b57e:	e7f8      	b.n	800b572 <memmove+0x12>
 800b580:	4402      	add	r2, r0
 800b582:	4601      	mov	r1, r0
 800b584:	428a      	cmp	r2, r1
 800b586:	d100      	bne.n	800b58a <memmove+0x2a>
 800b588:	bd10      	pop	{r4, pc}
 800b58a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b58e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b592:	e7f7      	b.n	800b584 <memmove+0x24>

0800b594 <_free_r>:
 800b594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b596:	2900      	cmp	r1, #0
 800b598:	d044      	beq.n	800b624 <_free_r+0x90>
 800b59a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b59e:	9001      	str	r0, [sp, #4]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	f1a1 0404 	sub.w	r4, r1, #4
 800b5a6:	bfb8      	it	lt
 800b5a8:	18e4      	addlt	r4, r4, r3
 800b5aa:	f000 f913 	bl	800b7d4 <__malloc_lock>
 800b5ae:	4a1e      	ldr	r2, [pc, #120]	; (800b628 <_free_r+0x94>)
 800b5b0:	9801      	ldr	r0, [sp, #4]
 800b5b2:	6813      	ldr	r3, [r2, #0]
 800b5b4:	b933      	cbnz	r3, 800b5c4 <_free_r+0x30>
 800b5b6:	6063      	str	r3, [r4, #4]
 800b5b8:	6014      	str	r4, [r2, #0]
 800b5ba:	b003      	add	sp, #12
 800b5bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5c0:	f000 b90e 	b.w	800b7e0 <__malloc_unlock>
 800b5c4:	42a3      	cmp	r3, r4
 800b5c6:	d908      	bls.n	800b5da <_free_r+0x46>
 800b5c8:	6825      	ldr	r5, [r4, #0]
 800b5ca:	1961      	adds	r1, r4, r5
 800b5cc:	428b      	cmp	r3, r1
 800b5ce:	bf01      	itttt	eq
 800b5d0:	6819      	ldreq	r1, [r3, #0]
 800b5d2:	685b      	ldreq	r3, [r3, #4]
 800b5d4:	1949      	addeq	r1, r1, r5
 800b5d6:	6021      	streq	r1, [r4, #0]
 800b5d8:	e7ed      	b.n	800b5b6 <_free_r+0x22>
 800b5da:	461a      	mov	r2, r3
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	b10b      	cbz	r3, 800b5e4 <_free_r+0x50>
 800b5e0:	42a3      	cmp	r3, r4
 800b5e2:	d9fa      	bls.n	800b5da <_free_r+0x46>
 800b5e4:	6811      	ldr	r1, [r2, #0]
 800b5e6:	1855      	adds	r5, r2, r1
 800b5e8:	42a5      	cmp	r5, r4
 800b5ea:	d10b      	bne.n	800b604 <_free_r+0x70>
 800b5ec:	6824      	ldr	r4, [r4, #0]
 800b5ee:	4421      	add	r1, r4
 800b5f0:	1854      	adds	r4, r2, r1
 800b5f2:	42a3      	cmp	r3, r4
 800b5f4:	6011      	str	r1, [r2, #0]
 800b5f6:	d1e0      	bne.n	800b5ba <_free_r+0x26>
 800b5f8:	681c      	ldr	r4, [r3, #0]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	6053      	str	r3, [r2, #4]
 800b5fe:	4421      	add	r1, r4
 800b600:	6011      	str	r1, [r2, #0]
 800b602:	e7da      	b.n	800b5ba <_free_r+0x26>
 800b604:	d902      	bls.n	800b60c <_free_r+0x78>
 800b606:	230c      	movs	r3, #12
 800b608:	6003      	str	r3, [r0, #0]
 800b60a:	e7d6      	b.n	800b5ba <_free_r+0x26>
 800b60c:	6825      	ldr	r5, [r4, #0]
 800b60e:	1961      	adds	r1, r4, r5
 800b610:	428b      	cmp	r3, r1
 800b612:	bf04      	itt	eq
 800b614:	6819      	ldreq	r1, [r3, #0]
 800b616:	685b      	ldreq	r3, [r3, #4]
 800b618:	6063      	str	r3, [r4, #4]
 800b61a:	bf04      	itt	eq
 800b61c:	1949      	addeq	r1, r1, r5
 800b61e:	6021      	streq	r1, [r4, #0]
 800b620:	6054      	str	r4, [r2, #4]
 800b622:	e7ca      	b.n	800b5ba <_free_r+0x26>
 800b624:	b003      	add	sp, #12
 800b626:	bd30      	pop	{r4, r5, pc}
 800b628:	2000c1bc 	.word	0x2000c1bc

0800b62c <sbrk_aligned>:
 800b62c:	b570      	push	{r4, r5, r6, lr}
 800b62e:	4e0e      	ldr	r6, [pc, #56]	; (800b668 <sbrk_aligned+0x3c>)
 800b630:	460c      	mov	r4, r1
 800b632:	6831      	ldr	r1, [r6, #0]
 800b634:	4605      	mov	r5, r0
 800b636:	b911      	cbnz	r1, 800b63e <sbrk_aligned+0x12>
 800b638:	f000 f8bc 	bl	800b7b4 <_sbrk_r>
 800b63c:	6030      	str	r0, [r6, #0]
 800b63e:	4621      	mov	r1, r4
 800b640:	4628      	mov	r0, r5
 800b642:	f000 f8b7 	bl	800b7b4 <_sbrk_r>
 800b646:	1c43      	adds	r3, r0, #1
 800b648:	d00a      	beq.n	800b660 <sbrk_aligned+0x34>
 800b64a:	1cc4      	adds	r4, r0, #3
 800b64c:	f024 0403 	bic.w	r4, r4, #3
 800b650:	42a0      	cmp	r0, r4
 800b652:	d007      	beq.n	800b664 <sbrk_aligned+0x38>
 800b654:	1a21      	subs	r1, r4, r0
 800b656:	4628      	mov	r0, r5
 800b658:	f000 f8ac 	bl	800b7b4 <_sbrk_r>
 800b65c:	3001      	adds	r0, #1
 800b65e:	d101      	bne.n	800b664 <sbrk_aligned+0x38>
 800b660:	f04f 34ff 	mov.w	r4, #4294967295
 800b664:	4620      	mov	r0, r4
 800b666:	bd70      	pop	{r4, r5, r6, pc}
 800b668:	2000c1c0 	.word	0x2000c1c0

0800b66c <_malloc_r>:
 800b66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b670:	1ccd      	adds	r5, r1, #3
 800b672:	f025 0503 	bic.w	r5, r5, #3
 800b676:	3508      	adds	r5, #8
 800b678:	2d0c      	cmp	r5, #12
 800b67a:	bf38      	it	cc
 800b67c:	250c      	movcc	r5, #12
 800b67e:	2d00      	cmp	r5, #0
 800b680:	4607      	mov	r7, r0
 800b682:	db01      	blt.n	800b688 <_malloc_r+0x1c>
 800b684:	42a9      	cmp	r1, r5
 800b686:	d905      	bls.n	800b694 <_malloc_r+0x28>
 800b688:	230c      	movs	r3, #12
 800b68a:	603b      	str	r3, [r7, #0]
 800b68c:	2600      	movs	r6, #0
 800b68e:	4630      	mov	r0, r6
 800b690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b694:	4e2e      	ldr	r6, [pc, #184]	; (800b750 <_malloc_r+0xe4>)
 800b696:	f000 f89d 	bl	800b7d4 <__malloc_lock>
 800b69a:	6833      	ldr	r3, [r6, #0]
 800b69c:	461c      	mov	r4, r3
 800b69e:	bb34      	cbnz	r4, 800b6ee <_malloc_r+0x82>
 800b6a0:	4629      	mov	r1, r5
 800b6a2:	4638      	mov	r0, r7
 800b6a4:	f7ff ffc2 	bl	800b62c <sbrk_aligned>
 800b6a8:	1c43      	adds	r3, r0, #1
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	d14d      	bne.n	800b74a <_malloc_r+0xde>
 800b6ae:	6834      	ldr	r4, [r6, #0]
 800b6b0:	4626      	mov	r6, r4
 800b6b2:	2e00      	cmp	r6, #0
 800b6b4:	d140      	bne.n	800b738 <_malloc_r+0xcc>
 800b6b6:	6823      	ldr	r3, [r4, #0]
 800b6b8:	4631      	mov	r1, r6
 800b6ba:	4638      	mov	r0, r7
 800b6bc:	eb04 0803 	add.w	r8, r4, r3
 800b6c0:	f000 f878 	bl	800b7b4 <_sbrk_r>
 800b6c4:	4580      	cmp	r8, r0
 800b6c6:	d13a      	bne.n	800b73e <_malloc_r+0xd2>
 800b6c8:	6821      	ldr	r1, [r4, #0]
 800b6ca:	3503      	adds	r5, #3
 800b6cc:	1a6d      	subs	r5, r5, r1
 800b6ce:	f025 0503 	bic.w	r5, r5, #3
 800b6d2:	3508      	adds	r5, #8
 800b6d4:	2d0c      	cmp	r5, #12
 800b6d6:	bf38      	it	cc
 800b6d8:	250c      	movcc	r5, #12
 800b6da:	4629      	mov	r1, r5
 800b6dc:	4638      	mov	r0, r7
 800b6de:	f7ff ffa5 	bl	800b62c <sbrk_aligned>
 800b6e2:	3001      	adds	r0, #1
 800b6e4:	d02b      	beq.n	800b73e <_malloc_r+0xd2>
 800b6e6:	6823      	ldr	r3, [r4, #0]
 800b6e8:	442b      	add	r3, r5
 800b6ea:	6023      	str	r3, [r4, #0]
 800b6ec:	e00e      	b.n	800b70c <_malloc_r+0xa0>
 800b6ee:	6822      	ldr	r2, [r4, #0]
 800b6f0:	1b52      	subs	r2, r2, r5
 800b6f2:	d41e      	bmi.n	800b732 <_malloc_r+0xc6>
 800b6f4:	2a0b      	cmp	r2, #11
 800b6f6:	d916      	bls.n	800b726 <_malloc_r+0xba>
 800b6f8:	1961      	adds	r1, r4, r5
 800b6fa:	42a3      	cmp	r3, r4
 800b6fc:	6025      	str	r5, [r4, #0]
 800b6fe:	bf18      	it	ne
 800b700:	6059      	strne	r1, [r3, #4]
 800b702:	6863      	ldr	r3, [r4, #4]
 800b704:	bf08      	it	eq
 800b706:	6031      	streq	r1, [r6, #0]
 800b708:	5162      	str	r2, [r4, r5]
 800b70a:	604b      	str	r3, [r1, #4]
 800b70c:	4638      	mov	r0, r7
 800b70e:	f104 060b 	add.w	r6, r4, #11
 800b712:	f000 f865 	bl	800b7e0 <__malloc_unlock>
 800b716:	f026 0607 	bic.w	r6, r6, #7
 800b71a:	1d23      	adds	r3, r4, #4
 800b71c:	1af2      	subs	r2, r6, r3
 800b71e:	d0b6      	beq.n	800b68e <_malloc_r+0x22>
 800b720:	1b9b      	subs	r3, r3, r6
 800b722:	50a3      	str	r3, [r4, r2]
 800b724:	e7b3      	b.n	800b68e <_malloc_r+0x22>
 800b726:	6862      	ldr	r2, [r4, #4]
 800b728:	42a3      	cmp	r3, r4
 800b72a:	bf0c      	ite	eq
 800b72c:	6032      	streq	r2, [r6, #0]
 800b72e:	605a      	strne	r2, [r3, #4]
 800b730:	e7ec      	b.n	800b70c <_malloc_r+0xa0>
 800b732:	4623      	mov	r3, r4
 800b734:	6864      	ldr	r4, [r4, #4]
 800b736:	e7b2      	b.n	800b69e <_malloc_r+0x32>
 800b738:	4634      	mov	r4, r6
 800b73a:	6876      	ldr	r6, [r6, #4]
 800b73c:	e7b9      	b.n	800b6b2 <_malloc_r+0x46>
 800b73e:	230c      	movs	r3, #12
 800b740:	603b      	str	r3, [r7, #0]
 800b742:	4638      	mov	r0, r7
 800b744:	f000 f84c 	bl	800b7e0 <__malloc_unlock>
 800b748:	e7a1      	b.n	800b68e <_malloc_r+0x22>
 800b74a:	6025      	str	r5, [r4, #0]
 800b74c:	e7de      	b.n	800b70c <_malloc_r+0xa0>
 800b74e:	bf00      	nop
 800b750:	2000c1bc 	.word	0x2000c1bc

0800b754 <_realloc_r>:
 800b754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b758:	4680      	mov	r8, r0
 800b75a:	4614      	mov	r4, r2
 800b75c:	460e      	mov	r6, r1
 800b75e:	b921      	cbnz	r1, 800b76a <_realloc_r+0x16>
 800b760:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b764:	4611      	mov	r1, r2
 800b766:	f7ff bf81 	b.w	800b66c <_malloc_r>
 800b76a:	b92a      	cbnz	r2, 800b778 <_realloc_r+0x24>
 800b76c:	f7ff ff12 	bl	800b594 <_free_r>
 800b770:	4625      	mov	r5, r4
 800b772:	4628      	mov	r0, r5
 800b774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b778:	f000 f838 	bl	800b7ec <_malloc_usable_size_r>
 800b77c:	4284      	cmp	r4, r0
 800b77e:	4607      	mov	r7, r0
 800b780:	d802      	bhi.n	800b788 <_realloc_r+0x34>
 800b782:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b786:	d812      	bhi.n	800b7ae <_realloc_r+0x5a>
 800b788:	4621      	mov	r1, r4
 800b78a:	4640      	mov	r0, r8
 800b78c:	f7ff ff6e 	bl	800b66c <_malloc_r>
 800b790:	4605      	mov	r5, r0
 800b792:	2800      	cmp	r0, #0
 800b794:	d0ed      	beq.n	800b772 <_realloc_r+0x1e>
 800b796:	42bc      	cmp	r4, r7
 800b798:	4622      	mov	r2, r4
 800b79a:	4631      	mov	r1, r6
 800b79c:	bf28      	it	cs
 800b79e:	463a      	movcs	r2, r7
 800b7a0:	f7ff fbb8 	bl	800af14 <memcpy>
 800b7a4:	4631      	mov	r1, r6
 800b7a6:	4640      	mov	r0, r8
 800b7a8:	f7ff fef4 	bl	800b594 <_free_r>
 800b7ac:	e7e1      	b.n	800b772 <_realloc_r+0x1e>
 800b7ae:	4635      	mov	r5, r6
 800b7b0:	e7df      	b.n	800b772 <_realloc_r+0x1e>
	...

0800b7b4 <_sbrk_r>:
 800b7b4:	b538      	push	{r3, r4, r5, lr}
 800b7b6:	4d06      	ldr	r5, [pc, #24]	; (800b7d0 <_sbrk_r+0x1c>)
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	4604      	mov	r4, r0
 800b7bc:	4608      	mov	r0, r1
 800b7be:	602b      	str	r3, [r5, #0]
 800b7c0:	f7f6 f9ec 	bl	8001b9c <_sbrk>
 800b7c4:	1c43      	adds	r3, r0, #1
 800b7c6:	d102      	bne.n	800b7ce <_sbrk_r+0x1a>
 800b7c8:	682b      	ldr	r3, [r5, #0]
 800b7ca:	b103      	cbz	r3, 800b7ce <_sbrk_r+0x1a>
 800b7cc:	6023      	str	r3, [r4, #0]
 800b7ce:	bd38      	pop	{r3, r4, r5, pc}
 800b7d0:	2000c1c4 	.word	0x2000c1c4

0800b7d4 <__malloc_lock>:
 800b7d4:	4801      	ldr	r0, [pc, #4]	; (800b7dc <__malloc_lock+0x8>)
 800b7d6:	f000 b811 	b.w	800b7fc <__retarget_lock_acquire_recursive>
 800b7da:	bf00      	nop
 800b7dc:	2000c1c8 	.word	0x2000c1c8

0800b7e0 <__malloc_unlock>:
 800b7e0:	4801      	ldr	r0, [pc, #4]	; (800b7e8 <__malloc_unlock+0x8>)
 800b7e2:	f000 b80c 	b.w	800b7fe <__retarget_lock_release_recursive>
 800b7e6:	bf00      	nop
 800b7e8:	2000c1c8 	.word	0x2000c1c8

0800b7ec <_malloc_usable_size_r>:
 800b7ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7f0:	1f18      	subs	r0, r3, #4
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	bfbc      	itt	lt
 800b7f6:	580b      	ldrlt	r3, [r1, r0]
 800b7f8:	18c0      	addlt	r0, r0, r3
 800b7fa:	4770      	bx	lr

0800b7fc <__retarget_lock_acquire_recursive>:
 800b7fc:	4770      	bx	lr

0800b7fe <__retarget_lock_release_recursive>:
 800b7fe:	4770      	bx	lr

0800b800 <_init>:
 800b800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b802:	bf00      	nop
 800b804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b806:	bc08      	pop	{r3}
 800b808:	469e      	mov	lr, r3
 800b80a:	4770      	bx	lr

0800b80c <_fini>:
 800b80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b80e:	bf00      	nop
 800b810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b812:	bc08      	pop	{r3}
 800b814:	469e      	mov	lr, r3
 800b816:	4770      	bx	lr
