
EGE_AKSV2_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c404  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  0800c5d4  0800c5d4  0001c5d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca44  0800ca44  0002103f  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca44  0800ca44  0001ca44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca4c  0800ca4c  0002103f  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca4c  0800ca4c  0001ca4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca50  0800ca50  0001ca50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800ca54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ARM.__at_0x20000000 00000fbb  20000084  0800cad8  00020084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000b148  20001040  0800da93  00021040  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  2000c188  0800da93  0002c188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002103f  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002bebd  00000000  00000000  0002106f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000056f6  00000000  00000000  0004cf2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021a8  00000000  00000000  00052628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f78  00000000  00000000  000547d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00009d62  00000000  00000000  00056748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033e58  00000000  00000000  000604aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd368  00000000  00000000  00094302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019166a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008fd4  00000000  00000000  001916bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001040 	.word	0x20001040
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c5bc 	.word	0x0800c5bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001044 	.word	0x20001044
 800020c:	0800c5bc 	.word	0x0800c5bc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f002 f920 	bl	80027fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f834 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 fcec 	bl	8000f9c <MX_GPIO_Init>
  MX_ADC1_Init();
 80005c4:	f000 f8a0 	bl	8000708 <MX_ADC1_Init>
  MX_ADC3_Init();
 80005c8:	f000 f93a 	bl	8000840 <MX_ADC3_Init>
  MX_CAN1_Init();
 80005cc:	f000 fa32 	bl	8000a34 <MX_CAN1_Init>
  MX_CAN2_Init();
 80005d0:	f000 fa66 	bl	8000aa0 <MX_CAN2_Init>
  MX_I2C1_Init();
 80005d4:	f000 faae 	bl	8000b34 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005d8:	f000 fada 	bl	8000b90 <MX_I2C2_Init>
  MX_I2C3_Init();
 80005dc:	f000 fb06 	bl	8000bec <MX_I2C3_Init>
  MX_SPI2_Init();
 80005e0:	f000 fb58 	bl	8000c94 <MX_SPI2_Init>
  MX_SPI3_Init();
 80005e4:	f000 fb8c 	bl	8000d00 <MX_SPI3_Init>
  MX_TIM1_Init();
 80005e8:	f000 fbc0 	bl	8000d6c <MX_TIM1_Init>
  MX_UART4_Init();
 80005ec:	f000 fc82 	bl	8000ef4 <MX_UART4_Init>
  MX_UART5_Init();
 80005f0:	f000 fcaa 	bl	8000f48 <MX_UART5_Init>
  MX_CRC_Init();
 80005f4:	f000 fa8a 	bl	8000b0c <MX_CRC_Init>
  //MX_IWDG_Init();
  MX_RTC_Init();
 80005f8:	f000 fb26 	bl	8000c48 <MX_RTC_Init>
  //MX_WWDG_Init();
  /* USER CODE BEGIN 2 */

  MAIN_App(); /* JUMP INTO BODY CONTROL MODULE */
 80005fc:	f009 ff5e 	bl	800a4bc <MAIN_App>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000600:	f006 fb62 	bl	8006cc8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000604:	4a05      	ldr	r2, [pc, #20]	; (800061c <main+0x68>)
 8000606:	2100      	movs	r1, #0
 8000608:	4805      	ldr	r0, [pc, #20]	; (8000620 <main+0x6c>)
 800060a:	f006 fba7 	bl	8006d5c <osThreadNew>
 800060e:	4603      	mov	r3, r0
 8000610:	4a04      	ldr	r2, [pc, #16]	; (8000624 <main+0x70>)
 8000612:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000614:	f006 fb7c 	bl	8006d10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	e7fe      	b.n	8000618 <main+0x64>
 800061a:	bf00      	nop
 800061c:	0800c938 	.word	0x0800c938
 8000620:	0800128d 	.word	0x0800128d
 8000624:	200013e0 	.word	0x200013e0

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	2234      	movs	r2, #52	; 0x34
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f00b fb58 	bl	800bcec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <SystemClock_Config+0xd8>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a2a      	ldr	r2, [pc, #168]	; (8000700 <SystemClock_Config+0xd8>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b28      	ldr	r3, [pc, #160]	; (8000700 <SystemClock_Config+0xd8>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000668:	2300      	movs	r3, #0
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <SystemClock_Config+0xdc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000674:	4a23      	ldr	r2, [pc, #140]	; (8000704 <SystemClock_Config+0xdc>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b21      	ldr	r3, [pc, #132]	; (8000704 <SystemClock_Config+0xdc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000688:	230a      	movs	r3, #10
 800068a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	2310      	movs	r3, #16
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a4:	2308      	movs	r3, #8
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80006a8:	2354      	movs	r3, #84	; 0x54
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4618      	mov	r0, r3
 80006be:	f004 fd01 	bl	80050c4 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006c8:	f000 fde8 	bl	800129c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	2102      	movs	r1, #2
 80006e8:	4618      	mov	r0, r3
 80006ea:	f003 fefd 	bl	80044e8 <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006f4:	f000 fdd2 	bl	800129c <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3750      	adds	r7, #80	; 0x50
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070e:	463b      	mov	r3, r7
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800071a:	4b46      	ldr	r3, [pc, #280]	; (8000834 <MX_ADC1_Init+0x12c>)
 800071c:	4a46      	ldr	r2, [pc, #280]	; (8000838 <MX_ADC1_Init+0x130>)
 800071e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000720:	4b44      	ldr	r3, [pc, #272]	; (8000834 <MX_ADC1_Init+0x12c>)
 8000722:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000726:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000728:	4b42      	ldr	r3, [pc, #264]	; (8000834 <MX_ADC1_Init+0x12c>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800072e:	4b41      	ldr	r3, [pc, #260]	; (8000834 <MX_ADC1_Init+0x12c>)
 8000730:	2201      	movs	r2, #1
 8000732:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000734:	4b3f      	ldr	r3, [pc, #252]	; (8000834 <MX_ADC1_Init+0x12c>)
 8000736:	2201      	movs	r2, #1
 8000738:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800073a:	4b3e      	ldr	r3, [pc, #248]	; (8000834 <MX_ADC1_Init+0x12c>)
 800073c:	2200      	movs	r2, #0
 800073e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000742:	4b3c      	ldr	r3, [pc, #240]	; (8000834 <MX_ADC1_Init+0x12c>)
 8000744:	2200      	movs	r2, #0
 8000746:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000748:	4b3a      	ldr	r3, [pc, #232]	; (8000834 <MX_ADC1_Init+0x12c>)
 800074a:	4a3c      	ldr	r2, [pc, #240]	; (800083c <MX_ADC1_Init+0x134>)
 800074c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800074e:	4b39      	ldr	r3, [pc, #228]	; (8000834 <MX_ADC1_Init+0x12c>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8000754:	4b37      	ldr	r3, [pc, #220]	; (8000834 <MX_ADC1_Init+0x12c>)
 8000756:	2207      	movs	r2, #7
 8000758:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800075a:	4b36      	ldr	r3, [pc, #216]	; (8000834 <MX_ADC1_Init+0x12c>)
 800075c:	2200      	movs	r2, #0
 800075e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000762:	4b34      	ldr	r3, [pc, #208]	; (8000834 <MX_ADC1_Init+0x12c>)
 8000764:	2201      	movs	r2, #1
 8000766:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000768:	4832      	ldr	r0, [pc, #200]	; (8000834 <MX_ADC1_Init+0x12c>)
 800076a:	f002 f8dd 	bl	8002928 <HAL_ADC_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000774:	f000 fd92 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000778:	2304      	movs	r3, #4
 800077a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800077c:	2301      	movs	r3, #1
 800077e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000780:	2302      	movs	r3, #2
 8000782:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000784:	463b      	mov	r3, r7
 8000786:	4619      	mov	r1, r3
 8000788:	482a      	ldr	r0, [pc, #168]	; (8000834 <MX_ADC1_Init+0x12c>)
 800078a:	f002 faaf 	bl	8002cec <HAL_ADC_ConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000794:	f000 fd82 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8000798:	2302      	movs	r3, #2
 800079a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	4619      	mov	r1, r3
 80007a4:	4823      	ldr	r0, [pc, #140]	; (8000834 <MX_ADC1_Init+0x12c>)
 80007a6:	f002 faa1 	bl	8002cec <HAL_ADC_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007b0:	f000 fd74 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 80007b4:	2303      	movs	r3, #3
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	481d      	ldr	r0, [pc, #116]	; (8000834 <MX_ADC1_Init+0x12c>)
 80007be:	f002 fa95 	bl	8002cec <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80007c8:	f000 fd68 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 80007cc:	2304      	movs	r3, #4
 80007ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d0:	463b      	mov	r3, r7
 80007d2:	4619      	mov	r1, r3
 80007d4:	4817      	ldr	r0, [pc, #92]	; (8000834 <MX_ADC1_Init+0x12c>)
 80007d6:	f002 fa89 	bl	8002cec <HAL_ADC_ConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80007e0:	f000 fd5c 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 80007e4:	2305      	movs	r3, #5
 80007e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e8:	463b      	mov	r3, r7
 80007ea:	4619      	mov	r1, r3
 80007ec:	4811      	ldr	r0, [pc, #68]	; (8000834 <MX_ADC1_Init+0x12c>)
 80007ee:	f002 fa7d 	bl	8002cec <HAL_ADC_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80007f8:	f000 fd50 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 6;
 80007fc:	2306      	movs	r3, #6
 80007fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000800:	463b      	mov	r3, r7
 8000802:	4619      	mov	r1, r3
 8000804:	480b      	ldr	r0, [pc, #44]	; (8000834 <MX_ADC1_Init+0x12c>)
 8000806:	f002 fa71 	bl	8002cec <HAL_ADC_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8000810:	f000 fd44 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 7;
 8000814:	2307      	movs	r3, #7
 8000816:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000818:	463b      	mov	r3, r7
 800081a:	4619      	mov	r1, r3
 800081c:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_ADC1_Init+0x12c>)
 800081e:	f002 fa65 	bl	8002cec <HAL_ADC_ConfigChannel>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 8000828:	f000 fd38 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	2000105c 	.word	0x2000105c
 8000838:	40012000 	.word	0x40012000
 800083c:	0f000001 	.word	0x0f000001

08000840 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000846:	463b      	mov	r3, r7
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000852:	4b75      	ldr	r3, [pc, #468]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 8000854:	4a75      	ldr	r2, [pc, #468]	; (8000a2c <MX_ADC3_Init+0x1ec>)
 8000856:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000858:	4b73      	ldr	r3, [pc, #460]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 800085a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800085e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000860:	4b71      	ldr	r3, [pc, #452]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8000866:	4b70      	ldr	r3, [pc, #448]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 8000868:	2201      	movs	r2, #1
 800086a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800086c:	4b6e      	ldr	r3, [pc, #440]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 800086e:	2201      	movs	r2, #1
 8000870:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000872:	4b6d      	ldr	r3, [pc, #436]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 8000874:	2200      	movs	r2, #0
 8000876:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800087a:	4b6b      	ldr	r3, [pc, #428]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 800087c:	2200      	movs	r2, #0
 800087e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000880:	4b69      	ldr	r3, [pc, #420]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 8000882:	4a6b      	ldr	r2, [pc, #428]	; (8000a30 <MX_ADC3_Init+0x1f0>)
 8000884:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000886:	4b68      	ldr	r3, [pc, #416]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 15;
 800088c:	4b66      	ldr	r3, [pc, #408]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 800088e:	220f      	movs	r2, #15
 8000890:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000892:	4b65      	ldr	r3, [pc, #404]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 8000894:	2200      	movs	r2, #0
 8000896:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800089a:	4b63      	ldr	r3, [pc, #396]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 800089c:	2201      	movs	r2, #1
 800089e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008a0:	4861      	ldr	r0, [pc, #388]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 80008a2:	f002 f841 	bl	8002928 <HAL_ADC_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80008ac:	f000 fcf6 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008b0:	2301      	movs	r3, #1
 80008b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008b4:	2301      	movs	r3, #1
 80008b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008bc:	463b      	mov	r3, r7
 80008be:	4619      	mov	r1, r3
 80008c0:	4859      	ldr	r0, [pc, #356]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 80008c2:	f002 fa13 	bl	8002cec <HAL_ADC_ConfigChannel>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80008cc:	f000 fce6 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008d4:	463b      	mov	r3, r7
 80008d6:	4619      	mov	r1, r3
 80008d8:	4853      	ldr	r0, [pc, #332]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 80008da:	f002 fa07 	bl	8002cec <HAL_ADC_ConfigChannel>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_ADC3_Init+0xa8>
  {
    Error_Handler();
 80008e4:	f000 fcda 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 80008e8:	2303      	movs	r3, #3
 80008ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008ec:	463b      	mov	r3, r7
 80008ee:	4619      	mov	r1, r3
 80008f0:	484d      	ldr	r0, [pc, #308]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 80008f2:	f002 f9fb 	bl	8002cec <HAL_ADC_ConfigChannel>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_ADC3_Init+0xc0>
  {
    Error_Handler();
 80008fc:	f000 fcce 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8000900:	2304      	movs	r3, #4
 8000902:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000904:	463b      	mov	r3, r7
 8000906:	4619      	mov	r1, r3
 8000908:	4847      	ldr	r0, [pc, #284]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 800090a:	f002 f9ef 	bl	8002cec <HAL_ADC_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_ADC3_Init+0xd8>
  {
    Error_Handler();
 8000914:	f000 fcc2 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 8000918:	2305      	movs	r3, #5
 800091a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091c:	463b      	mov	r3, r7
 800091e:	4619      	mov	r1, r3
 8000920:	4841      	ldr	r0, [pc, #260]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 8000922:	f002 f9e3 	bl	8002cec <HAL_ADC_ConfigChannel>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_ADC3_Init+0xf0>
  {
    Error_Handler();
 800092c:	f000 fcb6 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 6;
 8000930:	2306      	movs	r3, #6
 8000932:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000934:	463b      	mov	r3, r7
 8000936:	4619      	mov	r1, r3
 8000938:	483b      	ldr	r0, [pc, #236]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 800093a:	f002 f9d7 	bl	8002cec <HAL_ADC_ConfigChannel>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_ADC3_Init+0x108>
  {
    Error_Handler();
 8000944:	f000 fcaa 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 7;
 8000948:	2307      	movs	r3, #7
 800094a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800094c:	463b      	mov	r3, r7
 800094e:	4619      	mov	r1, r3
 8000950:	4835      	ldr	r0, [pc, #212]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 8000952:	f002 f9cb 	bl	8002cec <HAL_ADC_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_ADC3_Init+0x120>
  {
    Error_Handler();
 800095c:	f000 fc9e 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 8;
 8000960:	2308      	movs	r3, #8
 8000962:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000964:	463b      	mov	r3, r7
 8000966:	4619      	mov	r1, r3
 8000968:	482f      	ldr	r0, [pc, #188]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 800096a:	f002 f9bf 	bl	8002cec <HAL_ADC_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_ADC3_Init+0x138>
  {
    Error_Handler();
 8000974:	f000 fc92 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 9;
 8000978:	2309      	movs	r3, #9
 800097a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	4619      	mov	r1, r3
 8000980:	4829      	ldr	r0, [pc, #164]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 8000982:	f002 f9b3 	bl	8002cec <HAL_ADC_ConfigChannel>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_ADC3_Init+0x150>
  {
    Error_Handler();
 800098c:	f000 fc86 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 10;
 8000990:	230a      	movs	r3, #10
 8000992:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000994:	463b      	mov	r3, r7
 8000996:	4619      	mov	r1, r3
 8000998:	4823      	ldr	r0, [pc, #140]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 800099a:	f002 f9a7 	bl	8002cec <HAL_ADC_ConfigChannel>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_ADC3_Init+0x168>
  {
    Error_Handler();
 80009a4:	f000 fc7a 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 11;
 80009a8:	230b      	movs	r3, #11
 80009aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009ac:	463b      	mov	r3, r7
 80009ae:	4619      	mov	r1, r3
 80009b0:	481d      	ldr	r0, [pc, #116]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 80009b2:	f002 f99b 	bl	8002cec <HAL_ADC_ConfigChannel>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_ADC3_Init+0x180>
  {
    Error_Handler();
 80009bc:	f000 fc6e 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 12;
 80009c0:	230c      	movs	r3, #12
 80009c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	4817      	ldr	r0, [pc, #92]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 80009ca:	f002 f98f 	bl	8002cec <HAL_ADC_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ADC3_Init+0x198>
  {
    Error_Handler();
 80009d4:	f000 fc62 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 13;
 80009d8:	230d      	movs	r3, #13
 80009da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009dc:	463b      	mov	r3, r7
 80009de:	4619      	mov	r1, r3
 80009e0:	4811      	ldr	r0, [pc, #68]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 80009e2:	f002 f983 	bl	8002cec <HAL_ADC_ConfigChannel>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_ADC3_Init+0x1b0>
  {
    Error_Handler();
 80009ec:	f000 fc56 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 14;
 80009f0:	230e      	movs	r3, #14
 80009f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009f4:	463b      	mov	r3, r7
 80009f6:	4619      	mov	r1, r3
 80009f8:	480b      	ldr	r0, [pc, #44]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 80009fa:	f002 f977 	bl	8002cec <HAL_ADC_ConfigChannel>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_ADC3_Init+0x1c8>
  {
    Error_Handler();
 8000a04:	f000 fc4a 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 15;
 8000a08:	230f      	movs	r3, #15
 8000a0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_ADC3_Init+0x1e8>)
 8000a12:	f002 f96b 	bl	8002cec <HAL_ADC_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_ADC3_Init+0x1e0>
  {
    Error_Handler();
 8000a1c:	f000 fc3e 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200010a4 	.word	0x200010a4
 8000a2c:	40012200 	.word	0x40012200
 8000a30:	0f000001 	.word	0x0f000001

08000a34 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_CAN1_Init+0x64>)
 8000a3a:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <MX_CAN1_Init+0x68>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <MX_CAN1_Init+0x64>)
 8000a40:	220c      	movs	r2, #12
 8000a42:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_CAN1_Init+0x64>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <MX_CAN1_Init+0x64>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_CAN1_Init+0x64>)
 8000a52:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000a56:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_CAN1_Init+0x64>)
 8000a5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a5e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <MX_CAN1_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_CAN1_Init+0x64>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <MX_CAN1_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_CAN1_Init+0x64>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <MX_CAN1_Init+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_CAN1_Init+0x64>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_CAN1_Init+0x64>)
 8000a86:	f002 fb5f 	bl	8003148 <HAL_CAN_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a90:	f000 fc04 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200010ec 	.word	0x200010ec
 8000a9c:	40006400 	.word	0x40006400

08000aa0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_CAN2_Init+0x64>)
 8000aa6:	4a18      	ldr	r2, [pc, #96]	; (8000b08 <MX_CAN2_Init+0x68>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 12;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <MX_CAN2_Init+0x64>)
 8000aac:	220c      	movs	r2, #12
 8000aae:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_CAN2_Init+0x64>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <MX_CAN2_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_CAN2_Init+0x64>)
 8000abe:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000ac2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_CAN2_Init+0x64>)
 8000ac6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000aca:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000acc:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <MX_CAN2_Init+0x64>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_CAN2_Init+0x64>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <MX_CAN2_Init+0x64>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_CAN2_Init+0x64>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <MX_CAN2_Init+0x64>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_CAN2_Init+0x64>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_CAN2_Init+0x64>)
 8000af2:	f002 fb29 	bl	8003148 <HAL_CAN_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000afc:	f000 fbce 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20001114 	.word	0x20001114
 8000b08:	40006800 	.word	0x40006800

08000b0c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_CRC_Init+0x20>)
 8000b12:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <MX_CRC_Init+0x24>)
 8000b14:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_CRC_Init+0x20>)
 8000b18:	f003 f9b3 	bl	8003e82 <HAL_CRC_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000b22:	f000 fbbb 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	2000113c 	.word	0x2000113c
 8000b30:	40023000 	.word	0x40023000

08000b34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <MX_I2C1_Init+0x50>)
 8000b3a:	4a13      	ldr	r2, [pc, #76]	; (8000b88 <MX_I2C1_Init+0x54>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_I2C1_Init+0x50>)
 8000b40:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <MX_I2C1_Init+0x58>)
 8000b42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_I2C1_Init+0x50>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_I2C1_Init+0x50>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_I2C1_Init+0x50>)
 8000b52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <MX_I2C1_Init+0x50>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_I2C1_Init+0x50>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b64:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <MX_I2C1_Init+0x50>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_I2C1_Init+0x50>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b70:	4804      	ldr	r0, [pc, #16]	; (8000b84 <MX_I2C1_Init+0x50>)
 8000b72:	f003 fb75 	bl	8004260 <HAL_I2C_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b7c:	f000 fb8e 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20001144 	.word	0x20001144
 8000b88:	40005400 	.word	0x40005400
 8000b8c:	000186a0 	.word	0x000186a0

08000b90 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <MX_I2C2_Init+0x50>)
 8000b96:	4a13      	ldr	r2, [pc, #76]	; (8000be4 <MX_I2C2_Init+0x54>)
 8000b98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_I2C2_Init+0x50>)
 8000b9c:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <MX_I2C2_Init+0x58>)
 8000b9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_I2C2_Init+0x50>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_I2C2_Init+0x50>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_I2C2_Init+0x50>)
 8000bae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bb2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <MX_I2C2_Init+0x50>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_I2C2_Init+0x50>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <MX_I2C2_Init+0x50>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_I2C2_Init+0x50>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bcc:	4804      	ldr	r0, [pc, #16]	; (8000be0 <MX_I2C2_Init+0x50>)
 8000bce:	f003 fb47 	bl	8004260 <HAL_I2C_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000bd8:	f000 fb60 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20001198 	.word	0x20001198
 8000be4:	40005800 	.word	0x40005800
 8000be8:	000186a0 	.word	0x000186a0

08000bec <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <MX_I2C3_Init+0x50>)
 8000bf2:	4a13      	ldr	r2, [pc, #76]	; (8000c40 <MX_I2C3_Init+0x54>)
 8000bf4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_I2C3_Init+0x50>)
 8000bf8:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <MX_I2C3_Init+0x58>)
 8000bfa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <MX_I2C3_Init+0x50>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_I2C3_Init+0x50>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_I2C3_Init+0x50>)
 8000c0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c0e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <MX_I2C3_Init+0x50>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_I2C3_Init+0x50>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c1c:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <MX_I2C3_Init+0x50>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_I2C3_Init+0x50>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000c28:	4804      	ldr	r0, [pc, #16]	; (8000c3c <MX_I2C3_Init+0x50>)
 8000c2a:	f003 fb19 	bl	8004260 <HAL_I2C_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000c34:	f000 fb32 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200011ec 	.word	0x200011ec
 8000c40:	40005c00 	.word	0x40005c00
 8000c44:	000186a0 	.word	0x000186a0

08000c48 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_RTC_Init+0x44>)
 8000c4e:	4a10      	ldr	r2, [pc, #64]	; (8000c90 <MX_RTC_Init+0x48>)
 8000c50:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <MX_RTC_Init+0x44>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <MX_RTC_Init+0x44>)
 8000c5a:	227f      	movs	r2, #127	; 0x7f
 8000c5c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <MX_RTC_Init+0x44>)
 8000c60:	22ff      	movs	r2, #255	; 0xff
 8000c62:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <MX_RTC_Init+0x44>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <MX_RTC_Init+0x44>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <MX_RTC_Init+0x44>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_RTC_Init+0x44>)
 8000c78:	f004 fcc2 	bl	8005600 <HAL_RTC_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000c82:	f000 fb0b 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20001240 	.word	0x20001240
 8000c90:	40002800 	.word	0x40002800

08000c94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000c9a:	4a18      	ldr	r2, [pc, #96]	; (8000cfc <MX_SPI2_Init+0x68>)
 8000c9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c9e:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000ca0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cc0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000cc4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd8:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000ce0:	220a      	movs	r2, #10
 8000ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ce4:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000ce6:	f004 fd85 	bl	80057f4 <HAL_SPI_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000cf0:	f000 fad4 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20001260 	.word	0x20001260
 8000cfc:	40003800 	.word	0x40003800

08000d00 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d06:	4a18      	ldr	r2, [pc, #96]	; (8000d68 <MX_SPI3_Init+0x68>)
 8000d08:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d0a:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d10:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d2c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d30:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d4c:	220a      	movs	r2, #10
 8000d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d52:	f004 fd4f 	bl	80057f4 <HAL_SPI_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000d5c:	f000 fa9e 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	200012b8 	.word	0x200012b8
 8000d68:	40003c00 	.word	0x40003c00

08000d6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b096      	sub	sp, #88	; 0x58
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]
 8000d9a:	615a      	str	r2, [r3, #20]
 8000d9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2220      	movs	r2, #32
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f00a ffa1 	bl	800bcec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000daa:	4b50      	ldr	r3, [pc, #320]	; (8000eec <MX_TIM1_Init+0x180>)
 8000dac:	4a50      	ldr	r2, [pc, #320]	; (8000ef0 <MX_TIM1_Init+0x184>)
 8000dae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8399;
 8000db0:	4b4e      	ldr	r3, [pc, #312]	; (8000eec <MX_TIM1_Init+0x180>)
 8000db2:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000db6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db8:	4b4c      	ldr	r3, [pc, #304]	; (8000eec <MX_TIM1_Init+0x180>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4;
 8000dbe:	4b4b      	ldr	r3, [pc, #300]	; (8000eec <MX_TIM1_Init+0x180>)
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc4:	4b49      	ldr	r3, [pc, #292]	; (8000eec <MX_TIM1_Init+0x180>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dca:	4b48      	ldr	r3, [pc, #288]	; (8000eec <MX_TIM1_Init+0x180>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd0:	4b46      	ldr	r3, [pc, #280]	; (8000eec <MX_TIM1_Init+0x180>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dd6:	4845      	ldr	r0, [pc, #276]	; (8000eec <MX_TIM1_Init+0x180>)
 8000dd8:	f004 fd95 	bl	8005906 <HAL_TIM_Base_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000de2:	f000 fa5b 	bl	800129c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000df0:	4619      	mov	r1, r3
 8000df2:	483e      	ldr	r0, [pc, #248]	; (8000eec <MX_TIM1_Init+0x180>)
 8000df4:	f004 fef2 	bl	8005bdc <HAL_TIM_ConfigClockSource>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000dfe:	f000 fa4d 	bl	800129c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e02:	483a      	ldr	r0, [pc, #232]	; (8000eec <MX_TIM1_Init+0x180>)
 8000e04:	f004 fdce 	bl	80059a4 <HAL_TIM_PWM_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000e0e:	f000 fa45 	bl	800129c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e12:	2300      	movs	r3, #0
 8000e14:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4832      	ldr	r0, [pc, #200]	; (8000eec <MX_TIM1_Init+0x180>)
 8000e22:	f005 fa8d 	bl	8006340 <HAL_TIMEx_MasterConfigSynchronization>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000e2c:	f000 fa36 	bl	800129c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e30:	2360      	movs	r3, #96	; 0x60
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e44:	2300      	movs	r3, #0
 8000e46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e50:	2200      	movs	r2, #0
 8000e52:	4619      	mov	r1, r3
 8000e54:	4825      	ldr	r0, [pc, #148]	; (8000eec <MX_TIM1_Init+0x180>)
 8000e56:	f004 fdff 	bl	8005a58 <HAL_TIM_PWM_ConfigChannel>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000e60:	f000 fa1c 	bl	800129c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e68:	2204      	movs	r2, #4
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	481f      	ldr	r0, [pc, #124]	; (8000eec <MX_TIM1_Init+0x180>)
 8000e6e:	f004 fdf3 	bl	8005a58 <HAL_TIM_PWM_ConfigChannel>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000e78:	f000 fa10 	bl	800129c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e80:	2208      	movs	r2, #8
 8000e82:	4619      	mov	r1, r3
 8000e84:	4819      	ldr	r0, [pc, #100]	; (8000eec <MX_TIM1_Init+0x180>)
 8000e86:	f004 fde7 	bl	8005a58 <HAL_TIM_PWM_ConfigChannel>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000e90:	f000 fa04 	bl	800129c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e98:	220c      	movs	r2, #12
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4813      	ldr	r0, [pc, #76]	; (8000eec <MX_TIM1_Init+0x180>)
 8000e9e:	f004 fddb 	bl	8005a58 <HAL_TIM_PWM_ConfigChannel>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000ea8:	f000 f9f8 	bl	800129c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4807      	ldr	r0, [pc, #28]	; (8000eec <MX_TIM1_Init+0x180>)
 8000ed0:	f005 fab2 	bl	8006438 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000eda:	f000 f9df 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ede:	4803      	ldr	r0, [pc, #12]	; (8000eec <MX_TIM1_Init+0x180>)
 8000ee0:	f000 fde4 	bl	8001aac <HAL_TIM_MspPostInit>

}
 8000ee4:	bf00      	nop
 8000ee6:	3758      	adds	r7, #88	; 0x58
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20001310 	.word	0x20001310
 8000ef0:	40010000 	.word	0x40010000

08000ef4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_UART4_Init+0x4c>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <MX_UART4_Init+0x50>)
 8000efc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <MX_UART4_Init+0x4c>)
 8000f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f04:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_UART4_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_UART4_Init+0x4c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_UART4_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_UART4_Init+0x4c>)
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_UART4_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_UART4_Init+0x4c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_UART4_Init+0x4c>)
 8000f2c:	f005 fad6 	bl	80064dc <HAL_UART_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000f36:	f000 f9b1 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20001358 	.word	0x20001358
 8000f44:	40004c00 	.word	0x40004c00

08000f48 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_UART5_Init+0x4c>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <MX_UART5_Init+0x50>)
 8000f50:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <MX_UART5_Init+0x4c>)
 8000f54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f58:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_UART5_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_UART5_Init+0x4c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_UART5_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_UART5_Init+0x4c>)
 8000f6e:	220c      	movs	r2, #12
 8000f70:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_UART5_Init+0x4c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_UART5_Init+0x4c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_UART5_Init+0x4c>)
 8000f80:	f005 faac 	bl	80064dc <HAL_UART_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000f8a:	f000 f987 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000139c 	.word	0x2000139c
 8000f98:	40005000 	.word	0x40005000

08000f9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08e      	sub	sp, #56	; 0x38
 8000fa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	623b      	str	r3, [r7, #32]
 8000fb6:	4bae      	ldr	r3, [pc, #696]	; (8001270 <MX_GPIO_Init+0x2d4>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4aad      	ldr	r2, [pc, #692]	; (8001270 <MX_GPIO_Init+0x2d4>)
 8000fbc:	f043 0310 	orr.w	r3, r3, #16
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4bab      	ldr	r3, [pc, #684]	; (8001270 <MX_GPIO_Init+0x2d4>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0310 	and.w	r3, r3, #16
 8000fca:	623b      	str	r3, [r7, #32]
 8000fcc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
 8000fd2:	4ba7      	ldr	r3, [pc, #668]	; (8001270 <MX_GPIO_Init+0x2d4>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4aa6      	ldr	r2, [pc, #664]	; (8001270 <MX_GPIO_Init+0x2d4>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4ba4      	ldr	r3, [pc, #656]	; (8001270 <MX_GPIO_Init+0x2d4>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	61fb      	str	r3, [r7, #28]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	61bb      	str	r3, [r7, #24]
 8000fee:	4ba0      	ldr	r3, [pc, #640]	; (8001270 <MX_GPIO_Init+0x2d4>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a9f      	ldr	r2, [pc, #636]	; (8001270 <MX_GPIO_Init+0x2d4>)
 8000ff4:	f043 0320 	orr.w	r3, r3, #32
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b9d      	ldr	r3, [pc, #628]	; (8001270 <MX_GPIO_Init+0x2d4>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0320 	and.w	r3, r3, #32
 8001002:	61bb      	str	r3, [r7, #24]
 8001004:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	4b99      	ldr	r3, [pc, #612]	; (8001270 <MX_GPIO_Init+0x2d4>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a98      	ldr	r2, [pc, #608]	; (8001270 <MX_GPIO_Init+0x2d4>)
 8001010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b96      	ldr	r3, [pc, #600]	; (8001270 <MX_GPIO_Init+0x2d4>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	4b92      	ldr	r3, [pc, #584]	; (8001270 <MX_GPIO_Init+0x2d4>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a91      	ldr	r2, [pc, #580]	; (8001270 <MX_GPIO_Init+0x2d4>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b8f      	ldr	r3, [pc, #572]	; (8001270 <MX_GPIO_Init+0x2d4>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b8b      	ldr	r3, [pc, #556]	; (8001270 <MX_GPIO_Init+0x2d4>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a8a      	ldr	r2, [pc, #552]	; (8001270 <MX_GPIO_Init+0x2d4>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b88      	ldr	r3, [pc, #544]	; (8001270 <MX_GPIO_Init+0x2d4>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	4b84      	ldr	r3, [pc, #528]	; (8001270 <MX_GPIO_Init+0x2d4>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a83      	ldr	r2, [pc, #524]	; (8001270 <MX_GPIO_Init+0x2d4>)
 8001064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b81      	ldr	r3, [pc, #516]	; (8001270 <MX_GPIO_Init+0x2d4>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	4b7d      	ldr	r3, [pc, #500]	; (8001270 <MX_GPIO_Init+0x2d4>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a7c      	ldr	r2, [pc, #496]	; (8001270 <MX_GPIO_Init+0x2d4>)
 8001080:	f043 0308 	orr.w	r3, r3, #8
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b7a      	ldr	r3, [pc, #488]	; (8001270 <MX_GPIO_Init+0x2d4>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0308 	and.w	r3, r3, #8
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STOP_LAMP_Pin|VEHICLE_INLAMP1_Pin|VEHICLE_INLAMP2_Pin|BONNET_LAMP_Pin
 8001092:	2200      	movs	r2, #0
 8001094:	21ff      	movs	r1, #255	; 0xff
 8001096:	4877      	ldr	r0, [pc, #476]	; (8001274 <MX_GPIO_Init+0x2d8>)
 8001098:	f003 f8a4 	bl	80041e4 <HAL_GPIO_WritePin>
                          |RIGHT_SIGNAL_Pin|DYH_GPIO7_Pin|FRONT_LAMP_Pin|BACK_LAMP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LEFT_SIGNAL_Pin|GPIO_MPU6050_GYRO2_AD0_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 80010a2:	4875      	ldr	r0, [pc, #468]	; (8001278 <MX_GPIO_Init+0x2dc>)
 80010a4:	f003 f89e 	bl	80041e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DYH_GPIO2_Pin|DYH_GPIO3_Pin|DYH_GPIO4_Pin, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80010ae:	4873      	ldr	r0, [pc, #460]	; (800127c <MX_GPIO_Init+0x2e0>)
 80010b0:	f003 f898 	bl	80041e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DYH_GPIO5_Pin|DYH_GPIO6_Pin|DEBUG_SET_Pin|GPIO_SX1262_TXEN_Pin
 80010b4:	2200      	movs	r2, #0
 80010b6:	f245 5167 	movw	r1, #21863	; 0x5567
 80010ba:	4871      	ldr	r0, [pc, #452]	; (8001280 <MX_GPIO_Init+0x2e4>)
 80010bc:	f003 f892 	bl	80041e4 <HAL_GPIO_WritePin>
                          |GPIO_SX1262_RXEN_Pin|GPIO_SX1262_RESET_Pin|GPIO_MPU6050_GYRO1_AD0_Pin|GPIO_MPU6050_GYRORIGHT_AD0_Pin
                          |GPIO_MPU6050_GYROLEFT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_Output_M1_S2_Pin|GPIO_Output_M1_S1_Pin|GPIO_Output_M1_S0_Pin|GPIO_Output_M0_S2_Pin
 80010c0:	2200      	movs	r2, #0
 80010c2:	f64f 4180 	movw	r1, #64640	; 0xfc80
 80010c6:	486f      	ldr	r0, [pc, #444]	; (8001284 <MX_GPIO_Init+0x2e8>)
 80010c8:	f003 f88c 	bl	80041e4 <HAL_GPIO_WritePin>
                          |GPIO_Output_M0_S1_Pin|GPIO_Output_M0_S0_Pin|GPIO_Output_LED_DRIVER_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : STOP_LAMP_Pin VEHICLE_INLAMP1_Pin VEHICLE_INLAMP2_Pin BONNET_LAMP_Pin
                           RIGHT_SIGNAL_Pin DYH_GPIO7_Pin FRONT_LAMP_Pin BACK_LAMP_Pin */
  GPIO_InitStruct.Pin = STOP_LAMP_Pin|VEHICLE_INLAMP1_Pin|VEHICLE_INLAMP2_Pin|BONNET_LAMP_Pin
 80010cc:	23ff      	movs	r3, #255	; 0xff
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
                          |RIGHT_SIGNAL_Pin|DYH_GPIO7_Pin|FRONT_LAMP_Pin|BACK_LAMP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e0:	4619      	mov	r1, r3
 80010e2:	4864      	ldr	r0, [pc, #400]	; (8001274 <MX_GPIO_Init+0x2d8>)
 80010e4:	f002 feea 	bl	8003ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_SIGNAL_Pin GPIO_MPU6050_GYRO2_AD0_Pin */
  GPIO_InitStruct.Pin = LEFT_SIGNAL_Pin|GPIO_MPU6050_GYRO2_AD0_Pin;
 80010e8:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fe:	4619      	mov	r1, r3
 8001100:	485d      	ldr	r0, [pc, #372]	; (8001278 <MX_GPIO_Init+0x2dc>)
 8001102:	f002 fedb 	bl	8003ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : DYH_GPIO2_Pin DYH_GPIO3_Pin DYH_GPIO4_Pin */
  GPIO_InitStruct.Pin = DYH_GPIO2_Pin|DYH_GPIO3_Pin|DYH_GPIO4_Pin;
 8001106:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110c:	2301      	movs	r3, #1
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111c:	4619      	mov	r1, r3
 800111e:	4857      	ldr	r0, [pc, #348]	; (800127c <MX_GPIO_Init+0x2e0>)
 8001120:	f002 fecc 	bl	8003ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : DYH_GPIO5_Pin DYH_GPIO6_Pin DEBUG_SET_Pin GPIO_SX1262_TXEN_Pin
                           GPIO_SX1262_RXEN_Pin GPIO_SX1262_RESET_Pin GPIO_MPU6050_GYRO1_AD0_Pin GPIO_MPU6050_GYRORIGHT_AD0_Pin
                           GPIO_MPU6050_GYROLEFT_Pin */
  GPIO_InitStruct.Pin = DYH_GPIO5_Pin|DYH_GPIO6_Pin|DEBUG_SET_Pin|GPIO_SX1262_TXEN_Pin
 8001124:	f245 5367 	movw	r3, #21863	; 0x5567
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_SX1262_RXEN_Pin|GPIO_SX1262_RESET_Pin|GPIO_MPU6050_GYRO1_AD0_Pin|GPIO_MPU6050_GYRORIGHT_AD0_Pin
                          |GPIO_MPU6050_GYROLEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112a:	2301      	movs	r3, #1
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113a:	4619      	mov	r1, r3
 800113c:	4850      	ldr	r0, [pc, #320]	; (8001280 <MX_GPIO_Init+0x2e4>)
 800113e:	f002 febd 	bl	8003ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : DYH_BUSY_INPUT_Pin */
  GPIO_InitStruct.Pin = DYH_BUSY_INPUT_Pin;
 8001142:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001148:	2300      	movs	r3, #0
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DYH_BUSY_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001154:	4619      	mov	r1, r3
 8001156:	4847      	ldr	r0, [pc, #284]	; (8001274 <MX_GPIO_Init+0x2d8>)
 8001158:	f002 feb0 	bl	8003ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_Output_M1_S2_Pin GPIO_Output_M1_S1_Pin GPIO_Output_M1_S0_Pin GPIO_Output_M0_S2_Pin
                           GPIO_Output_M0_S1_Pin GPIO_Output_M0_S0_Pin GPIO_Output_LED_DRIVER_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_Output_M1_S2_Pin|GPIO_Output_M1_S1_Pin|GPIO_Output_M1_S0_Pin|GPIO_Output_M0_S2_Pin
 800115c:	f64f 4380 	movw	r3, #64640	; 0xfc80
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_Output_M0_S1_Pin|GPIO_Output_M0_S0_Pin|GPIO_Output_LED_DRIVER_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001162:	2301      	movs	r3, #1
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800116e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001172:	4619      	mov	r1, r3
 8001174:	4843      	ldr	r0, [pc, #268]	; (8001284 <MX_GPIO_Init+0x2e8>)
 8001176:	f002 fea1 	bl	8003ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI3_SX1262_DIO2_Pin EXTI4_SX1262_DIO1_Pin EXTI9_MPU6050_GYRO1_Pin EXT11_MPU5060_GYRORIGHT_Pin
                           EXTI13_MPU6050_GYROLEFT_Pin */
  GPIO_InitStruct.Pin = EXTI3_SX1262_DIO2_Pin|EXTI4_SX1262_DIO1_Pin|EXTI9_MPU6050_GYRO1_Pin|EXT11_MPU5060_GYRORIGHT_Pin
 800117a:	f642 2318 	movw	r3, #10776	; 0x2a18
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
                          |EXTI13_MPU6050_GYROLEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001180:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800118a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118e:	4619      	mov	r1, r3
 8001190:	483b      	ldr	r0, [pc, #236]	; (8001280 <MX_GPIO_Init+0x2e4>)
 8001192:	f002 fe93 	bl	8003ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1262_BUSY_INPUT_Pin */
  GPIO_InitStruct.Pin = SX1262_BUSY_INPUT_Pin;
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119a:	2300      	movs	r3, #0
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX1262_BUSY_INPUT_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a6:	4619      	mov	r1, r3
 80011a8:	4835      	ldr	r0, [pc, #212]	; (8001280 <MX_GPIO_Init+0x2e4>)
 80011aa:	f002 fe87 	bl	8003ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI7_MPU6050_GYRO2_Pin */
  GPIO_InitStruct.Pin = EXTI7_MPU6050_GYRO2_Pin;
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXTI7_MPU6050_GYRO2_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c0:	4619      	mov	r1, r3
 80011c2:	482d      	ldr	r0, [pc, #180]	; (8001278 <MX_GPIO_Init+0x2dc>)
 80011c4:	f002 fe7a 	bl	8003ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI0_IGN_KEY_Pin */
  GPIO_InitStruct.Pin = EXTI0_IGN_KEY_Pin;
 80011c8:	2301      	movs	r3, #1
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXTI0_IGN_KEY_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011da:	4619      	mov	r1, r3
 80011dc:	4829      	ldr	r0, [pc, #164]	; (8001284 <MX_GPIO_Init+0x2e8>)
 80011de:	f002 fe6d 	bl	8003ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI8_RIGHTARM_Pin */
  GPIO_InitStruct.Pin = EXTI8_RIGHTARM_Pin;
 80011e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXTI8_RIGHTARM_GPIO_Port, &GPIO_InitStruct);
 80011f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f6:	4619      	mov	r1, r3
 80011f8:	4823      	ldr	r0, [pc, #140]	; (8001288 <MX_GPIO_Init+0x2ec>)
 80011fa:	f002 fe5f 	bl	8003ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_LEFTARM_INPUT_Pin */
  GPIO_InitStruct.Pin = GPIO_LEFTARM_INPUT_Pin;
 80011fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001204:	2300      	movs	r3, #0
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIO_LEFTARM_INPUT_GPIO_Port, &GPIO_InitStruct);
 800120c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001210:	4619      	mov	r1, r3
 8001212:	481d      	ldr	r0, [pc, #116]	; (8001288 <MX_GPIO_Init+0x2ec>)
 8001214:	f002 fe52 	bl	8003ebc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001218:	2200      	movs	r2, #0
 800121a:	2105      	movs	r1, #5
 800121c:	2006      	movs	r0, #6
 800121e:	f002 fdfa 	bl	8003e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001222:	2006      	movs	r0, #6
 8001224:	f002 fe13 	bl	8003e4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2105      	movs	r1, #5
 800122c:	2009      	movs	r0, #9
 800122e:	f002 fdf2 	bl	8003e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001232:	2009      	movs	r0, #9
 8001234:	f002 fe0b 	bl	8003e4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	2105      	movs	r1, #5
 800123c:	200a      	movs	r0, #10
 800123e:	f002 fdea 	bl	8003e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001242:	200a      	movs	r0, #10
 8001244:	f002 fe03 	bl	8003e4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001248:	2200      	movs	r2, #0
 800124a:	2105      	movs	r1, #5
 800124c:	2017      	movs	r0, #23
 800124e:	f002 fde2 	bl	8003e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001252:	2017      	movs	r0, #23
 8001254:	f002 fdfb 	bl	8003e4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	2105      	movs	r1, #5
 800125c:	2028      	movs	r0, #40	; 0x28
 800125e:	f002 fdda 	bl	8003e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001262:	2028      	movs	r0, #40	; 0x28
 8001264:	f002 fdf3 	bl	8003e4e <HAL_NVIC_EnableIRQ>

}
 8001268:	bf00      	nop
 800126a:	3738      	adds	r7, #56	; 0x38
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40023800 	.word	0x40023800
 8001274:	40021000 	.word	0x40021000
 8001278:	40020800 	.word	0x40020800
 800127c:	40021400 	.word	0x40021400
 8001280:	40021800 	.word	0x40021800
 8001284:	40020c00 	.word	0x40020c00
 8001288:	40020400 	.word	0x40020400

0800128c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001294:	2001      	movs	r0, #1
 8001296:	f005 fdf3 	bl	8006e80 <osDelay>
 800129a:	e7fb      	b.n	8001294 <StartDefaultTask+0x8>

0800129c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a0:	b672      	cpsid	i
}
 80012a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <Error_Handler+0x8>
	...

080012a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_MspInit+0x54>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	4a11      	ldr	r2, [pc, #68]	; (80012fc <HAL_MspInit+0x54>)
 80012b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012bc:	6453      	str	r3, [r2, #68]	; 0x44
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <HAL_MspInit+0x54>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_MspInit+0x54>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <HAL_MspInit+0x54>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d8:	6413      	str	r3, [r2, #64]	; 0x40
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <HAL_MspInit+0x54>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	210f      	movs	r1, #15
 80012ea:	f06f 0001 	mvn.w	r0, #1
 80012ee:	f002 fd92 	bl	8003e16 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800

08001300 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b090      	sub	sp, #64	; 0x40
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a62      	ldr	r2, [pc, #392]	; (80014a8 <HAL_ADC_MspInit+0x1a8>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d15c      	bne.n	80013dc <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
 8001326:	4b61      	ldr	r3, [pc, #388]	; (80014ac <HAL_ADC_MspInit+0x1ac>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	4a60      	ldr	r2, [pc, #384]	; (80014ac <HAL_ADC_MspInit+0x1ac>)
 800132c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001330:	6453      	str	r3, [r2, #68]	; 0x44
 8001332:	4b5e      	ldr	r3, [pc, #376]	; (80014ac <HAL_ADC_MspInit+0x1ac>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
 800133c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
 8001342:	4b5a      	ldr	r3, [pc, #360]	; (80014ac <HAL_ADC_MspInit+0x1ac>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a59      	ldr	r2, [pc, #356]	; (80014ac <HAL_ADC_MspInit+0x1ac>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b57      	ldr	r3, [pc, #348]	; (80014ac <HAL_ADC_MspInit+0x1ac>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
 800135e:	4b53      	ldr	r3, [pc, #332]	; (80014ac <HAL_ADC_MspInit+0x1ac>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a52      	ldr	r2, [pc, #328]	; (80014ac <HAL_ADC_MspInit+0x1ac>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b50      	ldr	r3, [pc, #320]	; (80014ac <HAL_ADC_MspInit+0x1ac>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	623b      	str	r3, [r7, #32]
 8001374:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
 800137a:	4b4c      	ldr	r3, [pc, #304]	; (80014ac <HAL_ADC_MspInit+0x1ac>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a4b      	ldr	r2, [pc, #300]	; (80014ac <HAL_ADC_MspInit+0x1ac>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b49      	ldr	r3, [pc, #292]	; (80014ac <HAL_ADC_MspInit+0x1ac>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	61fb      	str	r3, [r7, #28]
 8001390:	69fb      	ldr	r3, [r7, #28]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_IN4_BRAKE_Pin|ADC1_IN5_ANGLETEST_Pin|ADC1_IN6_GAS_Pin|ADC1_IN7_RIGHTARM_AXIS_Y_Pin;
 8001392:	23f0      	movs	r3, #240	; 0xf0
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001396:	2303      	movs	r3, #3
 8001398:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a2:	4619      	mov	r1, r3
 80013a4:	4842      	ldr	r0, [pc, #264]	; (80014b0 <HAL_ADC_MspInit+0x1b0>)
 80013a6:	f002 fd89 	bl	8003ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN14_LEFTARM_AXIS_X_Pin|ADC1_IN15_LEFTARM_AXIS_Y_Pin;
 80013aa:	2330      	movs	r3, #48	; 0x30
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ae:	2303      	movs	r3, #3
 80013b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ba:	4619      	mov	r1, r3
 80013bc:	483d      	ldr	r0, [pc, #244]	; (80014b4 <HAL_ADC_MspInit+0x1b4>)
 80013be:	f002 fd7d 	bl	8003ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN9_RIGHTARM_AXIS_X_Pin;
 80013c2:	2302      	movs	r3, #2
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c6:	2303      	movs	r3, #3
 80013c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ADC1_IN9_RIGHTARM_AXIS_X_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013d2:	4619      	mov	r1, r3
 80013d4:	4838      	ldr	r0, [pc, #224]	; (80014b8 <HAL_ADC_MspInit+0x1b8>)
 80013d6:	f002 fd71 	bl	8003ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80013da:	e061      	b.n	80014a0 <HAL_ADC_MspInit+0x1a0>
  else if(hadc->Instance==ADC3)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a36      	ldr	r2, [pc, #216]	; (80014bc <HAL_ADC_MspInit+0x1bc>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d15c      	bne.n	80014a0 <HAL_ADC_MspInit+0x1a0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
 80013ea:	4b30      	ldr	r3, [pc, #192]	; (80014ac <HAL_ADC_MspInit+0x1ac>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	4a2f      	ldr	r2, [pc, #188]	; (80014ac <HAL_ADC_MspInit+0x1ac>)
 80013f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013f4:	6453      	str	r3, [r2, #68]	; 0x44
 80013f6:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <HAL_ADC_MspInit+0x1ac>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fe:	61bb      	str	r3, [r7, #24]
 8001400:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	4b29      	ldr	r3, [pc, #164]	; (80014ac <HAL_ADC_MspInit+0x1ac>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a28      	ldr	r2, [pc, #160]	; (80014ac <HAL_ADC_MspInit+0x1ac>)
 800140c:	f043 0320 	orr.w	r3, r3, #32
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <HAL_ADC_MspInit+0x1ac>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0320 	and.w	r3, r3, #32
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	4b22      	ldr	r3, [pc, #136]	; (80014ac <HAL_ADC_MspInit+0x1ac>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a21      	ldr	r2, [pc, #132]	; (80014ac <HAL_ADC_MspInit+0x1ac>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <HAL_ADC_MspInit+0x1ac>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <HAL_ADC_MspInit+0x1ac>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a1a      	ldr	r2, [pc, #104]	; (80014ac <HAL_ADC_MspInit+0x1ac>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <HAL_ADC_MspInit+0x1ac>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC3_IN9_5VIN_Pin|GPIO_PIN_4|GPIO_PIN_5|ADC3_IN4_VINLAMP2_Pin
 8001456:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145c:	2303      	movs	r3, #3
 800145e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001464:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001468:	4619      	mov	r1, r3
 800146a:	4815      	ldr	r0, [pc, #84]	; (80014c0 <HAL_ADC_MspInit+0x1c0>)
 800146c:	f002 fd26 	bl	8003ebc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC3_IN10_12VIN_Pin|ADC3_IN11_VMCU_Pin|ADC3_IN12_3V3IN_Pin|ADC3_IN13_M0_Pin;
 8001470:	230f      	movs	r3, #15
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001474:	2303      	movs	r3, #3
 8001476:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800147c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001480:	4619      	mov	r1, r3
 8001482:	480c      	ldr	r0, [pc, #48]	; (80014b4 <HAL_ADC_MspInit+0x1b4>)
 8001484:	f002 fd1a 	bl	8003ebc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC3_IN1_FRONT_LIGHT_CURRENT_Pin|ADC3_IN2_BACK_LIGHT_CURRENT_Pin|ADC3_IN3_VINLAMP1_Pin;
 8001488:	230e      	movs	r3, #14
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800148c:	2303      	movs	r3, #3
 800148e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001494:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001498:	4619      	mov	r1, r3
 800149a:	4805      	ldr	r0, [pc, #20]	; (80014b0 <HAL_ADC_MspInit+0x1b0>)
 800149c:	f002 fd0e 	bl	8003ebc <HAL_GPIO_Init>
}
 80014a0:	bf00      	nop
 80014a2:	3740      	adds	r7, #64	; 0x40
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40012000 	.word	0x40012000
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020000 	.word	0x40020000
 80014b4:	40020800 	.word	0x40020800
 80014b8:	40020400 	.word	0x40020400
 80014bc:	40012200 	.word	0x40012200
 80014c0:	40021400 	.word	0x40021400

080014c4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08c      	sub	sp, #48	; 0x30
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 031c 	add.w	r3, r7, #28
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a53      	ldr	r2, [pc, #332]	; (8001630 <HAL_CAN_MspInit+0x16c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d156      	bne.n	8001594 <HAL_CAN_MspInit+0xd0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80014e6:	4b53      	ldr	r3, [pc, #332]	; (8001634 <HAL_CAN_MspInit+0x170>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	4a51      	ldr	r2, [pc, #324]	; (8001634 <HAL_CAN_MspInit+0x170>)
 80014ee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80014f0:	4b50      	ldr	r3, [pc, #320]	; (8001634 <HAL_CAN_MspInit+0x170>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d10d      	bne.n	8001514 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80014f8:	2300      	movs	r3, #0
 80014fa:	61bb      	str	r3, [r7, #24]
 80014fc:	4b4e      	ldr	r3, [pc, #312]	; (8001638 <HAL_CAN_MspInit+0x174>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	4a4d      	ldr	r2, [pc, #308]	; (8001638 <HAL_CAN_MspInit+0x174>)
 8001502:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001506:	6413      	str	r3, [r2, #64]	; 0x40
 8001508:	4b4b      	ldr	r3, [pc, #300]	; (8001638 <HAL_CAN_MspInit+0x174>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001510:	61bb      	str	r3, [r7, #24]
 8001512:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	4b47      	ldr	r3, [pc, #284]	; (8001638 <HAL_CAN_MspInit+0x174>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	4a46      	ldr	r2, [pc, #280]	; (8001638 <HAL_CAN_MspInit+0x174>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6313      	str	r3, [r2, #48]	; 0x30
 8001524:	4b44      	ldr	r3, [pc, #272]	; (8001638 <HAL_CAN_MspInit+0x174>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001530:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153e:	2303      	movs	r3, #3
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001542:	2309      	movs	r3, #9
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	4619      	mov	r1, r3
 800154c:	483b      	ldr	r0, [pc, #236]	; (800163c <HAL_CAN_MspInit+0x178>)
 800154e:	f002 fcb5 	bl	8003ebc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2105      	movs	r1, #5
 8001556:	2013      	movs	r0, #19
 8001558:	f002 fc5d 	bl	8003e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800155c:	2013      	movs	r0, #19
 800155e:	f002 fc76 	bl	8003e4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2105      	movs	r1, #5
 8001566:	2014      	movs	r0, #20
 8001568:	f002 fc55 	bl	8003e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800156c:	2014      	movs	r0, #20
 800156e:	f002 fc6e 	bl	8003e4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2105      	movs	r1, #5
 8001576:	2015      	movs	r0, #21
 8001578:	f002 fc4d 	bl	8003e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800157c:	2015      	movs	r0, #21
 800157e:	f002 fc66 	bl	8003e4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2105      	movs	r1, #5
 8001586:	2016      	movs	r0, #22
 8001588:	f002 fc45 	bl	8003e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800158c:	2016      	movs	r0, #22
 800158e:	f002 fc5e 	bl	8003e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001592:	e048      	b.n	8001626 <HAL_CAN_MspInit+0x162>
  else if(hcan->Instance==CAN2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a29      	ldr	r2, [pc, #164]	; (8001640 <HAL_CAN_MspInit+0x17c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d143      	bne.n	8001626 <HAL_CAN_MspInit+0x162>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	4b25      	ldr	r3, [pc, #148]	; (8001638 <HAL_CAN_MspInit+0x174>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	4a24      	ldr	r2, [pc, #144]	; (8001638 <HAL_CAN_MspInit+0x174>)
 80015a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015ac:	6413      	str	r3, [r2, #64]	; 0x40
 80015ae:	4b22      	ldr	r3, [pc, #136]	; (8001638 <HAL_CAN_MspInit+0x174>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80015ba:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <HAL_CAN_MspInit+0x170>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	4a1c      	ldr	r2, [pc, #112]	; (8001634 <HAL_CAN_MspInit+0x170>)
 80015c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <HAL_CAN_MspInit+0x170>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d10d      	bne.n	80015e8 <HAL_CAN_MspInit+0x124>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	4b19      	ldr	r3, [pc, #100]	; (8001638 <HAL_CAN_MspInit+0x174>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	4a18      	ldr	r2, [pc, #96]	; (8001638 <HAL_CAN_MspInit+0x174>)
 80015d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015da:	6413      	str	r3, [r2, #64]	; 0x40
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <HAL_CAN_MspInit+0x174>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_CAN_MspInit+0x174>)
 80015ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f0:	4a11      	ldr	r2, [pc, #68]	; (8001638 <HAL_CAN_MspInit+0x174>)
 80015f2:	f043 0302 	orr.w	r3, r3, #2
 80015f6:	6313      	str	r3, [r2, #48]	; 0x30
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <HAL_CAN_MspInit+0x174>)
 80015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001604:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001612:	2303      	movs	r3, #3
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001616:	2309      	movs	r3, #9
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	4619      	mov	r1, r3
 8001620:	4808      	ldr	r0, [pc, #32]	; (8001644 <HAL_CAN_MspInit+0x180>)
 8001622:	f002 fc4b 	bl	8003ebc <HAL_GPIO_Init>
}
 8001626:	bf00      	nop
 8001628:	3730      	adds	r7, #48	; 0x30
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40006400 	.word	0x40006400
 8001634:	200013e4 	.word	0x200013e4
 8001638:	40023800 	.word	0x40023800
 800163c:	40020000 	.word	0x40020000
 8001640:	40006800 	.word	0x40006800
 8001644:	40020400 	.word	0x40020400

08001648 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <HAL_CRC_MspInit+0x3c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d10d      	bne.n	8001676 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_CRC_MspInit+0x40>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a09      	ldr	r2, [pc, #36]	; (8001688 <HAL_CRC_MspInit+0x40>)
 8001664:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b07      	ldr	r3, [pc, #28]	; (8001688 <HAL_CRC_MspInit+0x40>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001676:	bf00      	nop
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40023000 	.word	0x40023000
 8001688:	40023800 	.word	0x40023800

0800168c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08e      	sub	sp, #56	; 0x38
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a5b      	ldr	r2, [pc, #364]	; (8001818 <HAL_I2C_MspInit+0x18c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d12c      	bne.n	8001708 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
 80016b2:	4b5a      	ldr	r3, [pc, #360]	; (800181c <HAL_I2C_MspInit+0x190>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a59      	ldr	r2, [pc, #356]	; (800181c <HAL_I2C_MspInit+0x190>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b57      	ldr	r3, [pc, #348]	; (800181c <HAL_I2C_MspInit+0x190>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	623b      	str	r3, [r7, #32]
 80016c8:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ca:	23c0      	movs	r3, #192	; 0xc0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ce:	2312      	movs	r3, #18
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d6:	2303      	movs	r3, #3
 80016d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016da:	2304      	movs	r3, #4
 80016dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e2:	4619      	mov	r1, r3
 80016e4:	484e      	ldr	r0, [pc, #312]	; (8001820 <HAL_I2C_MspInit+0x194>)
 80016e6:	f002 fbe9 	bl	8003ebc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
 80016ee:	4b4b      	ldr	r3, [pc, #300]	; (800181c <HAL_I2C_MspInit+0x190>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	4a4a      	ldr	r2, [pc, #296]	; (800181c <HAL_I2C_MspInit+0x190>)
 80016f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
 80016fa:	4b48      	ldr	r3, [pc, #288]	; (800181c <HAL_I2C_MspInit+0x190>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001706:	e082      	b.n	800180e <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C2)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a45      	ldr	r2, [pc, #276]	; (8001824 <HAL_I2C_MspInit+0x198>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d12c      	bne.n	800176c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	61bb      	str	r3, [r7, #24]
 8001716:	4b41      	ldr	r3, [pc, #260]	; (800181c <HAL_I2C_MspInit+0x190>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a40      	ldr	r2, [pc, #256]	; (800181c <HAL_I2C_MspInit+0x190>)
 800171c:	f043 0320 	orr.w	r3, r3, #32
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b3e      	ldr	r3, [pc, #248]	; (800181c <HAL_I2C_MspInit+0x190>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0320 	and.w	r3, r3, #32
 800172a:	61bb      	str	r3, [r7, #24]
 800172c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800172e:	2303      	movs	r3, #3
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001732:	2312      	movs	r3, #18
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800173e:	2304      	movs	r3, #4
 8001740:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001746:	4619      	mov	r1, r3
 8001748:	4837      	ldr	r0, [pc, #220]	; (8001828 <HAL_I2C_MspInit+0x19c>)
 800174a:	f002 fbb7 	bl	8003ebc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	4b32      	ldr	r3, [pc, #200]	; (800181c <HAL_I2C_MspInit+0x190>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	4a31      	ldr	r2, [pc, #196]	; (800181c <HAL_I2C_MspInit+0x190>)
 8001758:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800175c:	6413      	str	r3, [r2, #64]	; 0x40
 800175e:	4b2f      	ldr	r3, [pc, #188]	; (800181c <HAL_I2C_MspInit+0x190>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697b      	ldr	r3, [r7, #20]
}
 800176a:	e050      	b.n	800180e <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C3)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a2e      	ldr	r2, [pc, #184]	; (800182c <HAL_I2C_MspInit+0x1a0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d14b      	bne.n	800180e <HAL_I2C_MspInit+0x182>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	4b28      	ldr	r3, [pc, #160]	; (800181c <HAL_I2C_MspInit+0x190>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a27      	ldr	r2, [pc, #156]	; (800181c <HAL_I2C_MspInit+0x190>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b25      	ldr	r3, [pc, #148]	; (800181c <HAL_I2C_MspInit+0x190>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	4b21      	ldr	r3, [pc, #132]	; (800181c <HAL_I2C_MspInit+0x190>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a20      	ldr	r2, [pc, #128]	; (800181c <HAL_I2C_MspInit+0x190>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b1e      	ldr	r3, [pc, #120]	; (800181c <HAL_I2C_MspInit+0x190>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b4:	2312      	movs	r3, #18
 80017b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80017c0:	2304      	movs	r3, #4
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c8:	4619      	mov	r1, r3
 80017ca:	4819      	ldr	r0, [pc, #100]	; (8001830 <HAL_I2C_MspInit+0x1a4>)
 80017cc:	f002 fb76 	bl	8003ebc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d6:	2312      	movs	r3, #18
 80017d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017de:	2303      	movs	r3, #3
 80017e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80017e2:	2304      	movs	r3, #4
 80017e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ea:	4619      	mov	r1, r3
 80017ec:	4811      	ldr	r0, [pc, #68]	; (8001834 <HAL_I2C_MspInit+0x1a8>)
 80017ee:	f002 fb65 	bl	8003ebc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_I2C_MspInit+0x190>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	4a08      	ldr	r2, [pc, #32]	; (800181c <HAL_I2C_MspInit+0x190>)
 80017fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001800:	6413      	str	r3, [r2, #64]	; 0x40
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_I2C_MspInit+0x190>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]
}
 800180e:	bf00      	nop
 8001810:	3738      	adds	r7, #56	; 0x38
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40005400 	.word	0x40005400
 800181c:	40023800 	.word	0x40023800
 8001820:	40020400 	.word	0x40020400
 8001824:	40005800 	.word	0x40005800
 8001828:	40021400 	.word	0x40021400
 800182c:	40005c00 	.word	0x40005c00
 8001830:	40020800 	.word	0x40020800
 8001834:	40020000 	.word	0x40020000

08001838 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b09a      	sub	sp, #104	; 0x68
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	225c      	movs	r2, #92	; 0x5c
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f00a fa4f 	bl	800bcec <memset>
  if(hrtc->Instance==RTC)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a0c      	ldr	r2, [pc, #48]	; (8001884 <HAL_RTC_MspInit+0x4c>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d111      	bne.n	800187c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001858:	2320      	movs	r3, #32
 800185a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800185c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001860:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001862:	f107 030c 	add.w	r3, r7, #12
 8001866:	4618      	mov	r0, r3
 8001868:	f002 ff58 	bl	800471c <HAL_RCCEx_PeriphCLKConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001872:	f7ff fd13 	bl	800129c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001876:	4b04      	ldr	r3, [pc, #16]	; (8001888 <HAL_RTC_MspInit+0x50>)
 8001878:	2201      	movs	r2, #1
 800187a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800187c:	bf00      	nop
 800187e:	3768      	adds	r7, #104	; 0x68
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40002800 	.word	0x40002800
 8001888:	42470e3c 	.word	0x42470e3c

0800188c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08e      	sub	sp, #56	; 0x38
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a68      	ldr	r2, [pc, #416]	; (8001a4c <HAL_SPI_MspInit+0x1c0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d14b      	bne.n	8001946 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
 80018b2:	4b67      	ldr	r3, [pc, #412]	; (8001a50 <HAL_SPI_MspInit+0x1c4>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	4a66      	ldr	r2, [pc, #408]	; (8001a50 <HAL_SPI_MspInit+0x1c4>)
 80018b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018bc:	6413      	str	r3, [r2, #64]	; 0x40
 80018be:	4b64      	ldr	r3, [pc, #400]	; (8001a50 <HAL_SPI_MspInit+0x1c4>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c6:	623b      	str	r3, [r7, #32]
 80018c8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	4b60      	ldr	r3, [pc, #384]	; (8001a50 <HAL_SPI_MspInit+0x1c4>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a5f      	ldr	r2, [pc, #380]	; (8001a50 <HAL_SPI_MspInit+0x1c4>)
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b5d      	ldr	r3, [pc, #372]	; (8001a50 <HAL_SPI_MspInit+0x1c4>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	61fb      	str	r3, [r7, #28]
 80018e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	4b59      	ldr	r3, [pc, #356]	; (8001a50 <HAL_SPI_MspInit+0x1c4>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a58      	ldr	r2, [pc, #352]	; (8001a50 <HAL_SPI_MspInit+0x1c4>)
 80018f0:	f043 0308 	orr.w	r3, r3, #8
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b56      	ldr	r3, [pc, #344]	; (8001a50 <HAL_SPI_MspInit+0x1c4>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	61bb      	str	r3, [r7, #24]
 8001900:	69bb      	ldr	r3, [r7, #24]
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    PD1     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001902:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001910:	2303      	movs	r3, #3
 8001912:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001914:	2305      	movs	r3, #5
 8001916:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191c:	4619      	mov	r1, r3
 800191e:	484d      	ldr	r0, [pc, #308]	; (8001a54 <HAL_SPI_MspInit+0x1c8>)
 8001920:	f002 facc 	bl	8003ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001924:	2302      	movs	r3, #2
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001934:	2307      	movs	r3, #7
 8001936:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193c:	4619      	mov	r1, r3
 800193e:	4846      	ldr	r0, [pc, #280]	; (8001a58 <HAL_SPI_MspInit+0x1cc>)
 8001940:	f002 fabc 	bl	8003ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001944:	e07e      	b.n	8001a44 <HAL_SPI_MspInit+0x1b8>
  else if(hspi->Instance==SPI3)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a44      	ldr	r2, [pc, #272]	; (8001a5c <HAL_SPI_MspInit+0x1d0>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d179      	bne.n	8001a44 <HAL_SPI_MspInit+0x1b8>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	4b3e      	ldr	r3, [pc, #248]	; (8001a50 <HAL_SPI_MspInit+0x1c4>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	4a3d      	ldr	r2, [pc, #244]	; (8001a50 <HAL_SPI_MspInit+0x1c4>)
 800195a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800195e:	6413      	str	r3, [r2, #64]	; 0x40
 8001960:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <HAL_SPI_MspInit+0x1c4>)
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196c:	2300      	movs	r3, #0
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	4b37      	ldr	r3, [pc, #220]	; (8001a50 <HAL_SPI_MspInit+0x1c4>)
 8001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001974:	4a36      	ldr	r2, [pc, #216]	; (8001a50 <HAL_SPI_MspInit+0x1c4>)
 8001976:	f043 0302 	orr.w	r3, r3, #2
 800197a:	6313      	str	r3, [r2, #48]	; 0x30
 800197c:	4b34      	ldr	r3, [pc, #208]	; (8001a50 <HAL_SPI_MspInit+0x1c4>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	4b30      	ldr	r3, [pc, #192]	; (8001a50 <HAL_SPI_MspInit+0x1c4>)
 800198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001990:	4a2f      	ldr	r2, [pc, #188]	; (8001a50 <HAL_SPI_MspInit+0x1c4>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6313      	str	r3, [r2, #48]	; 0x30
 8001998:	4b2d      	ldr	r3, [pc, #180]	; (8001a50 <HAL_SPI_MspInit+0x1c4>)
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a4:	2300      	movs	r3, #0
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	4b29      	ldr	r3, [pc, #164]	; (8001a50 <HAL_SPI_MspInit+0x1c4>)
 80019aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ac:	4a28      	ldr	r2, [pc, #160]	; (8001a50 <HAL_SPI_MspInit+0x1c4>)
 80019ae:	f043 0304 	orr.w	r3, r3, #4
 80019b2:	6313      	str	r3, [r2, #48]	; 0x30
 80019b4:	4b26      	ldr	r3, [pc, #152]	; (8001a50 <HAL_SPI_MspInit+0x1c4>)
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019c0:	2301      	movs	r3, #1
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	2303      	movs	r3, #3
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80019d0:	2307      	movs	r3, #7
 80019d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d8:	4619      	mov	r1, r3
 80019da:	481e      	ldr	r0, [pc, #120]	; (8001a54 <HAL_SPI_MspInit+0x1c8>)
 80019dc:	f002 fa6e 	bl	8003ebc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e6:	2302      	movs	r3, #2
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ee:	2303      	movs	r3, #3
 80019f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019f2:	2306      	movs	r3, #6
 80019f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fa:	4619      	mov	r1, r3
 80019fc:	4818      	ldr	r0, [pc, #96]	; (8001a60 <HAL_SPI_MspInit+0x1d4>)
 80019fe:	f002 fa5d 	bl	8003ebc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a10:	2303      	movs	r3, #3
 8001a12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a14:	2306      	movs	r3, #6
 8001a16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4811      	ldr	r0, [pc, #68]	; (8001a64 <HAL_SPI_MspInit+0x1d8>)
 8001a20:	f002 fa4c 	bl	8003ebc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a24:	2310      	movs	r3, #16
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a30:	2303      	movs	r3, #3
 8001a32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a34:	2306      	movs	r3, #6
 8001a36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <HAL_SPI_MspInit+0x1c8>)
 8001a40:	f002 fa3c 	bl	8003ebc <HAL_GPIO_Init>
}
 8001a44:	bf00      	nop
 8001a46:	3738      	adds	r7, #56	; 0x38
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40003800 	.word	0x40003800
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020400 	.word	0x40020400
 8001a58:	40020c00 	.word	0x40020c00
 8001a5c:	40003c00 	.word	0x40003c00
 8001a60:	40020000 	.word	0x40020000
 8001a64:	40020800 	.word	0x40020800

08001a68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0b      	ldr	r2, [pc, #44]	; (8001aa4 <HAL_TIM_Base_MspInit+0x3c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d10d      	bne.n	8001a96 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_TIM_Base_MspInit+0x40>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	4a09      	ldr	r2, [pc, #36]	; (8001aa8 <HAL_TIM_Base_MspInit+0x40>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <HAL_TIM_Base_MspInit+0x40>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a96:	bf00      	nop
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40010000 	.word	0x40010000
 8001aa8:	40023800 	.word	0x40023800

08001aac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 030c 	add.w	r3, r7, #12
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a12      	ldr	r2, [pc, #72]	; (8001b14 <HAL_TIM_MspPostInit+0x68>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d11e      	bne.n	8001b0c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <HAL_TIM_MspPostInit+0x6c>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a10      	ldr	r2, [pc, #64]	; (8001b18 <HAL_TIM_MspPostInit+0x6c>)
 8001ad8:	f043 0310 	orr.w	r3, r3, #16
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <HAL_TIM_MspPostInit+0x6c>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_BUZZER_Pin|TIM1_CH2_RGB_RED_Pin|TIM1_CH3_RGB_BLUE_Pin|TIM1_CH4_RGB_GREEN_Pin;
 8001aea:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001aee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001afc:	2301      	movs	r3, #1
 8001afe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	4619      	mov	r1, r3
 8001b06:	4805      	ldr	r0, [pc, #20]	; (8001b1c <HAL_TIM_MspPostInit+0x70>)
 8001b08:	f002 f9d8 	bl	8003ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b0c:	bf00      	nop
 8001b0e:	3720      	adds	r7, #32
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40010000 	.word	0x40010000
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40021000 	.word	0x40021000

08001b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08e      	sub	sp, #56	; 0x38
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a51      	ldr	r2, [pc, #324]	; (8001c84 <HAL_UART_MspInit+0x164>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d14b      	bne.n	8001bda <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
 8001b46:	4b50      	ldr	r3, [pc, #320]	; (8001c88 <HAL_UART_MspInit+0x168>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	4a4f      	ldr	r2, [pc, #316]	; (8001c88 <HAL_UART_MspInit+0x168>)
 8001b4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b50:	6413      	str	r3, [r2, #64]	; 0x40
 8001b52:	4b4d      	ldr	r3, [pc, #308]	; (8001c88 <HAL_UART_MspInit+0x168>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b5a:	623b      	str	r3, [r7, #32]
 8001b5c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	4b49      	ldr	r3, [pc, #292]	; (8001c88 <HAL_UART_MspInit+0x168>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a48      	ldr	r2, [pc, #288]	; (8001c88 <HAL_UART_MspInit+0x168>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b46      	ldr	r3, [pc, #280]	; (8001c88 <HAL_UART_MspInit+0x168>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	61fb      	str	r3, [r7, #28]
 8001b78:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
 8001b7e:	4b42      	ldr	r3, [pc, #264]	; (8001c88 <HAL_UART_MspInit+0x168>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a41      	ldr	r2, [pc, #260]	; (8001c88 <HAL_UART_MspInit+0x168>)
 8001b84:	f043 0304 	orr.w	r3, r3, #4
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b3f      	ldr	r3, [pc, #252]	; (8001c88 <HAL_UART_MspInit+0x168>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	61bb      	str	r3, [r7, #24]
 8001b94:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = DYH_UART4_TX_GPIO0_Pin;
 8001b96:	2301      	movs	r3, #1
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ba6:	2308      	movs	r3, #8
 8001ba8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DYH_UART4_TX_GPIO0_GPIO_Port, &GPIO_InitStruct);
 8001baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4836      	ldr	r0, [pc, #216]	; (8001c8c <HAL_UART_MspInit+0x16c>)
 8001bb2:	f002 f983 	bl	8003ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DYH_UART4_RX_GPIO1_Pin;
 8001bb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001bc8:	2308      	movs	r3, #8
 8001bca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DYH_UART4_RX_GPIO1_GPIO_Port, &GPIO_InitStruct);
 8001bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	482f      	ldr	r0, [pc, #188]	; (8001c90 <HAL_UART_MspInit+0x170>)
 8001bd4:	f002 f972 	bl	8003ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001bd8:	e04f      	b.n	8001c7a <HAL_UART_MspInit+0x15a>
  else if(huart->Instance==UART5)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a2d      	ldr	r2, [pc, #180]	; (8001c94 <HAL_UART_MspInit+0x174>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d14a      	bne.n	8001c7a <HAL_UART_MspInit+0x15a>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	4b27      	ldr	r3, [pc, #156]	; (8001c88 <HAL_UART_MspInit+0x168>)
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	4a26      	ldr	r2, [pc, #152]	; (8001c88 <HAL_UART_MspInit+0x168>)
 8001bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf4:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <HAL_UART_MspInit+0x168>)
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c00:	2300      	movs	r3, #0
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <HAL_UART_MspInit+0x168>)
 8001c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c08:	4a1f      	ldr	r2, [pc, #124]	; (8001c88 <HAL_UART_MspInit+0x168>)
 8001c0a:	f043 0304 	orr.w	r3, r3, #4
 8001c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c10:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <HAL_UART_MspInit+0x168>)
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <HAL_UART_MspInit+0x168>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	4a18      	ldr	r2, [pc, #96]	; (8001c88 <HAL_UART_MspInit+0x168>)
 8001c26:	f043 0308 	orr.w	r3, r3, #8
 8001c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2c:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <HAL_UART_MspInit+0x168>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DEBUG_UART5_TX_Pin;
 8001c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c46:	2303      	movs	r3, #3
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c4a:	2308      	movs	r3, #8
 8001c4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8001c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c52:	4619      	mov	r1, r3
 8001c54:	480e      	ldr	r0, [pc, #56]	; (8001c90 <HAL_UART_MspInit+0x170>)
 8001c56:	f002 f931 	bl	8003ebc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DEBUG_UART5_RX_Pin;
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c66:	2303      	movs	r3, #3
 8001c68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c6a:	2308      	movs	r3, #8
 8001c6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_UART5_RX_GPIO_Port, &GPIO_InitStruct);
 8001c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c72:	4619      	mov	r1, r3
 8001c74:	4808      	ldr	r0, [pc, #32]	; (8001c98 <HAL_UART_MspInit+0x178>)
 8001c76:	f002 f921 	bl	8003ebc <HAL_GPIO_Init>
}
 8001c7a:	bf00      	nop
 8001c7c:	3738      	adds	r7, #56	; 0x38
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40004c00 	.word	0x40004c00
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40020000 	.word	0x40020000
 8001c90:	40020800 	.word	0x40020800
 8001c94:	40005000 	.word	0x40005000
 8001c98:	40020c00 	.word	0x40020c00

08001c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <NMI_Handler+0x4>

08001ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca6:	e7fe      	b.n	8001ca6 <HardFault_Handler+0x4>

08001ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <MemManage_Handler+0x4>

08001cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb2:	e7fe      	b.n	8001cb2 <BusFault_Handler+0x4>

08001cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <UsageFault_Handler+0x4>

08001cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ccc:	f000 fde8 	bl	80028a0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001cd0:	f006 fec6 	bl	8008a60 <xTaskGetSchedulerState>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d001      	beq.n	8001cde <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001cda:	f007 fe65 	bl	80099a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI0_IGN_KEY_Pin);
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f002 fa96 	bl	8004218 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI3_SX1262_DIO2_Pin);
 8001cf4:	2008      	movs	r0, #8
 8001cf6:	f002 fa8f 	bl	8004218 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI4_SX1262_DIO1_Pin);
 8001d02:	2010      	movs	r0, #16
 8001d04:	f002 fa88 	bl	8004218 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d10:	4802      	ldr	r0, [pc, #8]	; (8001d1c <CAN1_TX_IRQHandler+0x10>)
 8001d12:	f001 fd6b 	bl	80037ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200010ec 	.word	0x200010ec

08001d20 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d24:	4802      	ldr	r0, [pc, #8]	; (8001d30 <CAN1_RX1_IRQHandler+0x10>)
 8001d26:	f001 fd61 	bl	80037ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	200010ec 	.word	0x200010ec

08001d34 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <CAN1_SCE_IRQHandler+0x10>)
 8001d3a:	f001 fd57 	bl	80037ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200010ec 	.word	0x200010ec

08001d48 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI7_MPU6050_GYRO2_Pin);
 8001d4c:	2080      	movs	r0, #128	; 0x80
 8001d4e:	f002 fa63 	bl	8004218 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI8_RIGHTARM_Pin);
 8001d52:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d56:	f002 fa5f 	bl	8004218 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI9_MPU6050_GYRO1_Pin);
 8001d5a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d5e:	f002 fa5b 	bl	8004218 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT11_MPU5060_GYRORIGHT_Pin);
 8001d6a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001d6e:	f002 fa53 	bl	8004218 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI13_MPU6050_GYROLEFT_Pin);
 8001d72:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d76:	f002 fa4f 	bl	8004218 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d88:	4a14      	ldr	r2, [pc, #80]	; (8001ddc <_sbrk+0x5c>)
 8001d8a:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <_sbrk+0x60>)
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d94:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <_sbrk+0x64>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d102      	bne.n	8001da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d9c:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <_sbrk+0x64>)
 8001d9e:	4a12      	ldr	r2, [pc, #72]	; (8001de8 <_sbrk+0x68>)
 8001da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001da2:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <_sbrk+0x64>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d207      	bcs.n	8001dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db0:	f009 ff64 	bl	800bc7c <__errno>
 8001db4:	4603      	mov	r3, r0
 8001db6:	220c      	movs	r2, #12
 8001db8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dba:	f04f 33ff 	mov.w	r3, #4294967295
 8001dbe:	e009      	b.n	8001dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc0:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <_sbrk+0x64>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dc6:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <_sbrk+0x64>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <_sbrk+0x64>)
 8001dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20020000 	.word	0x20020000
 8001de0:	00004000 	.word	0x00004000
 8001de4:	200013e8 	.word	0x200013e8
 8001de8:	2000c188 	.word	0x2000c188

08001dec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <SystemInit+0x20>)
 8001df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df6:	4a05      	ldr	r2, [pc, #20]	; (8001e0c <SystemInit+0x20>)
 8001df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <Reset_Handler>:
 8001e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e48 <LoopFillZerobss+0x12>
 8001e14:	480d      	ldr	r0, [pc, #52]	; (8001e4c <LoopFillZerobss+0x16>)
 8001e16:	490e      	ldr	r1, [pc, #56]	; (8001e50 <LoopFillZerobss+0x1a>)
 8001e18:	4a0e      	ldr	r2, [pc, #56]	; (8001e54 <LoopFillZerobss+0x1e>)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e002      	b.n	8001e24 <LoopCopyDataInit>

08001e1e <CopyDataInit>:
 8001e1e:	58d4      	ldr	r4, [r2, r3]
 8001e20:	50c4      	str	r4, [r0, r3]
 8001e22:	3304      	adds	r3, #4

08001e24 <LoopCopyDataInit>:
 8001e24:	18c4      	adds	r4, r0, r3
 8001e26:	428c      	cmp	r4, r1
 8001e28:	d3f9      	bcc.n	8001e1e <CopyDataInit>
 8001e2a:	4a0b      	ldr	r2, [pc, #44]	; (8001e58 <LoopFillZerobss+0x22>)
 8001e2c:	4c0b      	ldr	r4, [pc, #44]	; (8001e5c <LoopFillZerobss+0x26>)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e001      	b.n	8001e36 <LoopFillZerobss>

08001e32 <FillZerobss>:
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	3204      	adds	r2, #4

08001e36 <LoopFillZerobss>:
 8001e36:	42a2      	cmp	r2, r4
 8001e38:	d3fb      	bcc.n	8001e32 <FillZerobss>
 8001e3a:	f7ff ffd7 	bl	8001dec <SystemInit>
 8001e3e:	f009 ff23 	bl	800bc88 <__libc_init_array>
 8001e42:	f7fe fbb7 	bl	80005b4 <main>
 8001e46:	4770      	bx	lr
 8001e48:	20020000 	.word	0x20020000
 8001e4c:	20000000 	.word	0x20000000
 8001e50:	20000084 	.word	0x20000084
 8001e54:	0800ca54 	.word	0x0800ca54
 8001e58:	20001040 	.word	0x20001040
 8001e5c:	2000c188 	.word	0x2000c188

08001e60 <ADC_IRQHandler>:
 8001e60:	e7fe      	b.n	8001e60 <ADC_IRQHandler>
	...

08001e64 <CAN1_RX0_IRQHandler>:
 * @NOTICE: Dont forget to get __WEAK IRQ Handler in order to defined in it.c file which created by CubeMX
 */
#if (defined(STM32F446xx) || defined(STM32F407xx) && defined(BXCAN_Protocol))

void CAN1_RX0_IRQHandler(void)
{
 8001e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af06      	add	r7, sp, #24

  HAL_CAN_IRQHandler(&protocol.obj.bxHandle.hbxcanHandle);
 8001e6a:	4816      	ldr	r0, [pc, #88]	; (8001ec4 <CAN1_RX0_IRQHandler+0x60>)
 8001e6c:	f001 fcbe 	bl	80037ec <HAL_CAN_IRQHandler>

  if( HAL_CAN_GetRxMessage( &protocol.obj.bxHandle.hbxcanHandle ,
 8001e70:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <CAN1_RX0_IRQHandler+0x64>)
 8001e72:	4a16      	ldr	r2, [pc, #88]	; (8001ecc <CAN1_RX0_IRQHandler+0x68>)
 8001e74:	2100      	movs	r1, #0
 8001e76:	4813      	ldr	r0, [pc, #76]	; (8001ec4 <CAN1_RX0_IRQHandler+0x60>)
 8001e78:	f001 fb80 	bl	800357c <HAL_CAN_GetRxMessage>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <CAN1_RX0_IRQHandler+0x22>
		  	  	  	        CAN_RX_FIFO0						,
							&protocol.obj.bxHandle.rxHeader 	,
							&protocol.obj.bxHandle.rxData[0] 	) != HAL_OK )
  {
	  Error_Handler();
 8001e82:	f7ff fa0b 	bl	800129c <Error_Handler>
  }

  protocol.ops.EEM_RX( &protocol.obj.canPacket  			,
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <CAN1_RX0_IRQHandler+0x60>)
 8001e88:	f8d3 61b0 	ldr.w	r6, [r3, #432]	; 0x1b0
 8001e8c:	4d0d      	ldr	r5, [pc, #52]	; (8001ec4 <CAN1_RX0_IRQHandler+0x60>)
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <CAN1_RX0_IRQHandler+0x64>)
 8001e90:	9304      	str	r3, [sp, #16]
 8001e92:	466c      	mov	r4, sp
 8001e94:	f105 0378 	add.w	r3, r5, #120	; 0x78
 8001e98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e9e:	f105 036c 	add.w	r3, r5, #108	; 0x6c
 8001ea2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ea4:	480a      	ldr	r0, [pc, #40]	; (8001ed0 <CAN1_RX0_IRQHandler+0x6c>)
 8001ea6:	47b0      	blx	r6
      				   protocol.obj.bxHandle.rxHeader		,
  					   &protocol.obj.bxHandle.rxData[0]	    );

  if( HAL_CAN_ActivateNotification(&protocol.obj.bxHandle.hbxcanHandle, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK )
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	4806      	ldr	r0, [pc, #24]	; (8001ec4 <CAN1_RX0_IRQHandler+0x60>)
 8001eac:	f001 fc78 	bl	80037a0 <HAL_CAN_ActivateNotification>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <CAN1_RX0_IRQHandler+0x56>
  {
	  Error_Handler();
 8001eb6:	f7ff f9f1 	bl	800129c <Error_Handler>
  }

}
 8001eba:	bf00      	nop
 8001ebc:	3704      	adds	r7, #4
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	2000bfa0 	.word	0x2000bfa0
 8001ec8:	2000c034 	.word	0x2000c034
 8001ecc:	2000c00c 	.word	0x2000c00c
 8001ed0:	2000c03c 	.word	0x2000c03c

08001ed4 <EEM_BXCAN_PeriphBase_CTOR>:
	 @return  : void
	 @date	  : 22.02.2023
	 @INFO	  :	Constructur function for BxCAN Periph Class
********************************************************************************/
void EEM_BXCAN_PeriphBase_CTOR(EEM_bxCAN_PeriphBase_st* param , CAN_HandleTypeDef* _can)
{
 8001ed4:	b5b0      	push	{r4, r5, r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
	param->hbxcanHandle = *_can;
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	4614      	mov	r4, r2
 8001ee4:	461d      	mov	r5, r3
 8001ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eee:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ef2:	e884 0003 	stmia.w	r4, {r0, r1}

	memset(&param->sFilterConfig , 0x00 , sizeof(CAN_FilterTypeDef) );
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3328      	adds	r3, #40	; 0x28
 8001efa:	2228      	movs	r2, #40	; 0x28
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f009 fef4 	bl	800bcec <memset>

	memset(&param->txHeader , 0x00 , sizeof(CAN_TxHeaderTypeDef) );
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3350      	adds	r3, #80	; 0x50
 8001f08:	2218      	movs	r2, #24
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f009 feed 	bl	800bcec <memset>
	param->txMailBox = 0 ;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	669a      	str	r2, [r3, #104]	; 0x68

	memset(&param->rxHeader , 0x00 , sizeof(CAN_RxHeaderTypeDef) );
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	336c      	adds	r3, #108	; 0x6c
 8001f1c:	221c      	movs	r2, #28
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f009 fee3 	bl	800bcec <memset>
	param->rxMailBox = 0 ;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	memset(&param->txData[0] , 0x00 , sizeof(param->txData) );
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	338c      	adds	r3, #140	; 0x8c
 8001f32:	2208      	movs	r2, #8
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f009 fed8 	bl	800bcec <memset>
	memset(&param->rxData[0] , 0x00 , sizeof(param->rxData) );
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3394      	adds	r3, #148	; 0x94
 8001f40:	2208      	movs	r2, #8
 8001f42:	2100      	movs	r1, #0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f009 fed1 	bl	800bcec <memset>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bdb0      	pop	{r4, r5, r7, pc}

08001f52 <EEM_CTOR>:
	, FDCAN_HandleTypeDef* _fdcan
#else
/* Only works for spi2can */
#endif
)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	60f8      	str	r0, [r7, #12]
 8001f5a:	4638      	mov	r0, r7
 8001f5c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	/* Construct methods */
	param->ops = _ops ;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001f66:	463a      	mov	r2, r7
 8001f68:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

#if (defined(STM32F446xx) || defined(STM32F407xx) && defined(BXCAN_Protocol))

	EEM_BXCAN_PeriphBase_CTOR(&param->obj.bxHandle , _can);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	69b9      	ldr	r1, [r7, #24]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff ffae 	bl	8001ed4 <EEM_BXCAN_PeriphBase_CTOR>
//ERROR
#endif
#endif

	/* Construct other objects */
	memset(&param->obj.canPacket , 0x00 , sizeof(EEM_CAN_Packet_st));
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	339c      	adds	r3, #156	; 0x9c
 8001f7c:	2214      	movs	r2, #20
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4618      	mov	r0, r3
 8001f82:	f009 feb3 	bl	800bcec <memset>
	memset(&param->obj.ringBuffer , 0x00 , sizeof(EEM_RING_Buffer_st));
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	33b0      	adds	r3, #176	; 0xb0
 8001f8a:	22f8      	movs	r2, #248	; 0xf8
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f009 feac 	bl	800bcec <memset>

}
 8001f94:	bf00      	nop
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <EEM_INIT>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
EEM_ERR_T EEM_INIT( EEM_Protocol_obj_st*  param )
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08c      	sub	sp, #48	; 0x30
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	
	EEM_ERR_T result = EEM_EOK;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

#ifdef EEM_DEBUG_EN

	debug.uartHandle.Instance 			= USART2;
 8001faa:	4b50      	ldr	r3, [pc, #320]	; (80020ec <EEM_INIT+0x150>)
 8001fac:	4a50      	ldr	r2, [pc, #320]	; (80020f0 <EEM_INIT+0x154>)
 8001fae:	601a      	str	r2, [r3, #0]
	debug.uartHandle.Init.BaudRate 		= 115200;
 8001fb0:	4b4e      	ldr	r3, [pc, #312]	; (80020ec <EEM_INIT+0x150>)
 8001fb2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fb6:	605a      	str	r2, [r3, #4]
	debug.uartHandle.Init.WordLength 	= UART_WORDLENGTH_8B;
 8001fb8:	4b4c      	ldr	r3, [pc, #304]	; (80020ec <EEM_INIT+0x150>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	609a      	str	r2, [r3, #8]
	debug.uartHandle.Init.StopBits 		= UART_STOPBITS_1;
 8001fbe:	4b4b      	ldr	r3, [pc, #300]	; (80020ec <EEM_INIT+0x150>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	60da      	str	r2, [r3, #12]
	debug.uartHandle.Init.Parity 		= UART_PARITY_NONE;
 8001fc4:	4b49      	ldr	r3, [pc, #292]	; (80020ec <EEM_INIT+0x150>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	611a      	str	r2, [r3, #16]
	debug.uartHandle.Init.Mode 			= UART_MODE_TX_RX;
 8001fca:	4b48      	ldr	r3, [pc, #288]	; (80020ec <EEM_INIT+0x150>)
 8001fcc:	220c      	movs	r2, #12
 8001fce:	615a      	str	r2, [r3, #20]
	debug.uartHandle.Init.HwFlowCtl 	= UART_HWCONTROL_NONE;
 8001fd0:	4b46      	ldr	r3, [pc, #280]	; (80020ec <EEM_INIT+0x150>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	619a      	str	r2, [r3, #24]
	debug.uartHandle.Init.OverSampling 	= UART_OVERSAMPLING_16;
 8001fd6:	4b45      	ldr	r3, [pc, #276]	; (80020ec <EEM_INIT+0x150>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	61da      	str	r2, [r3, #28]

	if(HAL_UART_Init(&debug.uartHandle) != HAL_OK)
 8001fdc:	4843      	ldr	r0, [pc, #268]	; (80020ec <EEM_INIT+0x150>)
 8001fde:	f004 fa7d 	bl	80064dc <HAL_UART_Init>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <EEM_INIT+0x50>
	{
	  return EEM_ERROR;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	e07b      	b.n	80020e4 <EEM_INIT+0x148>
	}

#ifdef EEM_DEBUG_EN
	EEM_DEBUG_PRINT(&debug , "EEM PROTOCOL CAN STACK \n");
 8001fec:	4941      	ldr	r1, [pc, #260]	; (80020f4 <EEM_INIT+0x158>)
 8001fee:	483f      	ldr	r0, [pc, #252]	; (80020ec <EEM_INIT+0x150>)
 8001ff0:	f000 f93a 	bl	8002268 <EEM_DEBUG_PRINT>
#endif

#endif
/* Ring Buffer Init Sequance */

	param->ringBuffer.head = 0;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
	param->ringBuffer.tail = 0;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5
	param->ringBuffer.full = EEM_FALSE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 21a6 	strb.w	r2, [r3, #422]	; 0x1a6

#if (defined(STM32F446xx) || defined(STM32F407xx) && defined(BXCAN_Protocol))
	
	param->bxHandle.hbxcanHandle.Instance					= CAN1;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a3a      	ldr	r2, [pc, #232]	; (80020f8 <EEM_INIT+0x15c>)
 8002010:	601a      	str	r2, [r3, #0]
	param->bxHandle.hbxcanHandle.Init.Prescaler 			= 12;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	220c      	movs	r2, #12
 8002016:	605a      	str	r2, [r3, #4]
	param->bxHandle.hbxcanHandle.Init.Mode 					= CAN_MODE_LOOPBACK;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800201e:	609a      	str	r2, [r3, #8]
	param->bxHandle.hbxcanHandle.Init.SyncJumpWidth 		= CAN_SJW_1TQ;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
	param->bxHandle.hbxcanHandle.Init.TimeSeg1 				= CAN_BS1_11TQ;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800202c:	611a      	str	r2, [r3, #16]
	param->bxHandle.hbxcanHandle.Init.TimeSeg2 				= CAN_BS2_2TQ;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002034:	615a      	str	r2, [r3, #20]
	param->bxHandle.hbxcanHandle.Init.TimeTriggeredMode 	= DISABLE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	761a      	strb	r2, [r3, #24]
	param->bxHandle.hbxcanHandle.Init.AutoBusOff 			= DISABLE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	765a      	strb	r2, [r3, #25]
	param->bxHandle.hbxcanHandle.Init.AutoWakeUp 			= DISABLE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	769a      	strb	r2, [r3, #26]
	param->bxHandle.hbxcanHandle.Init.AutoRetransmission 	= ENABLE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	76da      	strb	r2, [r3, #27]
	param->bxHandle.hbxcanHandle.Init.ReceiveFifoLocked	 	= DISABLE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	771a      	strb	r2, [r3, #28]
	param->bxHandle.hbxcanHandle.Init.TransmitFifoPriority 	= DISABLE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	775a      	strb	r2, [r3, #29]
	
	if (HAL_CAN_Init(&param->bxHandle.hbxcanHandle) != HAL_OK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4618      	mov	r0, r3
 800205e:	f001 f873 	bl	8003148 <HAL_CAN_Init>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <EEM_INIT+0xd0>
	{
		return EEM_ERROR;
 8002068:	2300      	movs	r3, #0
 800206a:	e03b      	b.n	80020e4 <EEM_INIT+0x148>
	}
	
#ifdef EEM_DEBUG_EN
	EEM_DEBUG_PRINT(&debug , "BXCAN PERIPH CONFIG DONE ! \n");
 800206c:	4923      	ldr	r1, [pc, #140]	; (80020fc <EEM_INIT+0x160>)
 800206e:	481f      	ldr	r0, [pc, #124]	; (80020ec <EEM_INIT+0x150>)
 8002070:	f000 f8fa 	bl	8002268 <EEM_DEBUG_PRINT>

#endif

	/* Filtering Configurations */

	EEM_SET_IDENTIFIERS();
 8002074:	f000 f914 	bl	80022a0 <EEM_SET_IDENTIFIERS>
#else
	/* No Filter */
#endif

#ifdef EEM_DEBUG_EN
	EEM_DEBUG_PRINT(&debug , "EEM PROTOCOL FILTERING DONE ! \n");
 8002078:	4921      	ldr	r1, [pc, #132]	; (8002100 <EEM_INIT+0x164>)
 800207a:	481c      	ldr	r0, [pc, #112]	; (80020ec <EEM_INIT+0x150>)
 800207c:	f000 f8f4 	bl	8002268 <EEM_DEBUG_PRINT>
#endif

#if (defined(STM32F446xx) || defined(STM32F407xx) && defined(BXCAN_Protocol))

	if( HAL_CAN_Start(&param->bxHandle.hbxcanHandle) != HAL_OK )
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4618      	mov	r0, r3
 8002084:	f001 f95b 	bl	800333e <HAL_CAN_Start>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <EEM_INIT+0xf6>
	{
		return EEM_ERROR;
 800208e:	2300      	movs	r3, #0
 8002090:	e028      	b.n	80020e4 <EEM_INIT+0x148>
	}
	if( HAL_CAN_ActivateNotification(&param->bxHandle.hbxcanHandle, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK )
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2102      	movs	r1, #2
 8002096:	4618      	mov	r0, r3
 8002098:	f001 fb82 	bl	80037a0 <HAL_CAN_ActivateNotification>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <EEM_INIT+0x10a>
	{
		return EEM_ERROR;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e01e      	b.n	80020e4 <EEM_INIT+0x148>

	/* TEST MESSAGE FOR BX CAN LINE */
	/*******************************************************************************/
	CAN_TxHeaderTypeDef   	TestTxHeader;
	EEM_U32					TestTxMailBox;
	EEM_U8               	TestTxData[8] = { 0xEE , EEM_VERSION , 0xEE , EEM_SUBVERSION , 0xEE , EEM_REVISION , 0xEE , 0xEE};
 80020a6:	4a17      	ldr	r2, [pc, #92]	; (8002104 <EEM_INIT+0x168>)
 80020a8:	f107 0308 	add.w	r3, r7, #8
 80020ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020b0:	e883 0003 	stmia.w	r3, {r0, r1}
	TestTxHeader.DLC		= EEM_MAX_SIZE 	;
 80020b4:	2308      	movs	r3, #8
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
	TestTxHeader.IDE		= CAN_ID_EXT   	;
 80020b8:	2304      	movs	r3, #4
 80020ba:	61fb      	str	r3, [r7, #28]
	TestTxHeader.RTR		= CAN_RTR_DATA	;
 80020bc:	2300      	movs	r3, #0
 80020be:	623b      	str	r3, [r7, #32]
	TestTxHeader.ExtId		= 0x0EE00EE0;
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <EEM_INIT+0x16c>)
 80020c2:	61bb      	str	r3, [r7, #24]
	if( HAL_CAN_AddTxMessage(&param->bxHandle.hbxcanHandle  ,
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f107 0310 	add.w	r3, r7, #16
 80020ca:	f107 0208 	add.w	r2, r7, #8
 80020ce:	f107 0114 	add.w	r1, r7, #20
 80020d2:	f001 f978 	bl	80033c6 <HAL_CAN_AddTxMessage>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <EEM_INIT+0x144>
		        			 &TestTxHeader				,
							 &TestTxData 	     		,
							 &TestTxMailBox 	 			) != HAL_OK )
	{
		return EEM_ERROR;
 80020dc:	2300      	movs	r3, #0
 80020de:	e001      	b.n	80020e4 <EEM_INIT+0x148>
#error /* failed define */
#endif

#endif

	return result;
 80020e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3730      	adds	r7, #48	; 0x30
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20001504 	.word	0x20001504
 80020f0:	40004400 	.word	0x40004400
 80020f4:	0800c5e0 	.word	0x0800c5e0
 80020f8:	40006400 	.word	0x40006400
 80020fc:	0800c5fc 	.word	0x0800c5fc
 8002100:	0800c61c 	.word	0x0800c61c
 8002104:	0800c63c 	.word	0x0800c63c
 8002108:	0ee00ee0 	.word	0x0ee00ee0

0800210c <EEM_PUSH>:
	 @return  : 
	 @date	  : 
	 @INFO	  :
********************************************************************************/
void   EEM_PUSH( EEM_RING_Buffer_st* ringBuf , EEM_CAN_Packet_st* param)
{
 800210c:	b490      	push	{r4, r7}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
	EEM_U8 loopVal = 0 ;
 8002116:	2300      	movs	r3, #0
 8002118:	73fb      	strb	r3, [r7, #15]

	for(loopVal = 0 ; loopVal < 8 ; loopVal++)
 800211a:	2300      	movs	r3, #0
 800211c:	73fb      	strb	r3, [r7, #15]
 800211e:	e011      	b.n	8002144 <EEM_PUSH+0x38>
	{
		ringBuf->data[ ringBuf->tail ][ loopVal ] = param->DATA[ loopVal ];
 8002120:	7bfa      	ldrb	r2, [r7, #15]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8002128:	461c      	mov	r4, r3
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	6839      	ldr	r1, [r7, #0]
 800212e:	440a      	add	r2, r1
 8002130:	7910      	ldrb	r0, [r2, #4]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	00e2      	lsls	r2, r4, #3
 8002136:	440a      	add	r2, r1
 8002138:	4413      	add	r3, r2
 800213a:	4602      	mov	r2, r0
 800213c:	701a      	strb	r2, [r3, #0]
	for(loopVal = 0 ; loopVal < 8 ; loopVal++)
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	3301      	adds	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	2b07      	cmp	r3, #7
 8002148:	d9ea      	bls.n	8002120 <EEM_PUSH+0x14>
	}
	ringBuf->id[ ringBuf->tail ].identifier = param->EXTENDED_ID.identifier;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8002150:	461a      	mov	r2, r3
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	6819      	ldr	r1, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3228      	adds	r2, #40	; 0x28
 800215a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	ringBuf->byte_count++;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	ringBuf->tail = ( ringBuf->tail + 1 ) % EEM_BUFFER_SIZE ;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8002172:	1c5a      	adds	r2, r3, #1
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <EEM_PUSH+0xa8>)
 8002176:	fb83 1302 	smull	r1, r3, r3, r2
 800217a:	10d9      	asrs	r1, r3, #3
 800217c:	17d3      	asrs	r3, r2, #31
 800217e:	1ac9      	subs	r1, r1, r3
 8002180:	460b      	mov	r3, r1
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	1ad1      	subs	r1, r2, r3
 800218a:	b2ca      	uxtb	r2, r1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
	
	if( ringBuf->tail == ringBuf->head )
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 20f5 	ldrb.w	r2, [r3, #245]	; 0xf5
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800219e:	429a      	cmp	r2, r3
 80021a0:	d103      	bne.n	80021aa <EEM_PUSH+0x9e>
	{
		ringBuf->full = EEM_TRUE ;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
	}
	
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc90      	pop	{r4, r7}
 80021b2:	4770      	bx	lr
 80021b4:	66666667 	.word	0x66666667

080021b8 <EEM_TX>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
EEM_ERR_T 		EEM_TX( EEM_CAN_Packet_st* param, EEM_U32 period )
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
	EEM_ERR_T result = EEM_EOK;
 80021c2:	2301      	movs	r3, #1
 80021c4:	73fb      	strb	r3, [r7, #15]

#if (defined(STM32F446xx) || defined(STM32F407xx) && defined(BXCAN_Protocol))

	memcpy(&protocol.obj.bxHandle.txData , &param->DATA[0] , EEM_MAX_SIZE );
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	1d1a      	adds	r2, r3, #4
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <EEM_TX+0x58>)
 80021cc:	338c      	adds	r3, #140	; 0x8c
 80021ce:	6810      	ldr	r0, [r2, #0]
 80021d0:	6851      	ldr	r1, [r2, #4]
 80021d2:	c303      	stmia	r3!, {r0, r1}

	protocol.obj.bxHandle.txHeader.DLC   = EEM_MAX_SIZE ; /* 8 BYTE */
 80021d4:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <EEM_TX+0x58>)
 80021d6:	2208      	movs	r2, #8
 80021d8:	661a      	str	r2, [r3, #96]	; 0x60
	protocol.obj.bxHandle.txHeader.IDE   = CAN_ID_EXT   ;
 80021da:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <EEM_TX+0x58>)
 80021dc:	2204      	movs	r2, #4
 80021de:	659a      	str	r2, [r3, #88]	; 0x58
	protocol.obj.bxHandle.txHeader.RTR   = CAN_RTR_DATA ;
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <EEM_TX+0x58>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	65da      	str	r2, [r3, #92]	; 0x5c
	protocol.obj.bxHandle.txHeader.ExtId = param->EXTENDED_ID.identifier ;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a09      	ldr	r2, [pc, #36]	; (8002210 <EEM_TX+0x58>)
 80021ec:	6553      	str	r3, [r2, #84]	; 0x54

	if( HAL_CAN_AddTxMessage(&protocol.obj.bxHandle.hbxcanHandle ,
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <EEM_TX+0x5c>)
 80021f0:	4a09      	ldr	r2, [pc, #36]	; (8002218 <EEM_TX+0x60>)
 80021f2:	490a      	ldr	r1, [pc, #40]	; (800221c <EEM_TX+0x64>)
 80021f4:	4806      	ldr	r0, [pc, #24]	; (8002210 <EEM_TX+0x58>)
 80021f6:	f001 f8e6 	bl	80033c6 <HAL_CAN_AddTxMessage>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <EEM_TX+0x4c>
	        				 &protocol.obj.bxHandle.txHeader	 ,
	        				 &protocol.obj.bxHandle.txData 	     ,
	        				 &protocol.obj.bxHandle.txMailBox 	 ) != HAL_OK )
	{
		return EEM_ERROR;
 8002200:	2300      	movs	r3, #0
 8002202:	e000      	b.n	8002206 <EEM_TX+0x4e>

#endif

#endif

	return result;
 8002204:	7bfb      	ldrb	r3, [r7, #15]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	2000bfa0 	.word	0x2000bfa0
 8002214:	2000c008 	.word	0x2000c008
 8002218:	2000c02c 	.word	0x2000c02c
 800221c:	2000bff0 	.word	0x2000bff0

08002220 <EEM_RX>:
#if defined(SPI2CAN_Protocol)
						uCAN_MSG*			rxPacked      ,
#endif
#endif
						EEM_U8*				rxData	  	   )
{
 8002220:	b084      	sub	sp, #16
 8002222:	b580      	push	{r7, lr}
 8002224:	b084      	sub	sp, #16
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	f107 001c 	add.w	r0, r7, #28
 800222e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	EEM_ERR_T result = EEM_EOK;
 8002232:	2301      	movs	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]

#if ( defined(STM32F446xx) || defined(STM32F407xx) ) && defined(BXCAN_Protocol)

	memcpy( &param->DATA[0] , &rxData[0] , EEM_MAX_SIZE );
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3304      	adds	r3, #4
 800223a:	2208      	movs	r2, #8
 800223c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800223e:	4618      	mov	r0, r3
 8002240:	f009 fd46 	bl	800bcd0 <memcpy>
	param->EXTENDED_ID.identifier = rxHeader.ExtId;
 8002244:	6a3a      	ldr	r2, [r7, #32]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	601a      	str	r2, [r3, #0]
#endif

#endif

	/* Received Data Handled Push Ring Buffer */
	EEM_PUSH( &protocol.obj.ringBuffer , param);
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4805      	ldr	r0, [pc, #20]	; (8002264 <EEM_RX+0x44>)
 800224e:	f7ff ff5d 	bl	800210c <EEM_PUSH>

	return result;
 8002252:	7bfb      	ldrb	r3, [r7, #15]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800225e:	b004      	add	sp, #16
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	2000c050 	.word	0x2000c050

08002268 <EEM_DEBUG_PRINT>:
	 @return  :
	 @date	  :
	 @INFO	  :
********************************************************************************/
void	EEM_DEBUG_PRINT(EEM_Debug_st* debugParam, char* msg)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
	memset( &debug.message[0] , 0x00 , DEBUG_MESSAGE_SIZE );
 8002272:	2232      	movs	r2, #50	; 0x32
 8002274:	2100      	movs	r1, #0
 8002276:	4808      	ldr	r0, [pc, #32]	; (8002298 <EEM_DEBUG_PRINT+0x30>)
 8002278:	f009 fd38 	bl	800bcec <memset>
	sprintf( &debug.message[0], msg);
 800227c:	6839      	ldr	r1, [r7, #0]
 800227e:	4806      	ldr	r0, [pc, #24]	; (8002298 <EEM_DEBUG_PRINT+0x30>)
 8002280:	f009 fd3c 	bl	800bcfc <siprintf>
	HAL_UART_Transmit(&debug.uartHandle, (const EEM_U8*)&debug.message[0], DEBUG_MESSAGE_SIZE, 10);
 8002284:	230a      	movs	r3, #10
 8002286:	2232      	movs	r2, #50	; 0x32
 8002288:	4903      	ldr	r1, [pc, #12]	; (8002298 <EEM_DEBUG_PRINT+0x30>)
 800228a:	4804      	ldr	r0, [pc, #16]	; (800229c <EEM_DEBUG_PRINT+0x34>)
 800228c:	f004 f973 	bl	8006576 <HAL_UART_Transmit>
}
 8002290:	bf00      	nop
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	2000155c 	.word	0x2000155c
 800229c:	20001504 	.word	0x20001504

080022a0 <EEM_SET_IDENTIFIERS>:
	 @return  : void
	 @date	  : 7.02.2023
	 @INFO	  :	Set All Identifiers
********************************************************************************/
void EEM_SET_IDENTIFIERS(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b09a      	sub	sp, #104	; 0x68
 80022a4:	af00      	add	r7, sp, #0
	/* Message Identifier Handler */
	EEM_CAN_ID_st ID[SIZE_OF_MSG] = {0};
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	2264      	movs	r2, #100	; 0x64
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f009 fd1d 	bl	800bcec <memset>

	ID[MSG01_INDEX].Pages.priority 		= PRIORITY_010 ;
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	2202      	movs	r2, #2
 80022b6:	f362 0384 	bfi	r3, r2, #2, #3
 80022ba:	71fb      	strb	r3, [r7, #7]
	ID[MSG01_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	f36f 0341 	bfc	r3, #1, #1
 80022c2:	71fb      	strb	r3, [r7, #7]
	ID[MSG01_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	f36f 0300 	bfc	r3, #0, #1
 80022ca:	71fb      	strb	r3, [r7, #7]
	ID[MSG01_INDEX].Pages.messageID 	= MESSAGE01 ;
 80022cc:	2301      	movs	r3, #1
 80022ce:	71bb      	strb	r3, [r7, #6]
	ID[MSG01_INDEX].Pages.DA 			= BCM_NODE;
 80022d0:	2311      	movs	r3, #17
 80022d2:	717b      	strb	r3, [r7, #5]
	ID[MSG01_INDEX].Pages.SA 			= HVAC_NODE ;
 80022d4:	2322      	movs	r3, #34	; 0x22
 80022d6:	713b      	strb	r3, [r7, #4]
	HVAC_MSG.Message01_ID = ID[MSG01_INDEX].identifier ;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4ae7      	ldr	r2, [pc, #924]	; (8002678 <EEM_SET_IDENTIFIERS+0x3d8>)
 80022dc:	6013      	str	r3, [r2, #0]

	ID[MSG02_INDEX].Pages.priority 		= PRIORITY_010 ;
 80022de:	7afb      	ldrb	r3, [r7, #11]
 80022e0:	2202      	movs	r2, #2
 80022e2:	f362 0384 	bfi	r3, r2, #2, #3
 80022e6:	72fb      	strb	r3, [r7, #11]
	ID[MSG02_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80022e8:	7afb      	ldrb	r3, [r7, #11]
 80022ea:	f36f 0341 	bfc	r3, #1, #1
 80022ee:	72fb      	strb	r3, [r7, #11]
	ID[MSG02_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80022f0:	7afb      	ldrb	r3, [r7, #11]
 80022f2:	f36f 0300 	bfc	r3, #0, #1
 80022f6:	72fb      	strb	r3, [r7, #11]
	ID[MSG02_INDEX].Pages.messageID 	= MESSAGE02 ;
 80022f8:	2302      	movs	r3, #2
 80022fa:	72bb      	strb	r3, [r7, #10]
	ID[MSG02_INDEX].Pages.DA 			= BCM_NODE;
 80022fc:	2311      	movs	r3, #17
 80022fe:	727b      	strb	r3, [r7, #9]
	ID[MSG02_INDEX].Pages.SA 			= HVAC_NODE ;
 8002300:	2322      	movs	r3, #34	; 0x22
 8002302:	723b      	strb	r3, [r7, #8]
	HVAC_MSG.Message02_ID = ID[MSG02_INDEX].identifier ;
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	4adc      	ldr	r2, [pc, #880]	; (8002678 <EEM_SET_IDENTIFIERS+0x3d8>)
 8002308:	60d3      	str	r3, [r2, #12]

	ID[MSG03_INDEX].Pages.priority 		= PRIORITY_100 ;
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	2204      	movs	r2, #4
 800230e:	f362 0384 	bfi	r3, r2, #2, #3
 8002312:	73fb      	strb	r3, [r7, #15]
	ID[MSG03_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002314:	7bfb      	ldrb	r3, [r7, #15]
 8002316:	f36f 0341 	bfc	r3, #1, #1
 800231a:	73fb      	strb	r3, [r7, #15]
	ID[MSG03_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	f36f 0300 	bfc	r3, #0, #1
 8002322:	73fb      	strb	r3, [r7, #15]
	ID[MSG03_INDEX].Pages.messageID 	= MESSAGE03 ;
 8002324:	2303      	movs	r3, #3
 8002326:	73bb      	strb	r3, [r7, #14]
	ID[MSG03_INDEX].Pages.DA 			= TLM_NODE;
 8002328:	2388      	movs	r3, #136	; 0x88
 800232a:	737b      	strb	r3, [r7, #13]
	ID[MSG03_INDEX].Pages.SA 			= BCM_NODE;
 800232c:	2311      	movs	r3, #17
 800232e:	733b      	strb	r3, [r7, #12]
	BCM_MSG.Message03_ID = ID[MSG03_INDEX].identifier ;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4ad2      	ldr	r2, [pc, #840]	; (800267c <EEM_SET_IDENTIFIERS+0x3dc>)
 8002334:	6013      	str	r3, [r2, #0]

	ID[MSG04_INDEX].Pages.priority 		= PRIORITY_100 ;
 8002336:	7cfb      	ldrb	r3, [r7, #19]
 8002338:	2204      	movs	r2, #4
 800233a:	f362 0384 	bfi	r3, r2, #2, #3
 800233e:	74fb      	strb	r3, [r7, #19]
	ID[MSG04_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002340:	7cfb      	ldrb	r3, [r7, #19]
 8002342:	f36f 0341 	bfc	r3, #1, #1
 8002346:	74fb      	strb	r3, [r7, #19]
	ID[MSG04_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002348:	7cfb      	ldrb	r3, [r7, #19]
 800234a:	f36f 0300 	bfc	r3, #0, #1
 800234e:	74fb      	strb	r3, [r7, #19]
	ID[MSG04_INDEX].Pages.messageID 	= MESSAGE04 ;
 8002350:	2304      	movs	r3, #4
 8002352:	74bb      	strb	r3, [r7, #18]
	ID[MSG04_INDEX].Pages.DA 			= SCB_NODE;
 8002354:	2333      	movs	r3, #51	; 0x33
 8002356:	747b      	strb	r3, [r7, #17]
	ID[MSG04_INDEX].Pages.SA 			= BCM_NODE;
 8002358:	2311      	movs	r3, #17
 800235a:	743b      	strb	r3, [r7, #16]
	BCM_MSG.Message04_ID = ID[MSG04_INDEX].identifier ;
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4ac7      	ldr	r2, [pc, #796]	; (800267c <EEM_SET_IDENTIFIERS+0x3dc>)
 8002360:	60d3      	str	r3, [r2, #12]

	ID[MSG05_INDEX].Pages.priority 		= PRIORITY_100 ;
 8002362:	7dfb      	ldrb	r3, [r7, #23]
 8002364:	2204      	movs	r2, #4
 8002366:	f362 0384 	bfi	r3, r2, #2, #3
 800236a:	75fb      	strb	r3, [r7, #23]
	ID[MSG05_INDEX].Pages.reserved 		= NOT_RESERVED ;
 800236c:	7dfb      	ldrb	r3, [r7, #23]
 800236e:	f36f 0341 	bfc	r3, #1, #1
 8002372:	75fb      	strb	r3, [r7, #23]
	ID[MSG05_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002374:	7dfb      	ldrb	r3, [r7, #23]
 8002376:	f36f 0300 	bfc	r3, #0, #1
 800237a:	75fb      	strb	r3, [r7, #23]
	ID[MSG05_INDEX].Pages.messageID 	= MESSAGE05 ;
 800237c:	2305      	movs	r3, #5
 800237e:	75bb      	strb	r3, [r7, #22]
	ID[MSG05_INDEX].Pages.DA 			= SCB_NODE;
 8002380:	2333      	movs	r3, #51	; 0x33
 8002382:	757b      	strb	r3, [r7, #21]
	ID[MSG05_INDEX].Pages.SA 			= BCM_NODE;
 8002384:	2311      	movs	r3, #17
 8002386:	753b      	strb	r3, [r7, #20]
	BCM_MSG.Message05_ID = ID[MSG05_INDEX].identifier ;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	4abc      	ldr	r2, [pc, #752]	; (800267c <EEM_SET_IDENTIFIERS+0x3dc>)
 800238c:	f8c2 3019 	str.w	r3, [r2, #25]

	ID[MSG06_INDEX].Pages.priority 		= PRIORITY_100 ;
 8002390:	7efb      	ldrb	r3, [r7, #27]
 8002392:	2204      	movs	r2, #4
 8002394:	f362 0384 	bfi	r3, r2, #2, #3
 8002398:	76fb      	strb	r3, [r7, #27]
	ID[MSG06_INDEX].Pages.reserved 		= NOT_RESERVED ;
 800239a:	7efb      	ldrb	r3, [r7, #27]
 800239c:	f36f 0341 	bfc	r3, #1, #1
 80023a0:	76fb      	strb	r3, [r7, #27]
	ID[MSG06_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80023a2:	7efb      	ldrb	r3, [r7, #27]
 80023a4:	f36f 0300 	bfc	r3, #0, #1
 80023a8:	76fb      	strb	r3, [r7, #27]
	ID[MSG06_INDEX].Pages.messageID 	= MESSAGE06 ;
 80023aa:	2306      	movs	r3, #6
 80023ac:	76bb      	strb	r3, [r7, #26]
	ID[MSG06_INDEX].Pages.DA 			= SCB_NODE;
 80023ae:	2333      	movs	r3, #51	; 0x33
 80023b0:	767b      	strb	r3, [r7, #25]
	ID[MSG06_INDEX].Pages.SA 			= BMS_NODE;
 80023b2:	2344      	movs	r3, #68	; 0x44
 80023b4:	763b      	strb	r3, [r7, #24]
	BMS_MSG.Message06_ID = ID[MSG06_INDEX].identifier ;
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	4ab1      	ldr	r2, [pc, #708]	; (8002680 <EEM_SET_IDENTIFIERS+0x3e0>)
 80023ba:	6013      	str	r3, [r2, #0]

	ID[MSG07_INDEX].Pages.priority 		= PRIORITY_100 ;
 80023bc:	7ffb      	ldrb	r3, [r7, #31]
 80023be:	2204      	movs	r2, #4
 80023c0:	f362 0384 	bfi	r3, r2, #2, #3
 80023c4:	77fb      	strb	r3, [r7, #31]
	ID[MSG07_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80023c6:	7ffb      	ldrb	r3, [r7, #31]
 80023c8:	f36f 0341 	bfc	r3, #1, #1
 80023cc:	77fb      	strb	r3, [r7, #31]
	ID[MSG07_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80023ce:	7ffb      	ldrb	r3, [r7, #31]
 80023d0:	f36f 0300 	bfc	r3, #0, #1
 80023d4:	77fb      	strb	r3, [r7, #31]
	ID[MSG07_INDEX].Pages.messageID 	= MESSAGE07 ;
 80023d6:	2307      	movs	r3, #7
 80023d8:	77bb      	strb	r3, [r7, #30]
	ID[MSG07_INDEX].Pages.DA 			= SCB_NODE;
 80023da:	2333      	movs	r3, #51	; 0x33
 80023dc:	777b      	strb	r3, [r7, #29]
	ID[MSG07_INDEX].Pages.SA 			= BMS_NODE;
 80023de:	2344      	movs	r3, #68	; 0x44
 80023e0:	773b      	strb	r3, [r7, #28]
	BMS_MSG.Message07_ID = ID[MSG07_INDEX].identifier ;
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	4aa6      	ldr	r2, [pc, #664]	; (8002680 <EEM_SET_IDENTIFIERS+0x3e0>)
 80023e6:	60d3      	str	r3, [r2, #12]

	ID[MSG08_INDEX].Pages.priority 		= PRIORITY_100 ;
 80023e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023ec:	2204      	movs	r2, #4
 80023ee:	f362 0384 	bfi	r3, r2, #2, #3
 80023f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ID[MSG08_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80023f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023fa:	f36f 0341 	bfc	r3, #1, #1
 80023fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ID[MSG08_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002402:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002406:	f36f 0300 	bfc	r3, #0, #1
 800240a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ID[MSG08_INDEX].Pages.messageID 	= MESSAGE08 ;
 800240e:	2308      	movs	r3, #8
 8002410:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	ID[MSG08_INDEX].Pages.DA 			= SCB_NODE;
 8002414:	2333      	movs	r3, #51	; 0x33
 8002416:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	ID[MSG08_INDEX].Pages.SA 			= BMS_NODE;
 800241a:	2344      	movs	r3, #68	; 0x44
 800241c:	f887 3020 	strb.w	r3, [r7, #32]
	BMS_MSG.Message08_ID = ID[MSG08_INDEX].identifier ;
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	4a97      	ldr	r2, [pc, #604]	; (8002680 <EEM_SET_IDENTIFIERS+0x3e0>)
 8002424:	6193      	str	r3, [r2, #24]

	ID[MSG09_INDEX].Pages.priority 		= PRIORITY_100 ;
 8002426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800242a:	2204      	movs	r2, #4
 800242c:	f362 0384 	bfi	r3, r2, #2, #3
 8002430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ID[MSG09_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002438:	f36f 0341 	bfc	r3, #1, #1
 800243c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ID[MSG09_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002444:	f36f 0300 	bfc	r3, #0, #1
 8002448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ID[MSG09_INDEX].Pages.messageID 	= MESSAGE09 ;
 800244c:	2309      	movs	r3, #9
 800244e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	ID[MSG09_INDEX].Pages.DA 			= SCB_NODE;
 8002452:	2333      	movs	r3, #51	; 0x33
 8002454:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	ID[MSG09_INDEX].Pages.SA 			= BMS_NODE;
 8002458:	2344      	movs	r3, #68	; 0x44
 800245a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	BMS_MSG.Message09_ID = ID[MSG09_INDEX].identifier ;
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	4a87      	ldr	r2, [pc, #540]	; (8002680 <EEM_SET_IDENTIFIERS+0x3e0>)
 8002462:	6253      	str	r3, [r2, #36]	; 0x24

	ID[MSG10_INDEX].Pages.priority 		= PRIORITY_100 ;
 8002464:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002468:	2204      	movs	r2, #4
 800246a:	f362 0384 	bfi	r3, r2, #2, #3
 800246e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	ID[MSG10_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002472:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002476:	f36f 0341 	bfc	r3, #1, #1
 800247a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	ID[MSG10_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800247e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002482:	f36f 0300 	bfc	r3, #0, #1
 8002486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	ID[MSG10_INDEX].Pages.messageID 	= MESSAGE10 ;
 800248a:	2310      	movs	r3, #16
 800248c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	ID[MSG10_INDEX].Pages.DA 			= SCB_NODE;
 8002490:	2333      	movs	r3, #51	; 0x33
 8002492:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	ID[MSG10_INDEX].Pages.SA 			= BMS_NODE;
 8002496:	2344      	movs	r3, #68	; 0x44
 8002498:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	BMS_MSG.Message10_ID = ID[MSG10_INDEX].identifier ;
 800249c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249e:	4a78      	ldr	r2, [pc, #480]	; (8002680 <EEM_SET_IDENTIFIERS+0x3e0>)
 80024a0:	6313      	str	r3, [r2, #48]	; 0x30

	ID[MSG11_INDEX].Pages.priority 		= PRIORITY_001 ;
 80024a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024a6:	2201      	movs	r2, #1
 80024a8:	f362 0384 	bfi	r3, r2, #2, #3
 80024ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ID[MSG11_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80024b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024b4:	f36f 0341 	bfc	r3, #1, #1
 80024b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ID[MSG11_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80024bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024c0:	f36f 0300 	bfc	r3, #0, #1
 80024c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ID[MSG11_INDEX].Pages.messageID 	= MESSAGE11 ;
 80024c8:	2311      	movs	r3, #17
 80024ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	ID[MSG11_INDEX].Pages.DA 			= MS1_NODE;
 80024ce:	2355      	movs	r3, #85	; 0x55
 80024d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	ID[MSG11_INDEX].Pages.SA 			= BCM_NODE ;
 80024d4:	2311      	movs	r3, #17
 80024d6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	BCM_MSG.Message11_ID = ID[MSG11_INDEX].identifier ;
 80024da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024dc:	4a67      	ldr	r2, [pc, #412]	; (800267c <EEM_SET_IDENTIFIERS+0x3dc>)
 80024de:	f8c2 3025 	str.w	r3, [r2, #37]	; 0x25

	ID[MSG12_INDEX].Pages.priority 		= PRIORITY_001 ;
 80024e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024e6:	2201      	movs	r2, #1
 80024e8:	f362 0384 	bfi	r3, r2, #2, #3
 80024ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	ID[MSG12_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80024f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024f4:	f36f 0341 	bfc	r3, #1, #1
 80024f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	ID[MSG12_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80024fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002500:	f36f 0300 	bfc	r3, #0, #1
 8002504:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	ID[MSG12_INDEX].Pages.messageID 	= MESSAGE12 ;
 8002508:	2312      	movs	r3, #18
 800250a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	ID[MSG12_INDEX].Pages.DA 			= MS2_NODE;
 800250e:	2366      	movs	r3, #102	; 0x66
 8002510:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	ID[MSG12_INDEX].Pages.SA 			= BCM_NODE ;
 8002514:	2311      	movs	r3, #17
 8002516:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	BCM_MSG.Message12_ID = ID[MSG12_INDEX].identifier ;
 800251a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251c:	4a57      	ldr	r2, [pc, #348]	; (800267c <EEM_SET_IDENTIFIERS+0x3dc>)
 800251e:	f8c2 3031 	str.w	r3, [r2, #49]	; 0x31

	ID[MSG13_INDEX].Pages.priority 		= PRIORITY_001 ;
 8002522:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002526:	2201      	movs	r2, #1
 8002528:	f362 0384 	bfi	r3, r2, #2, #3
 800252c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	ID[MSG13_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002530:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002534:	f36f 0341 	bfc	r3, #1, #1
 8002538:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	ID[MSG13_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800253c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002540:	f36f 0300 	bfc	r3, #0, #1
 8002544:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	ID[MSG13_INDEX].Pages.messageID 	= MESSAGE13 ;
 8002548:	2313      	movs	r3, #19
 800254a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	ID[MSG13_INDEX].Pages.DA 			= BCM_NODE ;
 800254e:	2311      	movs	r3, #17
 8002550:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	ID[MSG13_INDEX].Pages.SA 			= MS1_NODE ;
 8002554:	2355      	movs	r3, #85	; 0x55
 8002556:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	MS1_MSG.Message13_ID = ID[MSG13_INDEX].identifier ;
 800255a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255c:	4a49      	ldr	r2, [pc, #292]	; (8002684 <EEM_SET_IDENTIFIERS+0x3e4>)
 800255e:	6013      	str	r3, [r2, #0]

	ID[MSG14_INDEX].Pages.priority 		= PRIORITY_001 ;
 8002560:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002564:	2201      	movs	r2, #1
 8002566:	f362 0384 	bfi	r3, r2, #2, #3
 800256a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	ID[MSG14_INDEX].Pages.reserved 		= NOT_RESERVED ;
 800256e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002572:	f36f 0341 	bfc	r3, #1, #1
 8002576:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	ID[MSG14_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800257a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800257e:	f36f 0300 	bfc	r3, #0, #1
 8002582:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	ID[MSG14_INDEX].Pages.messageID 	= MESSAGE14 ;
 8002586:	2314      	movs	r3, #20
 8002588:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	ID[MSG14_INDEX].Pages.DA 			= BCM_NODE ;
 800258c:	2311      	movs	r3, #17
 800258e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	ID[MSG14_INDEX].Pages.SA 			= MS1_NODE ;
 8002592:	2355      	movs	r3, #85	; 0x55
 8002594:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	MS1_MSG.Message14_ID = ID[MSG14_INDEX].identifier ;
 8002598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259a:	4a3a      	ldr	r2, [pc, #232]	; (8002684 <EEM_SET_IDENTIFIERS+0x3e4>)
 800259c:	60d3      	str	r3, [r2, #12]

	ID[MSG15_INDEX].Pages.priority 		= PRIORITY_001 ;
 800259e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80025a2:	2201      	movs	r2, #1
 80025a4:	f362 0384 	bfi	r3, r2, #2, #3
 80025a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	ID[MSG15_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80025ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80025b0:	f36f 0341 	bfc	r3, #1, #1
 80025b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	ID[MSG15_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80025b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80025bc:	f36f 0300 	bfc	r3, #0, #1
 80025c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	ID[MSG15_INDEX].Pages.messageID 	= MESSAGE15 ;
 80025c4:	2315      	movs	r3, #21
 80025c6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	ID[MSG15_INDEX].Pages.DA 			= BCM_NODE ;
 80025ca:	2311      	movs	r3, #17
 80025cc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	ID[MSG15_INDEX].Pages.SA 			= MS1_NODE ;
 80025d0:	2355      	movs	r3, #85	; 0x55
 80025d2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	MS1_MSG.Message15_ID = ID[MSG15_INDEX].identifier ;
 80025d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d8:	4a2a      	ldr	r2, [pc, #168]	; (8002684 <EEM_SET_IDENTIFIERS+0x3e4>)
 80025da:	6193      	str	r3, [r2, #24]

	ID[MSG16_INDEX].Pages.priority 		= PRIORITY_001 ;
 80025dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80025e0:	2201      	movs	r2, #1
 80025e2:	f362 0384 	bfi	r3, r2, #2, #3
 80025e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	ID[MSG16_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80025ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80025ee:	f36f 0341 	bfc	r3, #1, #1
 80025f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	ID[MSG16_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80025f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80025fa:	f36f 0300 	bfc	r3, #0, #1
 80025fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	ID[MSG16_INDEX].Pages.messageID 	= MESSAGE16 ;
 8002602:	2316      	movs	r3, #22
 8002604:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	ID[MSG16_INDEX].Pages.DA 			= BCM_NODE ;
 8002608:	2311      	movs	r3, #17
 800260a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	ID[MSG16_INDEX].Pages.SA 			= MS2_NODE ;
 800260e:	2366      	movs	r3, #102	; 0x66
 8002610:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	MS2_MSG.Message16_ID = ID[MSG16_INDEX].identifier ;
 8002614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002616:	4a1c      	ldr	r2, [pc, #112]	; (8002688 <EEM_SET_IDENTIFIERS+0x3e8>)
 8002618:	6013      	str	r3, [r2, #0]

	ID[MSG17_INDEX].Pages.priority 		= PRIORITY_001 ;
 800261a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800261e:	2201      	movs	r2, #1
 8002620:	f362 0384 	bfi	r3, r2, #2, #3
 8002624:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	ID[MSG17_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002628:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800262c:	f36f 0341 	bfc	r3, #1, #1
 8002630:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	ID[MSG17_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002634:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002638:	f36f 0300 	bfc	r3, #0, #1
 800263c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	ID[MSG17_INDEX].Pages.messageID 	= MESSAGE17 ;
 8002640:	2317      	movs	r3, #23
 8002642:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	ID[MSG17_INDEX].Pages.DA 			= BCM_NODE ;
 8002646:	2311      	movs	r3, #17
 8002648:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	ID[MSG17_INDEX].Pages.SA 			= MS2_NODE ;
 800264c:	2366      	movs	r3, #102	; 0x66
 800264e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	MS2_MSG.Message17_ID = ID[MSG17_INDEX].identifier ;
 8002652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002654:	4a0c      	ldr	r2, [pc, #48]	; (8002688 <EEM_SET_IDENTIFIERS+0x3e8>)
 8002656:	60d3      	str	r3, [r2, #12]

	ID[MSG18_INDEX].Pages.priority 		= PRIORITY_001 ;
 8002658:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800265c:	2201      	movs	r2, #1
 800265e:	f362 0384 	bfi	r3, r2, #2, #3
 8002662:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	ID[MSG18_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002666:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800266a:	f36f 0341 	bfc	r3, #1, #1
 800266e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	ID[MSG18_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002672:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002676:	e009      	b.n	800268c <EEM_SET_IDENTIFIERS+0x3ec>
 8002678:	20001444 	.word	0x20001444
 800267c:	200013ec 	.word	0x200013ec
 8002680:	20001468 	.word	0x20001468
 8002684:	200014a4 	.word	0x200014a4
 8002688:	200014c8 	.word	0x200014c8
 800268c:	f36f 0300 	bfc	r3, #0, #1
 8002690:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	ID[MSG18_INDEX].Pages.messageID 	= MESSAGE18 ;
 8002694:	2318      	movs	r3, #24
 8002696:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	ID[MSG18_INDEX].Pages.DA 			= BCM_NODE ;
 800269a:	2311      	movs	r3, #17
 800269c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	ID[MSG18_INDEX].Pages.SA 			= MS2_NODE ;
 80026a0:	2366      	movs	r3, #102	; 0x66
 80026a2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MS2_MSG.Message18_ID = ID[MSG18_INDEX].identifier ;
 80026a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026a8:	4a50      	ldr	r2, [pc, #320]	; (80027ec <EEM_SET_IDENTIFIERS+0x54c>)
 80026aa:	6193      	str	r3, [r2, #24]

	ID[MSG19_INDEX].Pages.priority 		= PRIORITY_001 ;
 80026ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80026b0:	2201      	movs	r2, #1
 80026b2:	f362 0384 	bfi	r3, r2, #2, #3
 80026b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	ID[MSG19_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80026ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80026be:	f36f 0341 	bfc	r3, #1, #1
 80026c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	ID[MSG19_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80026c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80026ca:	f36f 0300 	bfc	r3, #0, #1
 80026ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	ID[MSG19_INDEX].Pages.messageID 	= MESSAGE19 ;
 80026d2:	2319      	movs	r3, #25
 80026d4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	ID[MSG19_INDEX].Pages.DA 			= BCM_NODE ;
 80026d8:	2311      	movs	r3, #17
 80026da:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	ID[MSG19_INDEX].Pages.SA 			= MS1_NODE ;
 80026de:	2355      	movs	r3, #85	; 0x55
 80026e0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	BCM_MSG.Message19_ID = ID[MSG19_INDEX].identifier ;
 80026e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026e6:	4a42      	ldr	r2, [pc, #264]	; (80027f0 <EEM_SET_IDENTIFIERS+0x550>)
 80026e8:	f8c2 303d 	str.w	r3, [r2, #61]	; 0x3d

	ID[MSG20_INDEX].Pages.priority 		= PRIORITY_001 ;
 80026ec:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80026f0:	2201      	movs	r2, #1
 80026f2:	f362 0384 	bfi	r3, r2, #2, #3
 80026f6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	ID[MSG20_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80026fa:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80026fe:	f36f 0341 	bfc	r3, #1, #1
 8002702:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	ID[MSG20_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002706:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800270a:	f36f 0300 	bfc	r3, #0, #1
 800270e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	ID[MSG20_INDEX].Pages.messageID 	= MESSAGE20 ;
 8002712:	2320      	movs	r3, #32
 8002714:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	ID[MSG20_INDEX].Pages.DA 			= BCM_NODE ;
 8002718:	2311      	movs	r3, #17
 800271a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	ID[MSG20_INDEX].Pages.SA 			= MS2_NODE ;
 800271e:	2366      	movs	r3, #102	; 0x66
 8002720:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	BCM_MSG.Message20_ID = ID[MSG20_INDEX].identifier ;
 8002724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002726:	4a32      	ldr	r2, [pc, #200]	; (80027f0 <EEM_SET_IDENTIFIERS+0x550>)
 8002728:	f8c2 3049 	str.w	r3, [r2, #73]	; 0x49

	ID[MSG21_INDEX].Pages.priority 		= PRIORITY_011 ;
 800272c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002730:	2203      	movs	r2, #3
 8002732:	f362 0384 	bfi	r3, r2, #2, #3
 8002736:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	ID[MSG21_INDEX].Pages.reserved 		= NOT_RESERVED ;
 800273a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800273e:	f36f 0341 	bfc	r3, #1, #1
 8002742:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	ID[MSG21_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002746:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800274a:	f36f 0300 	bfc	r3, #0, #1
 800274e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	ID[MSG21_INDEX].Pages.messageID 	= MESSAGE21 ;
 8002752:	2321      	movs	r3, #33	; 0x21
 8002754:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	ID[MSG21_INDEX].Pages.DA 			= BCM_NODE;
 8002758:	2311      	movs	r3, #17
 800275a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	ID[MSG21_INDEX].Pages.SA 			= SCB_NODE;
 800275e:	2333      	movs	r3, #51	; 0x33
 8002760:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	SCB_MSG.Message21_ID = ID[MSG21_INDEX].identifier ;
 8002764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002766:	4a23      	ldr	r2, [pc, #140]	; (80027f4 <EEM_SET_IDENTIFIERS+0x554>)
 8002768:	6013      	str	r3, [r2, #0]

	ID[MSG22_INDEX].Pages.priority 		= PRIORITY_111 ;
 800276a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800276e:	f043 031c 	orr.w	r3, r3, #28
 8002772:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	ID[MSG22_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002776:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800277a:	f36f 0341 	bfc	r3, #1, #1
 800277e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	ID[MSG22_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002782:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002786:	f36f 0300 	bfc	r3, #0, #1
 800278a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	ID[MSG22_INDEX].Pages.messageID 	= MESSAGE22 ;
 800278e:	2322      	movs	r3, #34	; 0x22
 8002790:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	ID[MSG22_INDEX].Pages.DA 			= BCM_NODE;
 8002794:	2311      	movs	r3, #17
 8002796:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	ID[MSG22_INDEX].Pages.SA 			= TLM_NODE;
 800279a:	2388      	movs	r3, #136	; 0x88
 800279c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	TLM_MSG.Message22_ID = 	ID[MSG22_INDEX].identifier ;
 80027a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027a2:	4a15      	ldr	r2, [pc, #84]	; (80027f8 <EEM_SET_IDENTIFIERS+0x558>)
 80027a4:	6013      	str	r3, [r2, #0]

	ID[MSG23_INDEX].Pages.priority 		= PRIORITY_111 ;
 80027a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80027aa:	f043 031c 	orr.w	r3, r3, #28
 80027ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	ID[MSG23_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80027b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80027b6:	f36f 0341 	bfc	r3, #1, #1
 80027ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	ID[MSG23_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80027be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80027c2:	f36f 0300 	bfc	r3, #0, #1
 80027c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	ID[MSG23_INDEX].Pages.messageID 	= MESSAGE23 ;
 80027ca:	2323      	movs	r3, #35	; 0x23
 80027cc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	ID[MSG23_INDEX].Pages.DA 			= BCM_NODE;
 80027d0:	2311      	movs	r3, #17
 80027d2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	ID[MSG23_INDEX].Pages.SA 			= TLM_NODE;
 80027d6:	2388      	movs	r3, #136	; 0x88
 80027d8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	TLM_MSG.Message23_ID = 	ID[MSG23_INDEX].identifier ;
 80027dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027de:	4a06      	ldr	r2, [pc, #24]	; (80027f8 <EEM_SET_IDENTIFIERS+0x558>)
 80027e0:	60d3      	str	r3, [r2, #12]


}
 80027e2:	bf00      	nop
 80027e4:	3768      	adds	r7, #104	; 0x68
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	200014c8 	.word	0x200014c8
 80027f0:	200013ec 	.word	0x200013ec
 80027f4:	2000145c 	.word	0x2000145c
 80027f8:	200014ec 	.word	0x200014ec

080027fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002800:	4b0e      	ldr	r3, [pc, #56]	; (800283c <HAL_Init+0x40>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0d      	ldr	r2, [pc, #52]	; (800283c <HAL_Init+0x40>)
 8002806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800280a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_Init+0x40>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0a      	ldr	r2, [pc, #40]	; (800283c <HAL_Init+0x40>)
 8002812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002816:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002818:	4b08      	ldr	r3, [pc, #32]	; (800283c <HAL_Init+0x40>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a07      	ldr	r2, [pc, #28]	; (800283c <HAL_Init+0x40>)
 800281e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002824:	2003      	movs	r0, #3
 8002826:	f001 faeb 	bl	8003e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800282a:	200f      	movs	r0, #15
 800282c:	f000 f808 	bl	8002840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002830:	f7fe fd3a 	bl	80012a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40023c00 	.word	0x40023c00

08002840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002848:	4b12      	ldr	r3, [pc, #72]	; (8002894 <HAL_InitTick+0x54>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_InitTick+0x58>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	4619      	mov	r1, r3
 8002852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002856:	fbb3 f3f1 	udiv	r3, r3, r1
 800285a:	fbb2 f3f3 	udiv	r3, r2, r3
 800285e:	4618      	mov	r0, r3
 8002860:	f001 fb03 	bl	8003e6a <HAL_SYSTICK_Config>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e00e      	b.n	800288c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b0f      	cmp	r3, #15
 8002872:	d80a      	bhi.n	800288a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002874:	2200      	movs	r2, #0
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	f04f 30ff 	mov.w	r0, #4294967295
 800287c:	f001 facb 	bl	8003e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002880:	4a06      	ldr	r2, [pc, #24]	; (800289c <HAL_InitTick+0x5c>)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e000      	b.n	800288c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20000000 	.word	0x20000000
 8002898:	20000008 	.word	0x20000008
 800289c:	20000004 	.word	0x20000004

080028a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_IncTick+0x20>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_IncTick+0x24>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <HAL_IncTick+0x24>)
 80028b2:	6013      	str	r3, [r2, #0]
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000008 	.word	0x20000008
 80028c4:	20001590 	.word	0x20001590

080028c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return uwTick;
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <HAL_GetTick+0x14>)
 80028ce:	681b      	ldr	r3, [r3, #0]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20001590 	.word	0x20001590

080028e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028e8:	f7ff ffee 	bl	80028c8 <HAL_GetTick>
 80028ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d005      	beq.n	8002906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <HAL_Delay+0x44>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4413      	add	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002906:	bf00      	nop
 8002908:	f7ff ffde 	bl	80028c8 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	429a      	cmp	r2, r3
 8002916:	d8f7      	bhi.n	8002908 <HAL_Delay+0x28>
  {
  }
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000008 	.word	0x20000008

08002928 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e033      	b.n	80029a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d109      	bne.n	800295a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fe fcda 	bl	8001300 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	2b00      	cmp	r3, #0
 8002964:	d118      	bne.n	8002998 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800296e:	f023 0302 	bic.w	r3, r3, #2
 8002972:	f043 0202 	orr.w	r2, r3, #2
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fae8 	bl	8002f50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f023 0303 	bic.w	r3, r3, #3
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	641a      	str	r2, [r3, #64]	; 0x40
 8002996:	e001      	b.n	800299c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
	...

080029b0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_ADC_Start+0x1a>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e0b2      	b.n	8002b30 <HAL_ADC_Start+0x180>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d018      	beq.n	8002a12 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0201 	orr.w	r2, r2, #1
 80029ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029f0:	4b52      	ldr	r3, [pc, #328]	; (8002b3c <HAL_ADC_Start+0x18c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a52      	ldr	r2, [pc, #328]	; (8002b40 <HAL_ADC_Start+0x190>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	0c9a      	lsrs	r2, r3, #18
 80029fc:	4613      	mov	r3, r2
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	4413      	add	r3, r2
 8002a02:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002a04:	e002      	b.n	8002a0c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f9      	bne.n	8002a06 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d17a      	bne.n	8002b16 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a28:	f023 0301 	bic.w	r3, r3, #1
 8002a2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d007      	beq.n	8002a52 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a5e:	d106      	bne.n	8002a6e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a64:	f023 0206 	bic.w	r2, r3, #6
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	645a      	str	r2, [r3, #68]	; 0x44
 8002a6c:	e002      	b.n	8002a74 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a7c:	4b31      	ldr	r3, [pc, #196]	; (8002b44 <HAL_ADC_Start+0x194>)
 8002a7e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a88:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 031f 	and.w	r3, r3, #31
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d12a      	bne.n	8002aec <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a2b      	ldr	r2, [pc, #172]	; (8002b48 <HAL_ADC_Start+0x198>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d015      	beq.n	8002acc <HAL_ADC_Start+0x11c>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a29      	ldr	r2, [pc, #164]	; (8002b4c <HAL_ADC_Start+0x19c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d105      	bne.n	8002ab6 <HAL_ADC_Start+0x106>
 8002aaa:	4b26      	ldr	r3, [pc, #152]	; (8002b44 <HAL_ADC_Start+0x194>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 031f 	and.w	r3, r3, #31
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a25      	ldr	r2, [pc, #148]	; (8002b50 <HAL_ADC_Start+0x1a0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d136      	bne.n	8002b2e <HAL_ADC_Start+0x17e>
 8002ac0:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <HAL_ADC_Start+0x194>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 0310 	and.w	r3, r3, #16
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d130      	bne.n	8002b2e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d129      	bne.n	8002b2e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ae8:	609a      	str	r2, [r3, #8]
 8002aea:	e020      	b.n	8002b2e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a15      	ldr	r2, [pc, #84]	; (8002b48 <HAL_ADC_Start+0x198>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d11b      	bne.n	8002b2e <HAL_ADC_Start+0x17e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d114      	bne.n	8002b2e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	e00b      	b.n	8002b2e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f043 0210 	orr.w	r2, r3, #16
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	f043 0201 	orr.w	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	20000000 	.word	0x20000000
 8002b40:	431bde83 	.word	0x431bde83
 8002b44:	40012300 	.word	0x40012300
 8002b48:	40012000 	.word	0x40012000
 8002b4c:	40012100 	.word	0x40012100
 8002b50:	40012200 	.word	0x40012200

08002b54 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_ADC_Stop+0x16>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e021      	b.n	8002bae <HAL_ADC_Stop+0x5a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0201 	bic.w	r2, r2, #1
 8002b80:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d109      	bne.n	8002ba4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	f043 0201 	orr.w	r2, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd6:	d113      	bne.n	8002c00 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be6:	d10b      	bne.n	8002c00 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	f043 0220 	orr.w	r2, r3, #32
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e063      	b.n	8002cc8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002c00:	f7ff fe62 	bl	80028c8 <HAL_GetTick>
 8002c04:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c06:	e021      	b.n	8002c4c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0e:	d01d      	beq.n	8002c4c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d007      	beq.n	8002c26 <HAL_ADC_PollForConversion+0x6c>
 8002c16:	f7ff fe57 	bl	80028c8 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d212      	bcs.n	8002c4c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d00b      	beq.n	8002c4c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	f043 0204 	orr.w	r2, r3, #4
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e03d      	b.n	8002cc8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d1d6      	bne.n	8002c08 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f06f 0212 	mvn.w	r2, #18
 8002c62:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d123      	bne.n	8002cc6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d11f      	bne.n	8002cc6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d006      	beq.n	8002ca2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d111      	bne.n	8002cc6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d105      	bne.n	8002cc6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f043 0201 	orr.w	r2, r3, #1
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x1c>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e113      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x244>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b09      	cmp	r3, #9
 8002d16:	d925      	bls.n	8002d64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68d9      	ldr	r1, [r3, #12]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	461a      	mov	r2, r3
 8002d26:	4613      	mov	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3b1e      	subs	r3, #30
 8002d2e:	2207      	movs	r2, #7
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43da      	mvns	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	400a      	ands	r2, r1
 8002d3c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68d9      	ldr	r1, [r3, #12]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	4618      	mov	r0, r3
 8002d50:	4603      	mov	r3, r0
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	4403      	add	r3, r0
 8002d56:	3b1e      	subs	r3, #30
 8002d58:	409a      	lsls	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	60da      	str	r2, [r3, #12]
 8002d62:	e022      	b.n	8002daa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6919      	ldr	r1, [r3, #16]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	461a      	mov	r2, r3
 8002d72:	4613      	mov	r3, r2
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	4413      	add	r3, r2
 8002d78:	2207      	movs	r2, #7
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43da      	mvns	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	400a      	ands	r2, r1
 8002d86:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6919      	ldr	r1, [r3, #16]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	4618      	mov	r0, r3
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	4403      	add	r3, r0
 8002da0:	409a      	lsls	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b06      	cmp	r3, #6
 8002db0:	d824      	bhi.n	8002dfc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3b05      	subs	r3, #5
 8002dc4:	221f      	movs	r2, #31
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43da      	mvns	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	400a      	ands	r2, r1
 8002dd2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	4618      	mov	r0, r3
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	3b05      	subs	r3, #5
 8002dee:	fa00 f203 	lsl.w	r2, r0, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	635a      	str	r2, [r3, #52]	; 0x34
 8002dfa:	e04c      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b0c      	cmp	r3, #12
 8002e02:	d824      	bhi.n	8002e4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	3b23      	subs	r3, #35	; 0x23
 8002e16:	221f      	movs	r2, #31
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43da      	mvns	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	400a      	ands	r2, r1
 8002e24:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	4618      	mov	r0, r3
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3b23      	subs	r3, #35	; 0x23
 8002e40:	fa00 f203 	lsl.w	r2, r0, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e4c:	e023      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3b41      	subs	r3, #65	; 0x41
 8002e60:	221f      	movs	r2, #31
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43da      	mvns	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	400a      	ands	r2, r1
 8002e6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	3b41      	subs	r3, #65	; 0x41
 8002e8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e96:	4b29      	ldr	r3, [pc, #164]	; (8002f3c <HAL_ADC_ConfigChannel+0x250>)
 8002e98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a28      	ldr	r2, [pc, #160]	; (8002f40 <HAL_ADC_ConfigChannel+0x254>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d10f      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x1d8>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b12      	cmp	r3, #18
 8002eaa:	d10b      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1d      	ldr	r2, [pc, #116]	; (8002f40 <HAL_ADC_ConfigChannel+0x254>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d12b      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x23a>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a1c      	ldr	r2, [pc, #112]	; (8002f44 <HAL_ADC_ConfigChannel+0x258>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d003      	beq.n	8002ee0 <HAL_ADC_ConfigChannel+0x1f4>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b11      	cmp	r3, #17
 8002ede:	d122      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a11      	ldr	r2, [pc, #68]	; (8002f44 <HAL_ADC_ConfigChannel+0x258>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d111      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f02:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <HAL_ADC_ConfigChannel+0x25c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a11      	ldr	r2, [pc, #68]	; (8002f4c <HAL_ADC_ConfigChannel+0x260>)
 8002f08:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0c:	0c9a      	lsrs	r2, r3, #18
 8002f0e:	4613      	mov	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f18:	e002      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f9      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	40012300 	.word	0x40012300
 8002f40:	40012000 	.word	0x40012000
 8002f44:	10000012 	.word	0x10000012
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	431bde83 	.word	0x431bde83

08002f50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f58:	4b79      	ldr	r3, [pc, #484]	; (8003140 <ADC_Init+0x1f0>)
 8002f5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	431a      	orrs	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	021a      	lsls	r2, r3, #8
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002fa8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6859      	ldr	r1, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6899      	ldr	r1, [r3, #8]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe2:	4a58      	ldr	r2, [pc, #352]	; (8003144 <ADC_Init+0x1f4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d022      	beq.n	800302e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ff6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6899      	ldr	r1, [r3, #8]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003018:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6899      	ldr	r1, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	e00f      	b.n	800304e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800303c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800304c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0202 	bic.w	r2, r2, #2
 800305c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6899      	ldr	r1, [r3, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	7e1b      	ldrb	r3, [r3, #24]
 8003068:	005a      	lsls	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d01b      	beq.n	80030b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800308a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800309a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6859      	ldr	r1, [r3, #4]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	3b01      	subs	r3, #1
 80030a8:	035a      	lsls	r2, r3, #13
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	e007      	b.n	80030c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	3b01      	subs	r3, #1
 80030e0:	051a      	lsls	r2, r3, #20
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6899      	ldr	r1, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003106:	025a      	lsls	r2, r3, #9
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800311e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6899      	ldr	r1, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	029a      	lsls	r2, r3, #10
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	609a      	str	r2, [r3, #8]
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	40012300 	.word	0x40012300
 8003144:	0f000001 	.word	0x0f000001

08003148 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e0ed      	b.n	8003336 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d102      	bne.n	800316c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7fe f9ac 	bl	80014c4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800317c:	f7ff fba4 	bl	80028c8 <HAL_GetTick>
 8003180:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003182:	e012      	b.n	80031aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003184:	f7ff fba0 	bl	80028c8 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b0a      	cmp	r3, #10
 8003190:	d90b      	bls.n	80031aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2205      	movs	r2, #5
 80031a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e0c5      	b.n	8003336 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0e5      	beq.n	8003184 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0202 	bic.w	r2, r2, #2
 80031c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031c8:	f7ff fb7e 	bl	80028c8 <HAL_GetTick>
 80031cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031ce:	e012      	b.n	80031f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031d0:	f7ff fb7a 	bl	80028c8 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b0a      	cmp	r3, #10
 80031dc:	d90b      	bls.n	80031f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2205      	movs	r2, #5
 80031ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e09f      	b.n	8003336 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1e5      	bne.n	80031d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	7e1b      	ldrb	r3, [r3, #24]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d108      	bne.n	800321e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	e007      	b.n	800322e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800322c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	7e5b      	ldrb	r3, [r3, #25]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d108      	bne.n	8003248 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	e007      	b.n	8003258 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003256:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	7e9b      	ldrb	r3, [r3, #26]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d108      	bne.n	8003272 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0220 	orr.w	r2, r2, #32
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	e007      	b.n	8003282 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0220 	bic.w	r2, r2, #32
 8003280:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	7edb      	ldrb	r3, [r3, #27]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d108      	bne.n	800329c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0210 	bic.w	r2, r2, #16
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	e007      	b.n	80032ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0210 	orr.w	r2, r2, #16
 80032aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	7f1b      	ldrb	r3, [r3, #28]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d108      	bne.n	80032c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0208 	orr.w	r2, r2, #8
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	e007      	b.n	80032d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0208 	bic.w	r2, r2, #8
 80032d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	7f5b      	ldrb	r3, [r3, #29]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d108      	bne.n	80032f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f042 0204 	orr.w	r2, r2, #4
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	e007      	b.n	8003300 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0204 	bic.w	r2, r2, #4
 80032fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	431a      	orrs	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	ea42 0103 	orr.w	r1, r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	1e5a      	subs	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3020 	ldrb.w	r3, [r3, #32]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b01      	cmp	r3, #1
 8003350:	d12e      	bne.n	80033b0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2202      	movs	r2, #2
 8003356:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0201 	bic.w	r2, r2, #1
 8003368:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800336a:	f7ff faad 	bl	80028c8 <HAL_GetTick>
 800336e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003370:	e012      	b.n	8003398 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003372:	f7ff faa9 	bl	80028c8 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b0a      	cmp	r3, #10
 800337e:	d90b      	bls.n	8003398 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2205      	movs	r2, #5
 8003390:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e012      	b.n	80033be <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1e5      	bne.n	8003372 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80033ac:	2300      	movs	r3, #0
 80033ae:	e006      	b.n	80033be <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
  }
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b089      	sub	sp, #36	; 0x24
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033da:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80033e4:	7ffb      	ldrb	r3, [r7, #31]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d003      	beq.n	80033f2 <HAL_CAN_AddTxMessage+0x2c>
 80033ea:	7ffb      	ldrb	r3, [r7, #31]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	f040 80b8 	bne.w	8003562 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10a      	bne.n	8003412 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003402:	2b00      	cmp	r3, #0
 8003404:	d105      	bne.n	8003412 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 80a0 	beq.w	8003552 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	0e1b      	lsrs	r3, r3, #24
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d907      	bls.n	8003432 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e09e      	b.n	8003570 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003432:	2201      	movs	r2, #1
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	409a      	lsls	r2, r3
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10d      	bne.n	8003460 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800344e:	68f9      	ldr	r1, [r7, #12]
 8003450:	6809      	ldr	r1, [r1, #0]
 8003452:	431a      	orrs	r2, r3
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	3318      	adds	r3, #24
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	440b      	add	r3, r1
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	e00f      	b.n	8003480 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800346a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003470:	68f9      	ldr	r1, [r7, #12]
 8003472:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003474:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	3318      	adds	r3, #24
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	440b      	add	r3, r1
 800347e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6819      	ldr	r1, [r3, #0]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	3318      	adds	r3, #24
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	440b      	add	r3, r1
 8003490:	3304      	adds	r3, #4
 8003492:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	7d1b      	ldrb	r3, [r3, #20]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d111      	bne.n	80034c0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	3318      	adds	r3, #24
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	4413      	add	r3, r2
 80034a8:	3304      	adds	r3, #4
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	6811      	ldr	r1, [r2, #0]
 80034b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	3318      	adds	r3, #24
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	440b      	add	r3, r1
 80034bc:	3304      	adds	r3, #4
 80034be:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3307      	adds	r3, #7
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	061a      	lsls	r2, r3, #24
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3306      	adds	r3, #6
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	041b      	lsls	r3, r3, #16
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3305      	adds	r3, #5
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	021b      	lsls	r3, r3, #8
 80034da:	4313      	orrs	r3, r2
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	3204      	adds	r2, #4
 80034e0:	7812      	ldrb	r2, [r2, #0]
 80034e2:	4610      	mov	r0, r2
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	6811      	ldr	r1, [r2, #0]
 80034e8:	ea43 0200 	orr.w	r2, r3, r0
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	440b      	add	r3, r1
 80034f2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80034f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3303      	adds	r3, #3
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	061a      	lsls	r2, r3, #24
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3302      	adds	r3, #2
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	041b      	lsls	r3, r3, #16
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3301      	adds	r3, #1
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	021b      	lsls	r3, r3, #8
 8003512:	4313      	orrs	r3, r2
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	7812      	ldrb	r2, [r2, #0]
 8003518:	4610      	mov	r0, r2
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	6811      	ldr	r1, [r2, #0]
 800351e:	ea43 0200 	orr.w	r2, r3, r0
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	440b      	add	r3, r1
 8003528:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800352c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	3318      	adds	r3, #24
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	4413      	add	r3, r2
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	6811      	ldr	r1, [r2, #0]
 8003540:	f043 0201 	orr.w	r2, r3, #1
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	3318      	adds	r3, #24
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	440b      	add	r3, r1
 800354c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	e00e      	b.n	8003570 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e006      	b.n	8003570 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
  }
}
 8003570:	4618      	mov	r0, r3
 8003572:	3724      	adds	r7, #36	; 0x24
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003590:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003592:	7dfb      	ldrb	r3, [r7, #23]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d003      	beq.n	80035a0 <HAL_CAN_GetRxMessage+0x24>
 8003598:	7dfb      	ldrb	r3, [r7, #23]
 800359a:	2b02      	cmp	r3, #2
 800359c:	f040 80f3 	bne.w	8003786 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10e      	bne.n	80035c4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f003 0303 	and.w	r3, r3, #3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d116      	bne.n	80035e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0e7      	b.n	8003794 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d107      	bne.n	80035e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e0d8      	b.n	8003794 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	331b      	adds	r3, #27
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	4413      	add	r3, r2
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0204 	and.w	r2, r3, #4
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10c      	bne.n	800361a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	331b      	adds	r3, #27
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	4413      	add	r3, r2
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	0d5b      	lsrs	r3, r3, #21
 8003610:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	e00b      	b.n	8003632 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	331b      	adds	r3, #27
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	4413      	add	r3, r2
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	08db      	lsrs	r3, r3, #3
 800362a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	331b      	adds	r3, #27
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	4413      	add	r3, r2
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0202 	and.w	r2, r3, #2
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	331b      	adds	r3, #27
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	4413      	add	r3, r2
 8003654:	3304      	adds	r3, #4
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 020f 	and.w	r2, r3, #15
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	331b      	adds	r3, #27
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	4413      	add	r3, r2
 800366c:	3304      	adds	r3, #4
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	0a1b      	lsrs	r3, r3, #8
 8003672:	b2da      	uxtb	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	331b      	adds	r3, #27
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	4413      	add	r3, r2
 8003684:	3304      	adds	r3, #4
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	0c1b      	lsrs	r3, r3, #16
 800368a:	b29a      	uxth	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	4413      	add	r3, r2
 800369a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	0a1a      	lsrs	r2, r3, #8
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	3301      	adds	r3, #1
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	0c1a      	lsrs	r2, r3, #16
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	3302      	adds	r3, #2
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	0e1a      	lsrs	r2, r3, #24
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	3303      	adds	r3, #3
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	3304      	adds	r3, #4
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	4413      	add	r3, r2
 8003716:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	0a1a      	lsrs	r2, r3, #8
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	3305      	adds	r3, #5
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	4413      	add	r3, r2
 8003730:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	0c1a      	lsrs	r2, r3, #16
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	3306      	adds	r3, #6
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	4413      	add	r3, r2
 800374a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	0e1a      	lsrs	r2, r3, #24
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	3307      	adds	r3, #7
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d108      	bne.n	8003772 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0220 	orr.w	r2, r2, #32
 800376e:	60da      	str	r2, [r3, #12]
 8003770:	e007      	b.n	8003782 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0220 	orr.w	r2, r2, #32
 8003780:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	e006      	b.n	8003794 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
  }
}
 8003794:	4618      	mov	r0, r3
 8003796:	371c      	adds	r7, #28
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037b0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d002      	beq.n	80037be <HAL_CAN_ActivateNotification+0x1e>
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d109      	bne.n	80037d2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6959      	ldr	r1, [r3, #20]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	e006      	b.n	80037e0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
  }
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08a      	sub	sp, #40	; 0x28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d07c      	beq.n	800392c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d023      	beq.n	8003884 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2201      	movs	r2, #1
 8003842:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f983 	bl	8003b5a <HAL_CAN_TxMailbox0CompleteCallback>
 8003854:	e016      	b.n	8003884 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	d004      	beq.n	800386a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
 8003868:	e00c      	b.n	8003884 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d004      	beq.n	800387e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
 800387c:	e002      	b.n	8003884 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f989 	bl	8003b96 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388a:	2b00      	cmp	r3, #0
 800388c:	d024      	beq.n	80038d8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003896:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f963 	bl	8003b6e <HAL_CAN_TxMailbox1CompleteCallback>
 80038a8:	e016      	b.n	80038d8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d004      	beq.n	80038be <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24
 80038bc:	e00c      	b.n	80038d8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d004      	beq.n	80038d2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
 80038d0:	e002      	b.n	80038d8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f969 	bl	8003baa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d024      	beq.n	800392c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80038ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f943 	bl	8003b82 <HAL_CAN_TxMailbox2CompleteCallback>
 80038fc:	e016      	b.n	800392c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d004      	beq.n	8003912 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800390e:	627b      	str	r3, [r7, #36]	; 0x24
 8003910:	e00c      	b.n	800392c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d004      	beq.n	8003926 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
 8003924:	e002      	b.n	800392c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f949 	bl	8003bbe <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00c      	beq.n	8003950 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b00      	cmp	r3, #0
 800393e:	d007      	beq.n	8003950 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003946:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2210      	movs	r2, #16
 800394e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00b      	beq.n	8003972 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b00      	cmp	r3, #0
 8003962:	d006      	beq.n	8003972 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2208      	movs	r2, #8
 800396a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f93a 	bl	8003be6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d009      	beq.n	8003990 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f921 	bl	8003bd2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00c      	beq.n	80039b4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d007      	beq.n	80039b4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2210      	movs	r2, #16
 80039b2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00b      	beq.n	80039d6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d006      	beq.n	80039d6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2208      	movs	r2, #8
 80039ce:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f91c 	bl	8003c0e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d009      	beq.n	80039f4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f903 	bl	8003bfa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00b      	beq.n	8003a16 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	f003 0310 	and.w	r3, r3, #16
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d006      	beq.n	8003a16 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2210      	movs	r2, #16
 8003a0e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f906 	bl	8003c22 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00b      	beq.n	8003a38 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d006      	beq.n	8003a38 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2208      	movs	r2, #8
 8003a30:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f8ff 	bl	8003c36 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d07b      	beq.n	8003b3a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d072      	beq.n	8003b32 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d008      	beq.n	8003a68 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d008      	beq.n	8003a84 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	f043 0302 	orr.w	r3, r3, #2
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d008      	beq.n	8003aa0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	f043 0304 	orr.w	r3, r3, #4
 8003a9e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d043      	beq.n	8003b32 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d03e      	beq.n	8003b32 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003aba:	2b60      	cmp	r3, #96	; 0x60
 8003abc:	d02b      	beq.n	8003b16 <HAL_CAN_IRQHandler+0x32a>
 8003abe:	2b60      	cmp	r3, #96	; 0x60
 8003ac0:	d82e      	bhi.n	8003b20 <HAL_CAN_IRQHandler+0x334>
 8003ac2:	2b50      	cmp	r3, #80	; 0x50
 8003ac4:	d022      	beq.n	8003b0c <HAL_CAN_IRQHandler+0x320>
 8003ac6:	2b50      	cmp	r3, #80	; 0x50
 8003ac8:	d82a      	bhi.n	8003b20 <HAL_CAN_IRQHandler+0x334>
 8003aca:	2b40      	cmp	r3, #64	; 0x40
 8003acc:	d019      	beq.n	8003b02 <HAL_CAN_IRQHandler+0x316>
 8003ace:	2b40      	cmp	r3, #64	; 0x40
 8003ad0:	d826      	bhi.n	8003b20 <HAL_CAN_IRQHandler+0x334>
 8003ad2:	2b30      	cmp	r3, #48	; 0x30
 8003ad4:	d010      	beq.n	8003af8 <HAL_CAN_IRQHandler+0x30c>
 8003ad6:	2b30      	cmp	r3, #48	; 0x30
 8003ad8:	d822      	bhi.n	8003b20 <HAL_CAN_IRQHandler+0x334>
 8003ada:	2b10      	cmp	r3, #16
 8003adc:	d002      	beq.n	8003ae4 <HAL_CAN_IRQHandler+0x2f8>
 8003ade:	2b20      	cmp	r3, #32
 8003ae0:	d005      	beq.n	8003aee <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003ae2:	e01d      	b.n	8003b20 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	f043 0308 	orr.w	r3, r3, #8
 8003aea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003aec:	e019      	b.n	8003b22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	f043 0310 	orr.w	r3, r3, #16
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003af6:	e014      	b.n	8003b22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	f043 0320 	orr.w	r3, r3, #32
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b00:	e00f      	b.n	8003b22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b0a:	e00a      	b.n	8003b22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b14:	e005      	b.n	8003b22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b1e:	e000      	b.n	8003b22 <HAL_CAN_IRQHandler+0x336>
            break;
 8003b20:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699a      	ldr	r2, [r3, #24]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b30:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2204      	movs	r2, #4
 8003b38:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f87c 	bl	8003c4a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003b52:	bf00      	nop
 8003b54:	3728      	adds	r7, #40	; 0x28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
	...

08003c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c70:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c92:	4a04      	ldr	r2, [pc, #16]	; (8003ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	60d3      	str	r3, [r2, #12]
}
 8003c98:	bf00      	nop
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	e000ed00 	.word	0xe000ed00

08003ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cac:	4b04      	ldr	r3, [pc, #16]	; (8003cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	0a1b      	lsrs	r3, r3, #8
 8003cb2:	f003 0307 	and.w	r3, r3, #7
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	e000ed00 	.word	0xe000ed00

08003cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	db0b      	blt.n	8003cee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	f003 021f 	and.w	r2, r3, #31
 8003cdc:	4907      	ldr	r1, [pc, #28]	; (8003cfc <__NVIC_EnableIRQ+0x38>)
 8003cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8003cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	e000e100 	.word	0xe000e100

08003d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	4603      	mov	r3, r0
 8003d08:	6039      	str	r1, [r7, #0]
 8003d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	db0a      	blt.n	8003d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	490c      	ldr	r1, [pc, #48]	; (8003d4c <__NVIC_SetPriority+0x4c>)
 8003d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1e:	0112      	lsls	r2, r2, #4
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	440b      	add	r3, r1
 8003d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d28:	e00a      	b.n	8003d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	4908      	ldr	r1, [pc, #32]	; (8003d50 <__NVIC_SetPriority+0x50>)
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	3b04      	subs	r3, #4
 8003d38:	0112      	lsls	r2, r2, #4
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	761a      	strb	r2, [r3, #24]
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	e000e100 	.word	0xe000e100
 8003d50:	e000ed00 	.word	0xe000ed00

08003d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b089      	sub	sp, #36	; 0x24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	f1c3 0307 	rsb	r3, r3, #7
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	bf28      	it	cs
 8003d72:	2304      	movcs	r3, #4
 8003d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	2b06      	cmp	r3, #6
 8003d7c:	d902      	bls.n	8003d84 <NVIC_EncodePriority+0x30>
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	3b03      	subs	r3, #3
 8003d82:	e000      	b.n	8003d86 <NVIC_EncodePriority+0x32>
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d88:	f04f 32ff 	mov.w	r2, #4294967295
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43da      	mvns	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	401a      	ands	r2, r3
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	fa01 f303 	lsl.w	r3, r1, r3
 8003da6:	43d9      	mvns	r1, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dac:	4313      	orrs	r3, r2
         );
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3724      	adds	r7, #36	; 0x24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
	...

08003dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dcc:	d301      	bcc.n	8003dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e00f      	b.n	8003df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dd2:	4a0a      	ldr	r2, [pc, #40]	; (8003dfc <SysTick_Config+0x40>)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dda:	210f      	movs	r1, #15
 8003ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8003de0:	f7ff ff8e 	bl	8003d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <SysTick_Config+0x40>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dea:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <SysTick_Config+0x40>)
 8003dec:	2207      	movs	r2, #7
 8003dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	e000e010 	.word	0xe000e010

08003e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7ff ff29 	bl	8003c60 <__NVIC_SetPriorityGrouping>
}
 8003e0e:	bf00      	nop
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b086      	sub	sp, #24
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	607a      	str	r2, [r7, #4]
 8003e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e28:	f7ff ff3e 	bl	8003ca8 <__NVIC_GetPriorityGrouping>
 8003e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	6978      	ldr	r0, [r7, #20]
 8003e34:	f7ff ff8e 	bl	8003d54 <NVIC_EncodePriority>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e3e:	4611      	mov	r1, r2
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff ff5d 	bl	8003d00 <__NVIC_SetPriority>
}
 8003e46:	bf00      	nop
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	4603      	mov	r3, r0
 8003e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff ff31 	bl	8003cc4 <__NVIC_EnableIRQ>
}
 8003e62:	bf00      	nop
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b082      	sub	sp, #8
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff ffa2 	bl	8003dbc <SysTick_Config>
 8003e78:	4603      	mov	r3, r0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e00e      	b.n	8003eb2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	795b      	ldrb	r3, [r3, #5]
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d105      	bne.n	8003eaa <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7fd fbcf 	bl	8001648 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b089      	sub	sp, #36	; 0x24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61fb      	str	r3, [r7, #28]
 8003ed6:	e165      	b.n	80041a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ed8:	2201      	movs	r2, #1
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	f040 8154 	bne.w	800419e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d005      	beq.n	8003f0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d130      	bne.n	8003f70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	2203      	movs	r2, #3
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	4013      	ands	r3, r2
 8003f24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f44:	2201      	movs	r2, #1
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4013      	ands	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	091b      	lsrs	r3, r3, #4
 8003f5a:	f003 0201 	and.w	r2, r3, #1
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	d017      	beq.n	8003fac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	2203      	movs	r2, #3
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f003 0303 	and.w	r3, r3, #3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d123      	bne.n	8004000 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	08da      	lsrs	r2, r3, #3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3208      	adds	r2, #8
 8003fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	220f      	movs	r2, #15
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	08da      	lsrs	r2, r3, #3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3208      	adds	r2, #8
 8003ffa:	69b9      	ldr	r1, [r7, #24]
 8003ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	2203      	movs	r2, #3
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	43db      	mvns	r3, r3
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	4013      	ands	r3, r2
 8004016:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f003 0203 	and.w	r2, r3, #3
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	4313      	orrs	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80ae 	beq.w	800419e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	4b5d      	ldr	r3, [pc, #372]	; (80041bc <HAL_GPIO_Init+0x300>)
 8004048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404a:	4a5c      	ldr	r2, [pc, #368]	; (80041bc <HAL_GPIO_Init+0x300>)
 800404c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004050:	6453      	str	r3, [r2, #68]	; 0x44
 8004052:	4b5a      	ldr	r3, [pc, #360]	; (80041bc <HAL_GPIO_Init+0x300>)
 8004054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800405e:	4a58      	ldr	r2, [pc, #352]	; (80041c0 <HAL_GPIO_Init+0x304>)
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	089b      	lsrs	r3, r3, #2
 8004064:	3302      	adds	r3, #2
 8004066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800406a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	220f      	movs	r2, #15
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	43db      	mvns	r3, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4013      	ands	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a4f      	ldr	r2, [pc, #316]	; (80041c4 <HAL_GPIO_Init+0x308>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d025      	beq.n	80040d6 <HAL_GPIO_Init+0x21a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a4e      	ldr	r2, [pc, #312]	; (80041c8 <HAL_GPIO_Init+0x30c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d01f      	beq.n	80040d2 <HAL_GPIO_Init+0x216>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a4d      	ldr	r2, [pc, #308]	; (80041cc <HAL_GPIO_Init+0x310>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d019      	beq.n	80040ce <HAL_GPIO_Init+0x212>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a4c      	ldr	r2, [pc, #304]	; (80041d0 <HAL_GPIO_Init+0x314>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d013      	beq.n	80040ca <HAL_GPIO_Init+0x20e>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a4b      	ldr	r2, [pc, #300]	; (80041d4 <HAL_GPIO_Init+0x318>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00d      	beq.n	80040c6 <HAL_GPIO_Init+0x20a>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a4a      	ldr	r2, [pc, #296]	; (80041d8 <HAL_GPIO_Init+0x31c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d007      	beq.n	80040c2 <HAL_GPIO_Init+0x206>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a49      	ldr	r2, [pc, #292]	; (80041dc <HAL_GPIO_Init+0x320>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d101      	bne.n	80040be <HAL_GPIO_Init+0x202>
 80040ba:	2306      	movs	r3, #6
 80040bc:	e00c      	b.n	80040d8 <HAL_GPIO_Init+0x21c>
 80040be:	2307      	movs	r3, #7
 80040c0:	e00a      	b.n	80040d8 <HAL_GPIO_Init+0x21c>
 80040c2:	2305      	movs	r3, #5
 80040c4:	e008      	b.n	80040d8 <HAL_GPIO_Init+0x21c>
 80040c6:	2304      	movs	r3, #4
 80040c8:	e006      	b.n	80040d8 <HAL_GPIO_Init+0x21c>
 80040ca:	2303      	movs	r3, #3
 80040cc:	e004      	b.n	80040d8 <HAL_GPIO_Init+0x21c>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e002      	b.n	80040d8 <HAL_GPIO_Init+0x21c>
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <HAL_GPIO_Init+0x21c>
 80040d6:	2300      	movs	r3, #0
 80040d8:	69fa      	ldr	r2, [r7, #28]
 80040da:	f002 0203 	and.w	r2, r2, #3
 80040de:	0092      	lsls	r2, r2, #2
 80040e0:	4093      	lsls	r3, r2
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040e8:	4935      	ldr	r1, [pc, #212]	; (80041c0 <HAL_GPIO_Init+0x304>)
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	089b      	lsrs	r3, r3, #2
 80040ee:	3302      	adds	r3, #2
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040f6:	4b3a      	ldr	r3, [pc, #232]	; (80041e0 <HAL_GPIO_Init+0x324>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	43db      	mvns	r3, r3
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	4013      	ands	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	4313      	orrs	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800411a:	4a31      	ldr	r2, [pc, #196]	; (80041e0 <HAL_GPIO_Init+0x324>)
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004120:	4b2f      	ldr	r3, [pc, #188]	; (80041e0 <HAL_GPIO_Init+0x324>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	43db      	mvns	r3, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4013      	ands	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004144:	4a26      	ldr	r2, [pc, #152]	; (80041e0 <HAL_GPIO_Init+0x324>)
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800414a:	4b25      	ldr	r3, [pc, #148]	; (80041e0 <HAL_GPIO_Init+0x324>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	43db      	mvns	r3, r3
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	4013      	ands	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	4313      	orrs	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800416e:	4a1c      	ldr	r2, [pc, #112]	; (80041e0 <HAL_GPIO_Init+0x324>)
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004174:	4b1a      	ldr	r3, [pc, #104]	; (80041e0 <HAL_GPIO_Init+0x324>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	43db      	mvns	r3, r3
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	4013      	ands	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004198:	4a11      	ldr	r2, [pc, #68]	; (80041e0 <HAL_GPIO_Init+0x324>)
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	3301      	adds	r3, #1
 80041a2:	61fb      	str	r3, [r7, #28]
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	2b0f      	cmp	r3, #15
 80041a8:	f67f ae96 	bls.w	8003ed8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041ac:	bf00      	nop
 80041ae:	bf00      	nop
 80041b0:	3724      	adds	r7, #36	; 0x24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40023800 	.word	0x40023800
 80041c0:	40013800 	.word	0x40013800
 80041c4:	40020000 	.word	0x40020000
 80041c8:	40020400 	.word	0x40020400
 80041cc:	40020800 	.word	0x40020800
 80041d0:	40020c00 	.word	0x40020c00
 80041d4:	40021000 	.word	0x40021000
 80041d8:	40021400 	.word	0x40021400
 80041dc:	40021800 	.word	0x40021800
 80041e0:	40013c00 	.word	0x40013c00

080041e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	807b      	strh	r3, [r7, #2]
 80041f0:	4613      	mov	r3, r2
 80041f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041f4:	787b      	ldrb	r3, [r7, #1]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041fa:	887a      	ldrh	r2, [r7, #2]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004200:	e003      	b.n	800420a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004202:	887b      	ldrh	r3, [r7, #2]
 8004204:	041a      	lsls	r2, r3, #16
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	619a      	str	r2, [r3, #24]
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
	...

08004218 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	4603      	mov	r3, r0
 8004220:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004222:	4b08      	ldr	r3, [pc, #32]	; (8004244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004224:	695a      	ldr	r2, [r3, #20]
 8004226:	88fb      	ldrh	r3, [r7, #6]
 8004228:	4013      	ands	r3, r2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d006      	beq.n	800423c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800422e:	4a05      	ldr	r2, [pc, #20]	; (8004244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004230:	88fb      	ldrh	r3, [r7, #6]
 8004232:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004234:	88fb      	ldrh	r3, [r7, #6]
 8004236:	4618      	mov	r0, r3
 8004238:	f000 f806 	bl	8004248 <HAL_GPIO_EXTI_Callback>
  }
}
 800423c:	bf00      	nop
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40013c00 	.word	0x40013c00

08004248 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	4603      	mov	r3, r0
 8004250:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e12b      	b.n	80044ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d106      	bne.n	800428c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7fd fa00 	bl	800168c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2224      	movs	r2, #36	; 0x24
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0201 	bic.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042c4:	f000 fa02 	bl	80046cc <HAL_RCC_GetPCLK1Freq>
 80042c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	4a81      	ldr	r2, [pc, #516]	; (80044d4 <HAL_I2C_Init+0x274>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d807      	bhi.n	80042e4 <HAL_I2C_Init+0x84>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4a80      	ldr	r2, [pc, #512]	; (80044d8 <HAL_I2C_Init+0x278>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	bf94      	ite	ls
 80042dc:	2301      	movls	r3, #1
 80042de:	2300      	movhi	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	e006      	b.n	80042f2 <HAL_I2C_Init+0x92>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4a7d      	ldr	r2, [pc, #500]	; (80044dc <HAL_I2C_Init+0x27c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	bf94      	ite	ls
 80042ec:	2301      	movls	r3, #1
 80042ee:	2300      	movhi	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e0e7      	b.n	80044ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4a78      	ldr	r2, [pc, #480]	; (80044e0 <HAL_I2C_Init+0x280>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	0c9b      	lsrs	r3, r3, #18
 8004304:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	4a6a      	ldr	r2, [pc, #424]	; (80044d4 <HAL_I2C_Init+0x274>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d802      	bhi.n	8004334 <HAL_I2C_Init+0xd4>
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	3301      	adds	r3, #1
 8004332:	e009      	b.n	8004348 <HAL_I2C_Init+0xe8>
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800433a:	fb02 f303 	mul.w	r3, r2, r3
 800433e:	4a69      	ldr	r2, [pc, #420]	; (80044e4 <HAL_I2C_Init+0x284>)
 8004340:	fba2 2303 	umull	r2, r3, r2, r3
 8004344:	099b      	lsrs	r3, r3, #6
 8004346:	3301      	adds	r3, #1
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	430b      	orrs	r3, r1
 800434e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800435a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	495c      	ldr	r1, [pc, #368]	; (80044d4 <HAL_I2C_Init+0x274>)
 8004364:	428b      	cmp	r3, r1
 8004366:	d819      	bhi.n	800439c <HAL_I2C_Init+0x13c>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	1e59      	subs	r1, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	fbb1 f3f3 	udiv	r3, r1, r3
 8004376:	1c59      	adds	r1, r3, #1
 8004378:	f640 73fc 	movw	r3, #4092	; 0xffc
 800437c:	400b      	ands	r3, r1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_I2C_Init+0x138>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1e59      	subs	r1, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004390:	3301      	adds	r3, #1
 8004392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004396:	e051      	b.n	800443c <HAL_I2C_Init+0x1dc>
 8004398:	2304      	movs	r3, #4
 800439a:	e04f      	b.n	800443c <HAL_I2C_Init+0x1dc>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d111      	bne.n	80043c8 <HAL_I2C_Init+0x168>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	1e58      	subs	r0, r3, #1
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6859      	ldr	r1, [r3, #4]
 80043ac:	460b      	mov	r3, r1
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	440b      	add	r3, r1
 80043b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043b6:	3301      	adds	r3, #1
 80043b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043bc:	2b00      	cmp	r3, #0
 80043be:	bf0c      	ite	eq
 80043c0:	2301      	moveq	r3, #1
 80043c2:	2300      	movne	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	e012      	b.n	80043ee <HAL_I2C_Init+0x18e>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	1e58      	subs	r0, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6859      	ldr	r1, [r3, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	0099      	lsls	r1, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	fbb0 f3f3 	udiv	r3, r0, r3
 80043de:	3301      	adds	r3, #1
 80043e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	bf0c      	ite	eq
 80043e8:	2301      	moveq	r3, #1
 80043ea:	2300      	movne	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <HAL_I2C_Init+0x196>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e022      	b.n	800443c <HAL_I2C_Init+0x1dc>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10e      	bne.n	800441c <HAL_I2C_Init+0x1bc>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	1e58      	subs	r0, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6859      	ldr	r1, [r3, #4]
 8004406:	460b      	mov	r3, r1
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	440b      	add	r3, r1
 800440c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004410:	3301      	adds	r3, #1
 8004412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800441a:	e00f      	b.n	800443c <HAL_I2C_Init+0x1dc>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	1e58      	subs	r0, r3, #1
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6859      	ldr	r1, [r3, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	0099      	lsls	r1, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004432:	3301      	adds	r3, #1
 8004434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004438:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	6809      	ldr	r1, [r1, #0]
 8004440:	4313      	orrs	r3, r2
 8004442:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69da      	ldr	r2, [r3, #28]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800446a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6911      	ldr	r1, [r2, #16]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	68d2      	ldr	r2, [r2, #12]
 8004476:	4311      	orrs	r1, r2
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6812      	ldr	r2, [r2, #0]
 800447c:	430b      	orrs	r3, r1
 800447e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695a      	ldr	r2, [r3, #20]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	000186a0 	.word	0x000186a0
 80044d8:	001e847f 	.word	0x001e847f
 80044dc:	003d08ff 	.word	0x003d08ff
 80044e0:	431bde83 	.word	0x431bde83
 80044e4:	10624dd3 	.word	0x10624dd3

080044e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0cc      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044fc:	4b68      	ldr	r3, [pc, #416]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 030f 	and.w	r3, r3, #15
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d90c      	bls.n	8004524 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450a:	4b65      	ldr	r3, [pc, #404]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004512:	4b63      	ldr	r3, [pc, #396]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	429a      	cmp	r2, r3
 800451e:	d001      	beq.n	8004524 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e0b8      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d020      	beq.n	8004572 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800453c:	4b59      	ldr	r3, [pc, #356]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	4a58      	ldr	r2, [pc, #352]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004546:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004554:	4b53      	ldr	r3, [pc, #332]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	4a52      	ldr	r2, [pc, #328]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800455e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004560:	4b50      	ldr	r3, [pc, #320]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	494d      	ldr	r1, [pc, #308]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	4313      	orrs	r3, r2
 8004570:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d044      	beq.n	8004608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d107      	bne.n	8004596 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004586:	4b47      	ldr	r3, [pc, #284]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d119      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e07f      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d003      	beq.n	80045a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d107      	bne.n	80045b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a6:	4b3f      	ldr	r3, [pc, #252]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e06f      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b6:	4b3b      	ldr	r3, [pc, #236]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e067      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045c6:	4b37      	ldr	r3, [pc, #220]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f023 0203 	bic.w	r2, r3, #3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	4934      	ldr	r1, [pc, #208]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045d8:	f7fe f976 	bl	80028c8 <HAL_GetTick>
 80045dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045de:	e00a      	b.n	80045f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e0:	f7fe f972 	bl	80028c8 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e04f      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f6:	4b2b      	ldr	r3, [pc, #172]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 020c 	and.w	r2, r3, #12
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	429a      	cmp	r2, r3
 8004606:	d1eb      	bne.n	80045e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004608:	4b25      	ldr	r3, [pc, #148]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d20c      	bcs.n	8004630 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004616:	4b22      	ldr	r3, [pc, #136]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800461e:	4b20      	ldr	r3, [pc, #128]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d001      	beq.n	8004630 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e032      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b00      	cmp	r3, #0
 800463a:	d008      	beq.n	800464e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800463c:	4b19      	ldr	r3, [pc, #100]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	4916      	ldr	r1, [pc, #88]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	4313      	orrs	r3, r2
 800464c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d009      	beq.n	800466e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800465a:	4b12      	ldr	r3, [pc, #72]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	490e      	ldr	r1, [pc, #56]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	4313      	orrs	r3, r2
 800466c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800466e:	f000 fb7f 	bl	8004d70 <HAL_RCC_GetSysClockFreq>
 8004672:	4602      	mov	r2, r0
 8004674:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	490a      	ldr	r1, [pc, #40]	; (80046a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004680:	5ccb      	ldrb	r3, [r1, r3]
 8004682:	fa22 f303 	lsr.w	r3, r2, r3
 8004686:	4a09      	ldr	r2, [pc, #36]	; (80046ac <HAL_RCC_ClockConfig+0x1c4>)
 8004688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800468a:	4b09      	ldr	r3, [pc, #36]	; (80046b0 <HAL_RCC_ClockConfig+0x1c8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7fe f8d6 	bl	8002840 <HAL_InitTick>

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40023c00 	.word	0x40023c00
 80046a4:	40023800 	.word	0x40023800
 80046a8:	0800c95c 	.word	0x0800c95c
 80046ac:	20000000 	.word	0x20000000
 80046b0:	20000004 	.word	0x20000004

080046b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046b8:	4b03      	ldr	r3, [pc, #12]	; (80046c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80046ba:	681b      	ldr	r3, [r3, #0]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	20000000 	.word	0x20000000

080046cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046d0:	f7ff fff0 	bl	80046b4 <HAL_RCC_GetHCLKFreq>
 80046d4:	4602      	mov	r2, r0
 80046d6:	4b05      	ldr	r3, [pc, #20]	; (80046ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	0a9b      	lsrs	r3, r3, #10
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	4903      	ldr	r1, [pc, #12]	; (80046f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046e2:	5ccb      	ldrb	r3, [r1, r3]
 80046e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40023800 	.word	0x40023800
 80046f0:	0800c96c 	.word	0x0800c96c

080046f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046f8:	f7ff ffdc 	bl	80046b4 <HAL_RCC_GetHCLKFreq>
 80046fc:	4602      	mov	r2, r0
 80046fe:	4b05      	ldr	r3, [pc, #20]	; (8004714 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	0b5b      	lsrs	r3, r3, #13
 8004704:	f003 0307 	and.w	r3, r3, #7
 8004708:	4903      	ldr	r1, [pc, #12]	; (8004718 <HAL_RCC_GetPCLK2Freq+0x24>)
 800470a:	5ccb      	ldrb	r3, [r1, r3]
 800470c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004710:	4618      	mov	r0, r3
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40023800 	.word	0x40023800
 8004718:	0800c96c 	.word	0x0800c96c

0800471c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b08c      	sub	sp, #48	; 0x30
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d010      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004754:	4b6f      	ldr	r3, [pc, #444]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800475a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004762:	496c      	ldr	r1, [pc, #432]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004772:	2301      	movs	r3, #1
 8004774:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d010      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004782:	4b64      	ldr	r3, [pc, #400]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004788:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004790:	4960      	ldr	r1, [pc, #384]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80047a0:	2301      	movs	r3, #1
 80047a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d017      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047b0:	4b58      	ldr	r3, [pc, #352]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80047b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	4955      	ldr	r1, [pc, #340]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ce:	d101      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80047d0:	2301      	movs	r3, #1
 80047d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80047dc:	2301      	movs	r3, #1
 80047de:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0308 	and.w	r3, r3, #8
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d017      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047ec:	4b49      	ldr	r3, [pc, #292]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80047ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fa:	4946      	ldr	r1, [pc, #280]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004806:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800480a:	d101      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800480c:	2301      	movs	r3, #1
 800480e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004818:	2301      	movs	r3, #1
 800481a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 808a 	beq.w	800493e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800482a:	2300      	movs	r3, #0
 800482c:	60bb      	str	r3, [r7, #8]
 800482e:	4b39      	ldr	r3, [pc, #228]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	4a38      	ldr	r2, [pc, #224]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004838:	6413      	str	r3, [r2, #64]	; 0x40
 800483a:	4b36      	ldr	r3, [pc, #216]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004842:	60bb      	str	r3, [r7, #8]
 8004844:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004846:	4b34      	ldr	r3, [pc, #208]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a33      	ldr	r2, [pc, #204]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800484c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004850:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004852:	f7fe f839 	bl	80028c8 <HAL_GetTick>
 8004856:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004858:	e008      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800485a:	f7fe f835 	bl	80028c8 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e278      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800486c:	4b2a      	ldr	r3, [pc, #168]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0f0      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004878:	4b26      	ldr	r3, [pc, #152]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800487a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004880:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d02f      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004890:	6a3a      	ldr	r2, [r7, #32]
 8004892:	429a      	cmp	r2, r3
 8004894:	d028      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004896:	4b1f      	ldr	r3, [pc, #124]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800489e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048a0:	4b1e      	ldr	r3, [pc, #120]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048a6:	4b1d      	ldr	r3, [pc, #116]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80048ac:	4a19      	ldr	r2, [pc, #100]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80048b2:	4b18      	ldr	r3, [pc, #96]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80048b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d114      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80048be:	f7fe f803 	bl	80028c8 <HAL_GetTick>
 80048c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048c4:	e00a      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048c6:	f7fd ffff 	bl	80028c8 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d901      	bls.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e240      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048dc:	4b0d      	ldr	r3, [pc, #52]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80048de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0ee      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048f4:	d114      	bne.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80048f6:	4b07      	ldr	r3, [pc, #28]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800490a:	4902      	ldr	r1, [pc, #8]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800490c:	4313      	orrs	r3, r2
 800490e:	608b      	str	r3, [r1, #8]
 8004910:	e00c      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004912:	bf00      	nop
 8004914:	40023800 	.word	0x40023800
 8004918:	40007000 	.word	0x40007000
 800491c:	42470e40 	.word	0x42470e40
 8004920:	4b4a      	ldr	r3, [pc, #296]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	4a49      	ldr	r2, [pc, #292]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004926:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800492a:	6093      	str	r3, [r2, #8]
 800492c:	4b47      	ldr	r3, [pc, #284]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800492e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004938:	4944      	ldr	r1, [pc, #272]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800493a:	4313      	orrs	r3, r2
 800493c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0310 	and.w	r3, r3, #16
 8004946:	2b00      	cmp	r3, #0
 8004948:	d004      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004950:	4b3f      	ldr	r3, [pc, #252]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004952:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004960:	4b3a      	ldr	r3, [pc, #232]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004966:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800496e:	4937      	ldr	r1, [pc, #220]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004970:	4313      	orrs	r3, r2
 8004972:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004982:	4b32      	ldr	r3, [pc, #200]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004984:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004988:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004990:	492e      	ldr	r1, [pc, #184]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d011      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80049a4:	4b29      	ldr	r3, [pc, #164]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80049a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049aa:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b2:	4926      	ldr	r1, [pc, #152]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049c2:	d101      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80049c4:	2301      	movs	r3, #1
 80049c6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00a      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80049d4:	4b1d      	ldr	r3, [pc, #116]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80049d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e2:	491a      	ldr	r1, [pc, #104]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d011      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80049f6:	4b15      	ldr	r3, [pc, #84]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80049f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049fc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a04:	4911      	ldr	r1, [pc, #68]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a14:	d101      	bne.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004a16:	2301      	movs	r3, #1
 8004a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d005      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a28:	f040 80ff 	bne.w	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a2c:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a32:	f7fd ff49 	bl	80028c8 <HAL_GetTick>
 8004a36:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a38:	e00e      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a3a:	f7fd ff45 	bl	80028c8 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d907      	bls.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e188      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004a4c:	40023800 	.word	0x40023800
 8004a50:	424711e0 	.word	0x424711e0
 8004a54:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a58:	4b7e      	ldr	r3, [pc, #504]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1ea      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d009      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d028      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d124      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004a8c:	4b71      	ldr	r3, [pc, #452]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a92:	0c1b      	lsrs	r3, r3, #16
 8004a94:	f003 0303 	and.w	r3, r3, #3
 8004a98:	3301      	adds	r3, #1
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a9e:	4b6d      	ldr	r3, [pc, #436]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aa4:	0e1b      	lsrs	r3, r3, #24
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	019b      	lsls	r3, r3, #6
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	085b      	lsrs	r3, r3, #1
 8004abc:	3b01      	subs	r3, #1
 8004abe:	041b      	lsls	r3, r3, #16
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	061b      	lsls	r3, r3, #24
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	071b      	lsls	r3, r3, #28
 8004ace:	4961      	ldr	r1, [pc, #388]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d004      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aea:	d00a      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d035      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b00:	d130      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004b02:	4b54      	ldr	r3, [pc, #336]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b08:	0c1b      	lsrs	r3, r3, #16
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	3301      	adds	r3, #1
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b14:	4b4f      	ldr	r3, [pc, #316]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b1a:	0f1b      	lsrs	r3, r3, #28
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	019b      	lsls	r3, r3, #6
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	085b      	lsrs	r3, r3, #1
 8004b32:	3b01      	subs	r3, #1
 8004b34:	041b      	lsls	r3, r3, #16
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	061b      	lsls	r3, r3, #24
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	071b      	lsls	r3, r3, #28
 8004b44:	4943      	ldr	r1, [pc, #268]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b4c:	4b41      	ldr	r3, [pc, #260]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b52:	f023 021f 	bic.w	r2, r3, #31
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	493d      	ldr	r1, [pc, #244]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d029      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b78:	d124      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004b7a:	4b36      	ldr	r3, [pc, #216]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b80:	0c1b      	lsrs	r3, r3, #16
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	3301      	adds	r3, #1
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b8c:	4b31      	ldr	r3, [pc, #196]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b92:	0f1b      	lsrs	r3, r3, #28
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	019b      	lsls	r3, r3, #6
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	085b      	lsrs	r3, r3, #1
 8004bac:	3b01      	subs	r3, #1
 8004bae:	041b      	lsls	r3, r3, #16
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	061b      	lsls	r3, r3, #24
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	071b      	lsls	r3, r3, #28
 8004bbc:	4925      	ldr	r1, [pc, #148]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d016      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	019b      	lsls	r3, r3, #6
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	085b      	lsrs	r3, r3, #1
 8004be2:	3b01      	subs	r3, #1
 8004be4:	041b      	lsls	r3, r3, #16
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	061b      	lsls	r3, r3, #24
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	071b      	lsls	r3, r3, #28
 8004bf6:	4917      	ldr	r1, [pc, #92]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bfe:	4b16      	ldr	r3, [pc, #88]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004c00:	2201      	movs	r2, #1
 8004c02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c04:	f7fd fe60 	bl	80028c8 <HAL_GetTick>
 8004c08:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c0c:	f7fd fe5c 	bl	80028c8 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e09f      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0f0      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	f040 8095 	bne.w	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c32:	4b0a      	ldr	r3, [pc, #40]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c38:	f7fd fe46 	bl	80028c8 <HAL_GetTick>
 8004c3c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c3e:	e00f      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004c40:	f7fd fe42 	bl	80028c8 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d908      	bls.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e085      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004c52:	bf00      	nop
 8004c54:	40023800 	.word	0x40023800
 8004c58:	42470068 	.word	0x42470068
 8004c5c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c60:	4b41      	ldr	r3, [pc, #260]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c6c:	d0e8      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d009      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d02b      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d127      	bne.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004c96:	4b34      	ldr	r3, [pc, #208]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9c:	0c1b      	lsrs	r3, r3, #16
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	699a      	ldr	r2, [r3, #24]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	019b      	lsls	r3, r3, #6
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	085b      	lsrs	r3, r3, #1
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	041b      	lsls	r3, r3, #16
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	061b      	lsls	r3, r3, #24
 8004cc4:	4928      	ldr	r1, [pc, #160]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ccc:	4b26      	ldr	r3, [pc, #152]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cd2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	021b      	lsls	r3, r3, #8
 8004cde:	4922      	ldr	r1, [pc, #136]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d01d      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cfa:	d118      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cfc:	4b1a      	ldr	r3, [pc, #104]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d02:	0e1b      	lsrs	r3, r3, #24
 8004d04:	f003 030f 	and.w	r3, r3, #15
 8004d08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	699a      	ldr	r2, [r3, #24]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	019b      	lsls	r3, r3, #6
 8004d14:	431a      	orrs	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	085b      	lsrs	r3, r3, #1
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	041b      	lsls	r3, r3, #16
 8004d20:	431a      	orrs	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	061b      	lsls	r3, r3, #24
 8004d26:	4910      	ldr	r1, [pc, #64]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d2e:	4b0f      	ldr	r3, [pc, #60]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004d30:	2201      	movs	r2, #1
 8004d32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d34:	f7fd fdc8 	bl	80028c8 <HAL_GetTick>
 8004d38:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004d3c:	f7fd fdc4 	bl	80028c8 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e007      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d4e:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d5a:	d1ef      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3730      	adds	r7, #48	; 0x30
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	42470070 	.word	0x42470070

08004d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d74:	b0a6      	sub	sp, #152	; 0x98
 8004d76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d96:	4bc8      	ldr	r3, [pc, #800]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 030c 	and.w	r3, r3, #12
 8004d9e:	2b0c      	cmp	r3, #12
 8004da0:	f200 817e 	bhi.w	80050a0 <HAL_RCC_GetSysClockFreq+0x330>
 8004da4:	a201      	add	r2, pc, #4	; (adr r2, 8004dac <HAL_RCC_GetSysClockFreq+0x3c>)
 8004da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004daa:	bf00      	nop
 8004dac:	08004de1 	.word	0x08004de1
 8004db0:	080050a1 	.word	0x080050a1
 8004db4:	080050a1 	.word	0x080050a1
 8004db8:	080050a1 	.word	0x080050a1
 8004dbc:	08004de9 	.word	0x08004de9
 8004dc0:	080050a1 	.word	0x080050a1
 8004dc4:	080050a1 	.word	0x080050a1
 8004dc8:	080050a1 	.word	0x080050a1
 8004dcc:	08004df1 	.word	0x08004df1
 8004dd0:	080050a1 	.word	0x080050a1
 8004dd4:	080050a1 	.word	0x080050a1
 8004dd8:	080050a1 	.word	0x080050a1
 8004ddc:	08004f5b 	.word	0x08004f5b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004de0:	4bb6      	ldr	r3, [pc, #728]	; (80050bc <HAL_RCC_GetSysClockFreq+0x34c>)
 8004de2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8004de6:	e15f      	b.n	80050a8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004de8:	4bb5      	ldr	r3, [pc, #724]	; (80050c0 <HAL_RCC_GetSysClockFreq+0x350>)
 8004dea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004dee:	e15b      	b.n	80050a8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004df0:	4bb1      	ldr	r3, [pc, #708]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004df8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dfc:	4bae      	ldr	r3, [pc, #696]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d031      	beq.n	8004e6c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e08:	4bab      	ldr	r3, [pc, #684]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	099b      	lsrs	r3, r3, #6
 8004e0e:	2200      	movs	r2, #0
 8004e10:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e1a:	663b      	str	r3, [r7, #96]	; 0x60
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	667b      	str	r3, [r7, #100]	; 0x64
 8004e20:	4ba7      	ldr	r3, [pc, #668]	; (80050c0 <HAL_RCC_GetSysClockFreq+0x350>)
 8004e22:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004e26:	462a      	mov	r2, r5
 8004e28:	fb03 f202 	mul.w	r2, r3, r2
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	4621      	mov	r1, r4
 8004e30:	fb01 f303 	mul.w	r3, r1, r3
 8004e34:	4413      	add	r3, r2
 8004e36:	4aa2      	ldr	r2, [pc, #648]	; (80050c0 <HAL_RCC_GetSysClockFreq+0x350>)
 8004e38:	4621      	mov	r1, r4
 8004e3a:	fba1 1202 	umull	r1, r2, r1, r2
 8004e3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e40:	460a      	mov	r2, r1
 8004e42:	67ba      	str	r2, [r7, #120]	; 0x78
 8004e44:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004e46:	4413      	add	r3, r2
 8004e48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e4e:	2200      	movs	r2, #0
 8004e50:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e52:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004e54:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e58:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004e5c:	f7fb fa28 	bl	80002b0 <__aeabi_uldivmod>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4613      	mov	r3, r2
 8004e66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e6a:	e064      	b.n	8004f36 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e6c:	4b92      	ldr	r3, [pc, #584]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	099b      	lsrs	r3, r3, #6
 8004e72:	2200      	movs	r2, #0
 8004e74:	653b      	str	r3, [r7, #80]	; 0x50
 8004e76:	657a      	str	r2, [r7, #84]	; 0x54
 8004e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e80:	2300      	movs	r3, #0
 8004e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e84:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004e88:	4622      	mov	r2, r4
 8004e8a:	462b      	mov	r3, r5
 8004e8c:	f04f 0000 	mov.w	r0, #0
 8004e90:	f04f 0100 	mov.w	r1, #0
 8004e94:	0159      	lsls	r1, r3, #5
 8004e96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e9a:	0150      	lsls	r0, r2, #5
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4621      	mov	r1, r4
 8004ea2:	1a51      	subs	r1, r2, r1
 8004ea4:	6139      	str	r1, [r7, #16]
 8004ea6:	4629      	mov	r1, r5
 8004ea8:	eb63 0301 	sbc.w	r3, r3, r1
 8004eac:	617b      	str	r3, [r7, #20]
 8004eae:	f04f 0200 	mov.w	r2, #0
 8004eb2:	f04f 0300 	mov.w	r3, #0
 8004eb6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004eba:	4659      	mov	r1, fp
 8004ebc:	018b      	lsls	r3, r1, #6
 8004ebe:	4651      	mov	r1, sl
 8004ec0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ec4:	4651      	mov	r1, sl
 8004ec6:	018a      	lsls	r2, r1, #6
 8004ec8:	4651      	mov	r1, sl
 8004eca:	ebb2 0801 	subs.w	r8, r2, r1
 8004ece:	4659      	mov	r1, fp
 8004ed0:	eb63 0901 	sbc.w	r9, r3, r1
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ee0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ee4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ee8:	4690      	mov	r8, r2
 8004eea:	4699      	mov	r9, r3
 8004eec:	4623      	mov	r3, r4
 8004eee:	eb18 0303 	adds.w	r3, r8, r3
 8004ef2:	60bb      	str	r3, [r7, #8]
 8004ef4:	462b      	mov	r3, r5
 8004ef6:	eb49 0303 	adc.w	r3, r9, r3
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f08:	4629      	mov	r1, r5
 8004f0a:	028b      	lsls	r3, r1, #10
 8004f0c:	4621      	mov	r1, r4
 8004f0e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f12:	4621      	mov	r1, r4
 8004f14:	028a      	lsls	r2, r1, #10
 8004f16:	4610      	mov	r0, r2
 8004f18:	4619      	mov	r1, r3
 8004f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f1e:	2200      	movs	r2, #0
 8004f20:	643b      	str	r3, [r7, #64]	; 0x40
 8004f22:	647a      	str	r2, [r7, #68]	; 0x44
 8004f24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f28:	f7fb f9c2 	bl	80002b0 <__aeabi_uldivmod>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4613      	mov	r3, r2
 8004f32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f36:	4b60      	ldr	r3, [pc, #384]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	0c1b      	lsrs	r3, r3, #16
 8004f3c:	f003 0303 	and.w	r3, r3, #3
 8004f40:	3301      	adds	r3, #1
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8004f48:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004f58:	e0a6      	b.n	80050a8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f5a:	4b57      	ldr	r3, [pc, #348]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f66:	4b54      	ldr	r3, [pc, #336]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d02a      	beq.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f72:	4b51      	ldr	r3, [pc, #324]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	099b      	lsrs	r3, r3, #6
 8004f78:	2200      	movs	r2, #0
 8004f7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f84:	2100      	movs	r1, #0
 8004f86:	4b4e      	ldr	r3, [pc, #312]	; (80050c0 <HAL_RCC_GetSysClockFreq+0x350>)
 8004f88:	fb03 f201 	mul.w	r2, r3, r1
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	fb00 f303 	mul.w	r3, r0, r3
 8004f92:	4413      	add	r3, r2
 8004f94:	4a4a      	ldr	r2, [pc, #296]	; (80050c0 <HAL_RCC_GetSysClockFreq+0x350>)
 8004f96:	fba0 1202 	umull	r1, r2, r0, r2
 8004f9a:	677a      	str	r2, [r7, #116]	; 0x74
 8004f9c:	460a      	mov	r2, r1
 8004f9e:	673a      	str	r2, [r7, #112]	; 0x70
 8004fa0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004fa2:	4413      	add	r3, r2
 8004fa4:	677b      	str	r3, [r7, #116]	; 0x74
 8004fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004faa:	2200      	movs	r2, #0
 8004fac:	633b      	str	r3, [r7, #48]	; 0x30
 8004fae:	637a      	str	r2, [r7, #52]	; 0x34
 8004fb0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004fb4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004fb8:	f7fb f97a 	bl	80002b0 <__aeabi_uldivmod>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004fc6:	e05b      	b.n	8005080 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fc8:	4b3b      	ldr	r3, [pc, #236]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	099b      	lsrs	r3, r3, #6
 8004fce:	2200      	movs	r2, #0
 8004fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fda:	623b      	str	r3, [r7, #32]
 8004fdc:	2300      	movs	r3, #0
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004fe4:	4642      	mov	r2, r8
 8004fe6:	464b      	mov	r3, r9
 8004fe8:	f04f 0000 	mov.w	r0, #0
 8004fec:	f04f 0100 	mov.w	r1, #0
 8004ff0:	0159      	lsls	r1, r3, #5
 8004ff2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ff6:	0150      	lsls	r0, r2, #5
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4641      	mov	r1, r8
 8004ffe:	ebb2 0a01 	subs.w	sl, r2, r1
 8005002:	4649      	mov	r1, r9
 8005004:	eb63 0b01 	sbc.w	fp, r3, r1
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005014:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005018:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800501c:	ebb2 040a 	subs.w	r4, r2, sl
 8005020:	eb63 050b 	sbc.w	r5, r3, fp
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	00eb      	lsls	r3, r5, #3
 800502e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005032:	00e2      	lsls	r2, r4, #3
 8005034:	4614      	mov	r4, r2
 8005036:	461d      	mov	r5, r3
 8005038:	4643      	mov	r3, r8
 800503a:	18e3      	adds	r3, r4, r3
 800503c:	603b      	str	r3, [r7, #0]
 800503e:	464b      	mov	r3, r9
 8005040:	eb45 0303 	adc.w	r3, r5, r3
 8005044:	607b      	str	r3, [r7, #4]
 8005046:	f04f 0200 	mov.w	r2, #0
 800504a:	f04f 0300 	mov.w	r3, #0
 800504e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005052:	4629      	mov	r1, r5
 8005054:	028b      	lsls	r3, r1, #10
 8005056:	4621      	mov	r1, r4
 8005058:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800505c:	4621      	mov	r1, r4
 800505e:	028a      	lsls	r2, r1, #10
 8005060:	4610      	mov	r0, r2
 8005062:	4619      	mov	r1, r3
 8005064:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005068:	2200      	movs	r2, #0
 800506a:	61bb      	str	r3, [r7, #24]
 800506c:	61fa      	str	r2, [r7, #28]
 800506e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005072:	f7fb f91d 	bl	80002b0 <__aeabi_uldivmod>
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	4613      	mov	r3, r2
 800507c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005080:	4b0d      	ldr	r3, [pc, #52]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	0f1b      	lsrs	r3, r3, #28
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800508e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005092:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005096:	fbb2 f3f3 	udiv	r3, r2, r3
 800509a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800509e:	e003      	b.n	80050a8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050a0:	4b06      	ldr	r3, [pc, #24]	; (80050bc <HAL_RCC_GetSysClockFreq+0x34c>)
 80050a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80050a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3798      	adds	r7, #152	; 0x98
 80050b0:	46bd      	mov	sp, r7
 80050b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050b6:	bf00      	nop
 80050b8:	40023800 	.word	0x40023800
 80050bc:	00f42400 	.word	0x00f42400
 80050c0:	017d7840 	.word	0x017d7840

080050c4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e28d      	b.n	80055f2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f000 8083 	beq.w	80051ea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80050e4:	4b94      	ldr	r3, [pc, #592]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f003 030c 	and.w	r3, r3, #12
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d019      	beq.n	8005124 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80050f0:	4b91      	ldr	r3, [pc, #580]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d106      	bne.n	800510a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80050fc:	4b8e      	ldr	r3, [pc, #568]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005104:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005108:	d00c      	beq.n	8005124 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800510a:	4b8b      	ldr	r3, [pc, #556]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005112:	2b0c      	cmp	r3, #12
 8005114:	d112      	bne.n	800513c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005116:	4b88      	ldr	r3, [pc, #544]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800511e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005122:	d10b      	bne.n	800513c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005124:	4b84      	ldr	r3, [pc, #528]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d05b      	beq.n	80051e8 <HAL_RCC_OscConfig+0x124>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d157      	bne.n	80051e8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e25a      	b.n	80055f2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005144:	d106      	bne.n	8005154 <HAL_RCC_OscConfig+0x90>
 8005146:	4b7c      	ldr	r3, [pc, #496]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a7b      	ldr	r2, [pc, #492]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 800514c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	e01d      	b.n	8005190 <HAL_RCC_OscConfig+0xcc>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800515c:	d10c      	bne.n	8005178 <HAL_RCC_OscConfig+0xb4>
 800515e:	4b76      	ldr	r3, [pc, #472]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a75      	ldr	r2, [pc, #468]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 8005164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	4b73      	ldr	r3, [pc, #460]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a72      	ldr	r2, [pc, #456]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 8005170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	e00b      	b.n	8005190 <HAL_RCC_OscConfig+0xcc>
 8005178:	4b6f      	ldr	r3, [pc, #444]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a6e      	ldr	r2, [pc, #440]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 800517e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	4b6c      	ldr	r3, [pc, #432]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a6b      	ldr	r2, [pc, #428]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 800518a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800518e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d013      	beq.n	80051c0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005198:	f7fd fb96 	bl	80028c8 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051a0:	f7fd fb92 	bl	80028c8 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b64      	cmp	r3, #100	; 0x64
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e21f      	b.n	80055f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051b2:	4b61      	ldr	r3, [pc, #388]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0f0      	beq.n	80051a0 <HAL_RCC_OscConfig+0xdc>
 80051be:	e014      	b.n	80051ea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c0:	f7fd fb82 	bl	80028c8 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051c8:	f7fd fb7e 	bl	80028c8 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b64      	cmp	r3, #100	; 0x64
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e20b      	b.n	80055f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051da:	4b57      	ldr	r3, [pc, #348]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1f0      	bne.n	80051c8 <HAL_RCC_OscConfig+0x104>
 80051e6:	e000      	b.n	80051ea <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d06f      	beq.n	80052d6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80051f6:	4b50      	ldr	r3, [pc, #320]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 030c 	and.w	r3, r3, #12
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d017      	beq.n	8005232 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005202:	4b4d      	ldr	r3, [pc, #308]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800520a:	2b08      	cmp	r3, #8
 800520c:	d105      	bne.n	800521a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800520e:	4b4a      	ldr	r3, [pc, #296]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00b      	beq.n	8005232 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800521a:	4b47      	ldr	r3, [pc, #284]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005222:	2b0c      	cmp	r3, #12
 8005224:	d11c      	bne.n	8005260 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005226:	4b44      	ldr	r3, [pc, #272]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d116      	bne.n	8005260 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005232:	4b41      	ldr	r3, [pc, #260]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d005      	beq.n	800524a <HAL_RCC_OscConfig+0x186>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d001      	beq.n	800524a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e1d3      	b.n	80055f2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800524a:	4b3b      	ldr	r3, [pc, #236]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	4937      	ldr	r1, [pc, #220]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 800525a:	4313      	orrs	r3, r2
 800525c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800525e:	e03a      	b.n	80052d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d020      	beq.n	80052aa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005268:	4b34      	ldr	r3, [pc, #208]	; (800533c <HAL_RCC_OscConfig+0x278>)
 800526a:	2201      	movs	r2, #1
 800526c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526e:	f7fd fb2b 	bl	80028c8 <HAL_GetTick>
 8005272:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005274:	e008      	b.n	8005288 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005276:	f7fd fb27 	bl	80028c8 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e1b4      	b.n	80055f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005288:	4b2b      	ldr	r3, [pc, #172]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0f0      	beq.n	8005276 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005294:	4b28      	ldr	r3, [pc, #160]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	4925      	ldr	r1, [pc, #148]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	600b      	str	r3, [r1, #0]
 80052a8:	e015      	b.n	80052d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052aa:	4b24      	ldr	r3, [pc, #144]	; (800533c <HAL_RCC_OscConfig+0x278>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b0:	f7fd fb0a 	bl	80028c8 <HAL_GetTick>
 80052b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052b8:	f7fd fb06 	bl	80028c8 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e193      	b.n	80055f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ca:	4b1b      	ldr	r3, [pc, #108]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1f0      	bne.n	80052b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0308 	and.w	r3, r3, #8
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d036      	beq.n	8005350 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d016      	beq.n	8005318 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052ea:	4b15      	ldr	r3, [pc, #84]	; (8005340 <HAL_RCC_OscConfig+0x27c>)
 80052ec:	2201      	movs	r2, #1
 80052ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f0:	f7fd faea 	bl	80028c8 <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052f6:	e008      	b.n	800530a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052f8:	f7fd fae6 	bl	80028c8 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e173      	b.n	80055f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800530a:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <HAL_RCC_OscConfig+0x274>)
 800530c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d0f0      	beq.n	80052f8 <HAL_RCC_OscConfig+0x234>
 8005316:	e01b      	b.n	8005350 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005318:	4b09      	ldr	r3, [pc, #36]	; (8005340 <HAL_RCC_OscConfig+0x27c>)
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800531e:	f7fd fad3 	bl	80028c8 <HAL_GetTick>
 8005322:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005324:	e00e      	b.n	8005344 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005326:	f7fd facf 	bl	80028c8 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d907      	bls.n	8005344 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e15c      	b.n	80055f2 <HAL_RCC_OscConfig+0x52e>
 8005338:	40023800 	.word	0x40023800
 800533c:	42470000 	.word	0x42470000
 8005340:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005344:	4b8a      	ldr	r3, [pc, #552]	; (8005570 <HAL_RCC_OscConfig+0x4ac>)
 8005346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1ea      	bne.n	8005326 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 8097 	beq.w	800548c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800535e:	2300      	movs	r3, #0
 8005360:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005362:	4b83      	ldr	r3, [pc, #524]	; (8005570 <HAL_RCC_OscConfig+0x4ac>)
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10f      	bne.n	800538e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800536e:	2300      	movs	r3, #0
 8005370:	60bb      	str	r3, [r7, #8]
 8005372:	4b7f      	ldr	r3, [pc, #508]	; (8005570 <HAL_RCC_OscConfig+0x4ac>)
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	4a7e      	ldr	r2, [pc, #504]	; (8005570 <HAL_RCC_OscConfig+0x4ac>)
 8005378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800537c:	6413      	str	r3, [r2, #64]	; 0x40
 800537e:	4b7c      	ldr	r3, [pc, #496]	; (8005570 <HAL_RCC_OscConfig+0x4ac>)
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005386:	60bb      	str	r3, [r7, #8]
 8005388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800538a:	2301      	movs	r3, #1
 800538c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800538e:	4b79      	ldr	r3, [pc, #484]	; (8005574 <HAL_RCC_OscConfig+0x4b0>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005396:	2b00      	cmp	r3, #0
 8005398:	d118      	bne.n	80053cc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800539a:	4b76      	ldr	r3, [pc, #472]	; (8005574 <HAL_RCC_OscConfig+0x4b0>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a75      	ldr	r2, [pc, #468]	; (8005574 <HAL_RCC_OscConfig+0x4b0>)
 80053a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053a6:	f7fd fa8f 	bl	80028c8 <HAL_GetTick>
 80053aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ac:	e008      	b.n	80053c0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ae:	f7fd fa8b 	bl	80028c8 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e118      	b.n	80055f2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c0:	4b6c      	ldr	r3, [pc, #432]	; (8005574 <HAL_RCC_OscConfig+0x4b0>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0f0      	beq.n	80053ae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d106      	bne.n	80053e2 <HAL_RCC_OscConfig+0x31e>
 80053d4:	4b66      	ldr	r3, [pc, #408]	; (8005570 <HAL_RCC_OscConfig+0x4ac>)
 80053d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d8:	4a65      	ldr	r2, [pc, #404]	; (8005570 <HAL_RCC_OscConfig+0x4ac>)
 80053da:	f043 0301 	orr.w	r3, r3, #1
 80053de:	6713      	str	r3, [r2, #112]	; 0x70
 80053e0:	e01c      	b.n	800541c <HAL_RCC_OscConfig+0x358>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	2b05      	cmp	r3, #5
 80053e8:	d10c      	bne.n	8005404 <HAL_RCC_OscConfig+0x340>
 80053ea:	4b61      	ldr	r3, [pc, #388]	; (8005570 <HAL_RCC_OscConfig+0x4ac>)
 80053ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ee:	4a60      	ldr	r2, [pc, #384]	; (8005570 <HAL_RCC_OscConfig+0x4ac>)
 80053f0:	f043 0304 	orr.w	r3, r3, #4
 80053f4:	6713      	str	r3, [r2, #112]	; 0x70
 80053f6:	4b5e      	ldr	r3, [pc, #376]	; (8005570 <HAL_RCC_OscConfig+0x4ac>)
 80053f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fa:	4a5d      	ldr	r2, [pc, #372]	; (8005570 <HAL_RCC_OscConfig+0x4ac>)
 80053fc:	f043 0301 	orr.w	r3, r3, #1
 8005400:	6713      	str	r3, [r2, #112]	; 0x70
 8005402:	e00b      	b.n	800541c <HAL_RCC_OscConfig+0x358>
 8005404:	4b5a      	ldr	r3, [pc, #360]	; (8005570 <HAL_RCC_OscConfig+0x4ac>)
 8005406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005408:	4a59      	ldr	r2, [pc, #356]	; (8005570 <HAL_RCC_OscConfig+0x4ac>)
 800540a:	f023 0301 	bic.w	r3, r3, #1
 800540e:	6713      	str	r3, [r2, #112]	; 0x70
 8005410:	4b57      	ldr	r3, [pc, #348]	; (8005570 <HAL_RCC_OscConfig+0x4ac>)
 8005412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005414:	4a56      	ldr	r2, [pc, #344]	; (8005570 <HAL_RCC_OscConfig+0x4ac>)
 8005416:	f023 0304 	bic.w	r3, r3, #4
 800541a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d015      	beq.n	8005450 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005424:	f7fd fa50 	bl	80028c8 <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800542a:	e00a      	b.n	8005442 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800542c:	f7fd fa4c 	bl	80028c8 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	f241 3288 	movw	r2, #5000	; 0x1388
 800543a:	4293      	cmp	r3, r2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e0d7      	b.n	80055f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005442:	4b4b      	ldr	r3, [pc, #300]	; (8005570 <HAL_RCC_OscConfig+0x4ac>)
 8005444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0ee      	beq.n	800542c <HAL_RCC_OscConfig+0x368>
 800544e:	e014      	b.n	800547a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005450:	f7fd fa3a 	bl	80028c8 <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005456:	e00a      	b.n	800546e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005458:	f7fd fa36 	bl	80028c8 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	f241 3288 	movw	r2, #5000	; 0x1388
 8005466:	4293      	cmp	r3, r2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e0c1      	b.n	80055f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800546e:	4b40      	ldr	r3, [pc, #256]	; (8005570 <HAL_RCC_OscConfig+0x4ac>)
 8005470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1ee      	bne.n	8005458 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800547a:	7dfb      	ldrb	r3, [r7, #23]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d105      	bne.n	800548c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005480:	4b3b      	ldr	r3, [pc, #236]	; (8005570 <HAL_RCC_OscConfig+0x4ac>)
 8005482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005484:	4a3a      	ldr	r2, [pc, #232]	; (8005570 <HAL_RCC_OscConfig+0x4ac>)
 8005486:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800548a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 80ad 	beq.w	80055f0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005496:	4b36      	ldr	r3, [pc, #216]	; (8005570 <HAL_RCC_OscConfig+0x4ac>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 030c 	and.w	r3, r3, #12
 800549e:	2b08      	cmp	r3, #8
 80054a0:	d060      	beq.n	8005564 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d145      	bne.n	8005536 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054aa:	4b33      	ldr	r3, [pc, #204]	; (8005578 <HAL_RCC_OscConfig+0x4b4>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b0:	f7fd fa0a 	bl	80028c8 <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054b6:	e008      	b.n	80054ca <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054b8:	f7fd fa06 	bl	80028c8 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e093      	b.n	80055f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ca:	4b29      	ldr	r3, [pc, #164]	; (8005570 <HAL_RCC_OscConfig+0x4ac>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1f0      	bne.n	80054b8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	69da      	ldr	r2, [r3, #28]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	019b      	lsls	r3, r3, #6
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ec:	085b      	lsrs	r3, r3, #1
 80054ee:	3b01      	subs	r3, #1
 80054f0:	041b      	lsls	r3, r3, #16
 80054f2:	431a      	orrs	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f8:	061b      	lsls	r3, r3, #24
 80054fa:	431a      	orrs	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005500:	071b      	lsls	r3, r3, #28
 8005502:	491b      	ldr	r1, [pc, #108]	; (8005570 <HAL_RCC_OscConfig+0x4ac>)
 8005504:	4313      	orrs	r3, r2
 8005506:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005508:	4b1b      	ldr	r3, [pc, #108]	; (8005578 <HAL_RCC_OscConfig+0x4b4>)
 800550a:	2201      	movs	r2, #1
 800550c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550e:	f7fd f9db 	bl	80028c8 <HAL_GetTick>
 8005512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005514:	e008      	b.n	8005528 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005516:	f7fd f9d7 	bl	80028c8 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d901      	bls.n	8005528 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e064      	b.n	80055f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005528:	4b11      	ldr	r3, [pc, #68]	; (8005570 <HAL_RCC_OscConfig+0x4ac>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d0f0      	beq.n	8005516 <HAL_RCC_OscConfig+0x452>
 8005534:	e05c      	b.n	80055f0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005536:	4b10      	ldr	r3, [pc, #64]	; (8005578 <HAL_RCC_OscConfig+0x4b4>)
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553c:	f7fd f9c4 	bl	80028c8 <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005544:	f7fd f9c0 	bl	80028c8 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e04d      	b.n	80055f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005556:	4b06      	ldr	r3, [pc, #24]	; (8005570 <HAL_RCC_OscConfig+0x4ac>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1f0      	bne.n	8005544 <HAL_RCC_OscConfig+0x480>
 8005562:	e045      	b.n	80055f0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d107      	bne.n	800557c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e040      	b.n	80055f2 <HAL_RCC_OscConfig+0x52e>
 8005570:	40023800 	.word	0x40023800
 8005574:	40007000 	.word	0x40007000
 8005578:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800557c:	4b1f      	ldr	r3, [pc, #124]	; (80055fc <HAL_RCC_OscConfig+0x538>)
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d030      	beq.n	80055ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005594:	429a      	cmp	r2, r3
 8005596:	d129      	bne.n	80055ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d122      	bne.n	80055ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80055ac:	4013      	ands	r3, r2
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d119      	bne.n	80055ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c2:	085b      	lsrs	r3, r3, #1
 80055c4:	3b01      	subs	r3, #1
 80055c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d10f      	bne.n	80055ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055d8:	429a      	cmp	r2, r3
 80055da:	d107      	bne.n	80055ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d001      	beq.n	80055f0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e000      	b.n	80055f2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40023800 	.word	0x40023800

08005600 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e066      	b.n	80056e4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	7f5b      	ldrb	r3, [r3, #29]
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d105      	bne.n	800562c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7fc f906 	bl	8001838 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	22ca      	movs	r2, #202	; 0xca
 8005638:	625a      	str	r2, [r3, #36]	; 0x24
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2253      	movs	r2, #83	; 0x53
 8005640:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f87a 	bl	800573c <RTC_EnterInitMode>
 8005648:	4603      	mov	r3, r0
 800564a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800564c:	7bfb      	ldrb	r3, [r7, #15]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d12c      	bne.n	80056ac <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6812      	ldr	r2, [r2, #0]
 800565c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005664:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6899      	ldr	r1, [r3, #8]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	431a      	orrs	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	431a      	orrs	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	430a      	orrs	r2, r1
 8005682:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	68d2      	ldr	r2, [r2, #12]
 800568c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6919      	ldr	r1, [r3, #16]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	041a      	lsls	r2, r3, #16
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f881 	bl	80057aa <RTC_ExitInitMode>
 80056a8:	4603      	mov	r3, r0
 80056aa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d113      	bne.n	80056da <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80056c0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	699a      	ldr	r2, [r3, #24]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	22ff      	movs	r2, #255	; 0xff
 80056e0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005706:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005708:	f7fd f8de 	bl	80028c8 <HAL_GetTick>
 800570c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800570e:	e009      	b.n	8005724 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005710:	f7fd f8da 	bl	80028c8 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800571e:	d901      	bls.n	8005724 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e007      	b.n	8005734 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f003 0320 	and.w	r3, r3, #32
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0ee      	beq.n	8005710 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005748:	2300      	movs	r3, #0
 800574a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005756:	2b00      	cmp	r3, #0
 8005758:	d122      	bne.n	80057a0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005768:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800576a:	f7fd f8ad 	bl	80028c8 <HAL_GetTick>
 800576e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005770:	e00c      	b.n	800578c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005772:	f7fd f8a9 	bl	80028c8 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005780:	d904      	bls.n	800578c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2204      	movs	r2, #4
 8005786:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005796:	2b00      	cmp	r3, #0
 8005798:	d102      	bne.n	80057a0 <RTC_EnterInitMode+0x64>
 800579a:	7bfb      	ldrb	r3, [r7, #15]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d1e8      	bne.n	8005772 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b084      	sub	sp, #16
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68da      	ldr	r2, [r3, #12]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057c4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f003 0320 	and.w	r3, r3, #32
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10a      	bne.n	80057ea <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7ff ff89 	bl	80056ec <HAL_RTC_WaitForSynchro>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d004      	beq.n	80057ea <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2204      	movs	r2, #4
 80057e4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e07b      	b.n	80058fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	2b00      	cmp	r3, #0
 800580c:	d108      	bne.n	8005820 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005816:	d009      	beq.n	800582c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	61da      	str	r2, [r3, #28]
 800581e:	e005      	b.n	800582c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d106      	bne.n	800584c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7fc f820 	bl	800188c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005862:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005874:	431a      	orrs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800589c:	431a      	orrs	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b0:	ea42 0103 	orr.w	r1, r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	0c1b      	lsrs	r3, r3, #16
 80058ca:	f003 0104 	and.w	r1, r3, #4
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	f003 0210 	and.w	r2, r3, #16
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69da      	ldr	r2, [r3, #28]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b082      	sub	sp, #8
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e041      	b.n	800599c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	d106      	bne.n	8005932 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f7fc f89b 	bl	8001a68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2202      	movs	r2, #2
 8005936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	3304      	adds	r3, #4
 8005942:	4619      	mov	r1, r3
 8005944:	4610      	mov	r0, r2
 8005946:	f000 fa11 	bl	8005d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e041      	b.n	8005a3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d106      	bne.n	80059d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f839 	bl	8005a42 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2202      	movs	r2, #2
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3304      	adds	r3, #4
 80059e0:	4619      	mov	r1, r3
 80059e2:	4610      	mov	r0, r2
 80059e4:	f000 f9c2 	bl	8005d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a4a:	bf00      	nop
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
	...

08005a58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a64:	2300      	movs	r3, #0
 8005a66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d101      	bne.n	8005a76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a72:	2302      	movs	r3, #2
 8005a74:	e0ae      	b.n	8005bd4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b0c      	cmp	r3, #12
 8005a82:	f200 809f 	bhi.w	8005bc4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a86:	a201      	add	r2, pc, #4	; (adr r2, 8005a8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8c:	08005ac1 	.word	0x08005ac1
 8005a90:	08005bc5 	.word	0x08005bc5
 8005a94:	08005bc5 	.word	0x08005bc5
 8005a98:	08005bc5 	.word	0x08005bc5
 8005a9c:	08005b01 	.word	0x08005b01
 8005aa0:	08005bc5 	.word	0x08005bc5
 8005aa4:	08005bc5 	.word	0x08005bc5
 8005aa8:	08005bc5 	.word	0x08005bc5
 8005aac:	08005b43 	.word	0x08005b43
 8005ab0:	08005bc5 	.word	0x08005bc5
 8005ab4:	08005bc5 	.word	0x08005bc5
 8005ab8:	08005bc5 	.word	0x08005bc5
 8005abc:	08005b83 	.word	0x08005b83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68b9      	ldr	r1, [r7, #8]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 f9f0 	bl	8005eac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	699a      	ldr	r2, [r3, #24]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f042 0208 	orr.w	r2, r2, #8
 8005ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	699a      	ldr	r2, [r3, #24]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 0204 	bic.w	r2, r2, #4
 8005aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6999      	ldr	r1, [r3, #24]
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	691a      	ldr	r2, [r3, #16]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	619a      	str	r2, [r3, #24]
      break;
 8005afe:	e064      	b.n	8005bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68b9      	ldr	r1, [r7, #8]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fa40 	bl	8005f8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699a      	ldr	r2, [r3, #24]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6999      	ldr	r1, [r3, #24]
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	021a      	lsls	r2, r3, #8
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	619a      	str	r2, [r3, #24]
      break;
 8005b40:	e043      	b.n	8005bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68b9      	ldr	r1, [r7, #8]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 fa95 	bl	8006078 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69da      	ldr	r2, [r3, #28]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f042 0208 	orr.w	r2, r2, #8
 8005b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69da      	ldr	r2, [r3, #28]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 0204 	bic.w	r2, r2, #4
 8005b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69d9      	ldr	r1, [r3, #28]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	691a      	ldr	r2, [r3, #16]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	61da      	str	r2, [r3, #28]
      break;
 8005b80:	e023      	b.n	8005bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68b9      	ldr	r1, [r7, #8]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 fae9 	bl	8006160 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69da      	ldr	r2, [r3, #28]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69da      	ldr	r2, [r3, #28]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69d9      	ldr	r1, [r3, #28]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	021a      	lsls	r2, r3, #8
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	61da      	str	r2, [r3, #28]
      break;
 8005bc2:	e002      	b.n	8005bca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8005bc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3718      	adds	r7, #24
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_TIM_ConfigClockSource+0x1c>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e0b4      	b.n	8005d62 <HAL_TIM_ConfigClockSource+0x186>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c30:	d03e      	beq.n	8005cb0 <HAL_TIM_ConfigClockSource+0xd4>
 8005c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c36:	f200 8087 	bhi.w	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3e:	f000 8086 	beq.w	8005d4e <HAL_TIM_ConfigClockSource+0x172>
 8005c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c46:	d87f      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c48:	2b70      	cmp	r3, #112	; 0x70
 8005c4a:	d01a      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0xa6>
 8005c4c:	2b70      	cmp	r3, #112	; 0x70
 8005c4e:	d87b      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c50:	2b60      	cmp	r3, #96	; 0x60
 8005c52:	d050      	beq.n	8005cf6 <HAL_TIM_ConfigClockSource+0x11a>
 8005c54:	2b60      	cmp	r3, #96	; 0x60
 8005c56:	d877      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c58:	2b50      	cmp	r3, #80	; 0x50
 8005c5a:	d03c      	beq.n	8005cd6 <HAL_TIM_ConfigClockSource+0xfa>
 8005c5c:	2b50      	cmp	r3, #80	; 0x50
 8005c5e:	d873      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c60:	2b40      	cmp	r3, #64	; 0x40
 8005c62:	d058      	beq.n	8005d16 <HAL_TIM_ConfigClockSource+0x13a>
 8005c64:	2b40      	cmp	r3, #64	; 0x40
 8005c66:	d86f      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c68:	2b30      	cmp	r3, #48	; 0x30
 8005c6a:	d064      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x15a>
 8005c6c:	2b30      	cmp	r3, #48	; 0x30
 8005c6e:	d86b      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	d060      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x15a>
 8005c74:	2b20      	cmp	r3, #32
 8005c76:	d867      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d05c      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x15a>
 8005c7c:	2b10      	cmp	r3, #16
 8005c7e:	d05a      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x15a>
 8005c80:	e062      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6818      	ldr	r0, [r3, #0]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	6899      	ldr	r1, [r3, #8]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f000 fb35 	bl	8006300 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ca4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	609a      	str	r2, [r3, #8]
      break;
 8005cae:	e04f      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6818      	ldr	r0, [r3, #0]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	6899      	ldr	r1, [r3, #8]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f000 fb1e 	bl	8006300 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cd2:	609a      	str	r2, [r3, #8]
      break;
 8005cd4:	e03c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6818      	ldr	r0, [r3, #0]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	6859      	ldr	r1, [r3, #4]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f000 fa92 	bl	800620c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2150      	movs	r1, #80	; 0x50
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 faeb 	bl	80062ca <TIM_ITRx_SetConfig>
      break;
 8005cf4:	e02c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6818      	ldr	r0, [r3, #0]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	6859      	ldr	r1, [r3, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	461a      	mov	r2, r3
 8005d04:	f000 fab1 	bl	800626a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2160      	movs	r1, #96	; 0x60
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 fadb 	bl	80062ca <TIM_ITRx_SetConfig>
      break;
 8005d14:	e01c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	6859      	ldr	r1, [r3, #4]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	461a      	mov	r2, r3
 8005d24:	f000 fa72 	bl	800620c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2140      	movs	r1, #64	; 0x40
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 facb 	bl	80062ca <TIM_ITRx_SetConfig>
      break;
 8005d34:	e00c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4619      	mov	r1, r3
 8005d40:	4610      	mov	r0, r2
 8005d42:	f000 fac2 	bl	80062ca <TIM_ITRx_SetConfig>
      break;
 8005d46:	e003      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d4c:	e000      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a40      	ldr	r2, [pc, #256]	; (8005e80 <TIM_Base_SetConfig+0x114>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d013      	beq.n	8005dac <TIM_Base_SetConfig+0x40>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d8a:	d00f      	beq.n	8005dac <TIM_Base_SetConfig+0x40>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a3d      	ldr	r2, [pc, #244]	; (8005e84 <TIM_Base_SetConfig+0x118>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d00b      	beq.n	8005dac <TIM_Base_SetConfig+0x40>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a3c      	ldr	r2, [pc, #240]	; (8005e88 <TIM_Base_SetConfig+0x11c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d007      	beq.n	8005dac <TIM_Base_SetConfig+0x40>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a3b      	ldr	r2, [pc, #236]	; (8005e8c <TIM_Base_SetConfig+0x120>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d003      	beq.n	8005dac <TIM_Base_SetConfig+0x40>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a3a      	ldr	r2, [pc, #232]	; (8005e90 <TIM_Base_SetConfig+0x124>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d108      	bne.n	8005dbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a2f      	ldr	r2, [pc, #188]	; (8005e80 <TIM_Base_SetConfig+0x114>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d02b      	beq.n	8005e1e <TIM_Base_SetConfig+0xb2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dcc:	d027      	beq.n	8005e1e <TIM_Base_SetConfig+0xb2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a2c      	ldr	r2, [pc, #176]	; (8005e84 <TIM_Base_SetConfig+0x118>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d023      	beq.n	8005e1e <TIM_Base_SetConfig+0xb2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a2b      	ldr	r2, [pc, #172]	; (8005e88 <TIM_Base_SetConfig+0x11c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d01f      	beq.n	8005e1e <TIM_Base_SetConfig+0xb2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a2a      	ldr	r2, [pc, #168]	; (8005e8c <TIM_Base_SetConfig+0x120>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d01b      	beq.n	8005e1e <TIM_Base_SetConfig+0xb2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a29      	ldr	r2, [pc, #164]	; (8005e90 <TIM_Base_SetConfig+0x124>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d017      	beq.n	8005e1e <TIM_Base_SetConfig+0xb2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a28      	ldr	r2, [pc, #160]	; (8005e94 <TIM_Base_SetConfig+0x128>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d013      	beq.n	8005e1e <TIM_Base_SetConfig+0xb2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a27      	ldr	r2, [pc, #156]	; (8005e98 <TIM_Base_SetConfig+0x12c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d00f      	beq.n	8005e1e <TIM_Base_SetConfig+0xb2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a26      	ldr	r2, [pc, #152]	; (8005e9c <TIM_Base_SetConfig+0x130>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00b      	beq.n	8005e1e <TIM_Base_SetConfig+0xb2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a25      	ldr	r2, [pc, #148]	; (8005ea0 <TIM_Base_SetConfig+0x134>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d007      	beq.n	8005e1e <TIM_Base_SetConfig+0xb2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a24      	ldr	r2, [pc, #144]	; (8005ea4 <TIM_Base_SetConfig+0x138>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d003      	beq.n	8005e1e <TIM_Base_SetConfig+0xb2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a23      	ldr	r2, [pc, #140]	; (8005ea8 <TIM_Base_SetConfig+0x13c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d108      	bne.n	8005e30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	689a      	ldr	r2, [r3, #8]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a0a      	ldr	r2, [pc, #40]	; (8005e80 <TIM_Base_SetConfig+0x114>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d003      	beq.n	8005e64 <TIM_Base_SetConfig+0xf8>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a0c      	ldr	r2, [pc, #48]	; (8005e90 <TIM_Base_SetConfig+0x124>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d103      	bne.n	8005e6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	691a      	ldr	r2, [r3, #16]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	615a      	str	r2, [r3, #20]
}
 8005e72:	bf00      	nop
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	40010000 	.word	0x40010000
 8005e84:	40000400 	.word	0x40000400
 8005e88:	40000800 	.word	0x40000800
 8005e8c:	40000c00 	.word	0x40000c00
 8005e90:	40010400 	.word	0x40010400
 8005e94:	40014000 	.word	0x40014000
 8005e98:	40014400 	.word	0x40014400
 8005e9c:	40014800 	.word	0x40014800
 8005ea0:	40001800 	.word	0x40001800
 8005ea4:	40001c00 	.word	0x40001c00
 8005ea8:	40002000 	.word	0x40002000

08005eac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	f023 0201 	bic.w	r2, r3, #1
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 0303 	bic.w	r3, r3, #3
 8005ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f023 0302 	bic.w	r3, r3, #2
 8005ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a20      	ldr	r2, [pc, #128]	; (8005f84 <TIM_OC1_SetConfig+0xd8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d003      	beq.n	8005f10 <TIM_OC1_SetConfig+0x64>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a1f      	ldr	r2, [pc, #124]	; (8005f88 <TIM_OC1_SetConfig+0xdc>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d10c      	bne.n	8005f2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f023 0308 	bic.w	r3, r3, #8
 8005f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f023 0304 	bic.w	r3, r3, #4
 8005f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a15      	ldr	r2, [pc, #84]	; (8005f84 <TIM_OC1_SetConfig+0xd8>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d003      	beq.n	8005f3a <TIM_OC1_SetConfig+0x8e>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a14      	ldr	r2, [pc, #80]	; (8005f88 <TIM_OC1_SetConfig+0xdc>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d111      	bne.n	8005f5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	621a      	str	r2, [r3, #32]
}
 8005f78:	bf00      	nop
 8005f7a:	371c      	adds	r7, #28
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	40010000 	.word	0x40010000
 8005f88:	40010400 	.word	0x40010400

08005f8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	f023 0210 	bic.w	r2, r3, #16
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	021b      	lsls	r3, r3, #8
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	f023 0320 	bic.w	r3, r3, #32
 8005fd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	011b      	lsls	r3, r3, #4
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a22      	ldr	r2, [pc, #136]	; (8006070 <TIM_OC2_SetConfig+0xe4>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d003      	beq.n	8005ff4 <TIM_OC2_SetConfig+0x68>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a21      	ldr	r2, [pc, #132]	; (8006074 <TIM_OC2_SetConfig+0xe8>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d10d      	bne.n	8006010 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	4313      	orrs	r3, r2
 8006006:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800600e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a17      	ldr	r2, [pc, #92]	; (8006070 <TIM_OC2_SetConfig+0xe4>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d003      	beq.n	8006020 <TIM_OC2_SetConfig+0x94>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a16      	ldr	r2, [pc, #88]	; (8006074 <TIM_OC2_SetConfig+0xe8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d113      	bne.n	8006048 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006026:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800602e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	4313      	orrs	r3, r2
 800603a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	4313      	orrs	r3, r2
 8006046:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	621a      	str	r2, [r3, #32]
}
 8006062:	bf00      	nop
 8006064:	371c      	adds	r7, #28
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	40010000 	.word	0x40010000
 8006074:	40010400 	.word	0x40010400

08006078 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 0303 	bic.w	r3, r3, #3
 80060ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	021b      	lsls	r3, r3, #8
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a21      	ldr	r2, [pc, #132]	; (8006158 <TIM_OC3_SetConfig+0xe0>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d003      	beq.n	80060de <TIM_OC3_SetConfig+0x66>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a20      	ldr	r2, [pc, #128]	; (800615c <TIM_OC3_SetConfig+0xe4>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d10d      	bne.n	80060fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	021b      	lsls	r3, r3, #8
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a16      	ldr	r2, [pc, #88]	; (8006158 <TIM_OC3_SetConfig+0xe0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d003      	beq.n	800610a <TIM_OC3_SetConfig+0x92>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a15      	ldr	r2, [pc, #84]	; (800615c <TIM_OC3_SetConfig+0xe4>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d113      	bne.n	8006132 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	4313      	orrs	r3, r2
 8006124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	4313      	orrs	r3, r2
 8006130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	621a      	str	r2, [r3, #32]
}
 800614c:	bf00      	nop
 800614e:	371c      	adds	r7, #28
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	40010000 	.word	0x40010000
 800615c:	40010400 	.word	0x40010400

08006160 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800618e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	021b      	lsls	r3, r3, #8
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	031b      	lsls	r3, r3, #12
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a12      	ldr	r2, [pc, #72]	; (8006204 <TIM_OC4_SetConfig+0xa4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d003      	beq.n	80061c8 <TIM_OC4_SetConfig+0x68>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a11      	ldr	r2, [pc, #68]	; (8006208 <TIM_OC4_SetConfig+0xa8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d109      	bne.n	80061dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	019b      	lsls	r3, r3, #6
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	4313      	orrs	r3, r2
 80061da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	621a      	str	r2, [r3, #32]
}
 80061f6:	bf00      	nop
 80061f8:	371c      	adds	r7, #28
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	40010000 	.word	0x40010000
 8006208:	40010400 	.word	0x40010400

0800620c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	f023 0201 	bic.w	r2, r3, #1
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	4313      	orrs	r3, r2
 8006240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f023 030a 	bic.w	r3, r3, #10
 8006248:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	4313      	orrs	r3, r2
 8006250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	621a      	str	r2, [r3, #32]
}
 800625e:	bf00      	nop
 8006260:	371c      	adds	r7, #28
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800626a:	b480      	push	{r7}
 800626c:	b087      	sub	sp, #28
 800626e:	af00      	add	r7, sp, #0
 8006270:	60f8      	str	r0, [r7, #12]
 8006272:	60b9      	str	r1, [r7, #8]
 8006274:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	f023 0210 	bic.w	r2, r3, #16
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006294:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	031b      	lsls	r3, r3, #12
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	4313      	orrs	r3, r2
 800629e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	011b      	lsls	r3, r3, #4
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	621a      	str	r2, [r3, #32]
}
 80062be:	bf00      	nop
 80062c0:	371c      	adds	r7, #28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b085      	sub	sp, #20
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	f043 0307 	orr.w	r3, r3, #7
 80062ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	609a      	str	r2, [r3, #8]
}
 80062f4:	bf00      	nop
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
 800630c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800631a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	021a      	lsls	r2, r3, #8
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	431a      	orrs	r2, r3
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	4313      	orrs	r3, r2
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	4313      	orrs	r3, r2
 800632c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	609a      	str	r2, [r3, #8]
}
 8006334:	bf00      	nop
 8006336:	371c      	adds	r7, #28
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006350:	2b01      	cmp	r3, #1
 8006352:	d101      	bne.n	8006358 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006354:	2302      	movs	r3, #2
 8006356:	e05a      	b.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	4313      	orrs	r3, r2
 8006388:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a21      	ldr	r2, [pc, #132]	; (800641c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d022      	beq.n	80063e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a4:	d01d      	beq.n	80063e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a1d      	ldr	r2, [pc, #116]	; (8006420 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d018      	beq.n	80063e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a1b      	ldr	r2, [pc, #108]	; (8006424 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d013      	beq.n	80063e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a1a      	ldr	r2, [pc, #104]	; (8006428 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d00e      	beq.n	80063e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a18      	ldr	r2, [pc, #96]	; (800642c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d009      	beq.n	80063e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a17      	ldr	r2, [pc, #92]	; (8006430 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d004      	beq.n	80063e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a15      	ldr	r2, [pc, #84]	; (8006434 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d10c      	bne.n	80063fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	40010000 	.word	0x40010000
 8006420:	40000400 	.word	0x40000400
 8006424:	40000800 	.word	0x40000800
 8006428:	40000c00 	.word	0x40000c00
 800642c:	40010400 	.word	0x40010400
 8006430:	40014000 	.word	0x40014000
 8006434:	40001800 	.word	0x40001800

08006438 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800644c:	2b01      	cmp	r3, #1
 800644e:	d101      	bne.n	8006454 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006450:	2302      	movs	r3, #2
 8006452:	e03d      	b.n	80064d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	4313      	orrs	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	4313      	orrs	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4313      	orrs	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	4313      	orrs	r3, r2
 80064a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e03f      	b.n	800656e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d106      	bne.n	8006508 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7fb fb0c 	bl	8001b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2224      	movs	r2, #36	; 0x24
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800651e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f929 	bl	8006778 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	691a      	ldr	r2, [r3, #16]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006534:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	695a      	ldr	r2, [r3, #20]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006544:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68da      	ldr	r2, [r3, #12]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006554:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2220      	movs	r2, #32
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2220      	movs	r2, #32
 8006568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b08a      	sub	sp, #40	; 0x28
 800657a:	af02      	add	r7, sp, #8
 800657c:	60f8      	str	r0, [r7, #12]
 800657e:	60b9      	str	r1, [r7, #8]
 8006580:	603b      	str	r3, [r7, #0]
 8006582:	4613      	mov	r3, r2
 8006584:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b20      	cmp	r3, #32
 8006594:	d17c      	bne.n	8006690 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d002      	beq.n	80065a2 <HAL_UART_Transmit+0x2c>
 800659c:	88fb      	ldrh	r3, [r7, #6]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e075      	b.n	8006692 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d101      	bne.n	80065b4 <HAL_UART_Transmit+0x3e>
 80065b0:	2302      	movs	r3, #2
 80065b2:	e06e      	b.n	8006692 <HAL_UART_Transmit+0x11c>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2221      	movs	r2, #33	; 0x21
 80065c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065ca:	f7fc f97d 	bl	80028c8 <HAL_GetTick>
 80065ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	88fa      	ldrh	r2, [r7, #6]
 80065d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	88fa      	ldrh	r2, [r7, #6]
 80065da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e4:	d108      	bne.n	80065f8 <HAL_UART_Transmit+0x82>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d104      	bne.n	80065f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	61bb      	str	r3, [r7, #24]
 80065f6:	e003      	b.n	8006600 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065fc:	2300      	movs	r3, #0
 80065fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006608:	e02a      	b.n	8006660 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2200      	movs	r2, #0
 8006612:	2180      	movs	r1, #128	; 0x80
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 f840 	bl	800669a <UART_WaitOnFlagUntilTimeout>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e036      	b.n	8006692 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10b      	bne.n	8006642 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	461a      	mov	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006638:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	3302      	adds	r3, #2
 800663e:	61bb      	str	r3, [r7, #24]
 8006640:	e007      	b.n	8006652 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	781a      	ldrb	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	3301      	adds	r3, #1
 8006650:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006656:	b29b      	uxth	r3, r3
 8006658:	3b01      	subs	r3, #1
 800665a:	b29a      	uxth	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006664:	b29b      	uxth	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1cf      	bne.n	800660a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2200      	movs	r2, #0
 8006672:	2140      	movs	r1, #64	; 0x40
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 f810 	bl	800669a <UART_WaitOnFlagUntilTimeout>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e006      	b.n	8006692 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2220      	movs	r2, #32
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800668c:	2300      	movs	r3, #0
 800668e:	e000      	b.n	8006692 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006690:	2302      	movs	r3, #2
  }
}
 8006692:	4618      	mov	r0, r3
 8006694:	3720      	adds	r7, #32
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b090      	sub	sp, #64	; 0x40
 800669e:	af00      	add	r7, sp, #0
 80066a0:	60f8      	str	r0, [r7, #12]
 80066a2:	60b9      	str	r1, [r7, #8]
 80066a4:	603b      	str	r3, [r7, #0]
 80066a6:	4613      	mov	r3, r2
 80066a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066aa:	e050      	b.n	800674e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b2:	d04c      	beq.n	800674e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80066b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d007      	beq.n	80066ca <UART_WaitOnFlagUntilTimeout+0x30>
 80066ba:	f7fc f905 	bl	80028c8 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d241      	bcs.n	800674e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	330c      	adds	r3, #12
 80066d0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d4:	e853 3f00 	ldrex	r3, [r3]
 80066d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	330c      	adds	r3, #12
 80066e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066ea:	637a      	str	r2, [r7, #52]	; 0x34
 80066ec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066f2:	e841 2300 	strex	r3, r2, [r1]
 80066f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1e5      	bne.n	80066ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	3314      	adds	r3, #20
 8006704:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	e853 3f00 	ldrex	r3, [r3]
 800670c:	613b      	str	r3, [r7, #16]
   return(result);
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f023 0301 	bic.w	r3, r3, #1
 8006714:	63bb      	str	r3, [r7, #56]	; 0x38
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3314      	adds	r3, #20
 800671c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800671e:	623a      	str	r2, [r7, #32]
 8006720:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006722:	69f9      	ldr	r1, [r7, #28]
 8006724:	6a3a      	ldr	r2, [r7, #32]
 8006726:	e841 2300 	strex	r3, r2, [r1]
 800672a:	61bb      	str	r3, [r7, #24]
   return(result);
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1e5      	bne.n	80066fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2220      	movs	r2, #32
 8006736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2220      	movs	r2, #32
 800673e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e00f      	b.n	800676e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	4013      	ands	r3, r2
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	429a      	cmp	r2, r3
 800675c:	bf0c      	ite	eq
 800675e:	2301      	moveq	r3, #1
 8006760:	2300      	movne	r3, #0
 8006762:	b2db      	uxtb	r3, r3
 8006764:	461a      	mov	r2, r3
 8006766:	79fb      	ldrb	r3, [r7, #7]
 8006768:	429a      	cmp	r2, r3
 800676a:	d09f      	beq.n	80066ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3740      	adds	r7, #64	; 0x40
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
	...

08006778 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800677c:	b0c0      	sub	sp, #256	; 0x100
 800677e:	af00      	add	r7, sp, #0
 8006780:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006794:	68d9      	ldr	r1, [r3, #12]
 8006796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	ea40 0301 	orr.w	r3, r0, r1
 80067a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	431a      	orrs	r2, r3
 80067b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	431a      	orrs	r2, r3
 80067b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	4313      	orrs	r3, r2
 80067c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80067d0:	f021 010c 	bic.w	r1, r1, #12
 80067d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067de:	430b      	orrs	r3, r1
 80067e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80067ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f2:	6999      	ldr	r1, [r3, #24]
 80067f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	ea40 0301 	orr.w	r3, r0, r1
 80067fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	4b8f      	ldr	r3, [pc, #572]	; (8006a44 <UART_SetConfig+0x2cc>)
 8006808:	429a      	cmp	r2, r3
 800680a:	d005      	beq.n	8006818 <UART_SetConfig+0xa0>
 800680c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	4b8d      	ldr	r3, [pc, #564]	; (8006a48 <UART_SetConfig+0x2d0>)
 8006814:	429a      	cmp	r2, r3
 8006816:	d104      	bne.n	8006822 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006818:	f7fd ff6c 	bl	80046f4 <HAL_RCC_GetPCLK2Freq>
 800681c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006820:	e003      	b.n	800682a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006822:	f7fd ff53 	bl	80046cc <HAL_RCC_GetPCLK1Freq>
 8006826:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800682a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800682e:	69db      	ldr	r3, [r3, #28]
 8006830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006834:	f040 810c 	bne.w	8006a50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006838:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800683c:	2200      	movs	r2, #0
 800683e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006842:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006846:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800684a:	4622      	mov	r2, r4
 800684c:	462b      	mov	r3, r5
 800684e:	1891      	adds	r1, r2, r2
 8006850:	65b9      	str	r1, [r7, #88]	; 0x58
 8006852:	415b      	adcs	r3, r3
 8006854:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006856:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800685a:	4621      	mov	r1, r4
 800685c:	eb12 0801 	adds.w	r8, r2, r1
 8006860:	4629      	mov	r1, r5
 8006862:	eb43 0901 	adc.w	r9, r3, r1
 8006866:	f04f 0200 	mov.w	r2, #0
 800686a:	f04f 0300 	mov.w	r3, #0
 800686e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006872:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006876:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800687a:	4690      	mov	r8, r2
 800687c:	4699      	mov	r9, r3
 800687e:	4623      	mov	r3, r4
 8006880:	eb18 0303 	adds.w	r3, r8, r3
 8006884:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006888:	462b      	mov	r3, r5
 800688a:	eb49 0303 	adc.w	r3, r9, r3
 800688e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800689e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80068a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80068a6:	460b      	mov	r3, r1
 80068a8:	18db      	adds	r3, r3, r3
 80068aa:	653b      	str	r3, [r7, #80]	; 0x50
 80068ac:	4613      	mov	r3, r2
 80068ae:	eb42 0303 	adc.w	r3, r2, r3
 80068b2:	657b      	str	r3, [r7, #84]	; 0x54
 80068b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80068b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80068bc:	f7f9 fcf8 	bl	80002b0 <__aeabi_uldivmod>
 80068c0:	4602      	mov	r2, r0
 80068c2:	460b      	mov	r3, r1
 80068c4:	4b61      	ldr	r3, [pc, #388]	; (8006a4c <UART_SetConfig+0x2d4>)
 80068c6:	fba3 2302 	umull	r2, r3, r3, r2
 80068ca:	095b      	lsrs	r3, r3, #5
 80068cc:	011c      	lsls	r4, r3, #4
 80068ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80068dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80068e0:	4642      	mov	r2, r8
 80068e2:	464b      	mov	r3, r9
 80068e4:	1891      	adds	r1, r2, r2
 80068e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80068e8:	415b      	adcs	r3, r3
 80068ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80068f0:	4641      	mov	r1, r8
 80068f2:	eb12 0a01 	adds.w	sl, r2, r1
 80068f6:	4649      	mov	r1, r9
 80068f8:	eb43 0b01 	adc.w	fp, r3, r1
 80068fc:	f04f 0200 	mov.w	r2, #0
 8006900:	f04f 0300 	mov.w	r3, #0
 8006904:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006908:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800690c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006910:	4692      	mov	sl, r2
 8006912:	469b      	mov	fp, r3
 8006914:	4643      	mov	r3, r8
 8006916:	eb1a 0303 	adds.w	r3, sl, r3
 800691a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800691e:	464b      	mov	r3, r9
 8006920:	eb4b 0303 	adc.w	r3, fp, r3
 8006924:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006934:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006938:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800693c:	460b      	mov	r3, r1
 800693e:	18db      	adds	r3, r3, r3
 8006940:	643b      	str	r3, [r7, #64]	; 0x40
 8006942:	4613      	mov	r3, r2
 8006944:	eb42 0303 	adc.w	r3, r2, r3
 8006948:	647b      	str	r3, [r7, #68]	; 0x44
 800694a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800694e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006952:	f7f9 fcad 	bl	80002b0 <__aeabi_uldivmod>
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	4611      	mov	r1, r2
 800695c:	4b3b      	ldr	r3, [pc, #236]	; (8006a4c <UART_SetConfig+0x2d4>)
 800695e:	fba3 2301 	umull	r2, r3, r3, r1
 8006962:	095b      	lsrs	r3, r3, #5
 8006964:	2264      	movs	r2, #100	; 0x64
 8006966:	fb02 f303 	mul.w	r3, r2, r3
 800696a:	1acb      	subs	r3, r1, r3
 800696c:	00db      	lsls	r3, r3, #3
 800696e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006972:	4b36      	ldr	r3, [pc, #216]	; (8006a4c <UART_SetConfig+0x2d4>)
 8006974:	fba3 2302 	umull	r2, r3, r3, r2
 8006978:	095b      	lsrs	r3, r3, #5
 800697a:	005b      	lsls	r3, r3, #1
 800697c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006980:	441c      	add	r4, r3
 8006982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006986:	2200      	movs	r2, #0
 8006988:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800698c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006990:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006994:	4642      	mov	r2, r8
 8006996:	464b      	mov	r3, r9
 8006998:	1891      	adds	r1, r2, r2
 800699a:	63b9      	str	r1, [r7, #56]	; 0x38
 800699c:	415b      	adcs	r3, r3
 800699e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069a4:	4641      	mov	r1, r8
 80069a6:	1851      	adds	r1, r2, r1
 80069a8:	6339      	str	r1, [r7, #48]	; 0x30
 80069aa:	4649      	mov	r1, r9
 80069ac:	414b      	adcs	r3, r1
 80069ae:	637b      	str	r3, [r7, #52]	; 0x34
 80069b0:	f04f 0200 	mov.w	r2, #0
 80069b4:	f04f 0300 	mov.w	r3, #0
 80069b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80069bc:	4659      	mov	r1, fp
 80069be:	00cb      	lsls	r3, r1, #3
 80069c0:	4651      	mov	r1, sl
 80069c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069c6:	4651      	mov	r1, sl
 80069c8:	00ca      	lsls	r2, r1, #3
 80069ca:	4610      	mov	r0, r2
 80069cc:	4619      	mov	r1, r3
 80069ce:	4603      	mov	r3, r0
 80069d0:	4642      	mov	r2, r8
 80069d2:	189b      	adds	r3, r3, r2
 80069d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069d8:	464b      	mov	r3, r9
 80069da:	460a      	mov	r2, r1
 80069dc:	eb42 0303 	adc.w	r3, r2, r3
 80069e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80069f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80069f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80069f8:	460b      	mov	r3, r1
 80069fa:	18db      	adds	r3, r3, r3
 80069fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80069fe:	4613      	mov	r3, r2
 8006a00:	eb42 0303 	adc.w	r3, r2, r3
 8006a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a0e:	f7f9 fc4f 	bl	80002b0 <__aeabi_uldivmod>
 8006a12:	4602      	mov	r2, r0
 8006a14:	460b      	mov	r3, r1
 8006a16:	4b0d      	ldr	r3, [pc, #52]	; (8006a4c <UART_SetConfig+0x2d4>)
 8006a18:	fba3 1302 	umull	r1, r3, r3, r2
 8006a1c:	095b      	lsrs	r3, r3, #5
 8006a1e:	2164      	movs	r1, #100	; 0x64
 8006a20:	fb01 f303 	mul.w	r3, r1, r3
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	00db      	lsls	r3, r3, #3
 8006a28:	3332      	adds	r3, #50	; 0x32
 8006a2a:	4a08      	ldr	r2, [pc, #32]	; (8006a4c <UART_SetConfig+0x2d4>)
 8006a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a30:	095b      	lsrs	r3, r3, #5
 8006a32:	f003 0207 	and.w	r2, r3, #7
 8006a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4422      	add	r2, r4
 8006a3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a40:	e105      	b.n	8006c4e <UART_SetConfig+0x4d6>
 8006a42:	bf00      	nop
 8006a44:	40011000 	.word	0x40011000
 8006a48:	40011400 	.word	0x40011400
 8006a4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a54:	2200      	movs	r2, #0
 8006a56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006a5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006a62:	4642      	mov	r2, r8
 8006a64:	464b      	mov	r3, r9
 8006a66:	1891      	adds	r1, r2, r2
 8006a68:	6239      	str	r1, [r7, #32]
 8006a6a:	415b      	adcs	r3, r3
 8006a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a72:	4641      	mov	r1, r8
 8006a74:	1854      	adds	r4, r2, r1
 8006a76:	4649      	mov	r1, r9
 8006a78:	eb43 0501 	adc.w	r5, r3, r1
 8006a7c:	f04f 0200 	mov.w	r2, #0
 8006a80:	f04f 0300 	mov.w	r3, #0
 8006a84:	00eb      	lsls	r3, r5, #3
 8006a86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a8a:	00e2      	lsls	r2, r4, #3
 8006a8c:	4614      	mov	r4, r2
 8006a8e:	461d      	mov	r5, r3
 8006a90:	4643      	mov	r3, r8
 8006a92:	18e3      	adds	r3, r4, r3
 8006a94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a98:	464b      	mov	r3, r9
 8006a9a:	eb45 0303 	adc.w	r3, r5, r3
 8006a9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006aae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ab2:	f04f 0200 	mov.w	r2, #0
 8006ab6:	f04f 0300 	mov.w	r3, #0
 8006aba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006abe:	4629      	mov	r1, r5
 8006ac0:	008b      	lsls	r3, r1, #2
 8006ac2:	4621      	mov	r1, r4
 8006ac4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ac8:	4621      	mov	r1, r4
 8006aca:	008a      	lsls	r2, r1, #2
 8006acc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ad0:	f7f9 fbee 	bl	80002b0 <__aeabi_uldivmod>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	4b60      	ldr	r3, [pc, #384]	; (8006c5c <UART_SetConfig+0x4e4>)
 8006ada:	fba3 2302 	umull	r2, r3, r3, r2
 8006ade:	095b      	lsrs	r3, r3, #5
 8006ae0:	011c      	lsls	r4, r3, #4
 8006ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006aec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006af0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006af4:	4642      	mov	r2, r8
 8006af6:	464b      	mov	r3, r9
 8006af8:	1891      	adds	r1, r2, r2
 8006afa:	61b9      	str	r1, [r7, #24]
 8006afc:	415b      	adcs	r3, r3
 8006afe:	61fb      	str	r3, [r7, #28]
 8006b00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b04:	4641      	mov	r1, r8
 8006b06:	1851      	adds	r1, r2, r1
 8006b08:	6139      	str	r1, [r7, #16]
 8006b0a:	4649      	mov	r1, r9
 8006b0c:	414b      	adcs	r3, r1
 8006b0e:	617b      	str	r3, [r7, #20]
 8006b10:	f04f 0200 	mov.w	r2, #0
 8006b14:	f04f 0300 	mov.w	r3, #0
 8006b18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b1c:	4659      	mov	r1, fp
 8006b1e:	00cb      	lsls	r3, r1, #3
 8006b20:	4651      	mov	r1, sl
 8006b22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b26:	4651      	mov	r1, sl
 8006b28:	00ca      	lsls	r2, r1, #3
 8006b2a:	4610      	mov	r0, r2
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	4603      	mov	r3, r0
 8006b30:	4642      	mov	r2, r8
 8006b32:	189b      	adds	r3, r3, r2
 8006b34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b38:	464b      	mov	r3, r9
 8006b3a:	460a      	mov	r2, r1
 8006b3c:	eb42 0303 	adc.w	r3, r2, r3
 8006b40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006b50:	f04f 0200 	mov.w	r2, #0
 8006b54:	f04f 0300 	mov.w	r3, #0
 8006b58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	008b      	lsls	r3, r1, #2
 8006b60:	4641      	mov	r1, r8
 8006b62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b66:	4641      	mov	r1, r8
 8006b68:	008a      	lsls	r2, r1, #2
 8006b6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006b6e:	f7f9 fb9f 	bl	80002b0 <__aeabi_uldivmod>
 8006b72:	4602      	mov	r2, r0
 8006b74:	460b      	mov	r3, r1
 8006b76:	4b39      	ldr	r3, [pc, #228]	; (8006c5c <UART_SetConfig+0x4e4>)
 8006b78:	fba3 1302 	umull	r1, r3, r3, r2
 8006b7c:	095b      	lsrs	r3, r3, #5
 8006b7e:	2164      	movs	r1, #100	; 0x64
 8006b80:	fb01 f303 	mul.w	r3, r1, r3
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	011b      	lsls	r3, r3, #4
 8006b88:	3332      	adds	r3, #50	; 0x32
 8006b8a:	4a34      	ldr	r2, [pc, #208]	; (8006c5c <UART_SetConfig+0x4e4>)
 8006b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b90:	095b      	lsrs	r3, r3, #5
 8006b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b96:	441c      	add	r4, r3
 8006b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	673b      	str	r3, [r7, #112]	; 0x70
 8006ba0:	677a      	str	r2, [r7, #116]	; 0x74
 8006ba2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ba6:	4642      	mov	r2, r8
 8006ba8:	464b      	mov	r3, r9
 8006baa:	1891      	adds	r1, r2, r2
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	415b      	adcs	r3, r3
 8006bb0:	60fb      	str	r3, [r7, #12]
 8006bb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bb6:	4641      	mov	r1, r8
 8006bb8:	1851      	adds	r1, r2, r1
 8006bba:	6039      	str	r1, [r7, #0]
 8006bbc:	4649      	mov	r1, r9
 8006bbe:	414b      	adcs	r3, r1
 8006bc0:	607b      	str	r3, [r7, #4]
 8006bc2:	f04f 0200 	mov.w	r2, #0
 8006bc6:	f04f 0300 	mov.w	r3, #0
 8006bca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006bce:	4659      	mov	r1, fp
 8006bd0:	00cb      	lsls	r3, r1, #3
 8006bd2:	4651      	mov	r1, sl
 8006bd4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bd8:	4651      	mov	r1, sl
 8006bda:	00ca      	lsls	r2, r1, #3
 8006bdc:	4610      	mov	r0, r2
 8006bde:	4619      	mov	r1, r3
 8006be0:	4603      	mov	r3, r0
 8006be2:	4642      	mov	r2, r8
 8006be4:	189b      	adds	r3, r3, r2
 8006be6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006be8:	464b      	mov	r3, r9
 8006bea:	460a      	mov	r2, r1
 8006bec:	eb42 0303 	adc.w	r3, r2, r3
 8006bf0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	663b      	str	r3, [r7, #96]	; 0x60
 8006bfc:	667a      	str	r2, [r7, #100]	; 0x64
 8006bfe:	f04f 0200 	mov.w	r2, #0
 8006c02:	f04f 0300 	mov.w	r3, #0
 8006c06:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	008b      	lsls	r3, r1, #2
 8006c0e:	4641      	mov	r1, r8
 8006c10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c14:	4641      	mov	r1, r8
 8006c16:	008a      	lsls	r2, r1, #2
 8006c18:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c1c:	f7f9 fb48 	bl	80002b0 <__aeabi_uldivmod>
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	4b0d      	ldr	r3, [pc, #52]	; (8006c5c <UART_SetConfig+0x4e4>)
 8006c26:	fba3 1302 	umull	r1, r3, r3, r2
 8006c2a:	095b      	lsrs	r3, r3, #5
 8006c2c:	2164      	movs	r1, #100	; 0x64
 8006c2e:	fb01 f303 	mul.w	r3, r1, r3
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	011b      	lsls	r3, r3, #4
 8006c36:	3332      	adds	r3, #50	; 0x32
 8006c38:	4a08      	ldr	r2, [pc, #32]	; (8006c5c <UART_SetConfig+0x4e4>)
 8006c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c3e:	095b      	lsrs	r3, r3, #5
 8006c40:	f003 020f 	and.w	r2, r3, #15
 8006c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4422      	add	r2, r4
 8006c4c:	609a      	str	r2, [r3, #8]
}
 8006c4e:	bf00      	nop
 8006c50:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006c54:	46bd      	mov	sp, r7
 8006c56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c5a:	bf00      	nop
 8006c5c:	51eb851f 	.word	0x51eb851f

08006c60 <__NVIC_SetPriority>:
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	4603      	mov	r3, r0
 8006c68:	6039      	str	r1, [r7, #0]
 8006c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	db0a      	blt.n	8006c8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	490c      	ldr	r1, [pc, #48]	; (8006cac <__NVIC_SetPriority+0x4c>)
 8006c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c7e:	0112      	lsls	r2, r2, #4
 8006c80:	b2d2      	uxtb	r2, r2
 8006c82:	440b      	add	r3, r1
 8006c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006c88:	e00a      	b.n	8006ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	4908      	ldr	r1, [pc, #32]	; (8006cb0 <__NVIC_SetPriority+0x50>)
 8006c90:	79fb      	ldrb	r3, [r7, #7]
 8006c92:	f003 030f 	and.w	r3, r3, #15
 8006c96:	3b04      	subs	r3, #4
 8006c98:	0112      	lsls	r2, r2, #4
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	440b      	add	r3, r1
 8006c9e:	761a      	strb	r2, [r3, #24]
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	e000e100 	.word	0xe000e100
 8006cb0:	e000ed00 	.word	0xe000ed00

08006cb4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006cb8:	2100      	movs	r1, #0
 8006cba:	f06f 0004 	mvn.w	r0, #4
 8006cbe:	f7ff ffcf 	bl	8006c60 <__NVIC_SetPriority>
#endif
}
 8006cc2:	bf00      	nop
 8006cc4:	bd80      	pop	{r7, pc}
	...

08006cc8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cce:	f3ef 8305 	mrs	r3, IPSR
 8006cd2:	603b      	str	r3, [r7, #0]
  return(result);
 8006cd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006cda:	f06f 0305 	mvn.w	r3, #5
 8006cde:	607b      	str	r3, [r7, #4]
 8006ce0:	e00c      	b.n	8006cfc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006ce2:	4b0a      	ldr	r3, [pc, #40]	; (8006d0c <osKernelInitialize+0x44>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d105      	bne.n	8006cf6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006cea:	4b08      	ldr	r3, [pc, #32]	; (8006d0c <osKernelInitialize+0x44>)
 8006cec:	2201      	movs	r2, #1
 8006cee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	607b      	str	r3, [r7, #4]
 8006cf4:	e002      	b.n	8006cfc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cfa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006cfc:	687b      	ldr	r3, [r7, #4]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	20001594 	.word	0x20001594

08006d10 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d16:	f3ef 8305 	mrs	r3, IPSR
 8006d1a:	603b      	str	r3, [r7, #0]
  return(result);
 8006d1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006d22:	f06f 0305 	mvn.w	r3, #5
 8006d26:	607b      	str	r3, [r7, #4]
 8006d28:	e010      	b.n	8006d4c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006d2a:	4b0b      	ldr	r3, [pc, #44]	; (8006d58 <osKernelStart+0x48>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d109      	bne.n	8006d46 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006d32:	f7ff ffbf 	bl	8006cb4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006d36:	4b08      	ldr	r3, [pc, #32]	; (8006d58 <osKernelStart+0x48>)
 8006d38:	2202      	movs	r2, #2
 8006d3a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006d3c:	f001 fa48 	bl	80081d0 <vTaskStartScheduler>
      stat = osOK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	607b      	str	r3, [r7, #4]
 8006d44:	e002      	b.n	8006d4c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006d46:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d4c:	687b      	ldr	r3, [r7, #4]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	20001594 	.word	0x20001594

08006d5c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b08e      	sub	sp, #56	; 0x38
 8006d60:	af04      	add	r7, sp, #16
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d6c:	f3ef 8305 	mrs	r3, IPSR
 8006d70:	617b      	str	r3, [r7, #20]
  return(result);
 8006d72:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d17e      	bne.n	8006e76 <osThreadNew+0x11a>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d07b      	beq.n	8006e76 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006d7e:	2380      	movs	r3, #128	; 0x80
 8006d80:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006d82:	2318      	movs	r3, #24
 8006d84:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d8e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d045      	beq.n	8006e22 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d002      	beq.n	8006da4 <osThreadNew+0x48>
        name = attr->name;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d008      	beq.n	8006dca <osThreadNew+0x6e>
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	2b38      	cmp	r3, #56	; 0x38
 8006dbc:	d805      	bhi.n	8006dca <osThreadNew+0x6e>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <osThreadNew+0x72>
        return (NULL);
 8006dca:	2300      	movs	r3, #0
 8006dcc:	e054      	b.n	8006e78 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d003      	beq.n	8006dde <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	089b      	lsrs	r3, r3, #2
 8006ddc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00e      	beq.n	8006e04 <osThreadNew+0xa8>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	2b5b      	cmp	r3, #91	; 0x5b
 8006dec:	d90a      	bls.n	8006e04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d006      	beq.n	8006e04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d002      	beq.n	8006e04 <osThreadNew+0xa8>
        mem = 1;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	61bb      	str	r3, [r7, #24]
 8006e02:	e010      	b.n	8006e26 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10c      	bne.n	8006e26 <osThreadNew+0xca>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d108      	bne.n	8006e26 <osThreadNew+0xca>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d104      	bne.n	8006e26 <osThreadNew+0xca>
          mem = 0;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	61bb      	str	r3, [r7, #24]
 8006e20:	e001      	b.n	8006e26 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006e22:	2300      	movs	r3, #0
 8006e24:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d110      	bne.n	8006e4e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e34:	9202      	str	r2, [sp, #8]
 8006e36:	9301      	str	r3, [sp, #4]
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	6a3a      	ldr	r2, [r7, #32]
 8006e40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f000 ffee 	bl	8007e24 <xTaskCreateStatic>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	613b      	str	r3, [r7, #16]
 8006e4c:	e013      	b.n	8006e76 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d110      	bne.n	8006e76 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	f107 0310 	add.w	r3, r7, #16
 8006e5c:	9301      	str	r3, [sp, #4]
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f001 f839 	bl	8007ede <xTaskCreate>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d001      	beq.n	8006e76 <osThreadNew+0x11a>
            hTask = NULL;
 8006e72:	2300      	movs	r3, #0
 8006e74:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006e76:	693b      	ldr	r3, [r7, #16]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3728      	adds	r7, #40	; 0x28
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e88:	f3ef 8305 	mrs	r3, IPSR
 8006e8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d003      	beq.n	8006e9c <osDelay+0x1c>
    stat = osErrorISR;
 8006e94:	f06f 0305 	mvn.w	r3, #5
 8006e98:	60fb      	str	r3, [r7, #12]
 8006e9a:	e007      	b.n	8006eac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d002      	beq.n	8006eac <osDelay+0x2c>
      vTaskDelay(ticks);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f001 f95e 	bl	8008168 <vTaskDelay>
    }
  }

  return (stat);
 8006eac:	68fb      	ldr	r3, [r7, #12]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f002 fb94 	bl	80095ec <pvTimerGetTimerID>
 8006ec4:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d005      	beq.n	8006ed8 <TimerCallback+0x22>
    callb->func (callb->arg);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	6852      	ldr	r2, [r2, #4]
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	4798      	blx	r3
  }
}
 8006ed8:	bf00      	nop
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08c      	sub	sp, #48	; 0x30
 8006ee4:	af02      	add	r7, sp, #8
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	607a      	str	r2, [r7, #4]
 8006eea:	603b      	str	r3, [r7, #0]
 8006eec:	460b      	mov	r3, r1
 8006eee:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ef4:	f3ef 8305 	mrs	r3, IPSR
 8006ef8:	613b      	str	r3, [r7, #16]
  return(result);
 8006efa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d163      	bne.n	8006fc8 <osTimerNew+0xe8>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d060      	beq.n	8006fc8 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8006f06:	2008      	movs	r0, #8
 8006f08:	f002 fdde 	bl	8009ac8 <pvPortMalloc>
 8006f0c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d059      	beq.n	8006fc8 <osTimerNew+0xe8>
      callb->func = func;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8006f20:	7afb      	ldrb	r3, [r7, #11]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d102      	bne.n	8006f2c <osTimerNew+0x4c>
        reload = pdFALSE;
 8006f26:	2300      	movs	r3, #0
 8006f28:	61fb      	str	r3, [r7, #28]
 8006f2a:	e001      	b.n	8006f30 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8006f30:	f04f 33ff 	mov.w	r3, #4294967295
 8006f34:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8006f36:	2300      	movs	r3, #0
 8006f38:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d01c      	beq.n	8006f7a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <osTimerNew+0x6e>
          name = attr->name;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d006      	beq.n	8006f64 <osTimerNew+0x84>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	2b2b      	cmp	r3, #43	; 0x2b
 8006f5c:	d902      	bls.n	8006f64 <osTimerNew+0x84>
          mem = 1;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	61bb      	str	r3, [r7, #24]
 8006f62:	e00c      	b.n	8006f7e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d108      	bne.n	8006f7e <osTimerNew+0x9e>
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d104      	bne.n	8006f7e <osTimerNew+0x9e>
            mem = 0;
 8006f74:	2300      	movs	r3, #0
 8006f76:	61bb      	str	r3, [r7, #24]
 8006f78:	e001      	b.n	8006f7e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d10c      	bne.n	8006f9e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	9301      	str	r3, [sp, #4]
 8006f8a:	4b12      	ldr	r3, [pc, #72]	; (8006fd4 <osTimerNew+0xf4>)
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	69fa      	ldr	r2, [r7, #28]
 8006f92:	2101      	movs	r1, #1
 8006f94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f96:	f001 ffaa 	bl	8008eee <xTimerCreateStatic>
 8006f9a:	6238      	str	r0, [r7, #32]
 8006f9c:	e00b      	b.n	8006fb6 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d108      	bne.n	8006fb6 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8006fa4:	4b0b      	ldr	r3, [pc, #44]	; (8006fd4 <osTimerNew+0xf4>)
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	69fa      	ldr	r2, [r7, #28]
 8006fac:	2101      	movs	r1, #1
 8006fae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fb0:	f001 ff7c 	bl	8008eac <xTimerCreate>
 8006fb4:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d105      	bne.n	8006fc8 <osTimerNew+0xe8>
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d002      	beq.n	8006fc8 <osTimerNew+0xe8>
        vPortFree (callb);
 8006fc2:	6978      	ldr	r0, [r7, #20]
 8006fc4:	f002 fe4c 	bl	8009c60 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3728      	adds	r7, #40	; 0x28
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	08006eb7 	.word	0x08006eb7

08006fd8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b088      	sub	sp, #32
 8006fdc:	af02      	add	r7, sp, #8
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fe6:	f3ef 8305 	mrs	r3, IPSR
 8006fea:	60fb      	str	r3, [r7, #12]
  return(result);
 8006fec:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d003      	beq.n	8006ffa <osTimerStart+0x22>
    stat = osErrorISR;
 8006ff2:	f06f 0305 	mvn.w	r3, #5
 8006ff6:	617b      	str	r3, [r7, #20]
 8006ff8:	e017      	b.n	800702a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d103      	bne.n	8007008 <osTimerStart+0x30>
    stat = osErrorParameter;
 8007000:	f06f 0303 	mvn.w	r3, #3
 8007004:	617b      	str	r3, [r7, #20]
 8007006:	e010      	b.n	800702a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8007008:	2300      	movs	r3, #0
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	2300      	movs	r3, #0
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	2104      	movs	r1, #4
 8007012:	6938      	ldr	r0, [r7, #16]
 8007014:	f001 ffe4 	bl	8008fe0 <xTimerGenericCommand>
 8007018:	4603      	mov	r3, r0
 800701a:	2b01      	cmp	r3, #1
 800701c:	d102      	bne.n	8007024 <osTimerStart+0x4c>
      stat = osOK;
 800701e:	2300      	movs	r3, #0
 8007020:	617b      	str	r3, [r7, #20]
 8007022:	e002      	b.n	800702a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8007024:	f06f 0302 	mvn.w	r3, #2
 8007028:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800702a:	697b      	ldr	r3, [r7, #20]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3718      	adds	r7, #24
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4a07      	ldr	r2, [pc, #28]	; (8007060 <vApplicationGetIdleTaskMemory+0x2c>)
 8007044:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	4a06      	ldr	r2, [pc, #24]	; (8007064 <vApplicationGetIdleTaskMemory+0x30>)
 800704a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2280      	movs	r2, #128	; 0x80
 8007050:	601a      	str	r2, [r3, #0]
}
 8007052:	bf00      	nop
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	20001598 	.word	0x20001598
 8007064:	200015f4 	.word	0x200015f4

08007068 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4a07      	ldr	r2, [pc, #28]	; (8007094 <vApplicationGetTimerTaskMemory+0x2c>)
 8007078:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	4a06      	ldr	r2, [pc, #24]	; (8007098 <vApplicationGetTimerTaskMemory+0x30>)
 800707e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007086:	601a      	str	r2, [r3, #0]
}
 8007088:	bf00      	nop
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	200017f4 	.word	0x200017f4
 8007098:	20001850 	.word	0x20001850

0800709c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f103 0208 	add.w	r2, r3, #8
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f04f 32ff 	mov.w	r2, #4294967295
 80070b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f103 0208 	add.w	r2, r3, #8
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f103 0208 	add.w	r2, r3, #8
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80070ea:	bf00      	nop
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070f6:	b480      	push	{r7}
 80070f8:	b085      	sub	sp, #20
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	1c5a      	adds	r2, r3, #1
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	601a      	str	r2, [r3, #0]
}
 8007132:	bf00      	nop
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800713e:	b480      	push	{r7}
 8007140:	b085      	sub	sp, #20
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007154:	d103      	bne.n	800715e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	e00c      	b.n	8007178 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	3308      	adds	r3, #8
 8007162:	60fb      	str	r3, [r7, #12]
 8007164:	e002      	b.n	800716c <vListInsert+0x2e>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	60fb      	str	r3, [r7, #12]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	429a      	cmp	r2, r3
 8007176:	d2f6      	bcs.n	8007166 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	683a      	ldr	r2, [r7, #0]
 8007186:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	1c5a      	adds	r2, r3, #1
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	601a      	str	r2, [r3, #0]
}
 80071a4:	bf00      	nop
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	6892      	ldr	r2, [r2, #8]
 80071c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	6852      	ldr	r2, [r2, #4]
 80071d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d103      	bne.n	80071e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689a      	ldr	r2, [r3, #8]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	1e5a      	subs	r2, r3, #1
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10a      	bne.n	800722e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721c:	f383 8811 	msr	BASEPRI, r3
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800722a:	bf00      	nop
 800722c:	e7fe      	b.n	800722c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800722e:	f002 fb29 	bl	8009884 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723a:	68f9      	ldr	r1, [r7, #12]
 800723c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800723e:	fb01 f303 	mul.w	r3, r1, r3
 8007242:	441a      	add	r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725e:	3b01      	subs	r3, #1
 8007260:	68f9      	ldr	r1, [r7, #12]
 8007262:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007264:	fb01 f303 	mul.w	r3, r1, r3
 8007268:	441a      	add	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	22ff      	movs	r2, #255	; 0xff
 8007272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	22ff      	movs	r2, #255	; 0xff
 800727a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d114      	bne.n	80072ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d01a      	beq.n	80072c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	3310      	adds	r3, #16
 8007290:	4618      	mov	r0, r3
 8007292:	f001 fa27 	bl	80086e4 <xTaskRemoveFromEventList>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d012      	beq.n	80072c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800729c:	4b0c      	ldr	r3, [pc, #48]	; (80072d0 <xQueueGenericReset+0xcc>)
 800729e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	e009      	b.n	80072c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3310      	adds	r3, #16
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7ff fef2 	bl	800709c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	3324      	adds	r3, #36	; 0x24
 80072bc:	4618      	mov	r0, r3
 80072be:	f7ff feed 	bl	800709c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80072c2:	f002 fb0f 	bl	80098e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80072c6:	2301      	movs	r3, #1
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	e000ed04 	.word	0xe000ed04

080072d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b08e      	sub	sp, #56	; 0x38
 80072d8:	af02      	add	r7, sp, #8
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
 80072e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10a      	bne.n	80072fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80072e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ec:	f383 8811 	msr	BASEPRI, r3
 80072f0:	f3bf 8f6f 	isb	sy
 80072f4:	f3bf 8f4f 	dsb	sy
 80072f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80072fa:	bf00      	nop
 80072fc:	e7fe      	b.n	80072fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10a      	bne.n	800731a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007316:	bf00      	nop
 8007318:	e7fe      	b.n	8007318 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <xQueueGenericCreateStatic+0x52>
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <xQueueGenericCreateStatic+0x56>
 8007326:	2301      	movs	r3, #1
 8007328:	e000      	b.n	800732c <xQueueGenericCreateStatic+0x58>
 800732a:	2300      	movs	r3, #0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10a      	bne.n	8007346 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	623b      	str	r3, [r7, #32]
}
 8007342:	bf00      	nop
 8007344:	e7fe      	b.n	8007344 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d102      	bne.n	8007352 <xQueueGenericCreateStatic+0x7e>
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <xQueueGenericCreateStatic+0x82>
 8007352:	2301      	movs	r3, #1
 8007354:	e000      	b.n	8007358 <xQueueGenericCreateStatic+0x84>
 8007356:	2300      	movs	r3, #0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10a      	bne.n	8007372 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800735c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007360:	f383 8811 	msr	BASEPRI, r3
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	61fb      	str	r3, [r7, #28]
}
 800736e:	bf00      	nop
 8007370:	e7fe      	b.n	8007370 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007372:	2350      	movs	r3, #80	; 0x50
 8007374:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	2b50      	cmp	r3, #80	; 0x50
 800737a:	d00a      	beq.n	8007392 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800737c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007380:	f383 8811 	msr	BASEPRI, r3
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	61bb      	str	r3, [r7, #24]
}
 800738e:	bf00      	nop
 8007390:	e7fe      	b.n	8007390 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007392:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00d      	beq.n	80073ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800739e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80073aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	4613      	mov	r3, r2
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	68b9      	ldr	r1, [r7, #8]
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f000 f805 	bl	80073c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80073ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80073bc:	4618      	mov	r0, r3
 80073be:	3730      	adds	r7, #48	; 0x30
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
 80073d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d103      	bne.n	80073e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	69ba      	ldr	r2, [r7, #24]
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	e002      	b.n	80073e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80073f2:	2101      	movs	r1, #1
 80073f4:	69b8      	ldr	r0, [r7, #24]
 80073f6:	f7ff ff05 	bl	8007204 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	78fa      	ldrb	r2, [r7, #3]
 80073fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007402:	bf00      	nop
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
	...

0800740c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b08e      	sub	sp, #56	; 0x38
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
 8007418:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800741a:	2300      	movs	r3, #0
 800741c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10a      	bne.n	800743e <xQueueGenericSend+0x32>
	__asm volatile
 8007428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742c:	f383 8811 	msr	BASEPRI, r3
 8007430:	f3bf 8f6f 	isb	sy
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800743a:	bf00      	nop
 800743c:	e7fe      	b.n	800743c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d103      	bne.n	800744c <xQueueGenericSend+0x40>
 8007444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007448:	2b00      	cmp	r3, #0
 800744a:	d101      	bne.n	8007450 <xQueueGenericSend+0x44>
 800744c:	2301      	movs	r3, #1
 800744e:	e000      	b.n	8007452 <xQueueGenericSend+0x46>
 8007450:	2300      	movs	r3, #0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10a      	bne.n	800746c <xQueueGenericSend+0x60>
	__asm volatile
 8007456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007468:	bf00      	nop
 800746a:	e7fe      	b.n	800746a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	2b02      	cmp	r3, #2
 8007470:	d103      	bne.n	800747a <xQueueGenericSend+0x6e>
 8007472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007476:	2b01      	cmp	r3, #1
 8007478:	d101      	bne.n	800747e <xQueueGenericSend+0x72>
 800747a:	2301      	movs	r3, #1
 800747c:	e000      	b.n	8007480 <xQueueGenericSend+0x74>
 800747e:	2300      	movs	r3, #0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10a      	bne.n	800749a <xQueueGenericSend+0x8e>
	__asm volatile
 8007484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	623b      	str	r3, [r7, #32]
}
 8007496:	bf00      	nop
 8007498:	e7fe      	b.n	8007498 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800749a:	f001 fae1 	bl	8008a60 <xTaskGetSchedulerState>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d102      	bne.n	80074aa <xQueueGenericSend+0x9e>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <xQueueGenericSend+0xa2>
 80074aa:	2301      	movs	r3, #1
 80074ac:	e000      	b.n	80074b0 <xQueueGenericSend+0xa4>
 80074ae:	2300      	movs	r3, #0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10a      	bne.n	80074ca <xQueueGenericSend+0xbe>
	__asm volatile
 80074b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b8:	f383 8811 	msr	BASEPRI, r3
 80074bc:	f3bf 8f6f 	isb	sy
 80074c0:	f3bf 8f4f 	dsb	sy
 80074c4:	61fb      	str	r3, [r7, #28]
}
 80074c6:	bf00      	nop
 80074c8:	e7fe      	b.n	80074c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074ca:	f002 f9db 	bl	8009884 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d302      	bcc.n	80074e0 <xQueueGenericSend+0xd4>
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d129      	bne.n	8007534 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074e0:	683a      	ldr	r2, [r7, #0]
 80074e2:	68b9      	ldr	r1, [r7, #8]
 80074e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074e6:	f000 fb2f 	bl	8007b48 <prvCopyDataToQueue>
 80074ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d010      	beq.n	8007516 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f6:	3324      	adds	r3, #36	; 0x24
 80074f8:	4618      	mov	r0, r3
 80074fa:	f001 f8f3 	bl	80086e4 <xTaskRemoveFromEventList>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d013      	beq.n	800752c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007504:	4b3f      	ldr	r3, [pc, #252]	; (8007604 <xQueueGenericSend+0x1f8>)
 8007506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800750a:	601a      	str	r2, [r3, #0]
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	e00a      	b.n	800752c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007518:	2b00      	cmp	r3, #0
 800751a:	d007      	beq.n	800752c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800751c:	4b39      	ldr	r3, [pc, #228]	; (8007604 <xQueueGenericSend+0x1f8>)
 800751e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007522:	601a      	str	r2, [r3, #0]
 8007524:	f3bf 8f4f 	dsb	sy
 8007528:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800752c:	f002 f9da 	bl	80098e4 <vPortExitCritical>
				return pdPASS;
 8007530:	2301      	movs	r3, #1
 8007532:	e063      	b.n	80075fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d103      	bne.n	8007542 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800753a:	f002 f9d3 	bl	80098e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800753e:	2300      	movs	r3, #0
 8007540:	e05c      	b.n	80075fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007544:	2b00      	cmp	r3, #0
 8007546:	d106      	bne.n	8007556 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007548:	f107 0314 	add.w	r3, r7, #20
 800754c:	4618      	mov	r0, r3
 800754e:	f001 f92d 	bl	80087ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007552:	2301      	movs	r3, #1
 8007554:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007556:	f002 f9c5 	bl	80098e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800755a:	f000 fe9f 	bl	800829c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800755e:	f002 f991 	bl	8009884 <vPortEnterCritical>
 8007562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007564:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007568:	b25b      	sxtb	r3, r3
 800756a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800756e:	d103      	bne.n	8007578 <xQueueGenericSend+0x16c>
 8007570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007572:	2200      	movs	r2, #0
 8007574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800757e:	b25b      	sxtb	r3, r3
 8007580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007584:	d103      	bne.n	800758e <xQueueGenericSend+0x182>
 8007586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800758e:	f002 f9a9 	bl	80098e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007592:	1d3a      	adds	r2, r7, #4
 8007594:	f107 0314 	add.w	r3, r7, #20
 8007598:	4611      	mov	r1, r2
 800759a:	4618      	mov	r0, r3
 800759c:	f001 f91c 	bl	80087d8 <xTaskCheckForTimeOut>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d124      	bne.n	80075f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80075a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075a8:	f000 fbc6 	bl	8007d38 <prvIsQueueFull>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d018      	beq.n	80075e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	3310      	adds	r3, #16
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	4611      	mov	r1, r2
 80075ba:	4618      	mov	r0, r3
 80075bc:	f001 f842 	bl	8008644 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80075c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075c2:	f000 fb51 	bl	8007c68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80075c6:	f000 fe77 	bl	80082b8 <xTaskResumeAll>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f47f af7c 	bne.w	80074ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80075d2:	4b0c      	ldr	r3, [pc, #48]	; (8007604 <xQueueGenericSend+0x1f8>)
 80075d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	e772      	b.n	80074ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80075e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075e6:	f000 fb3f 	bl	8007c68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075ea:	f000 fe65 	bl	80082b8 <xTaskResumeAll>
 80075ee:	e76c      	b.n	80074ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80075f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075f2:	f000 fb39 	bl	8007c68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075f6:	f000 fe5f 	bl	80082b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80075fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3738      	adds	r7, #56	; 0x38
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	e000ed04 	.word	0xe000ed04

08007608 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b090      	sub	sp, #64	; 0x40
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
 8007614:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10a      	bne.n	8007636 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007632:	bf00      	nop
 8007634:	e7fe      	b.n	8007634 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d103      	bne.n	8007644 <xQueueGenericSendFromISR+0x3c>
 800763c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007640:	2b00      	cmp	r3, #0
 8007642:	d101      	bne.n	8007648 <xQueueGenericSendFromISR+0x40>
 8007644:	2301      	movs	r3, #1
 8007646:	e000      	b.n	800764a <xQueueGenericSendFromISR+0x42>
 8007648:	2300      	movs	r3, #0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10a      	bne.n	8007664 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800764e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007660:	bf00      	nop
 8007662:	e7fe      	b.n	8007662 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	2b02      	cmp	r3, #2
 8007668:	d103      	bne.n	8007672 <xQueueGenericSendFromISR+0x6a>
 800766a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800766e:	2b01      	cmp	r3, #1
 8007670:	d101      	bne.n	8007676 <xQueueGenericSendFromISR+0x6e>
 8007672:	2301      	movs	r3, #1
 8007674:	e000      	b.n	8007678 <xQueueGenericSendFromISR+0x70>
 8007676:	2300      	movs	r3, #0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10a      	bne.n	8007692 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800767c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007680:	f383 8811 	msr	BASEPRI, r3
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	623b      	str	r3, [r7, #32]
}
 800768e:	bf00      	nop
 8007690:	e7fe      	b.n	8007690 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007692:	f002 f9d9 	bl	8009a48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007696:	f3ef 8211 	mrs	r2, BASEPRI
 800769a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	61fa      	str	r2, [r7, #28]
 80076ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80076ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d302      	bcc.n	80076c4 <xQueueGenericSendFromISR+0xbc>
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d12f      	bne.n	8007724 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80076c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80076d4:	683a      	ldr	r2, [r7, #0]
 80076d6:	68b9      	ldr	r1, [r7, #8]
 80076d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076da:	f000 fa35 	bl	8007b48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80076de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80076e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e6:	d112      	bne.n	800770e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d016      	beq.n	800771e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f2:	3324      	adds	r3, #36	; 0x24
 80076f4:	4618      	mov	r0, r3
 80076f6:	f000 fff5 	bl	80086e4 <xTaskRemoveFromEventList>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00e      	beq.n	800771e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00b      	beq.n	800771e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	601a      	str	r2, [r3, #0]
 800770c:	e007      	b.n	800771e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800770e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007712:	3301      	adds	r3, #1
 8007714:	b2db      	uxtb	r3, r3
 8007716:	b25a      	sxtb	r2, r3
 8007718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800771e:	2301      	movs	r3, #1
 8007720:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007722:	e001      	b.n	8007728 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007724:	2300      	movs	r3, #0
 8007726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800772a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007732:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007736:	4618      	mov	r0, r3
 8007738:	3740      	adds	r7, #64	; 0x40
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
	...

08007740 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b08c      	sub	sp, #48	; 0x30
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800774c:	2300      	movs	r3, #0
 800774e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10a      	bne.n	8007770 <xQueueReceive+0x30>
	__asm volatile
 800775a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	623b      	str	r3, [r7, #32]
}
 800776c:	bf00      	nop
 800776e:	e7fe      	b.n	800776e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d103      	bne.n	800777e <xQueueReceive+0x3e>
 8007776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <xQueueReceive+0x42>
 800777e:	2301      	movs	r3, #1
 8007780:	e000      	b.n	8007784 <xQueueReceive+0x44>
 8007782:	2300      	movs	r3, #0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10a      	bne.n	800779e <xQueueReceive+0x5e>
	__asm volatile
 8007788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778c:	f383 8811 	msr	BASEPRI, r3
 8007790:	f3bf 8f6f 	isb	sy
 8007794:	f3bf 8f4f 	dsb	sy
 8007798:	61fb      	str	r3, [r7, #28]
}
 800779a:	bf00      	nop
 800779c:	e7fe      	b.n	800779c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800779e:	f001 f95f 	bl	8008a60 <xTaskGetSchedulerState>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d102      	bne.n	80077ae <xQueueReceive+0x6e>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d101      	bne.n	80077b2 <xQueueReceive+0x72>
 80077ae:	2301      	movs	r3, #1
 80077b0:	e000      	b.n	80077b4 <xQueueReceive+0x74>
 80077b2:	2300      	movs	r3, #0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10a      	bne.n	80077ce <xQueueReceive+0x8e>
	__asm volatile
 80077b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077bc:	f383 8811 	msr	BASEPRI, r3
 80077c0:	f3bf 8f6f 	isb	sy
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	61bb      	str	r3, [r7, #24]
}
 80077ca:	bf00      	nop
 80077cc:	e7fe      	b.n	80077cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077ce:	f002 f859 	bl	8009884 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d01f      	beq.n	800781e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80077de:	68b9      	ldr	r1, [r7, #8]
 80077e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077e2:	f000 fa1b 	bl	8007c1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80077e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e8:	1e5a      	subs	r2, r3, #1
 80077ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00f      	beq.n	8007816 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f8:	3310      	adds	r3, #16
 80077fa:	4618      	mov	r0, r3
 80077fc:	f000 ff72 	bl	80086e4 <xTaskRemoveFromEventList>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d007      	beq.n	8007816 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007806:	4b3d      	ldr	r3, [pc, #244]	; (80078fc <xQueueReceive+0x1bc>)
 8007808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800780c:	601a      	str	r2, [r3, #0]
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007816:	f002 f865 	bl	80098e4 <vPortExitCritical>
				return pdPASS;
 800781a:	2301      	movs	r3, #1
 800781c:	e069      	b.n	80078f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d103      	bne.n	800782c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007824:	f002 f85e 	bl	80098e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007828:	2300      	movs	r3, #0
 800782a:	e062      	b.n	80078f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800782c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782e:	2b00      	cmp	r3, #0
 8007830:	d106      	bne.n	8007840 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007832:	f107 0310 	add.w	r3, r7, #16
 8007836:	4618      	mov	r0, r3
 8007838:	f000 ffb8 	bl	80087ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800783c:	2301      	movs	r3, #1
 800783e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007840:	f002 f850 	bl	80098e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007844:	f000 fd2a 	bl	800829c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007848:	f002 f81c 	bl	8009884 <vPortEnterCritical>
 800784c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007852:	b25b      	sxtb	r3, r3
 8007854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007858:	d103      	bne.n	8007862 <xQueueReceive+0x122>
 800785a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785c:	2200      	movs	r2, #0
 800785e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007864:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007868:	b25b      	sxtb	r3, r3
 800786a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800786e:	d103      	bne.n	8007878 <xQueueReceive+0x138>
 8007870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007872:	2200      	movs	r2, #0
 8007874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007878:	f002 f834 	bl	80098e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800787c:	1d3a      	adds	r2, r7, #4
 800787e:	f107 0310 	add.w	r3, r7, #16
 8007882:	4611      	mov	r1, r2
 8007884:	4618      	mov	r0, r3
 8007886:	f000 ffa7 	bl	80087d8 <xTaskCheckForTimeOut>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d123      	bne.n	80078d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007892:	f000 fa3b 	bl	8007d0c <prvIsQueueEmpty>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d017      	beq.n	80078cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800789c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789e:	3324      	adds	r3, #36	; 0x24
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	4611      	mov	r1, r2
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 fecd 	bl	8008644 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078ac:	f000 f9dc 	bl	8007c68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078b0:	f000 fd02 	bl	80082b8 <xTaskResumeAll>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d189      	bne.n	80077ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80078ba:	4b10      	ldr	r3, [pc, #64]	; (80078fc <xQueueReceive+0x1bc>)
 80078bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078c0:	601a      	str	r2, [r3, #0]
 80078c2:	f3bf 8f4f 	dsb	sy
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	e780      	b.n	80077ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80078cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078ce:	f000 f9cb 	bl	8007c68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078d2:	f000 fcf1 	bl	80082b8 <xTaskResumeAll>
 80078d6:	e77a      	b.n	80077ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80078d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078da:	f000 f9c5 	bl	8007c68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078de:	f000 fceb 	bl	80082b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078e4:	f000 fa12 	bl	8007d0c <prvIsQueueEmpty>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f43f af6f 	beq.w	80077ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80078f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3730      	adds	r7, #48	; 0x30
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	e000ed04 	.word	0xe000ed04

08007900 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b08e      	sub	sp, #56	; 0x38
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800790a:	2300      	movs	r3, #0
 800790c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007912:	2300      	movs	r3, #0
 8007914:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10a      	bne.n	8007932 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800791c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	623b      	str	r3, [r7, #32]
}
 800792e:	bf00      	nop
 8007930:	e7fe      	b.n	8007930 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00a      	beq.n	8007950 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800793a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	61fb      	str	r3, [r7, #28]
}
 800794c:	bf00      	nop
 800794e:	e7fe      	b.n	800794e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007950:	f001 f886 	bl	8008a60 <xTaskGetSchedulerState>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d102      	bne.n	8007960 <xQueueSemaphoreTake+0x60>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d101      	bne.n	8007964 <xQueueSemaphoreTake+0x64>
 8007960:	2301      	movs	r3, #1
 8007962:	e000      	b.n	8007966 <xQueueSemaphoreTake+0x66>
 8007964:	2300      	movs	r3, #0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10a      	bne.n	8007980 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800796a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	61bb      	str	r3, [r7, #24]
}
 800797c:	bf00      	nop
 800797e:	e7fe      	b.n	800797e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007980:	f001 ff80 	bl	8009884 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007988:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800798a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798c:	2b00      	cmp	r3, #0
 800798e:	d024      	beq.n	80079da <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007992:	1e5a      	subs	r2, r3, #1
 8007994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007996:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d104      	bne.n	80079aa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80079a0:	f001 f9d4 	bl	8008d4c <pvTaskIncrementMutexHeldCount>
 80079a4:	4602      	mov	r2, r0
 80079a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00f      	beq.n	80079d2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b4:	3310      	adds	r3, #16
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 fe94 	bl	80086e4 <xTaskRemoveFromEventList>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d007      	beq.n	80079d2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80079c2:	4b54      	ldr	r3, [pc, #336]	; (8007b14 <xQueueSemaphoreTake+0x214>)
 80079c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80079d2:	f001 ff87 	bl	80098e4 <vPortExitCritical>
				return pdPASS;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e097      	b.n	8007b0a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d111      	bne.n	8007a04 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80079e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00a      	beq.n	80079fc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80079e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ea:	f383 8811 	msr	BASEPRI, r3
 80079ee:	f3bf 8f6f 	isb	sy
 80079f2:	f3bf 8f4f 	dsb	sy
 80079f6:	617b      	str	r3, [r7, #20]
}
 80079f8:	bf00      	nop
 80079fa:	e7fe      	b.n	80079fa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80079fc:	f001 ff72 	bl	80098e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a00:	2300      	movs	r3, #0
 8007a02:	e082      	b.n	8007b0a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d106      	bne.n	8007a18 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a0a:	f107 030c 	add.w	r3, r7, #12
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 fecc 	bl	80087ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a14:	2301      	movs	r3, #1
 8007a16:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a18:	f001 ff64 	bl	80098e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a1c:	f000 fc3e 	bl	800829c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a20:	f001 ff30 	bl	8009884 <vPortEnterCritical>
 8007a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a2a:	b25b      	sxtb	r3, r3
 8007a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a30:	d103      	bne.n	8007a3a <xQueueSemaphoreTake+0x13a>
 8007a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a40:	b25b      	sxtb	r3, r3
 8007a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a46:	d103      	bne.n	8007a50 <xQueueSemaphoreTake+0x150>
 8007a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a50:	f001 ff48 	bl	80098e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a54:	463a      	mov	r2, r7
 8007a56:	f107 030c 	add.w	r3, r7, #12
 8007a5a:	4611      	mov	r1, r2
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f000 febb 	bl	80087d8 <xTaskCheckForTimeOut>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d132      	bne.n	8007ace <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a6a:	f000 f94f 	bl	8007d0c <prvIsQueueEmpty>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d026      	beq.n	8007ac2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d109      	bne.n	8007a90 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007a7c:	f001 ff02 	bl	8009884 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	4618      	mov	r0, r3
 8007a86:	f001 f809 	bl	8008a9c <xTaskPriorityInherit>
 8007a8a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007a8c:	f001 ff2a 	bl	80098e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a92:	3324      	adds	r3, #36	; 0x24
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	4611      	mov	r1, r2
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f000 fdd3 	bl	8008644 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007aa0:	f000 f8e2 	bl	8007c68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007aa4:	f000 fc08 	bl	80082b8 <xTaskResumeAll>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f47f af68 	bne.w	8007980 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007ab0:	4b18      	ldr	r3, [pc, #96]	; (8007b14 <xQueueSemaphoreTake+0x214>)
 8007ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ab6:	601a      	str	r2, [r3, #0]
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	f3bf 8f6f 	isb	sy
 8007ac0:	e75e      	b.n	8007980 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007ac2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ac4:	f000 f8d0 	bl	8007c68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ac8:	f000 fbf6 	bl	80082b8 <xTaskResumeAll>
 8007acc:	e758      	b.n	8007980 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007ace:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ad0:	f000 f8ca 	bl	8007c68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ad4:	f000 fbf0 	bl	80082b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ad8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ada:	f000 f917 	bl	8007d0c <prvIsQueueEmpty>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f43f af4d 	beq.w	8007980 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00d      	beq.n	8007b08 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007aec:	f001 feca 	bl	8009884 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007af0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007af2:	f000 f811 	bl	8007b18 <prvGetDisinheritPriorityAfterTimeout>
 8007af6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007afe:	4618      	mov	r0, r3
 8007b00:	f001 f8a2 	bl	8008c48 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007b04:	f001 feee 	bl	80098e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3738      	adds	r7, #56	; 0x38
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	e000ed04 	.word	0xe000ed04

08007b18 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d006      	beq.n	8007b36 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007b32:	60fb      	str	r3, [r7, #12]
 8007b34:	e001      	b.n	8007b3a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007b36:	2300      	movs	r3, #0
 8007b38:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
	}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3714      	adds	r7, #20
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007b54:	2300      	movs	r3, #0
 8007b56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10d      	bne.n	8007b82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d14d      	bne.n	8007c0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	4618      	mov	r0, r3
 8007b74:	f000 fffa 	bl	8008b6c <xTaskPriorityDisinherit>
 8007b78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	609a      	str	r2, [r3, #8]
 8007b80:	e043      	b.n	8007c0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d119      	bne.n	8007bbc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6858      	ldr	r0, [r3, #4]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b90:	461a      	mov	r2, r3
 8007b92:	68b9      	ldr	r1, [r7, #8]
 8007b94:	f004 f89c 	bl	800bcd0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba0:	441a      	add	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	685a      	ldr	r2, [r3, #4]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d32b      	bcc.n	8007c0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	605a      	str	r2, [r3, #4]
 8007bba:	e026      	b.n	8007c0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	68d8      	ldr	r0, [r3, #12]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	68b9      	ldr	r1, [r7, #8]
 8007bc8:	f004 f882 	bl	800bcd0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	68da      	ldr	r2, [r3, #12]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd4:	425b      	negs	r3, r3
 8007bd6:	441a      	add	r2, r3
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	68da      	ldr	r2, [r3, #12]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d207      	bcs.n	8007bf8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf0:	425b      	negs	r3, r3
 8007bf2:	441a      	add	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d105      	bne.n	8007c0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d002      	beq.n	8007c0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	3b01      	subs	r3, #1
 8007c08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	1c5a      	adds	r2, r3, #1
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007c12:	697b      	ldr	r3, [r7, #20]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3718      	adds	r7, #24
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d018      	beq.n	8007c60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	68da      	ldr	r2, [r3, #12]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c36:	441a      	add	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68da      	ldr	r2, [r3, #12]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d303      	bcc.n	8007c50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	68d9      	ldr	r1, [r3, #12]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c58:	461a      	mov	r2, r3
 8007c5a:	6838      	ldr	r0, [r7, #0]
 8007c5c:	f004 f838 	bl	800bcd0 <memcpy>
	}
}
 8007c60:	bf00      	nop
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007c70:	f001 fe08 	bl	8009884 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c7c:	e011      	b.n	8007ca2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d012      	beq.n	8007cac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	3324      	adds	r3, #36	; 0x24
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f000 fd2a 	bl	80086e4 <xTaskRemoveFromEventList>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007c96:	f000 fe01 	bl	800889c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	dce9      	bgt.n	8007c7e <prvUnlockQueue+0x16>
 8007caa:	e000      	b.n	8007cae <prvUnlockQueue+0x46>
					break;
 8007cac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	22ff      	movs	r2, #255	; 0xff
 8007cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007cb6:	f001 fe15 	bl	80098e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007cba:	f001 fde3 	bl	8009884 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cc4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007cc6:	e011      	b.n	8007cec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d012      	beq.n	8007cf6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3310      	adds	r3, #16
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f000 fd05 	bl	80086e4 <xTaskRemoveFromEventList>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d001      	beq.n	8007ce4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ce0:	f000 fddc 	bl	800889c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ce4:	7bbb      	ldrb	r3, [r7, #14]
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007cec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	dce9      	bgt.n	8007cc8 <prvUnlockQueue+0x60>
 8007cf4:	e000      	b.n	8007cf8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007cf6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	22ff      	movs	r2, #255	; 0xff
 8007cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007d00:	f001 fdf0 	bl	80098e4 <vPortExitCritical>
}
 8007d04:	bf00      	nop
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d14:	f001 fdb6 	bl	8009884 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d102      	bne.n	8007d26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007d20:	2301      	movs	r3, #1
 8007d22:	60fb      	str	r3, [r7, #12]
 8007d24:	e001      	b.n	8007d2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007d26:	2300      	movs	r3, #0
 8007d28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d2a:	f001 fddb 	bl	80098e4 <vPortExitCritical>

	return xReturn;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d40:	f001 fda0 	bl	8009884 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d102      	bne.n	8007d56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007d50:	2301      	movs	r3, #1
 8007d52:	60fb      	str	r3, [r7, #12]
 8007d54:	e001      	b.n	8007d5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007d56:	2300      	movs	r3, #0
 8007d58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d5a:	f001 fdc3 	bl	80098e4 <vPortExitCritical>

	return xReturn;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d72:	2300      	movs	r3, #0
 8007d74:	60fb      	str	r3, [r7, #12]
 8007d76:	e014      	b.n	8007da2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007d78:	4a0f      	ldr	r2, [pc, #60]	; (8007db8 <vQueueAddToRegistry+0x50>)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10b      	bne.n	8007d9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007d84:	490c      	ldr	r1, [pc, #48]	; (8007db8 <vQueueAddToRegistry+0x50>)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	683a      	ldr	r2, [r7, #0]
 8007d8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007d8e:	4a0a      	ldr	r2, [pc, #40]	; (8007db8 <vQueueAddToRegistry+0x50>)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	00db      	lsls	r3, r3, #3
 8007d94:	4413      	add	r3, r2
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007d9a:	e006      	b.n	8007daa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	60fb      	str	r3, [r7, #12]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2b07      	cmp	r3, #7
 8007da6:	d9e7      	bls.n	8007d78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007da8:	bf00      	nop
 8007daa:	bf00      	nop
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	20001c50 	.word	0x20001c50

08007dbc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007dcc:	f001 fd5a 	bl	8009884 <vPortEnterCritical>
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007dd6:	b25b      	sxtb	r3, r3
 8007dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ddc:	d103      	bne.n	8007de6 <vQueueWaitForMessageRestricted+0x2a>
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dec:	b25b      	sxtb	r3, r3
 8007dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df2:	d103      	bne.n	8007dfc <vQueueWaitForMessageRestricted+0x40>
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007dfc:	f001 fd72 	bl	80098e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d106      	bne.n	8007e16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	3324      	adds	r3, #36	; 0x24
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	68b9      	ldr	r1, [r7, #8]
 8007e10:	4618      	mov	r0, r3
 8007e12:	f000 fc3b 	bl	800868c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007e16:	6978      	ldr	r0, [r7, #20]
 8007e18:	f7ff ff26 	bl	8007c68 <prvUnlockQueue>
	}
 8007e1c:	bf00      	nop
 8007e1e:	3718      	adds	r7, #24
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b08e      	sub	sp, #56	; 0x38
 8007e28:	af04      	add	r7, sp, #16
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
 8007e30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10a      	bne.n	8007e4e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3c:	f383 8811 	msr	BASEPRI, r3
 8007e40:	f3bf 8f6f 	isb	sy
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	623b      	str	r3, [r7, #32]
}
 8007e4a:	bf00      	nop
 8007e4c:	e7fe      	b.n	8007e4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d10a      	bne.n	8007e6a <xTaskCreateStatic+0x46>
	__asm volatile
 8007e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e58:	f383 8811 	msr	BASEPRI, r3
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	61fb      	str	r3, [r7, #28]
}
 8007e66:	bf00      	nop
 8007e68:	e7fe      	b.n	8007e68 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e6a:	235c      	movs	r3, #92	; 0x5c
 8007e6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	2b5c      	cmp	r3, #92	; 0x5c
 8007e72:	d00a      	beq.n	8007e8a <xTaskCreateStatic+0x66>
	__asm volatile
 8007e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	61bb      	str	r3, [r7, #24]
}
 8007e86:	bf00      	nop
 8007e88:	e7fe      	b.n	8007e88 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e8a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d01e      	beq.n	8007ed0 <xTaskCreateStatic+0xac>
 8007e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d01b      	beq.n	8007ed0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ea0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea4:	2202      	movs	r2, #2
 8007ea6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007eaa:	2300      	movs	r3, #0
 8007eac:	9303      	str	r3, [sp, #12]
 8007eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb0:	9302      	str	r3, [sp, #8]
 8007eb2:	f107 0314 	add.w	r3, r7, #20
 8007eb6:	9301      	str	r3, [sp, #4]
 8007eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	68b9      	ldr	r1, [r7, #8]
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f000 f850 	bl	8007f68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ec8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007eca:	f000 f8dd 	bl	8008088 <prvAddNewTaskToReadyList>
 8007ece:	e001      	b.n	8007ed4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ed4:	697b      	ldr	r3, [r7, #20]
	}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3728      	adds	r7, #40	; 0x28
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b08c      	sub	sp, #48	; 0x30
 8007ee2:	af04      	add	r7, sp, #16
 8007ee4:	60f8      	str	r0, [r7, #12]
 8007ee6:	60b9      	str	r1, [r7, #8]
 8007ee8:	603b      	str	r3, [r7, #0]
 8007eea:	4613      	mov	r3, r2
 8007eec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007eee:	88fb      	ldrh	r3, [r7, #6]
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f001 fde8 	bl	8009ac8 <pvPortMalloc>
 8007ef8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00e      	beq.n	8007f1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007f00:	205c      	movs	r0, #92	; 0x5c
 8007f02:	f001 fde1 	bl	8009ac8 <pvPortMalloc>
 8007f06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d003      	beq.n	8007f16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	631a      	str	r2, [r3, #48]	; 0x30
 8007f14:	e005      	b.n	8007f22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007f16:	6978      	ldr	r0, [r7, #20]
 8007f18:	f001 fea2 	bl	8009c60 <vPortFree>
 8007f1c:	e001      	b.n	8007f22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d017      	beq.n	8007f58 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f30:	88fa      	ldrh	r2, [r7, #6]
 8007f32:	2300      	movs	r3, #0
 8007f34:	9303      	str	r3, [sp, #12]
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	9302      	str	r3, [sp, #8]
 8007f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3c:	9301      	str	r3, [sp, #4]
 8007f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	68b9      	ldr	r1, [r7, #8]
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f000 f80e 	bl	8007f68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f4c:	69f8      	ldr	r0, [r7, #28]
 8007f4e:	f000 f89b 	bl	8008088 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f52:	2301      	movs	r3, #1
 8007f54:	61bb      	str	r3, [r7, #24]
 8007f56:	e002      	b.n	8007f5e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f58:	f04f 33ff 	mov.w	r3, #4294967295
 8007f5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f5e:	69bb      	ldr	r3, [r7, #24]
	}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3720      	adds	r7, #32
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b088      	sub	sp, #32
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
 8007f74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	461a      	mov	r2, r3
 8007f80:	21a5      	movs	r1, #165	; 0xa5
 8007f82:	f003 feb3 	bl	800bcec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f90:	3b01      	subs	r3, #1
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4413      	add	r3, r2
 8007f96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	f023 0307 	bic.w	r3, r3, #7
 8007f9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	f003 0307 	and.w	r3, r3, #7
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00a      	beq.n	8007fc0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	617b      	str	r3, [r7, #20]
}
 8007fbc:	bf00      	nop
 8007fbe:	e7fe      	b.n	8007fbe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d01f      	beq.n	8008006 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	61fb      	str	r3, [r7, #28]
 8007fca:	e012      	b.n	8007ff2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	7819      	ldrb	r1, [r3, #0]
 8007fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	4413      	add	r3, r2
 8007fda:	3334      	adds	r3, #52	; 0x34
 8007fdc:	460a      	mov	r2, r1
 8007fde:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d006      	beq.n	8007ffa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	61fb      	str	r3, [r7, #28]
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	2b0f      	cmp	r3, #15
 8007ff6:	d9e9      	bls.n	8007fcc <prvInitialiseNewTask+0x64>
 8007ff8:	e000      	b.n	8007ffc <prvInitialiseNewTask+0x94>
			{
				break;
 8007ffa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008004:	e003      	b.n	800800e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008008:	2200      	movs	r2, #0
 800800a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800800e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008010:	2b37      	cmp	r3, #55	; 0x37
 8008012:	d901      	bls.n	8008018 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008014:	2337      	movs	r3, #55	; 0x37
 8008016:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800801c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800801e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008022:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	2200      	movs	r2, #0
 8008028:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800802a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802c:	3304      	adds	r3, #4
 800802e:	4618      	mov	r0, r3
 8008030:	f7ff f854 	bl	80070dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008036:	3318      	adds	r3, #24
 8008038:	4618      	mov	r0, r3
 800803a:	f7ff f84f 	bl	80070dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008042:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008046:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800804a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008052:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008056:	2200      	movs	r2, #0
 8008058:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800805a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805c:	2200      	movs	r2, #0
 800805e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008062:	683a      	ldr	r2, [r7, #0]
 8008064:	68f9      	ldr	r1, [r7, #12]
 8008066:	69b8      	ldr	r0, [r7, #24]
 8008068:	f001 fae0 	bl	800962c <pxPortInitialiseStack>
 800806c:	4602      	mov	r2, r0
 800806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008070:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008074:	2b00      	cmp	r3, #0
 8008076:	d002      	beq.n	800807e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800807a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800807c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800807e:	bf00      	nop
 8008080:	3720      	adds	r7, #32
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
	...

08008088 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008090:	f001 fbf8 	bl	8009884 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008094:	4b2d      	ldr	r3, [pc, #180]	; (800814c <prvAddNewTaskToReadyList+0xc4>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	3301      	adds	r3, #1
 800809a:	4a2c      	ldr	r2, [pc, #176]	; (800814c <prvAddNewTaskToReadyList+0xc4>)
 800809c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800809e:	4b2c      	ldr	r3, [pc, #176]	; (8008150 <prvAddNewTaskToReadyList+0xc8>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d109      	bne.n	80080ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80080a6:	4a2a      	ldr	r2, [pc, #168]	; (8008150 <prvAddNewTaskToReadyList+0xc8>)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80080ac:	4b27      	ldr	r3, [pc, #156]	; (800814c <prvAddNewTaskToReadyList+0xc4>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d110      	bne.n	80080d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80080b4:	f000 fc16 	bl	80088e4 <prvInitialiseTaskLists>
 80080b8:	e00d      	b.n	80080d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80080ba:	4b26      	ldr	r3, [pc, #152]	; (8008154 <prvAddNewTaskToReadyList+0xcc>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d109      	bne.n	80080d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80080c2:	4b23      	ldr	r3, [pc, #140]	; (8008150 <prvAddNewTaskToReadyList+0xc8>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d802      	bhi.n	80080d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80080d0:	4a1f      	ldr	r2, [pc, #124]	; (8008150 <prvAddNewTaskToReadyList+0xc8>)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80080d6:	4b20      	ldr	r3, [pc, #128]	; (8008158 <prvAddNewTaskToReadyList+0xd0>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	3301      	adds	r3, #1
 80080dc:	4a1e      	ldr	r2, [pc, #120]	; (8008158 <prvAddNewTaskToReadyList+0xd0>)
 80080de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80080e0:	4b1d      	ldr	r3, [pc, #116]	; (8008158 <prvAddNewTaskToReadyList+0xd0>)
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ec:	4b1b      	ldr	r3, [pc, #108]	; (800815c <prvAddNewTaskToReadyList+0xd4>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d903      	bls.n	80080fc <prvAddNewTaskToReadyList+0x74>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f8:	4a18      	ldr	r2, [pc, #96]	; (800815c <prvAddNewTaskToReadyList+0xd4>)
 80080fa:	6013      	str	r3, [r2, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008100:	4613      	mov	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4a15      	ldr	r2, [pc, #84]	; (8008160 <prvAddNewTaskToReadyList+0xd8>)
 800810a:	441a      	add	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	3304      	adds	r3, #4
 8008110:	4619      	mov	r1, r3
 8008112:	4610      	mov	r0, r2
 8008114:	f7fe ffef 	bl	80070f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008118:	f001 fbe4 	bl	80098e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800811c:	4b0d      	ldr	r3, [pc, #52]	; (8008154 <prvAddNewTaskToReadyList+0xcc>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00e      	beq.n	8008142 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008124:	4b0a      	ldr	r3, [pc, #40]	; (8008150 <prvAddNewTaskToReadyList+0xc8>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812e:	429a      	cmp	r2, r3
 8008130:	d207      	bcs.n	8008142 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008132:	4b0c      	ldr	r3, [pc, #48]	; (8008164 <prvAddNewTaskToReadyList+0xdc>)
 8008134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008138:	601a      	str	r2, [r3, #0]
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008142:	bf00      	nop
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	20002164 	.word	0x20002164
 8008150:	20001c90 	.word	0x20001c90
 8008154:	20002170 	.word	0x20002170
 8008158:	20002180 	.word	0x20002180
 800815c:	2000216c 	.word	0x2000216c
 8008160:	20001c94 	.word	0x20001c94
 8008164:	e000ed04 	.word	0xe000ed04

08008168 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008170:	2300      	movs	r3, #0
 8008172:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d017      	beq.n	80081aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800817a:	4b13      	ldr	r3, [pc, #76]	; (80081c8 <vTaskDelay+0x60>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00a      	beq.n	8008198 <vTaskDelay+0x30>
	__asm volatile
 8008182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008186:	f383 8811 	msr	BASEPRI, r3
 800818a:	f3bf 8f6f 	isb	sy
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	60bb      	str	r3, [r7, #8]
}
 8008194:	bf00      	nop
 8008196:	e7fe      	b.n	8008196 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008198:	f000 f880 	bl	800829c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800819c:	2100      	movs	r1, #0
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fde8 	bl	8008d74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80081a4:	f000 f888 	bl	80082b8 <xTaskResumeAll>
 80081a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d107      	bne.n	80081c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80081b0:	4b06      	ldr	r3, [pc, #24]	; (80081cc <vTaskDelay+0x64>)
 80081b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081b6:	601a      	str	r2, [r3, #0]
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081c0:	bf00      	nop
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	2000218c 	.word	0x2000218c
 80081cc:	e000ed04 	.word	0xe000ed04

080081d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b08a      	sub	sp, #40	; 0x28
 80081d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80081d6:	2300      	movs	r3, #0
 80081d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80081da:	2300      	movs	r3, #0
 80081dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80081de:	463a      	mov	r2, r7
 80081e0:	1d39      	adds	r1, r7, #4
 80081e2:	f107 0308 	add.w	r3, r7, #8
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fe ff24 	bl	8007034 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80081ec:	6839      	ldr	r1, [r7, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	9202      	str	r2, [sp, #8]
 80081f4:	9301      	str	r3, [sp, #4]
 80081f6:	2300      	movs	r3, #0
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	2300      	movs	r3, #0
 80081fc:	460a      	mov	r2, r1
 80081fe:	4921      	ldr	r1, [pc, #132]	; (8008284 <vTaskStartScheduler+0xb4>)
 8008200:	4821      	ldr	r0, [pc, #132]	; (8008288 <vTaskStartScheduler+0xb8>)
 8008202:	f7ff fe0f 	bl	8007e24 <xTaskCreateStatic>
 8008206:	4603      	mov	r3, r0
 8008208:	4a20      	ldr	r2, [pc, #128]	; (800828c <vTaskStartScheduler+0xbc>)
 800820a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800820c:	4b1f      	ldr	r3, [pc, #124]	; (800828c <vTaskStartScheduler+0xbc>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d002      	beq.n	800821a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008214:	2301      	movs	r3, #1
 8008216:	617b      	str	r3, [r7, #20]
 8008218:	e001      	b.n	800821e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800821a:	2300      	movs	r3, #0
 800821c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d102      	bne.n	800822a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008224:	f000 fdfa 	bl	8008e1c <xTimerCreateTimerTask>
 8008228:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d116      	bne.n	800825e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008234:	f383 8811 	msr	BASEPRI, r3
 8008238:	f3bf 8f6f 	isb	sy
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	613b      	str	r3, [r7, #16]
}
 8008242:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008244:	4b12      	ldr	r3, [pc, #72]	; (8008290 <vTaskStartScheduler+0xc0>)
 8008246:	f04f 32ff 	mov.w	r2, #4294967295
 800824a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800824c:	4b11      	ldr	r3, [pc, #68]	; (8008294 <vTaskStartScheduler+0xc4>)
 800824e:	2201      	movs	r2, #1
 8008250:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008252:	4b11      	ldr	r3, [pc, #68]	; (8008298 <vTaskStartScheduler+0xc8>)
 8008254:	2200      	movs	r2, #0
 8008256:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008258:	f001 fa72 	bl	8009740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800825c:	e00e      	b.n	800827c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008264:	d10a      	bne.n	800827c <vTaskStartScheduler+0xac>
	__asm volatile
 8008266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	60fb      	str	r3, [r7, #12]
}
 8008278:	bf00      	nop
 800827a:	e7fe      	b.n	800827a <vTaskStartScheduler+0xaa>
}
 800827c:	bf00      	nop
 800827e:	3718      	adds	r7, #24
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	0800c67c 	.word	0x0800c67c
 8008288:	080088b5 	.word	0x080088b5
 800828c:	20002188 	.word	0x20002188
 8008290:	20002184 	.word	0x20002184
 8008294:	20002170 	.word	0x20002170
 8008298:	20002168 	.word	0x20002168

0800829c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800829c:	b480      	push	{r7}
 800829e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80082a0:	4b04      	ldr	r3, [pc, #16]	; (80082b4 <vTaskSuspendAll+0x18>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3301      	adds	r3, #1
 80082a6:	4a03      	ldr	r2, [pc, #12]	; (80082b4 <vTaskSuspendAll+0x18>)
 80082a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80082aa:	bf00      	nop
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr
 80082b4:	2000218c 	.word	0x2000218c

080082b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80082be:	2300      	movs	r3, #0
 80082c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80082c2:	2300      	movs	r3, #0
 80082c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80082c6:	4b42      	ldr	r3, [pc, #264]	; (80083d0 <xTaskResumeAll+0x118>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10a      	bne.n	80082e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80082ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	603b      	str	r3, [r7, #0]
}
 80082e0:	bf00      	nop
 80082e2:	e7fe      	b.n	80082e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80082e4:	f001 face 	bl	8009884 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80082e8:	4b39      	ldr	r3, [pc, #228]	; (80083d0 <xTaskResumeAll+0x118>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	3b01      	subs	r3, #1
 80082ee:	4a38      	ldr	r2, [pc, #224]	; (80083d0 <xTaskResumeAll+0x118>)
 80082f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082f2:	4b37      	ldr	r3, [pc, #220]	; (80083d0 <xTaskResumeAll+0x118>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d162      	bne.n	80083c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082fa:	4b36      	ldr	r3, [pc, #216]	; (80083d4 <xTaskResumeAll+0x11c>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d05e      	beq.n	80083c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008302:	e02f      	b.n	8008364 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008304:	4b34      	ldr	r3, [pc, #208]	; (80083d8 <xTaskResumeAll+0x120>)
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	3318      	adds	r3, #24
 8008310:	4618      	mov	r0, r3
 8008312:	f7fe ff4d 	bl	80071b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	3304      	adds	r3, #4
 800831a:	4618      	mov	r0, r3
 800831c:	f7fe ff48 	bl	80071b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008324:	4b2d      	ldr	r3, [pc, #180]	; (80083dc <xTaskResumeAll+0x124>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	429a      	cmp	r2, r3
 800832a:	d903      	bls.n	8008334 <xTaskResumeAll+0x7c>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008330:	4a2a      	ldr	r2, [pc, #168]	; (80083dc <xTaskResumeAll+0x124>)
 8008332:	6013      	str	r3, [r2, #0]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008338:	4613      	mov	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4413      	add	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4a27      	ldr	r2, [pc, #156]	; (80083e0 <xTaskResumeAll+0x128>)
 8008342:	441a      	add	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	3304      	adds	r3, #4
 8008348:	4619      	mov	r1, r3
 800834a:	4610      	mov	r0, r2
 800834c:	f7fe fed3 	bl	80070f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008354:	4b23      	ldr	r3, [pc, #140]	; (80083e4 <xTaskResumeAll+0x12c>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835a:	429a      	cmp	r2, r3
 800835c:	d302      	bcc.n	8008364 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800835e:	4b22      	ldr	r3, [pc, #136]	; (80083e8 <xTaskResumeAll+0x130>)
 8008360:	2201      	movs	r2, #1
 8008362:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008364:	4b1c      	ldr	r3, [pc, #112]	; (80083d8 <xTaskResumeAll+0x120>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1cb      	bne.n	8008304 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d001      	beq.n	8008376 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008372:	f000 fb55 	bl	8008a20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008376:	4b1d      	ldr	r3, [pc, #116]	; (80083ec <xTaskResumeAll+0x134>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d010      	beq.n	80083a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008382:	f000 f847 	bl	8008414 <xTaskIncrementTick>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d002      	beq.n	8008392 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800838c:	4b16      	ldr	r3, [pc, #88]	; (80083e8 <xTaskResumeAll+0x130>)
 800838e:	2201      	movs	r2, #1
 8008390:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	3b01      	subs	r3, #1
 8008396:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1f1      	bne.n	8008382 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800839e:	4b13      	ldr	r3, [pc, #76]	; (80083ec <xTaskResumeAll+0x134>)
 80083a0:	2200      	movs	r2, #0
 80083a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80083a4:	4b10      	ldr	r3, [pc, #64]	; (80083e8 <xTaskResumeAll+0x130>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d009      	beq.n	80083c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80083ac:	2301      	movs	r3, #1
 80083ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80083b0:	4b0f      	ldr	r3, [pc, #60]	; (80083f0 <xTaskResumeAll+0x138>)
 80083b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083c0:	f001 fa90 	bl	80098e4 <vPortExitCritical>

	return xAlreadyYielded;
 80083c4:	68bb      	ldr	r3, [r7, #8]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	2000218c 	.word	0x2000218c
 80083d4:	20002164 	.word	0x20002164
 80083d8:	20002124 	.word	0x20002124
 80083dc:	2000216c 	.word	0x2000216c
 80083e0:	20001c94 	.word	0x20001c94
 80083e4:	20001c90 	.word	0x20001c90
 80083e8:	20002178 	.word	0x20002178
 80083ec:	20002174 	.word	0x20002174
 80083f0:	e000ed04 	.word	0xe000ed04

080083f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80083fa:	4b05      	ldr	r3, [pc, #20]	; (8008410 <xTaskGetTickCount+0x1c>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008400:	687b      	ldr	r3, [r7, #4]
}
 8008402:	4618      	mov	r0, r3
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	20002168 	.word	0x20002168

08008414 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800841a:	2300      	movs	r3, #0
 800841c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800841e:	4b4f      	ldr	r3, [pc, #316]	; (800855c <xTaskIncrementTick+0x148>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	f040 808f 	bne.w	8008546 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008428:	4b4d      	ldr	r3, [pc, #308]	; (8008560 <xTaskIncrementTick+0x14c>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	3301      	adds	r3, #1
 800842e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008430:	4a4b      	ldr	r2, [pc, #300]	; (8008560 <xTaskIncrementTick+0x14c>)
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d120      	bne.n	800847e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800843c:	4b49      	ldr	r3, [pc, #292]	; (8008564 <xTaskIncrementTick+0x150>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00a      	beq.n	800845c <xTaskIncrementTick+0x48>
	__asm volatile
 8008446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844a:	f383 8811 	msr	BASEPRI, r3
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	603b      	str	r3, [r7, #0]
}
 8008458:	bf00      	nop
 800845a:	e7fe      	b.n	800845a <xTaskIncrementTick+0x46>
 800845c:	4b41      	ldr	r3, [pc, #260]	; (8008564 <xTaskIncrementTick+0x150>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	60fb      	str	r3, [r7, #12]
 8008462:	4b41      	ldr	r3, [pc, #260]	; (8008568 <xTaskIncrementTick+0x154>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a3f      	ldr	r2, [pc, #252]	; (8008564 <xTaskIncrementTick+0x150>)
 8008468:	6013      	str	r3, [r2, #0]
 800846a:	4a3f      	ldr	r2, [pc, #252]	; (8008568 <xTaskIncrementTick+0x154>)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6013      	str	r3, [r2, #0]
 8008470:	4b3e      	ldr	r3, [pc, #248]	; (800856c <xTaskIncrementTick+0x158>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	3301      	adds	r3, #1
 8008476:	4a3d      	ldr	r2, [pc, #244]	; (800856c <xTaskIncrementTick+0x158>)
 8008478:	6013      	str	r3, [r2, #0]
 800847a:	f000 fad1 	bl	8008a20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800847e:	4b3c      	ldr	r3, [pc, #240]	; (8008570 <xTaskIncrementTick+0x15c>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	429a      	cmp	r2, r3
 8008486:	d349      	bcc.n	800851c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008488:	4b36      	ldr	r3, [pc, #216]	; (8008564 <xTaskIncrementTick+0x150>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d104      	bne.n	800849c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008492:	4b37      	ldr	r3, [pc, #220]	; (8008570 <xTaskIncrementTick+0x15c>)
 8008494:	f04f 32ff 	mov.w	r2, #4294967295
 8008498:	601a      	str	r2, [r3, #0]
					break;
 800849a:	e03f      	b.n	800851c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800849c:	4b31      	ldr	r3, [pc, #196]	; (8008564 <xTaskIncrementTick+0x150>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d203      	bcs.n	80084bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80084b4:	4a2e      	ldr	r2, [pc, #184]	; (8008570 <xTaskIncrementTick+0x15c>)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80084ba:	e02f      	b.n	800851c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	3304      	adds	r3, #4
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7fe fe75 	bl	80071b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d004      	beq.n	80084d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	3318      	adds	r3, #24
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fe fe6c 	bl	80071b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084dc:	4b25      	ldr	r3, [pc, #148]	; (8008574 <xTaskIncrementTick+0x160>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d903      	bls.n	80084ec <xTaskIncrementTick+0xd8>
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e8:	4a22      	ldr	r2, [pc, #136]	; (8008574 <xTaskIncrementTick+0x160>)
 80084ea:	6013      	str	r3, [r2, #0]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f0:	4613      	mov	r3, r2
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	4413      	add	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4a1f      	ldr	r2, [pc, #124]	; (8008578 <xTaskIncrementTick+0x164>)
 80084fa:	441a      	add	r2, r3
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	3304      	adds	r3, #4
 8008500:	4619      	mov	r1, r3
 8008502:	4610      	mov	r0, r2
 8008504:	f7fe fdf7 	bl	80070f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800850c:	4b1b      	ldr	r3, [pc, #108]	; (800857c <xTaskIncrementTick+0x168>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008512:	429a      	cmp	r2, r3
 8008514:	d3b8      	bcc.n	8008488 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008516:	2301      	movs	r3, #1
 8008518:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800851a:	e7b5      	b.n	8008488 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800851c:	4b17      	ldr	r3, [pc, #92]	; (800857c <xTaskIncrementTick+0x168>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008522:	4915      	ldr	r1, [pc, #84]	; (8008578 <xTaskIncrementTick+0x164>)
 8008524:	4613      	mov	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4413      	add	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	440b      	add	r3, r1
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d901      	bls.n	8008538 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008534:	2301      	movs	r3, #1
 8008536:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008538:	4b11      	ldr	r3, [pc, #68]	; (8008580 <xTaskIncrementTick+0x16c>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d007      	beq.n	8008550 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008540:	2301      	movs	r3, #1
 8008542:	617b      	str	r3, [r7, #20]
 8008544:	e004      	b.n	8008550 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008546:	4b0f      	ldr	r3, [pc, #60]	; (8008584 <xTaskIncrementTick+0x170>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	3301      	adds	r3, #1
 800854c:	4a0d      	ldr	r2, [pc, #52]	; (8008584 <xTaskIncrementTick+0x170>)
 800854e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008550:	697b      	ldr	r3, [r7, #20]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3718      	adds	r7, #24
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	2000218c 	.word	0x2000218c
 8008560:	20002168 	.word	0x20002168
 8008564:	2000211c 	.word	0x2000211c
 8008568:	20002120 	.word	0x20002120
 800856c:	2000217c 	.word	0x2000217c
 8008570:	20002184 	.word	0x20002184
 8008574:	2000216c 	.word	0x2000216c
 8008578:	20001c94 	.word	0x20001c94
 800857c:	20001c90 	.word	0x20001c90
 8008580:	20002178 	.word	0x20002178
 8008584:	20002174 	.word	0x20002174

08008588 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800858e:	4b28      	ldr	r3, [pc, #160]	; (8008630 <vTaskSwitchContext+0xa8>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d003      	beq.n	800859e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008596:	4b27      	ldr	r3, [pc, #156]	; (8008634 <vTaskSwitchContext+0xac>)
 8008598:	2201      	movs	r2, #1
 800859a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800859c:	e041      	b.n	8008622 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800859e:	4b25      	ldr	r3, [pc, #148]	; (8008634 <vTaskSwitchContext+0xac>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085a4:	4b24      	ldr	r3, [pc, #144]	; (8008638 <vTaskSwitchContext+0xb0>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	60fb      	str	r3, [r7, #12]
 80085aa:	e010      	b.n	80085ce <vTaskSwitchContext+0x46>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10a      	bne.n	80085c8 <vTaskSwitchContext+0x40>
	__asm volatile
 80085b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	607b      	str	r3, [r7, #4]
}
 80085c4:	bf00      	nop
 80085c6:	e7fe      	b.n	80085c6 <vTaskSwitchContext+0x3e>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	3b01      	subs	r3, #1
 80085cc:	60fb      	str	r3, [r7, #12]
 80085ce:	491b      	ldr	r1, [pc, #108]	; (800863c <vTaskSwitchContext+0xb4>)
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	4613      	mov	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4413      	add	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	440b      	add	r3, r1
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d0e4      	beq.n	80085ac <vTaskSwitchContext+0x24>
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	4613      	mov	r3, r2
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4413      	add	r3, r2
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	4a13      	ldr	r2, [pc, #76]	; (800863c <vTaskSwitchContext+0xb4>)
 80085ee:	4413      	add	r3, r2
 80085f0:	60bb      	str	r3, [r7, #8]
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	685a      	ldr	r2, [r3, #4]
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	605a      	str	r2, [r3, #4]
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	685a      	ldr	r2, [r3, #4]
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	3308      	adds	r3, #8
 8008604:	429a      	cmp	r2, r3
 8008606:	d104      	bne.n	8008612 <vTaskSwitchContext+0x8a>
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	685a      	ldr	r2, [r3, #4]
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	605a      	str	r2, [r3, #4]
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	4a09      	ldr	r2, [pc, #36]	; (8008640 <vTaskSwitchContext+0xb8>)
 800861a:	6013      	str	r3, [r2, #0]
 800861c:	4a06      	ldr	r2, [pc, #24]	; (8008638 <vTaskSwitchContext+0xb0>)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6013      	str	r3, [r2, #0]
}
 8008622:	bf00      	nop
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	2000218c 	.word	0x2000218c
 8008634:	20002178 	.word	0x20002178
 8008638:	2000216c 	.word	0x2000216c
 800863c:	20001c94 	.word	0x20001c94
 8008640:	20001c90 	.word	0x20001c90

08008644 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10a      	bne.n	800866a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	60fb      	str	r3, [r7, #12]
}
 8008666:	bf00      	nop
 8008668:	e7fe      	b.n	8008668 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800866a:	4b07      	ldr	r3, [pc, #28]	; (8008688 <vTaskPlaceOnEventList+0x44>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	3318      	adds	r3, #24
 8008670:	4619      	mov	r1, r3
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f7fe fd63 	bl	800713e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008678:	2101      	movs	r1, #1
 800867a:	6838      	ldr	r0, [r7, #0]
 800867c:	f000 fb7a 	bl	8008d74 <prvAddCurrentTaskToDelayedList>
}
 8008680:	bf00      	nop
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	20001c90 	.word	0x20001c90

0800868c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800868c:	b580      	push	{r7, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10a      	bne.n	80086b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	617b      	str	r3, [r7, #20]
}
 80086b0:	bf00      	nop
 80086b2:	e7fe      	b.n	80086b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80086b4:	4b0a      	ldr	r3, [pc, #40]	; (80086e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	3318      	adds	r3, #24
 80086ba:	4619      	mov	r1, r3
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f7fe fd1a 	bl	80070f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d002      	beq.n	80086ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80086c8:	f04f 33ff 	mov.w	r3, #4294967295
 80086cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80086ce:	6879      	ldr	r1, [r7, #4]
 80086d0:	68b8      	ldr	r0, [r7, #8]
 80086d2:	f000 fb4f 	bl	8008d74 <prvAddCurrentTaskToDelayedList>
	}
 80086d6:	bf00      	nop
 80086d8:	3718      	adds	r7, #24
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	20001c90 	.word	0x20001c90

080086e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d10a      	bne.n	8008710 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80086fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fe:	f383 8811 	msr	BASEPRI, r3
 8008702:	f3bf 8f6f 	isb	sy
 8008706:	f3bf 8f4f 	dsb	sy
 800870a:	60fb      	str	r3, [r7, #12]
}
 800870c:	bf00      	nop
 800870e:	e7fe      	b.n	800870e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	3318      	adds	r3, #24
 8008714:	4618      	mov	r0, r3
 8008716:	f7fe fd4b 	bl	80071b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800871a:	4b1e      	ldr	r3, [pc, #120]	; (8008794 <xTaskRemoveFromEventList+0xb0>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d11d      	bne.n	800875e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	3304      	adds	r3, #4
 8008726:	4618      	mov	r0, r3
 8008728:	f7fe fd42 	bl	80071b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008730:	4b19      	ldr	r3, [pc, #100]	; (8008798 <xTaskRemoveFromEventList+0xb4>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	429a      	cmp	r2, r3
 8008736:	d903      	bls.n	8008740 <xTaskRemoveFromEventList+0x5c>
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873c:	4a16      	ldr	r2, [pc, #88]	; (8008798 <xTaskRemoveFromEventList+0xb4>)
 800873e:	6013      	str	r3, [r2, #0]
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008744:	4613      	mov	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	4413      	add	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4a13      	ldr	r2, [pc, #76]	; (800879c <xTaskRemoveFromEventList+0xb8>)
 800874e:	441a      	add	r2, r3
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	3304      	adds	r3, #4
 8008754:	4619      	mov	r1, r3
 8008756:	4610      	mov	r0, r2
 8008758:	f7fe fccd 	bl	80070f6 <vListInsertEnd>
 800875c:	e005      	b.n	800876a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	3318      	adds	r3, #24
 8008762:	4619      	mov	r1, r3
 8008764:	480e      	ldr	r0, [pc, #56]	; (80087a0 <xTaskRemoveFromEventList+0xbc>)
 8008766:	f7fe fcc6 	bl	80070f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800876e:	4b0d      	ldr	r3, [pc, #52]	; (80087a4 <xTaskRemoveFromEventList+0xc0>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008774:	429a      	cmp	r2, r3
 8008776:	d905      	bls.n	8008784 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008778:	2301      	movs	r3, #1
 800877a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800877c:	4b0a      	ldr	r3, [pc, #40]	; (80087a8 <xTaskRemoveFromEventList+0xc4>)
 800877e:	2201      	movs	r2, #1
 8008780:	601a      	str	r2, [r3, #0]
 8008782:	e001      	b.n	8008788 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008784:	2300      	movs	r3, #0
 8008786:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008788:	697b      	ldr	r3, [r7, #20]
}
 800878a:	4618      	mov	r0, r3
 800878c:	3718      	adds	r7, #24
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	2000218c 	.word	0x2000218c
 8008798:	2000216c 	.word	0x2000216c
 800879c:	20001c94 	.word	0x20001c94
 80087a0:	20002124 	.word	0x20002124
 80087a4:	20001c90 	.word	0x20001c90
 80087a8:	20002178 	.word	0x20002178

080087ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80087b4:	4b06      	ldr	r3, [pc, #24]	; (80087d0 <vTaskInternalSetTimeOutState+0x24>)
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80087bc:	4b05      	ldr	r3, [pc, #20]	; (80087d4 <vTaskInternalSetTimeOutState+0x28>)
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	605a      	str	r2, [r3, #4]
}
 80087c4:	bf00      	nop
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	2000217c 	.word	0x2000217c
 80087d4:	20002168 	.word	0x20002168

080087d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b088      	sub	sp, #32
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d10a      	bne.n	80087fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80087e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ec:	f383 8811 	msr	BASEPRI, r3
 80087f0:	f3bf 8f6f 	isb	sy
 80087f4:	f3bf 8f4f 	dsb	sy
 80087f8:	613b      	str	r3, [r7, #16]
}
 80087fa:	bf00      	nop
 80087fc:	e7fe      	b.n	80087fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d10a      	bne.n	800881a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008808:	f383 8811 	msr	BASEPRI, r3
 800880c:	f3bf 8f6f 	isb	sy
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	60fb      	str	r3, [r7, #12]
}
 8008816:	bf00      	nop
 8008818:	e7fe      	b.n	8008818 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800881a:	f001 f833 	bl	8009884 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800881e:	4b1d      	ldr	r3, [pc, #116]	; (8008894 <xTaskCheckForTimeOut+0xbc>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	69ba      	ldr	r2, [r7, #24]
 800882a:	1ad3      	subs	r3, r2, r3
 800882c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008836:	d102      	bne.n	800883e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008838:	2300      	movs	r3, #0
 800883a:	61fb      	str	r3, [r7, #28]
 800883c:	e023      	b.n	8008886 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	4b15      	ldr	r3, [pc, #84]	; (8008898 <xTaskCheckForTimeOut+0xc0>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	429a      	cmp	r2, r3
 8008848:	d007      	beq.n	800885a <xTaskCheckForTimeOut+0x82>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	69ba      	ldr	r2, [r7, #24]
 8008850:	429a      	cmp	r2, r3
 8008852:	d302      	bcc.n	800885a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008854:	2301      	movs	r3, #1
 8008856:	61fb      	str	r3, [r7, #28]
 8008858:	e015      	b.n	8008886 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	429a      	cmp	r2, r3
 8008862:	d20b      	bcs.n	800887c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	1ad2      	subs	r2, r2, r3
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7ff ff9b 	bl	80087ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008876:	2300      	movs	r3, #0
 8008878:	61fb      	str	r3, [r7, #28]
 800887a:	e004      	b.n	8008886 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	2200      	movs	r2, #0
 8008880:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008882:	2301      	movs	r3, #1
 8008884:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008886:	f001 f82d 	bl	80098e4 <vPortExitCritical>

	return xReturn;
 800888a:	69fb      	ldr	r3, [r7, #28]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3720      	adds	r7, #32
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	20002168 	.word	0x20002168
 8008898:	2000217c 	.word	0x2000217c

0800889c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800889c:	b480      	push	{r7}
 800889e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80088a0:	4b03      	ldr	r3, [pc, #12]	; (80088b0 <vTaskMissedYield+0x14>)
 80088a2:	2201      	movs	r2, #1
 80088a4:	601a      	str	r2, [r3, #0]
}
 80088a6:	bf00      	nop
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr
 80088b0:	20002178 	.word	0x20002178

080088b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80088bc:	f000 f852 	bl	8008964 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80088c0:	4b06      	ldr	r3, [pc, #24]	; (80088dc <prvIdleTask+0x28>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d9f9      	bls.n	80088bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80088c8:	4b05      	ldr	r3, [pc, #20]	; (80088e0 <prvIdleTask+0x2c>)
 80088ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088ce:	601a      	str	r2, [r3, #0]
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80088d8:	e7f0      	b.n	80088bc <prvIdleTask+0x8>
 80088da:	bf00      	nop
 80088dc:	20001c94 	.word	0x20001c94
 80088e0:	e000ed04 	.word	0xe000ed04

080088e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088ea:	2300      	movs	r3, #0
 80088ec:	607b      	str	r3, [r7, #4]
 80088ee:	e00c      	b.n	800890a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	4613      	mov	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4413      	add	r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4a12      	ldr	r2, [pc, #72]	; (8008944 <prvInitialiseTaskLists+0x60>)
 80088fc:	4413      	add	r3, r2
 80088fe:	4618      	mov	r0, r3
 8008900:	f7fe fbcc 	bl	800709c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	3301      	adds	r3, #1
 8008908:	607b      	str	r3, [r7, #4]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2b37      	cmp	r3, #55	; 0x37
 800890e:	d9ef      	bls.n	80088f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008910:	480d      	ldr	r0, [pc, #52]	; (8008948 <prvInitialiseTaskLists+0x64>)
 8008912:	f7fe fbc3 	bl	800709c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008916:	480d      	ldr	r0, [pc, #52]	; (800894c <prvInitialiseTaskLists+0x68>)
 8008918:	f7fe fbc0 	bl	800709c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800891c:	480c      	ldr	r0, [pc, #48]	; (8008950 <prvInitialiseTaskLists+0x6c>)
 800891e:	f7fe fbbd 	bl	800709c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008922:	480c      	ldr	r0, [pc, #48]	; (8008954 <prvInitialiseTaskLists+0x70>)
 8008924:	f7fe fbba 	bl	800709c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008928:	480b      	ldr	r0, [pc, #44]	; (8008958 <prvInitialiseTaskLists+0x74>)
 800892a:	f7fe fbb7 	bl	800709c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800892e:	4b0b      	ldr	r3, [pc, #44]	; (800895c <prvInitialiseTaskLists+0x78>)
 8008930:	4a05      	ldr	r2, [pc, #20]	; (8008948 <prvInitialiseTaskLists+0x64>)
 8008932:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008934:	4b0a      	ldr	r3, [pc, #40]	; (8008960 <prvInitialiseTaskLists+0x7c>)
 8008936:	4a05      	ldr	r2, [pc, #20]	; (800894c <prvInitialiseTaskLists+0x68>)
 8008938:	601a      	str	r2, [r3, #0]
}
 800893a:	bf00      	nop
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	20001c94 	.word	0x20001c94
 8008948:	200020f4 	.word	0x200020f4
 800894c:	20002108 	.word	0x20002108
 8008950:	20002124 	.word	0x20002124
 8008954:	20002138 	.word	0x20002138
 8008958:	20002150 	.word	0x20002150
 800895c:	2000211c 	.word	0x2000211c
 8008960:	20002120 	.word	0x20002120

08008964 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800896a:	e019      	b.n	80089a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800896c:	f000 ff8a 	bl	8009884 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008970:	4b10      	ldr	r3, [pc, #64]	; (80089b4 <prvCheckTasksWaitingTermination+0x50>)
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	3304      	adds	r3, #4
 800897c:	4618      	mov	r0, r3
 800897e:	f7fe fc17 	bl	80071b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008982:	4b0d      	ldr	r3, [pc, #52]	; (80089b8 <prvCheckTasksWaitingTermination+0x54>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	3b01      	subs	r3, #1
 8008988:	4a0b      	ldr	r2, [pc, #44]	; (80089b8 <prvCheckTasksWaitingTermination+0x54>)
 800898a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800898c:	4b0b      	ldr	r3, [pc, #44]	; (80089bc <prvCheckTasksWaitingTermination+0x58>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	3b01      	subs	r3, #1
 8008992:	4a0a      	ldr	r2, [pc, #40]	; (80089bc <prvCheckTasksWaitingTermination+0x58>)
 8008994:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008996:	f000 ffa5 	bl	80098e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f810 	bl	80089c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089a0:	4b06      	ldr	r3, [pc, #24]	; (80089bc <prvCheckTasksWaitingTermination+0x58>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d1e1      	bne.n	800896c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80089a8:	bf00      	nop
 80089aa:	bf00      	nop
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	20002138 	.word	0x20002138
 80089b8:	20002164 	.word	0x20002164
 80089bc:	2000214c 	.word	0x2000214c

080089c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d108      	bne.n	80089e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d6:	4618      	mov	r0, r3
 80089d8:	f001 f942 	bl	8009c60 <vPortFree>
				vPortFree( pxTCB );
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f001 f93f 	bl	8009c60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80089e2:	e018      	b.n	8008a16 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d103      	bne.n	80089f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f001 f936 	bl	8009c60 <vPortFree>
	}
 80089f4:	e00f      	b.n	8008a16 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	d00a      	beq.n	8008a16 <prvDeleteTCB+0x56>
	__asm volatile
 8008a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a04:	f383 8811 	msr	BASEPRI, r3
 8008a08:	f3bf 8f6f 	isb	sy
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	60fb      	str	r3, [r7, #12]
}
 8008a12:	bf00      	nop
 8008a14:	e7fe      	b.n	8008a14 <prvDeleteTCB+0x54>
	}
 8008a16:	bf00      	nop
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
	...

08008a20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a26:	4b0c      	ldr	r3, [pc, #48]	; (8008a58 <prvResetNextTaskUnblockTime+0x38>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d104      	bne.n	8008a3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a30:	4b0a      	ldr	r3, [pc, #40]	; (8008a5c <prvResetNextTaskUnblockTime+0x3c>)
 8008a32:	f04f 32ff 	mov.w	r2, #4294967295
 8008a36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008a38:	e008      	b.n	8008a4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a3a:	4b07      	ldr	r3, [pc, #28]	; (8008a58 <prvResetNextTaskUnblockTime+0x38>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	4a04      	ldr	r2, [pc, #16]	; (8008a5c <prvResetNextTaskUnblockTime+0x3c>)
 8008a4a:	6013      	str	r3, [r2, #0]
}
 8008a4c:	bf00      	nop
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr
 8008a58:	2000211c 	.word	0x2000211c
 8008a5c:	20002184 	.word	0x20002184

08008a60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008a66:	4b0b      	ldr	r3, [pc, #44]	; (8008a94 <xTaskGetSchedulerState+0x34>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d102      	bne.n	8008a74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	607b      	str	r3, [r7, #4]
 8008a72:	e008      	b.n	8008a86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a74:	4b08      	ldr	r3, [pc, #32]	; (8008a98 <xTaskGetSchedulerState+0x38>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d102      	bne.n	8008a82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	607b      	str	r3, [r7, #4]
 8008a80:	e001      	b.n	8008a86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a82:	2300      	movs	r3, #0
 8008a84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a86:	687b      	ldr	r3, [r7, #4]
	}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr
 8008a94:	20002170 	.word	0x20002170
 8008a98:	2000218c 	.word	0x2000218c

08008a9c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d051      	beq.n	8008b56 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab6:	4b2a      	ldr	r3, [pc, #168]	; (8008b60 <xTaskPriorityInherit+0xc4>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d241      	bcs.n	8008b44 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	db06      	blt.n	8008ad6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ac8:	4b25      	ldr	r3, [pc, #148]	; (8008b60 <xTaskPriorityInherit+0xc4>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ace:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	6959      	ldr	r1, [r3, #20]
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ade:	4613      	mov	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	4413      	add	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4a1f      	ldr	r2, [pc, #124]	; (8008b64 <xTaskPriorityInherit+0xc8>)
 8008ae8:	4413      	add	r3, r2
 8008aea:	4299      	cmp	r1, r3
 8008aec:	d122      	bne.n	8008b34 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	3304      	adds	r3, #4
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7fe fb5c 	bl	80071b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008af8:	4b19      	ldr	r3, [pc, #100]	; (8008b60 <xTaskPriorityInherit+0xc4>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b06:	4b18      	ldr	r3, [pc, #96]	; (8008b68 <xTaskPriorityInherit+0xcc>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d903      	bls.n	8008b16 <xTaskPriorityInherit+0x7a>
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b12:	4a15      	ldr	r2, [pc, #84]	; (8008b68 <xTaskPriorityInherit+0xcc>)
 8008b14:	6013      	str	r3, [r2, #0]
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	4413      	add	r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4a10      	ldr	r2, [pc, #64]	; (8008b64 <xTaskPriorityInherit+0xc8>)
 8008b24:	441a      	add	r2, r3
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	3304      	adds	r3, #4
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	4610      	mov	r0, r2
 8008b2e:	f7fe fae2 	bl	80070f6 <vListInsertEnd>
 8008b32:	e004      	b.n	8008b3e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008b34:	4b0a      	ldr	r3, [pc, #40]	; (8008b60 <xTaskPriorityInherit+0xc4>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	60fb      	str	r3, [r7, #12]
 8008b42:	e008      	b.n	8008b56 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b48:	4b05      	ldr	r3, [pc, #20]	; (8008b60 <xTaskPriorityInherit+0xc4>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d201      	bcs.n	8008b56 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008b52:	2301      	movs	r3, #1
 8008b54:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b56:	68fb      	ldr	r3, [r7, #12]
	}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	20001c90 	.word	0x20001c90
 8008b64:	20001c94 	.word	0x20001c94
 8008b68:	2000216c 	.word	0x2000216c

08008b6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b086      	sub	sp, #24
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d056      	beq.n	8008c30 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008b82:	4b2e      	ldr	r3, [pc, #184]	; (8008c3c <xTaskPriorityDisinherit+0xd0>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	693a      	ldr	r2, [r7, #16]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d00a      	beq.n	8008ba2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b90:	f383 8811 	msr	BASEPRI, r3
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	f3bf 8f4f 	dsb	sy
 8008b9c:	60fb      	str	r3, [r7, #12]
}
 8008b9e:	bf00      	nop
 8008ba0:	e7fe      	b.n	8008ba0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10a      	bne.n	8008bc0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	60bb      	str	r3, [r7, #8]
}
 8008bbc:	bf00      	nop
 8008bbe:	e7fe      	b.n	8008bbe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bc4:	1e5a      	subs	r2, r3, #1
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d02c      	beq.n	8008c30 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d128      	bne.n	8008c30 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	3304      	adds	r3, #4
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7fe fae4 	bl	80071b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c00:	4b0f      	ldr	r3, [pc, #60]	; (8008c40 <xTaskPriorityDisinherit+0xd4>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d903      	bls.n	8008c10 <xTaskPriorityDisinherit+0xa4>
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0c:	4a0c      	ldr	r2, [pc, #48]	; (8008c40 <xTaskPriorityDisinherit+0xd4>)
 8008c0e:	6013      	str	r3, [r2, #0]
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c14:	4613      	mov	r3, r2
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	4413      	add	r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4a09      	ldr	r2, [pc, #36]	; (8008c44 <xTaskPriorityDisinherit+0xd8>)
 8008c1e:	441a      	add	r2, r3
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	3304      	adds	r3, #4
 8008c24:	4619      	mov	r1, r3
 8008c26:	4610      	mov	r0, r2
 8008c28:	f7fe fa65 	bl	80070f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c30:	697b      	ldr	r3, [r7, #20]
	}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	20001c90 	.word	0x20001c90
 8008c40:	2000216c 	.word	0x2000216c
 8008c44:	20001c94 	.word	0x20001c94

08008c48 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b088      	sub	sp, #32
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008c56:	2301      	movs	r3, #1
 8008c58:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d06a      	beq.n	8008d36 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10a      	bne.n	8008c7e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6c:	f383 8811 	msr	BASEPRI, r3
 8008c70:	f3bf 8f6f 	isb	sy
 8008c74:	f3bf 8f4f 	dsb	sy
 8008c78:	60fb      	str	r3, [r7, #12]
}
 8008c7a:	bf00      	nop
 8008c7c:	e7fe      	b.n	8008c7c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c82:	683a      	ldr	r2, [r7, #0]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d902      	bls.n	8008c8e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	61fb      	str	r3, [r7, #28]
 8008c8c:	e002      	b.n	8008c94 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c92:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c98:	69fa      	ldr	r2, [r7, #28]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d04b      	beq.n	8008d36 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ca2:	697a      	ldr	r2, [r7, #20]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d146      	bne.n	8008d36 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008ca8:	4b25      	ldr	r3, [pc, #148]	; (8008d40 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	69ba      	ldr	r2, [r7, #24]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d10a      	bne.n	8008cc8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	60bb      	str	r3, [r7, #8]
}
 8008cc4:	bf00      	nop
 8008cc6:	e7fe      	b.n	8008cc6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ccc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	69fa      	ldr	r2, [r7, #28]
 8008cd2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	db04      	blt.n	8008ce6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	6959      	ldr	r1, [r3, #20]
 8008cea:	693a      	ldr	r2, [r7, #16]
 8008cec:	4613      	mov	r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	4413      	add	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4a13      	ldr	r2, [pc, #76]	; (8008d44 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008cf6:	4413      	add	r3, r2
 8008cf8:	4299      	cmp	r1, r3
 8008cfa:	d11c      	bne.n	8008d36 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	3304      	adds	r3, #4
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7fe fa55 	bl	80071b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0a:	4b0f      	ldr	r3, [pc, #60]	; (8008d48 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d903      	bls.n	8008d1a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d16:	4a0c      	ldr	r2, [pc, #48]	; (8008d48 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008d18:	6013      	str	r3, [r2, #0]
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d1e:	4613      	mov	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	4413      	add	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4a07      	ldr	r2, [pc, #28]	; (8008d44 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008d28:	441a      	add	r2, r3
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	4619      	mov	r1, r3
 8008d30:	4610      	mov	r0, r2
 8008d32:	f7fe f9e0 	bl	80070f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d36:	bf00      	nop
 8008d38:	3720      	adds	r7, #32
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	20001c90 	.word	0x20001c90
 8008d44:	20001c94 	.word	0x20001c94
 8008d48:	2000216c 	.word	0x2000216c

08008d4c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008d4c:	b480      	push	{r7}
 8008d4e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008d50:	4b07      	ldr	r3, [pc, #28]	; (8008d70 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d004      	beq.n	8008d62 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008d58:	4b05      	ldr	r3, [pc, #20]	; (8008d70 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d5e:	3201      	adds	r2, #1
 8008d60:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008d62:	4b03      	ldr	r3, [pc, #12]	; (8008d70 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d64:	681b      	ldr	r3, [r3, #0]
	}
 8008d66:	4618      	mov	r0, r3
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	20001c90 	.word	0x20001c90

08008d74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d7e:	4b21      	ldr	r3, [pc, #132]	; (8008e04 <prvAddCurrentTaskToDelayedList+0x90>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d84:	4b20      	ldr	r3, [pc, #128]	; (8008e08 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	3304      	adds	r3, #4
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7fe fa10 	bl	80071b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d96:	d10a      	bne.n	8008dae <prvAddCurrentTaskToDelayedList+0x3a>
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d007      	beq.n	8008dae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d9e:	4b1a      	ldr	r3, [pc, #104]	; (8008e08 <prvAddCurrentTaskToDelayedList+0x94>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	3304      	adds	r3, #4
 8008da4:	4619      	mov	r1, r3
 8008da6:	4819      	ldr	r0, [pc, #100]	; (8008e0c <prvAddCurrentTaskToDelayedList+0x98>)
 8008da8:	f7fe f9a5 	bl	80070f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008dac:	e026      	b.n	8008dfc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4413      	add	r3, r2
 8008db4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008db6:	4b14      	ldr	r3, [pc, #80]	; (8008e08 <prvAddCurrentTaskToDelayedList+0x94>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d209      	bcs.n	8008dda <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dc6:	4b12      	ldr	r3, [pc, #72]	; (8008e10 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	4b0f      	ldr	r3, [pc, #60]	; (8008e08 <prvAddCurrentTaskToDelayedList+0x94>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	3304      	adds	r3, #4
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	f7fe f9b3 	bl	800713e <vListInsert>
}
 8008dd8:	e010      	b.n	8008dfc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dda:	4b0e      	ldr	r3, [pc, #56]	; (8008e14 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	4b0a      	ldr	r3, [pc, #40]	; (8008e08 <prvAddCurrentTaskToDelayedList+0x94>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	3304      	adds	r3, #4
 8008de4:	4619      	mov	r1, r3
 8008de6:	4610      	mov	r0, r2
 8008de8:	f7fe f9a9 	bl	800713e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008dec:	4b0a      	ldr	r3, [pc, #40]	; (8008e18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	68ba      	ldr	r2, [r7, #8]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d202      	bcs.n	8008dfc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008df6:	4a08      	ldr	r2, [pc, #32]	; (8008e18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	6013      	str	r3, [r2, #0]
}
 8008dfc:	bf00      	nop
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	20002168 	.word	0x20002168
 8008e08:	20001c90 	.word	0x20001c90
 8008e0c:	20002150 	.word	0x20002150
 8008e10:	20002120 	.word	0x20002120
 8008e14:	2000211c 	.word	0x2000211c
 8008e18:	20002184 	.word	0x20002184

08008e1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b08a      	sub	sp, #40	; 0x28
 8008e20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008e22:	2300      	movs	r3, #0
 8008e24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008e26:	f000 fba1 	bl	800956c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008e2a:	4b1c      	ldr	r3, [pc, #112]	; (8008e9c <xTimerCreateTimerTask+0x80>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d021      	beq.n	8008e76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008e32:	2300      	movs	r3, #0
 8008e34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008e36:	2300      	movs	r3, #0
 8008e38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008e3a:	1d3a      	adds	r2, r7, #4
 8008e3c:	f107 0108 	add.w	r1, r7, #8
 8008e40:	f107 030c 	add.w	r3, r7, #12
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7fe f90f 	bl	8007068 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008e4a:	6879      	ldr	r1, [r7, #4]
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	9202      	str	r2, [sp, #8]
 8008e52:	9301      	str	r3, [sp, #4]
 8008e54:	2302      	movs	r3, #2
 8008e56:	9300      	str	r3, [sp, #0]
 8008e58:	2300      	movs	r3, #0
 8008e5a:	460a      	mov	r2, r1
 8008e5c:	4910      	ldr	r1, [pc, #64]	; (8008ea0 <xTimerCreateTimerTask+0x84>)
 8008e5e:	4811      	ldr	r0, [pc, #68]	; (8008ea4 <xTimerCreateTimerTask+0x88>)
 8008e60:	f7fe ffe0 	bl	8007e24 <xTaskCreateStatic>
 8008e64:	4603      	mov	r3, r0
 8008e66:	4a10      	ldr	r2, [pc, #64]	; (8008ea8 <xTimerCreateTimerTask+0x8c>)
 8008e68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008e6a:	4b0f      	ldr	r3, [pc, #60]	; (8008ea8 <xTimerCreateTimerTask+0x8c>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d001      	beq.n	8008e76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008e72:	2301      	movs	r3, #1
 8008e74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d10a      	bne.n	8008e92 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e80:	f383 8811 	msr	BASEPRI, r3
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	613b      	str	r3, [r7, #16]
}
 8008e8e:	bf00      	nop
 8008e90:	e7fe      	b.n	8008e90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008e92:	697b      	ldr	r3, [r7, #20]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3718      	adds	r7, #24
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	200021c0 	.word	0x200021c0
 8008ea0:	0800c684 	.word	0x0800c684
 8008ea4:	08009115 	.word	0x08009115
 8008ea8:	200021c4 	.word	0x200021c4

08008eac <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b088      	sub	sp, #32
 8008eb0:	af02      	add	r7, sp, #8
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
 8008eb8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008eba:	202c      	movs	r0, #44	; 0x2c
 8008ebc:	f000 fe04 	bl	8009ac8 <pvPortMalloc>
 8008ec0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d00d      	beq.n	8008ee4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	9301      	str	r3, [sp, #4]
 8008ed4:	6a3b      	ldr	r3, [r7, #32]
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	68b9      	ldr	r1, [r7, #8]
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f000 f843 	bl	8008f6a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008ee4:	697b      	ldr	r3, [r7, #20]
	}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3718      	adds	r7, #24
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b08a      	sub	sp, #40	; 0x28
 8008ef2:	af02      	add	r7, sp, #8
 8008ef4:	60f8      	str	r0, [r7, #12]
 8008ef6:	60b9      	str	r1, [r7, #8]
 8008ef8:	607a      	str	r2, [r7, #4]
 8008efa:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008efc:	232c      	movs	r3, #44	; 0x2c
 8008efe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	2b2c      	cmp	r3, #44	; 0x2c
 8008f04:	d00a      	beq.n	8008f1c <xTimerCreateStatic+0x2e>
	__asm volatile
 8008f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	61bb      	str	r3, [r7, #24]
}
 8008f18:	bf00      	nop
 8008f1a:	e7fe      	b.n	8008f1a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008f1c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8008f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10a      	bne.n	8008f3a <xTimerCreateStatic+0x4c>
	__asm volatile
 8008f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f28:	f383 8811 	msr	BASEPRI, r3
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	617b      	str	r3, [r7, #20]
}
 8008f36:	bf00      	nop
 8008f38:	e7fe      	b.n	8008f38 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8008f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00d      	beq.n	8008f60 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	2202      	movs	r2, #2
 8008f48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	9301      	str	r3, [sp, #4]
 8008f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	68b9      	ldr	r1, [r7, #8]
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f000 f805 	bl	8008f6a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008f60:	69fb      	ldr	r3, [r7, #28]
	}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3720      	adds	r7, #32
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b086      	sub	sp, #24
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	60f8      	str	r0, [r7, #12]
 8008f72:	60b9      	str	r1, [r7, #8]
 8008f74:	607a      	str	r2, [r7, #4]
 8008f76:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10a      	bne.n	8008f94 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	617b      	str	r3, [r7, #20]
}
 8008f90:	bf00      	nop
 8008f92:	e7fe      	b.n	8008f92 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8008f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d01e      	beq.n	8008fd8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008f9a:	f000 fae7 	bl	800956c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa6:	68ba      	ldr	r2, [r7, #8]
 8008fa8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fac:	683a      	ldr	r2, [r7, #0]
 8008fae:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb2:	6a3a      	ldr	r2, [r7, #32]
 8008fb4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb8:	3304      	adds	r3, #4
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fe f88e 	bl	80070dc <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d008      	beq.n	8008fd8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fcc:	f043 0304 	orr.w	r3, r3, #4
 8008fd0:	b2da      	uxtb	r2, r3
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008fd8:	bf00      	nop
 8008fda:	3718      	adds	r7, #24
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b08a      	sub	sp, #40	; 0x28
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	607a      	str	r2, [r7, #4]
 8008fec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d10a      	bne.n	800900e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffc:	f383 8811 	msr	BASEPRI, r3
 8009000:	f3bf 8f6f 	isb	sy
 8009004:	f3bf 8f4f 	dsb	sy
 8009008:	623b      	str	r3, [r7, #32]
}
 800900a:	bf00      	nop
 800900c:	e7fe      	b.n	800900c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800900e:	4b1a      	ldr	r3, [pc, #104]	; (8009078 <xTimerGenericCommand+0x98>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d02a      	beq.n	800906c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	2b05      	cmp	r3, #5
 8009026:	dc18      	bgt.n	800905a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009028:	f7ff fd1a 	bl	8008a60 <xTaskGetSchedulerState>
 800902c:	4603      	mov	r3, r0
 800902e:	2b02      	cmp	r3, #2
 8009030:	d109      	bne.n	8009046 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009032:	4b11      	ldr	r3, [pc, #68]	; (8009078 <xTimerGenericCommand+0x98>)
 8009034:	6818      	ldr	r0, [r3, #0]
 8009036:	f107 0110 	add.w	r1, r7, #16
 800903a:	2300      	movs	r3, #0
 800903c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800903e:	f7fe f9e5 	bl	800740c <xQueueGenericSend>
 8009042:	6278      	str	r0, [r7, #36]	; 0x24
 8009044:	e012      	b.n	800906c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009046:	4b0c      	ldr	r3, [pc, #48]	; (8009078 <xTimerGenericCommand+0x98>)
 8009048:	6818      	ldr	r0, [r3, #0]
 800904a:	f107 0110 	add.w	r1, r7, #16
 800904e:	2300      	movs	r3, #0
 8009050:	2200      	movs	r2, #0
 8009052:	f7fe f9db 	bl	800740c <xQueueGenericSend>
 8009056:	6278      	str	r0, [r7, #36]	; 0x24
 8009058:	e008      	b.n	800906c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800905a:	4b07      	ldr	r3, [pc, #28]	; (8009078 <xTimerGenericCommand+0x98>)
 800905c:	6818      	ldr	r0, [r3, #0]
 800905e:	f107 0110 	add.w	r1, r7, #16
 8009062:	2300      	movs	r3, #0
 8009064:	683a      	ldr	r2, [r7, #0]
 8009066:	f7fe facf 	bl	8007608 <xQueueGenericSendFromISR>
 800906a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800906c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800906e:	4618      	mov	r0, r3
 8009070:	3728      	adds	r7, #40	; 0x28
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	200021c0 	.word	0x200021c0

0800907c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b088      	sub	sp, #32
 8009080:	af02      	add	r7, sp, #8
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009086:	4b22      	ldr	r3, [pc, #136]	; (8009110 <prvProcessExpiredTimer+0x94>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	3304      	adds	r3, #4
 8009094:	4618      	mov	r0, r3
 8009096:	f7fe f88b 	bl	80071b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090a0:	f003 0304 	and.w	r3, r3, #4
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d022      	beq.n	80090ee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	699a      	ldr	r2, [r3, #24]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	18d1      	adds	r1, r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	683a      	ldr	r2, [r7, #0]
 80090b4:	6978      	ldr	r0, [r7, #20]
 80090b6:	f000 f8d1 	bl	800925c <prvInsertTimerInActiveList>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d01f      	beq.n	8009100 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090c0:	2300      	movs	r3, #0
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	2300      	movs	r3, #0
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	2100      	movs	r1, #0
 80090ca:	6978      	ldr	r0, [r7, #20]
 80090cc:	f7ff ff88 	bl	8008fe0 <xTimerGenericCommand>
 80090d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d113      	bne.n	8009100 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80090d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090dc:	f383 8811 	msr	BASEPRI, r3
 80090e0:	f3bf 8f6f 	isb	sy
 80090e4:	f3bf 8f4f 	dsb	sy
 80090e8:	60fb      	str	r3, [r7, #12]
}
 80090ea:	bf00      	nop
 80090ec:	e7fe      	b.n	80090ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090f4:	f023 0301 	bic.w	r3, r3, #1
 80090f8:	b2da      	uxtb	r2, r3
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	6a1b      	ldr	r3, [r3, #32]
 8009104:	6978      	ldr	r0, [r7, #20]
 8009106:	4798      	blx	r3
}
 8009108:	bf00      	nop
 800910a:	3718      	adds	r7, #24
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	200021b8 	.word	0x200021b8

08009114 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800911c:	f107 0308 	add.w	r3, r7, #8
 8009120:	4618      	mov	r0, r3
 8009122:	f000 f857 	bl	80091d4 <prvGetNextExpireTime>
 8009126:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	4619      	mov	r1, r3
 800912c:	68f8      	ldr	r0, [r7, #12]
 800912e:	f000 f803 	bl	8009138 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009132:	f000 f8d5 	bl	80092e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009136:	e7f1      	b.n	800911c <prvTimerTask+0x8>

08009138 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009142:	f7ff f8ab 	bl	800829c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009146:	f107 0308 	add.w	r3, r7, #8
 800914a:	4618      	mov	r0, r3
 800914c:	f000 f866 	bl	800921c <prvSampleTimeNow>
 8009150:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d130      	bne.n	80091ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d10a      	bne.n	8009174 <prvProcessTimerOrBlockTask+0x3c>
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	429a      	cmp	r2, r3
 8009164:	d806      	bhi.n	8009174 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009166:	f7ff f8a7 	bl	80082b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800916a:	68f9      	ldr	r1, [r7, #12]
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7ff ff85 	bl	800907c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009172:	e024      	b.n	80091be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d008      	beq.n	800918c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800917a:	4b13      	ldr	r3, [pc, #76]	; (80091c8 <prvProcessTimerOrBlockTask+0x90>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d101      	bne.n	8009188 <prvProcessTimerOrBlockTask+0x50>
 8009184:	2301      	movs	r3, #1
 8009186:	e000      	b.n	800918a <prvProcessTimerOrBlockTask+0x52>
 8009188:	2300      	movs	r3, #0
 800918a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800918c:	4b0f      	ldr	r3, [pc, #60]	; (80091cc <prvProcessTimerOrBlockTask+0x94>)
 800918e:	6818      	ldr	r0, [r3, #0]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	1ad3      	subs	r3, r2, r3
 8009196:	683a      	ldr	r2, [r7, #0]
 8009198:	4619      	mov	r1, r3
 800919a:	f7fe fe0f 	bl	8007dbc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800919e:	f7ff f88b 	bl	80082b8 <xTaskResumeAll>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10a      	bne.n	80091be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80091a8:	4b09      	ldr	r3, [pc, #36]	; (80091d0 <prvProcessTimerOrBlockTask+0x98>)
 80091aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ae:	601a      	str	r2, [r3, #0]
 80091b0:	f3bf 8f4f 	dsb	sy
 80091b4:	f3bf 8f6f 	isb	sy
}
 80091b8:	e001      	b.n	80091be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80091ba:	f7ff f87d 	bl	80082b8 <xTaskResumeAll>
}
 80091be:	bf00      	nop
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	200021bc 	.word	0x200021bc
 80091cc:	200021c0 	.word	0x200021c0
 80091d0:	e000ed04 	.word	0xe000ed04

080091d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80091dc:	4b0e      	ldr	r3, [pc, #56]	; (8009218 <prvGetNextExpireTime+0x44>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d101      	bne.n	80091ea <prvGetNextExpireTime+0x16>
 80091e6:	2201      	movs	r2, #1
 80091e8:	e000      	b.n	80091ec <prvGetNextExpireTime+0x18>
 80091ea:	2200      	movs	r2, #0
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d105      	bne.n	8009204 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091f8:	4b07      	ldr	r3, [pc, #28]	; (8009218 <prvGetNextExpireTime+0x44>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	60fb      	str	r3, [r7, #12]
 8009202:	e001      	b.n	8009208 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009204:	2300      	movs	r3, #0
 8009206:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009208:	68fb      	ldr	r3, [r7, #12]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3714      	adds	r7, #20
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	200021b8 	.word	0x200021b8

0800921c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009224:	f7ff f8e6 	bl	80083f4 <xTaskGetTickCount>
 8009228:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800922a:	4b0b      	ldr	r3, [pc, #44]	; (8009258 <prvSampleTimeNow+0x3c>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	68fa      	ldr	r2, [r7, #12]
 8009230:	429a      	cmp	r2, r3
 8009232:	d205      	bcs.n	8009240 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009234:	f000 f936 	bl	80094a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	601a      	str	r2, [r3, #0]
 800923e:	e002      	b.n	8009246 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009246:	4a04      	ldr	r2, [pc, #16]	; (8009258 <prvSampleTimeNow+0x3c>)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800924c:	68fb      	ldr	r3, [r7, #12]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	200021c8 	.word	0x200021c8

0800925c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b086      	sub	sp, #24
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
 8009268:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800926a:	2300      	movs	r3, #0
 800926c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	68ba      	ldr	r2, [r7, #8]
 8009272:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	68fa      	ldr	r2, [r7, #12]
 8009278:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	429a      	cmp	r2, r3
 8009280:	d812      	bhi.n	80092a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	1ad2      	subs	r2, r2, r3
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	699b      	ldr	r3, [r3, #24]
 800928c:	429a      	cmp	r2, r3
 800928e:	d302      	bcc.n	8009296 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009290:	2301      	movs	r3, #1
 8009292:	617b      	str	r3, [r7, #20]
 8009294:	e01b      	b.n	80092ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009296:	4b10      	ldr	r3, [pc, #64]	; (80092d8 <prvInsertTimerInActiveList+0x7c>)
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	3304      	adds	r3, #4
 800929e:	4619      	mov	r1, r3
 80092a0:	4610      	mov	r0, r2
 80092a2:	f7fd ff4c 	bl	800713e <vListInsert>
 80092a6:	e012      	b.n	80092ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d206      	bcs.n	80092be <prvInsertTimerInActiveList+0x62>
 80092b0:	68ba      	ldr	r2, [r7, #8]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d302      	bcc.n	80092be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80092b8:	2301      	movs	r3, #1
 80092ba:	617b      	str	r3, [r7, #20]
 80092bc:	e007      	b.n	80092ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092be:	4b07      	ldr	r3, [pc, #28]	; (80092dc <prvInsertTimerInActiveList+0x80>)
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	3304      	adds	r3, #4
 80092c6:	4619      	mov	r1, r3
 80092c8:	4610      	mov	r0, r2
 80092ca:	f7fd ff38 	bl	800713e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80092ce:	697b      	ldr	r3, [r7, #20]
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3718      	adds	r7, #24
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	200021bc 	.word	0x200021bc
 80092dc:	200021b8 	.word	0x200021b8

080092e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b08e      	sub	sp, #56	; 0x38
 80092e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092e6:	e0ca      	b.n	800947e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	da18      	bge.n	8009320 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80092ee:	1d3b      	adds	r3, r7, #4
 80092f0:	3304      	adds	r3, #4
 80092f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80092f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d10a      	bne.n	8009310 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80092fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fe:	f383 8811 	msr	BASEPRI, r3
 8009302:	f3bf 8f6f 	isb	sy
 8009306:	f3bf 8f4f 	dsb	sy
 800930a:	61fb      	str	r3, [r7, #28]
}
 800930c:	bf00      	nop
 800930e:	e7fe      	b.n	800930e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009316:	6850      	ldr	r0, [r2, #4]
 8009318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800931a:	6892      	ldr	r2, [r2, #8]
 800931c:	4611      	mov	r1, r2
 800931e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2b00      	cmp	r3, #0
 8009324:	f2c0 80aa 	blt.w	800947c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800932c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932e:	695b      	ldr	r3, [r3, #20]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d004      	beq.n	800933e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009336:	3304      	adds	r3, #4
 8009338:	4618      	mov	r0, r3
 800933a:	f7fd ff39 	bl	80071b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800933e:	463b      	mov	r3, r7
 8009340:	4618      	mov	r0, r3
 8009342:	f7ff ff6b 	bl	800921c <prvSampleTimeNow>
 8009346:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2b09      	cmp	r3, #9
 800934c:	f200 8097 	bhi.w	800947e <prvProcessReceivedCommands+0x19e>
 8009350:	a201      	add	r2, pc, #4	; (adr r2, 8009358 <prvProcessReceivedCommands+0x78>)
 8009352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009356:	bf00      	nop
 8009358:	08009381 	.word	0x08009381
 800935c:	08009381 	.word	0x08009381
 8009360:	08009381 	.word	0x08009381
 8009364:	080093f5 	.word	0x080093f5
 8009368:	08009409 	.word	0x08009409
 800936c:	08009453 	.word	0x08009453
 8009370:	08009381 	.word	0x08009381
 8009374:	08009381 	.word	0x08009381
 8009378:	080093f5 	.word	0x080093f5
 800937c:	08009409 	.word	0x08009409
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009382:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009386:	f043 0301 	orr.w	r3, r3, #1
 800938a:	b2da      	uxtb	r2, r3
 800938c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	18d1      	adds	r1, r2, r3
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800939e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093a0:	f7ff ff5c 	bl	800925c <prvInsertTimerInActiveList>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d069      	beq.n	800947e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ac:	6a1b      	ldr	r3, [r3, #32]
 80093ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093b8:	f003 0304 	and.w	r3, r3, #4
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d05e      	beq.n	800947e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80093c0:	68ba      	ldr	r2, [r7, #8]
 80093c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	441a      	add	r2, r3
 80093c8:	2300      	movs	r3, #0
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	2300      	movs	r3, #0
 80093ce:	2100      	movs	r1, #0
 80093d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093d2:	f7ff fe05 	bl	8008fe0 <xTimerGenericCommand>
 80093d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80093d8:	6a3b      	ldr	r3, [r7, #32]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d14f      	bne.n	800947e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80093de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e2:	f383 8811 	msr	BASEPRI, r3
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	61bb      	str	r3, [r7, #24]
}
 80093f0:	bf00      	nop
 80093f2:	e7fe      	b.n	80093f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093fa:	f023 0301 	bic.w	r3, r3, #1
 80093fe:	b2da      	uxtb	r2, r3
 8009400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009402:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009406:	e03a      	b.n	800947e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800940e:	f043 0301 	orr.w	r3, r3, #1
 8009412:	b2da      	uxtb	r2, r3
 8009414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009416:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009422:	699b      	ldr	r3, [r3, #24]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d10a      	bne.n	800943e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942c:	f383 8811 	msr	BASEPRI, r3
 8009430:	f3bf 8f6f 	isb	sy
 8009434:	f3bf 8f4f 	dsb	sy
 8009438:	617b      	str	r3, [r7, #20]
}
 800943a:	bf00      	nop
 800943c:	e7fe      	b.n	800943c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800943e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009440:	699a      	ldr	r2, [r3, #24]
 8009442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009444:	18d1      	adds	r1, r2, r3
 8009446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800944a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800944c:	f7ff ff06 	bl	800925c <prvInsertTimerInActiveList>
					break;
 8009450:	e015      	b.n	800947e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009458:	f003 0302 	and.w	r3, r3, #2
 800945c:	2b00      	cmp	r3, #0
 800945e:	d103      	bne.n	8009468 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009462:	f000 fbfd 	bl	8009c60 <vPortFree>
 8009466:	e00a      	b.n	800947e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800946e:	f023 0301 	bic.w	r3, r3, #1
 8009472:	b2da      	uxtb	r2, r3
 8009474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009476:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800947a:	e000      	b.n	800947e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800947c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800947e:	4b08      	ldr	r3, [pc, #32]	; (80094a0 <prvProcessReceivedCommands+0x1c0>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	1d39      	adds	r1, r7, #4
 8009484:	2200      	movs	r2, #0
 8009486:	4618      	mov	r0, r3
 8009488:	f7fe f95a 	bl	8007740 <xQueueReceive>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	f47f af2a 	bne.w	80092e8 <prvProcessReceivedCommands+0x8>
	}
}
 8009494:	bf00      	nop
 8009496:	bf00      	nop
 8009498:	3730      	adds	r7, #48	; 0x30
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	200021c0 	.word	0x200021c0

080094a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b088      	sub	sp, #32
 80094a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094aa:	e048      	b.n	800953e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094ac:	4b2d      	ldr	r3, [pc, #180]	; (8009564 <prvSwitchTimerLists+0xc0>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094b6:	4b2b      	ldr	r3, [pc, #172]	; (8009564 <prvSwitchTimerLists+0xc0>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	3304      	adds	r3, #4
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7fd fe73 	bl	80071b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094d8:	f003 0304 	and.w	r3, r3, #4
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d02e      	beq.n	800953e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	693a      	ldr	r2, [r7, #16]
 80094e6:	4413      	add	r3, r2
 80094e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80094ea:	68ba      	ldr	r2, [r7, #8]
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d90e      	bls.n	8009510 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094fe:	4b19      	ldr	r3, [pc, #100]	; (8009564 <prvSwitchTimerLists+0xc0>)
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	3304      	adds	r3, #4
 8009506:	4619      	mov	r1, r3
 8009508:	4610      	mov	r0, r2
 800950a:	f7fd fe18 	bl	800713e <vListInsert>
 800950e:	e016      	b.n	800953e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009510:	2300      	movs	r3, #0
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	2300      	movs	r3, #0
 8009516:	693a      	ldr	r2, [r7, #16]
 8009518:	2100      	movs	r1, #0
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	f7ff fd60 	bl	8008fe0 <xTimerGenericCommand>
 8009520:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d10a      	bne.n	800953e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952c:	f383 8811 	msr	BASEPRI, r3
 8009530:	f3bf 8f6f 	isb	sy
 8009534:	f3bf 8f4f 	dsb	sy
 8009538:	603b      	str	r3, [r7, #0]
}
 800953a:	bf00      	nop
 800953c:	e7fe      	b.n	800953c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800953e:	4b09      	ldr	r3, [pc, #36]	; (8009564 <prvSwitchTimerLists+0xc0>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1b1      	bne.n	80094ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009548:	4b06      	ldr	r3, [pc, #24]	; (8009564 <prvSwitchTimerLists+0xc0>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800954e:	4b06      	ldr	r3, [pc, #24]	; (8009568 <prvSwitchTimerLists+0xc4>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a04      	ldr	r2, [pc, #16]	; (8009564 <prvSwitchTimerLists+0xc0>)
 8009554:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009556:	4a04      	ldr	r2, [pc, #16]	; (8009568 <prvSwitchTimerLists+0xc4>)
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	6013      	str	r3, [r2, #0]
}
 800955c:	bf00      	nop
 800955e:	3718      	adds	r7, #24
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	200021b8 	.word	0x200021b8
 8009568:	200021bc 	.word	0x200021bc

0800956c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009572:	f000 f987 	bl	8009884 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009576:	4b15      	ldr	r3, [pc, #84]	; (80095cc <prvCheckForValidListAndQueue+0x60>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d120      	bne.n	80095c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800957e:	4814      	ldr	r0, [pc, #80]	; (80095d0 <prvCheckForValidListAndQueue+0x64>)
 8009580:	f7fd fd8c 	bl	800709c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009584:	4813      	ldr	r0, [pc, #76]	; (80095d4 <prvCheckForValidListAndQueue+0x68>)
 8009586:	f7fd fd89 	bl	800709c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800958a:	4b13      	ldr	r3, [pc, #76]	; (80095d8 <prvCheckForValidListAndQueue+0x6c>)
 800958c:	4a10      	ldr	r2, [pc, #64]	; (80095d0 <prvCheckForValidListAndQueue+0x64>)
 800958e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009590:	4b12      	ldr	r3, [pc, #72]	; (80095dc <prvCheckForValidListAndQueue+0x70>)
 8009592:	4a10      	ldr	r2, [pc, #64]	; (80095d4 <prvCheckForValidListAndQueue+0x68>)
 8009594:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009596:	2300      	movs	r3, #0
 8009598:	9300      	str	r3, [sp, #0]
 800959a:	4b11      	ldr	r3, [pc, #68]	; (80095e0 <prvCheckForValidListAndQueue+0x74>)
 800959c:	4a11      	ldr	r2, [pc, #68]	; (80095e4 <prvCheckForValidListAndQueue+0x78>)
 800959e:	2110      	movs	r1, #16
 80095a0:	200a      	movs	r0, #10
 80095a2:	f7fd fe97 	bl	80072d4 <xQueueGenericCreateStatic>
 80095a6:	4603      	mov	r3, r0
 80095a8:	4a08      	ldr	r2, [pc, #32]	; (80095cc <prvCheckForValidListAndQueue+0x60>)
 80095aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80095ac:	4b07      	ldr	r3, [pc, #28]	; (80095cc <prvCheckForValidListAndQueue+0x60>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d005      	beq.n	80095c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80095b4:	4b05      	ldr	r3, [pc, #20]	; (80095cc <prvCheckForValidListAndQueue+0x60>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	490b      	ldr	r1, [pc, #44]	; (80095e8 <prvCheckForValidListAndQueue+0x7c>)
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7fe fbd4 	bl	8007d68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095c0:	f000 f990 	bl	80098e4 <vPortExitCritical>
}
 80095c4:	bf00      	nop
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	200021c0 	.word	0x200021c0
 80095d0:	20002190 	.word	0x20002190
 80095d4:	200021a4 	.word	0x200021a4
 80095d8:	200021b8 	.word	0x200021b8
 80095dc:	200021bc 	.word	0x200021bc
 80095e0:	2000226c 	.word	0x2000226c
 80095e4:	200021cc 	.word	0x200021cc
 80095e8:	0800c68c 	.word	0x0800c68c

080095ec <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b086      	sub	sp, #24
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d10a      	bne.n	8009614 <pvTimerGetTimerID+0x28>
	__asm volatile
 80095fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	60fb      	str	r3, [r7, #12]
}
 8009610:	bf00      	nop
 8009612:	e7fe      	b.n	8009612 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8009614:	f000 f936 	bl	8009884 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	69db      	ldr	r3, [r3, #28]
 800961c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800961e:	f000 f961 	bl	80098e4 <vPortExitCritical>

	return pvReturn;
 8009622:	693b      	ldr	r3, [r7, #16]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3718      	adds	r7, #24
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	3b04      	subs	r3, #4
 800963c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009644:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	3b04      	subs	r3, #4
 800964a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	f023 0201 	bic.w	r2, r3, #1
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	3b04      	subs	r3, #4
 800965a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800965c:	4a0c      	ldr	r2, [pc, #48]	; (8009690 <pxPortInitialiseStack+0x64>)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	3b14      	subs	r3, #20
 8009666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	3b04      	subs	r3, #4
 8009672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f06f 0202 	mvn.w	r2, #2
 800967a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	3b20      	subs	r3, #32
 8009680:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009682:	68fb      	ldr	r3, [r7, #12]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3714      	adds	r7, #20
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr
 8009690:	08009695 	.word	0x08009695

08009694 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800969a:	2300      	movs	r3, #0
 800969c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800969e:	4b12      	ldr	r3, [pc, #72]	; (80096e8 <prvTaskExitError+0x54>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a6:	d00a      	beq.n	80096be <prvTaskExitError+0x2a>
	__asm volatile
 80096a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ac:	f383 8811 	msr	BASEPRI, r3
 80096b0:	f3bf 8f6f 	isb	sy
 80096b4:	f3bf 8f4f 	dsb	sy
 80096b8:	60fb      	str	r3, [r7, #12]
}
 80096ba:	bf00      	nop
 80096bc:	e7fe      	b.n	80096bc <prvTaskExitError+0x28>
	__asm volatile
 80096be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c2:	f383 8811 	msr	BASEPRI, r3
 80096c6:	f3bf 8f6f 	isb	sy
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	60bb      	str	r3, [r7, #8]
}
 80096d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80096d2:	bf00      	nop
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d0fc      	beq.n	80096d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80096da:	bf00      	nop
 80096dc:	bf00      	nop
 80096de:	3714      	adds	r7, #20
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr
 80096e8:	2000000c 	.word	0x2000000c
 80096ec:	00000000 	.word	0x00000000

080096f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80096f0:	4b07      	ldr	r3, [pc, #28]	; (8009710 <pxCurrentTCBConst2>)
 80096f2:	6819      	ldr	r1, [r3, #0]
 80096f4:	6808      	ldr	r0, [r1, #0]
 80096f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fa:	f380 8809 	msr	PSP, r0
 80096fe:	f3bf 8f6f 	isb	sy
 8009702:	f04f 0000 	mov.w	r0, #0
 8009706:	f380 8811 	msr	BASEPRI, r0
 800970a:	4770      	bx	lr
 800970c:	f3af 8000 	nop.w

08009710 <pxCurrentTCBConst2>:
 8009710:	20001c90 	.word	0x20001c90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009714:	bf00      	nop
 8009716:	bf00      	nop

08009718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009718:	4808      	ldr	r0, [pc, #32]	; (800973c <prvPortStartFirstTask+0x24>)
 800971a:	6800      	ldr	r0, [r0, #0]
 800971c:	6800      	ldr	r0, [r0, #0]
 800971e:	f380 8808 	msr	MSP, r0
 8009722:	f04f 0000 	mov.w	r0, #0
 8009726:	f380 8814 	msr	CONTROL, r0
 800972a:	b662      	cpsie	i
 800972c:	b661      	cpsie	f
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	f3bf 8f6f 	isb	sy
 8009736:	df00      	svc	0
 8009738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800973a:	bf00      	nop
 800973c:	e000ed08 	.word	0xe000ed08

08009740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b086      	sub	sp, #24
 8009744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009746:	4b46      	ldr	r3, [pc, #280]	; (8009860 <xPortStartScheduler+0x120>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a46      	ldr	r2, [pc, #280]	; (8009864 <xPortStartScheduler+0x124>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d10a      	bne.n	8009766 <xPortStartScheduler+0x26>
	__asm volatile
 8009750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	613b      	str	r3, [r7, #16]
}
 8009762:	bf00      	nop
 8009764:	e7fe      	b.n	8009764 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009766:	4b3e      	ldr	r3, [pc, #248]	; (8009860 <xPortStartScheduler+0x120>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a3f      	ldr	r2, [pc, #252]	; (8009868 <xPortStartScheduler+0x128>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d10a      	bne.n	8009786 <xPortStartScheduler+0x46>
	__asm volatile
 8009770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009774:	f383 8811 	msr	BASEPRI, r3
 8009778:	f3bf 8f6f 	isb	sy
 800977c:	f3bf 8f4f 	dsb	sy
 8009780:	60fb      	str	r3, [r7, #12]
}
 8009782:	bf00      	nop
 8009784:	e7fe      	b.n	8009784 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009786:	4b39      	ldr	r3, [pc, #228]	; (800986c <xPortStartScheduler+0x12c>)
 8009788:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	b2db      	uxtb	r3, r3
 8009790:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	22ff      	movs	r2, #255	; 0xff
 8009796:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	b2db      	uxtb	r3, r3
 800979e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80097a0:	78fb      	ldrb	r3, [r7, #3]
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80097a8:	b2da      	uxtb	r2, r3
 80097aa:	4b31      	ldr	r3, [pc, #196]	; (8009870 <xPortStartScheduler+0x130>)
 80097ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097ae:	4b31      	ldr	r3, [pc, #196]	; (8009874 <xPortStartScheduler+0x134>)
 80097b0:	2207      	movs	r2, #7
 80097b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097b4:	e009      	b.n	80097ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80097b6:	4b2f      	ldr	r3, [pc, #188]	; (8009874 <xPortStartScheduler+0x134>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	3b01      	subs	r3, #1
 80097bc:	4a2d      	ldr	r2, [pc, #180]	; (8009874 <xPortStartScheduler+0x134>)
 80097be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097c0:	78fb      	ldrb	r3, [r7, #3]
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	005b      	lsls	r3, r3, #1
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097ca:	78fb      	ldrb	r3, [r7, #3]
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097d2:	2b80      	cmp	r3, #128	; 0x80
 80097d4:	d0ef      	beq.n	80097b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097d6:	4b27      	ldr	r3, [pc, #156]	; (8009874 <xPortStartScheduler+0x134>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f1c3 0307 	rsb	r3, r3, #7
 80097de:	2b04      	cmp	r3, #4
 80097e0:	d00a      	beq.n	80097f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80097e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e6:	f383 8811 	msr	BASEPRI, r3
 80097ea:	f3bf 8f6f 	isb	sy
 80097ee:	f3bf 8f4f 	dsb	sy
 80097f2:	60bb      	str	r3, [r7, #8]
}
 80097f4:	bf00      	nop
 80097f6:	e7fe      	b.n	80097f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80097f8:	4b1e      	ldr	r3, [pc, #120]	; (8009874 <xPortStartScheduler+0x134>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	021b      	lsls	r3, r3, #8
 80097fe:	4a1d      	ldr	r2, [pc, #116]	; (8009874 <xPortStartScheduler+0x134>)
 8009800:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009802:	4b1c      	ldr	r3, [pc, #112]	; (8009874 <xPortStartScheduler+0x134>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800980a:	4a1a      	ldr	r2, [pc, #104]	; (8009874 <xPortStartScheduler+0x134>)
 800980c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	b2da      	uxtb	r2, r3
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009816:	4b18      	ldr	r3, [pc, #96]	; (8009878 <xPortStartScheduler+0x138>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a17      	ldr	r2, [pc, #92]	; (8009878 <xPortStartScheduler+0x138>)
 800981c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009820:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009822:	4b15      	ldr	r3, [pc, #84]	; (8009878 <xPortStartScheduler+0x138>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a14      	ldr	r2, [pc, #80]	; (8009878 <xPortStartScheduler+0x138>)
 8009828:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800982c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800982e:	f000 f8dd 	bl	80099ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009832:	4b12      	ldr	r3, [pc, #72]	; (800987c <xPortStartScheduler+0x13c>)
 8009834:	2200      	movs	r2, #0
 8009836:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009838:	f000 f8fc 	bl	8009a34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800983c:	4b10      	ldr	r3, [pc, #64]	; (8009880 <xPortStartScheduler+0x140>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a0f      	ldr	r2, [pc, #60]	; (8009880 <xPortStartScheduler+0x140>)
 8009842:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009846:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009848:	f7ff ff66 	bl	8009718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800984c:	f7fe fe9c 	bl	8008588 <vTaskSwitchContext>
	prvTaskExitError();
 8009850:	f7ff ff20 	bl	8009694 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009854:	2300      	movs	r3, #0
}
 8009856:	4618      	mov	r0, r3
 8009858:	3718      	adds	r7, #24
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	e000ed00 	.word	0xe000ed00
 8009864:	410fc271 	.word	0x410fc271
 8009868:	410fc270 	.word	0x410fc270
 800986c:	e000e400 	.word	0xe000e400
 8009870:	200022bc 	.word	0x200022bc
 8009874:	200022c0 	.word	0x200022c0
 8009878:	e000ed20 	.word	0xe000ed20
 800987c:	2000000c 	.word	0x2000000c
 8009880:	e000ef34 	.word	0xe000ef34

08009884 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
	__asm volatile
 800988a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	607b      	str	r3, [r7, #4]
}
 800989c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800989e:	4b0f      	ldr	r3, [pc, #60]	; (80098dc <vPortEnterCritical+0x58>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	3301      	adds	r3, #1
 80098a4:	4a0d      	ldr	r2, [pc, #52]	; (80098dc <vPortEnterCritical+0x58>)
 80098a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80098a8:	4b0c      	ldr	r3, [pc, #48]	; (80098dc <vPortEnterCritical+0x58>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d10f      	bne.n	80098d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80098b0:	4b0b      	ldr	r3, [pc, #44]	; (80098e0 <vPortEnterCritical+0x5c>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00a      	beq.n	80098d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80098ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098be:	f383 8811 	msr	BASEPRI, r3
 80098c2:	f3bf 8f6f 	isb	sy
 80098c6:	f3bf 8f4f 	dsb	sy
 80098ca:	603b      	str	r3, [r7, #0]
}
 80098cc:	bf00      	nop
 80098ce:	e7fe      	b.n	80098ce <vPortEnterCritical+0x4a>
	}
}
 80098d0:	bf00      	nop
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr
 80098dc:	2000000c 	.word	0x2000000c
 80098e0:	e000ed04 	.word	0xe000ed04

080098e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098ea:	4b12      	ldr	r3, [pc, #72]	; (8009934 <vPortExitCritical+0x50>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d10a      	bne.n	8009908 <vPortExitCritical+0x24>
	__asm volatile
 80098f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f6:	f383 8811 	msr	BASEPRI, r3
 80098fa:	f3bf 8f6f 	isb	sy
 80098fe:	f3bf 8f4f 	dsb	sy
 8009902:	607b      	str	r3, [r7, #4]
}
 8009904:	bf00      	nop
 8009906:	e7fe      	b.n	8009906 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009908:	4b0a      	ldr	r3, [pc, #40]	; (8009934 <vPortExitCritical+0x50>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	3b01      	subs	r3, #1
 800990e:	4a09      	ldr	r2, [pc, #36]	; (8009934 <vPortExitCritical+0x50>)
 8009910:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009912:	4b08      	ldr	r3, [pc, #32]	; (8009934 <vPortExitCritical+0x50>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d105      	bne.n	8009926 <vPortExitCritical+0x42>
 800991a:	2300      	movs	r3, #0
 800991c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	f383 8811 	msr	BASEPRI, r3
}
 8009924:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009926:	bf00      	nop
 8009928:	370c      	adds	r7, #12
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	2000000c 	.word	0x2000000c
	...

08009940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009940:	f3ef 8009 	mrs	r0, PSP
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	4b15      	ldr	r3, [pc, #84]	; (80099a0 <pxCurrentTCBConst>)
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	f01e 0f10 	tst.w	lr, #16
 8009950:	bf08      	it	eq
 8009952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995a:	6010      	str	r0, [r2, #0]
 800995c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009960:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009964:	f380 8811 	msr	BASEPRI, r0
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	f7fe fe0a 	bl	8008588 <vTaskSwitchContext>
 8009974:	f04f 0000 	mov.w	r0, #0
 8009978:	f380 8811 	msr	BASEPRI, r0
 800997c:	bc09      	pop	{r0, r3}
 800997e:	6819      	ldr	r1, [r3, #0]
 8009980:	6808      	ldr	r0, [r1, #0]
 8009982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009986:	f01e 0f10 	tst.w	lr, #16
 800998a:	bf08      	it	eq
 800998c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009990:	f380 8809 	msr	PSP, r0
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	f3af 8000 	nop.w

080099a0 <pxCurrentTCBConst>:
 80099a0:	20001c90 	.word	0x20001c90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80099a4:	bf00      	nop
 80099a6:	bf00      	nop

080099a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
	__asm volatile
 80099ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	607b      	str	r3, [r7, #4]
}
 80099c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099c2:	f7fe fd27 	bl	8008414 <xTaskIncrementTick>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d003      	beq.n	80099d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80099cc:	4b06      	ldr	r3, [pc, #24]	; (80099e8 <xPortSysTickHandler+0x40>)
 80099ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099d2:	601a      	str	r2, [r3, #0]
 80099d4:	2300      	movs	r3, #0
 80099d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	f383 8811 	msr	BASEPRI, r3
}
 80099de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80099e0:	bf00      	nop
 80099e2:	3708      	adds	r7, #8
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	e000ed04 	.word	0xe000ed04

080099ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80099ec:	b480      	push	{r7}
 80099ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80099f0:	4b0b      	ldr	r3, [pc, #44]	; (8009a20 <vPortSetupTimerInterrupt+0x34>)
 80099f2:	2200      	movs	r2, #0
 80099f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80099f6:	4b0b      	ldr	r3, [pc, #44]	; (8009a24 <vPortSetupTimerInterrupt+0x38>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099fc:	4b0a      	ldr	r3, [pc, #40]	; (8009a28 <vPortSetupTimerInterrupt+0x3c>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a0a      	ldr	r2, [pc, #40]	; (8009a2c <vPortSetupTimerInterrupt+0x40>)
 8009a02:	fba2 2303 	umull	r2, r3, r2, r3
 8009a06:	099b      	lsrs	r3, r3, #6
 8009a08:	4a09      	ldr	r2, [pc, #36]	; (8009a30 <vPortSetupTimerInterrupt+0x44>)
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a0e:	4b04      	ldr	r3, [pc, #16]	; (8009a20 <vPortSetupTimerInterrupt+0x34>)
 8009a10:	2207      	movs	r2, #7
 8009a12:	601a      	str	r2, [r3, #0]
}
 8009a14:	bf00      	nop
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	e000e010 	.word	0xe000e010
 8009a24:	e000e018 	.word	0xe000e018
 8009a28:	20000000 	.word	0x20000000
 8009a2c:	10624dd3 	.word	0x10624dd3
 8009a30:	e000e014 	.word	0xe000e014

08009a34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009a44 <vPortEnableVFP+0x10>
 8009a38:	6801      	ldr	r1, [r0, #0]
 8009a3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009a3e:	6001      	str	r1, [r0, #0]
 8009a40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a42:	bf00      	nop
 8009a44:	e000ed88 	.word	0xe000ed88

08009a48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a4e:	f3ef 8305 	mrs	r3, IPSR
 8009a52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2b0f      	cmp	r3, #15
 8009a58:	d914      	bls.n	8009a84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a5a:	4a17      	ldr	r2, [pc, #92]	; (8009ab8 <vPortValidateInterruptPriority+0x70>)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	4413      	add	r3, r2
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a64:	4b15      	ldr	r3, [pc, #84]	; (8009abc <vPortValidateInterruptPriority+0x74>)
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	7afa      	ldrb	r2, [r7, #11]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d20a      	bcs.n	8009a84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a72:	f383 8811 	msr	BASEPRI, r3
 8009a76:	f3bf 8f6f 	isb	sy
 8009a7a:	f3bf 8f4f 	dsb	sy
 8009a7e:	607b      	str	r3, [r7, #4]
}
 8009a80:	bf00      	nop
 8009a82:	e7fe      	b.n	8009a82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a84:	4b0e      	ldr	r3, [pc, #56]	; (8009ac0 <vPortValidateInterruptPriority+0x78>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009a8c:	4b0d      	ldr	r3, [pc, #52]	; (8009ac4 <vPortValidateInterruptPriority+0x7c>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d90a      	bls.n	8009aaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a98:	f383 8811 	msr	BASEPRI, r3
 8009a9c:	f3bf 8f6f 	isb	sy
 8009aa0:	f3bf 8f4f 	dsb	sy
 8009aa4:	603b      	str	r3, [r7, #0]
}
 8009aa6:	bf00      	nop
 8009aa8:	e7fe      	b.n	8009aa8 <vPortValidateInterruptPriority+0x60>
	}
 8009aaa:	bf00      	nop
 8009aac:	3714      	adds	r7, #20
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr
 8009ab6:	bf00      	nop
 8009ab8:	e000e3f0 	.word	0xe000e3f0
 8009abc:	200022bc 	.word	0x200022bc
 8009ac0:	e000ed0c 	.word	0xe000ed0c
 8009ac4:	200022c0 	.word	0x200022c0

08009ac8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b08a      	sub	sp, #40	; 0x28
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ad4:	f7fe fbe2 	bl	800829c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ad8:	4b5b      	ldr	r3, [pc, #364]	; (8009c48 <pvPortMalloc+0x180>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d101      	bne.n	8009ae4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ae0:	f000 f920 	bl	8009d24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ae4:	4b59      	ldr	r3, [pc, #356]	; (8009c4c <pvPortMalloc+0x184>)
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4013      	ands	r3, r2
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f040 8093 	bne.w	8009c18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d01d      	beq.n	8009b34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009af8:	2208      	movs	r2, #8
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4413      	add	r3, r2
 8009afe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f003 0307 	and.w	r3, r3, #7
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d014      	beq.n	8009b34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f023 0307 	bic.w	r3, r3, #7
 8009b10:	3308      	adds	r3, #8
 8009b12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f003 0307 	and.w	r3, r3, #7
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d00a      	beq.n	8009b34 <pvPortMalloc+0x6c>
	__asm volatile
 8009b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b22:	f383 8811 	msr	BASEPRI, r3
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	617b      	str	r3, [r7, #20]
}
 8009b30:	bf00      	nop
 8009b32:	e7fe      	b.n	8009b32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d06e      	beq.n	8009c18 <pvPortMalloc+0x150>
 8009b3a:	4b45      	ldr	r3, [pc, #276]	; (8009c50 <pvPortMalloc+0x188>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d869      	bhi.n	8009c18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b44:	4b43      	ldr	r3, [pc, #268]	; (8009c54 <pvPortMalloc+0x18c>)
 8009b46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b48:	4b42      	ldr	r3, [pc, #264]	; (8009c54 <pvPortMalloc+0x18c>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b4e:	e004      	b.n	8009b5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d903      	bls.n	8009b6c <pvPortMalloc+0xa4>
 8009b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d1f1      	bne.n	8009b50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b6c:	4b36      	ldr	r3, [pc, #216]	; (8009c48 <pvPortMalloc+0x180>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d050      	beq.n	8009c18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b76:	6a3b      	ldr	r3, [r7, #32]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	2208      	movs	r2, #8
 8009b7c:	4413      	add	r3, r2
 8009b7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	6a3b      	ldr	r3, [r7, #32]
 8009b86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8a:	685a      	ldr	r2, [r3, #4]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	1ad2      	subs	r2, r2, r3
 8009b90:	2308      	movs	r3, #8
 8009b92:	005b      	lsls	r3, r3, #1
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d91f      	bls.n	8009bd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	f003 0307 	and.w	r3, r3, #7
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d00a      	beq.n	8009bc0 <pvPortMalloc+0xf8>
	__asm volatile
 8009baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bae:	f383 8811 	msr	BASEPRI, r3
 8009bb2:	f3bf 8f6f 	isb	sy
 8009bb6:	f3bf 8f4f 	dsb	sy
 8009bba:	613b      	str	r3, [r7, #16]
}
 8009bbc:	bf00      	nop
 8009bbe:	e7fe      	b.n	8009bbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc2:	685a      	ldr	r2, [r3, #4]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	1ad2      	subs	r2, r2, r3
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009bd2:	69b8      	ldr	r0, [r7, #24]
 8009bd4:	f000 f908 	bl	8009de8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009bd8:	4b1d      	ldr	r3, [pc, #116]	; (8009c50 <pvPortMalloc+0x188>)
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	1ad3      	subs	r3, r2, r3
 8009be2:	4a1b      	ldr	r2, [pc, #108]	; (8009c50 <pvPortMalloc+0x188>)
 8009be4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009be6:	4b1a      	ldr	r3, [pc, #104]	; (8009c50 <pvPortMalloc+0x188>)
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	4b1b      	ldr	r3, [pc, #108]	; (8009c58 <pvPortMalloc+0x190>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d203      	bcs.n	8009bfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009bf2:	4b17      	ldr	r3, [pc, #92]	; (8009c50 <pvPortMalloc+0x188>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a18      	ldr	r2, [pc, #96]	; (8009c58 <pvPortMalloc+0x190>)
 8009bf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfc:	685a      	ldr	r2, [r3, #4]
 8009bfe:	4b13      	ldr	r3, [pc, #76]	; (8009c4c <pvPortMalloc+0x184>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	431a      	orrs	r2, r3
 8009c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009c0e:	4b13      	ldr	r3, [pc, #76]	; (8009c5c <pvPortMalloc+0x194>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	3301      	adds	r3, #1
 8009c14:	4a11      	ldr	r2, [pc, #68]	; (8009c5c <pvPortMalloc+0x194>)
 8009c16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c18:	f7fe fb4e 	bl	80082b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	f003 0307 	and.w	r3, r3, #7
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00a      	beq.n	8009c3c <pvPortMalloc+0x174>
	__asm volatile
 8009c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2a:	f383 8811 	msr	BASEPRI, r3
 8009c2e:	f3bf 8f6f 	isb	sy
 8009c32:	f3bf 8f4f 	dsb	sy
 8009c36:	60fb      	str	r3, [r7, #12]
}
 8009c38:	bf00      	nop
 8009c3a:	e7fe      	b.n	8009c3a <pvPortMalloc+0x172>
	return pvReturn;
 8009c3c:	69fb      	ldr	r3, [r7, #28]
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3728      	adds	r7, #40	; 0x28
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	20005ecc 	.word	0x20005ecc
 8009c4c:	20005ee0 	.word	0x20005ee0
 8009c50:	20005ed0 	.word	0x20005ed0
 8009c54:	20005ec4 	.word	0x20005ec4
 8009c58:	20005ed4 	.word	0x20005ed4
 8009c5c:	20005ed8 	.word	0x20005ed8

08009c60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b086      	sub	sp, #24
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d04d      	beq.n	8009d0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c72:	2308      	movs	r3, #8
 8009c74:	425b      	negs	r3, r3
 8009c76:	697a      	ldr	r2, [r7, #20]
 8009c78:	4413      	add	r3, r2
 8009c7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	685a      	ldr	r2, [r3, #4]
 8009c84:	4b24      	ldr	r3, [pc, #144]	; (8009d18 <vPortFree+0xb8>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4013      	ands	r3, r2
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d10a      	bne.n	8009ca4 <vPortFree+0x44>
	__asm volatile
 8009c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c92:	f383 8811 	msr	BASEPRI, r3
 8009c96:	f3bf 8f6f 	isb	sy
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	60fb      	str	r3, [r7, #12]
}
 8009ca0:	bf00      	nop
 8009ca2:	e7fe      	b.n	8009ca2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d00a      	beq.n	8009cc2 <vPortFree+0x62>
	__asm volatile
 8009cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb0:	f383 8811 	msr	BASEPRI, r3
 8009cb4:	f3bf 8f6f 	isb	sy
 8009cb8:	f3bf 8f4f 	dsb	sy
 8009cbc:	60bb      	str	r3, [r7, #8]
}
 8009cbe:	bf00      	nop
 8009cc0:	e7fe      	b.n	8009cc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	685a      	ldr	r2, [r3, #4]
 8009cc6:	4b14      	ldr	r3, [pc, #80]	; (8009d18 <vPortFree+0xb8>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4013      	ands	r3, r2
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d01e      	beq.n	8009d0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d11a      	bne.n	8009d0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	685a      	ldr	r2, [r3, #4]
 8009cdc:	4b0e      	ldr	r3, [pc, #56]	; (8009d18 <vPortFree+0xb8>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	43db      	mvns	r3, r3
 8009ce2:	401a      	ands	r2, r3
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ce8:	f7fe fad8 	bl	800829c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	685a      	ldr	r2, [r3, #4]
 8009cf0:	4b0a      	ldr	r3, [pc, #40]	; (8009d1c <vPortFree+0xbc>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	4a09      	ldr	r2, [pc, #36]	; (8009d1c <vPortFree+0xbc>)
 8009cf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cfa:	6938      	ldr	r0, [r7, #16]
 8009cfc:	f000 f874 	bl	8009de8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009d00:	4b07      	ldr	r3, [pc, #28]	; (8009d20 <vPortFree+0xc0>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	3301      	adds	r3, #1
 8009d06:	4a06      	ldr	r2, [pc, #24]	; (8009d20 <vPortFree+0xc0>)
 8009d08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009d0a:	f7fe fad5 	bl	80082b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d0e:	bf00      	nop
 8009d10:	3718      	adds	r7, #24
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	20005ee0 	.word	0x20005ee0
 8009d1c:	20005ed0 	.word	0x20005ed0
 8009d20:	20005edc 	.word	0x20005edc

08009d24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009d2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d30:	4b27      	ldr	r3, [pc, #156]	; (8009dd0 <prvHeapInit+0xac>)
 8009d32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f003 0307 	and.w	r3, r3, #7
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d00c      	beq.n	8009d58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	3307      	adds	r3, #7
 8009d42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f023 0307 	bic.w	r3, r3, #7
 8009d4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	1ad3      	subs	r3, r2, r3
 8009d52:	4a1f      	ldr	r2, [pc, #124]	; (8009dd0 <prvHeapInit+0xac>)
 8009d54:	4413      	add	r3, r2
 8009d56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d5c:	4a1d      	ldr	r2, [pc, #116]	; (8009dd4 <prvHeapInit+0xb0>)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d62:	4b1c      	ldr	r3, [pc, #112]	; (8009dd4 <prvHeapInit+0xb0>)
 8009d64:	2200      	movs	r2, #0
 8009d66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d70:	2208      	movs	r2, #8
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	1a9b      	subs	r3, r3, r2
 8009d76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f023 0307 	bic.w	r3, r3, #7
 8009d7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	4a15      	ldr	r2, [pc, #84]	; (8009dd8 <prvHeapInit+0xb4>)
 8009d84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d86:	4b14      	ldr	r3, [pc, #80]	; (8009dd8 <prvHeapInit+0xb4>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d8e:	4b12      	ldr	r3, [pc, #72]	; (8009dd8 <prvHeapInit+0xb4>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2200      	movs	r2, #0
 8009d94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	1ad2      	subs	r2, r2, r3
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009da4:	4b0c      	ldr	r3, [pc, #48]	; (8009dd8 <prvHeapInit+0xb4>)
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	4a0a      	ldr	r2, [pc, #40]	; (8009ddc <prvHeapInit+0xb8>)
 8009db2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	4a09      	ldr	r2, [pc, #36]	; (8009de0 <prvHeapInit+0xbc>)
 8009dba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009dbc:	4b09      	ldr	r3, [pc, #36]	; (8009de4 <prvHeapInit+0xc0>)
 8009dbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009dc2:	601a      	str	r2, [r3, #0]
}
 8009dc4:	bf00      	nop
 8009dc6:	3714      	adds	r7, #20
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr
 8009dd0:	200022c4 	.word	0x200022c4
 8009dd4:	20005ec4 	.word	0x20005ec4
 8009dd8:	20005ecc 	.word	0x20005ecc
 8009ddc:	20005ed4 	.word	0x20005ed4
 8009de0:	20005ed0 	.word	0x20005ed0
 8009de4:	20005ee0 	.word	0x20005ee0

08009de8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009df0:	4b28      	ldr	r3, [pc, #160]	; (8009e94 <prvInsertBlockIntoFreeList+0xac>)
 8009df2:	60fb      	str	r3, [r7, #12]
 8009df4:	e002      	b.n	8009dfc <prvInsertBlockIntoFreeList+0x14>
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	60fb      	str	r3, [r7, #12]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d8f7      	bhi.n	8009df6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	68ba      	ldr	r2, [r7, #8]
 8009e10:	4413      	add	r3, r2
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d108      	bne.n	8009e2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	685a      	ldr	r2, [r3, #4]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	441a      	add	r2, r3
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	68ba      	ldr	r2, [r7, #8]
 8009e34:	441a      	add	r2, r3
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d118      	bne.n	8009e70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	4b15      	ldr	r3, [pc, #84]	; (8009e98 <prvInsertBlockIntoFreeList+0xb0>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d00d      	beq.n	8009e66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	685a      	ldr	r2, [r3, #4]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	441a      	add	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	601a      	str	r2, [r3, #0]
 8009e64:	e008      	b.n	8009e78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e66:	4b0c      	ldr	r3, [pc, #48]	; (8009e98 <prvInsertBlockIntoFreeList+0xb0>)
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	601a      	str	r2, [r3, #0]
 8009e6e:	e003      	b.n	8009e78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d002      	beq.n	8009e86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e86:	bf00      	nop
 8009e88:	3714      	adds	r7, #20
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	20005ec4 	.word	0x20005ec4
 8009e98:	20005ecc 	.word	0x20005ecc

08009e9c <APP_timeoutTimerIRQHandler>:
/********************************************************************************/

#if 1 /* Software Timer IRQ Handlers */

void APP_timeoutTimerIRQHandler(void* param)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]

}
 8009ea4:	bf00      	nop
 8009ea6:	370c      	adds	r7, #12
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <APP_periodicTimerIRQHandler>:

void APP_periodicTimerIRQHandler(void* param)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
	/* msg Tick Counter inc every 10ms */
	__GL.can.msgTickCounter_u32++;
 8009eb8:	4b17      	ldr	r3, [pc, #92]	; (8009f18 <APP_periodicTimerIRQHandler+0x68>)
 8009eba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	4a15      	ldr	r2, [pc, #84]	; (8009f18 <APP_periodicTimerIRQHandler+0x68>)
 8009ec2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

	static U8 adcSequance;

	adcSequance = __GL.can.msgTickCounter_u32 % 10 ;
 8009ec6:	4b14      	ldr	r3, [pc, #80]	; (8009f18 <APP_periodicTimerIRQHandler+0x68>)
 8009ec8:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
 8009ecc:	4b13      	ldr	r3, [pc, #76]	; (8009f1c <APP_periodicTimerIRQHandler+0x6c>)
 8009ece:	fba3 2301 	umull	r2, r3, r3, r1
 8009ed2:	08da      	lsrs	r2, r3, #3
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4413      	add	r3, r2
 8009eda:	005b      	lsls	r3, r3, #1
 8009edc:	1aca      	subs	r2, r1, r3
 8009ede:	b2d2      	uxtb	r2, r2
 8009ee0:	4b0f      	ldr	r3, [pc, #60]	; (8009f20 <APP_periodicTimerIRQHandler+0x70>)
 8009ee2:	701a      	strb	r2, [r3, #0]
	if( adcSequance == 0 )
 8009ee4:	4b0e      	ldr	r3, [pc, #56]	; (8009f20 <APP_periodicTimerIRQHandler+0x70>)
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d107      	bne.n	8009efc <APP_periodicTimerIRQHandler+0x4c>
	{
		__GL.mainState.flag.adc = TRUE;
 8009eec:	4a0a      	ldr	r2, [pc, #40]	; (8009f18 <APP_periodicTimerIRQHandler+0x68>)
 8009eee:	f892 3a02 	ldrb.w	r3, [r2, #2562]	; 0xa02
 8009ef2:	f043 0301 	orr.w	r3, r3, #1
 8009ef6:	f882 3a02 	strb.w	r3, [r2, #2562]	; 0xa02
	else
	{
		__GL.mainState.flag.adc = FALSE;
	}

}
 8009efa:	e006      	b.n	8009f0a <APP_periodicTimerIRQHandler+0x5a>
		__GL.mainState.flag.adc = FALSE;
 8009efc:	4a06      	ldr	r2, [pc, #24]	; (8009f18 <APP_periodicTimerIRQHandler+0x68>)
 8009efe:	f892 3a02 	ldrb.w	r3, [r2, #2562]	; 0xa02
 8009f02:	f36f 0300 	bfc	r3, #0, #1
 8009f06:	f882 3a02 	strb.w	r3, [r2, #2562]	; 0xa02
}
 8009f0a:	bf00      	nop
 8009f0c:	370c      	adds	r7, #12
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop
 8009f18:	20000084 	.word	0x20000084
 8009f1c:	cccccccd 	.word	0xcccccccd
 8009f20:	2000bf9c 	.word	0x2000bf9c

08009f24 <APP_broadcast01TimerIRQHandler>:


/* BroadCast Timers IRQ Handlers */
//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
void APP_broadcast01TimerIRQHandler(void* param)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
	__GL.can.msgSelect.Flag.ID01 = TRUE;
 8009f2c:	4a06      	ldr	r2, [pc, #24]	; (8009f48 <APP_broadcast01TimerIRQHandler+0x24>)
 8009f2e:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 8009f32:	f043 0301 	orr.w	r3, r3, #1
 8009f36:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304
	Process_CAN_Run();
 8009f3a:	f000 fbed 	bl	800a718 <Process_CAN_Run>
}
 8009f3e:	bf00      	nop
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	20000084 	.word	0x20000084

08009f4c <APP_broadcast02TimerIRQHandler>:
void APP_broadcast02TimerIRQHandler(void* param)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
	__GL.can.msgSelect.Flag.ID02 = TRUE;
 8009f54:	4a06      	ldr	r2, [pc, #24]	; (8009f70 <APP_broadcast02TimerIRQHandler+0x24>)
 8009f56:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 8009f5a:	f043 0302 	orr.w	r3, r3, #2
 8009f5e:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304
	Process_CAN_Run();
 8009f62:	f000 fbd9 	bl	800a718 <Process_CAN_Run>
}
 8009f66:	bf00      	nop
 8009f68:	3708      	adds	r7, #8
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	20000084 	.word	0x20000084

08009f74 <APP_broadcast03TimerIRQHandler>:
void APP_broadcast03TimerIRQHandler(void* param)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
	__GL.can.msgSelect.Flag.ID03 = TRUE;
 8009f7c:	4a06      	ldr	r2, [pc, #24]	; (8009f98 <APP_broadcast03TimerIRQHandler+0x24>)
 8009f7e:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 8009f82:	f043 0304 	orr.w	r3, r3, #4
 8009f86:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304
	Process_CAN_Run();
 8009f8a:	f000 fbc5 	bl	800a718 <Process_CAN_Run>
}
 8009f8e:	bf00      	nop
 8009f90:	3708      	adds	r7, #8
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	20000084 	.word	0x20000084

08009f9c <APP_broadcast04TimerIRQHandler>:
void APP_broadcast04TimerIRQHandler(void* param)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
	__GL.can.msgSelect.Flag.ID04 = TRUE;
 8009fa4:	4a06      	ldr	r2, [pc, #24]	; (8009fc0 <APP_broadcast04TimerIRQHandler+0x24>)
 8009fa6:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 8009faa:	f043 0308 	orr.w	r3, r3, #8
 8009fae:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304
	Process_CAN_Run();
 8009fb2:	f000 fbb1 	bl	800a718 <Process_CAN_Run>
}
 8009fb6:	bf00      	nop
 8009fb8:	3708      	adds	r7, #8
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	20000084 	.word	0x20000084

08009fc4 <APP_broadcast05TimerIRQHandler>:
void APP_broadcast05TimerIRQHandler(void* param)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
	__GL.can.msgSelect.Flag.ID05 = TRUE;
 8009fcc:	4a06      	ldr	r2, [pc, #24]	; (8009fe8 <APP_broadcast05TimerIRQHandler+0x24>)
 8009fce:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 8009fd2:	f043 0310 	orr.w	r3, r3, #16
 8009fd6:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304
	Process_CAN_Run();
 8009fda:	f000 fb9d 	bl	800a718 <Process_CAN_Run>
}
 8009fde:	bf00      	nop
 8009fe0:	3708      	adds	r7, #8
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	20000084 	.word	0x20000084

08009fec <APP_broadcast06TimerIRQHandler>:
void APP_broadcast06TimerIRQHandler(void* param)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
	__GL.can.msgSelect.Flag.ID06 = TRUE;
 8009ff4:	4a06      	ldr	r2, [pc, #24]	; (800a010 <APP_broadcast06TimerIRQHandler+0x24>)
 8009ff6:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 8009ffa:	f043 0320 	orr.w	r3, r3, #32
 8009ffe:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304
	Process_CAN_Run();
 800a002:	f000 fb89 	bl	800a718 <Process_CAN_Run>
}
 800a006:	bf00      	nop
 800a008:	3708      	adds	r7, #8
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	20000084 	.word	0x20000084

0800a014 <APP_broadcast07TimerIRQHandler>:
void APP_broadcast07TimerIRQHandler(void* param)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
	__GL.can.msgSelect.Flag.ID07 = TRUE;
 800a01c:	4a06      	ldr	r2, [pc, #24]	; (800a038 <APP_broadcast07TimerIRQHandler+0x24>)
 800a01e:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 800a022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a026:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304
	Process_CAN_Run();
 800a02a:	f000 fb75 	bl	800a718 <Process_CAN_Run>
}
 800a02e:	bf00      	nop
 800a030:	3708      	adds	r7, #8
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	20000084 	.word	0x20000084

0800a03c <DEBUG_printThread>:

#endif

#ifdef DEBUG_THREAD
void    DEBUG_printThread(char *threadName, char *threadStatus)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b090      	sub	sp, #64	; 0x40
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]

    char console_message[50] = {0};
 800a046:	2300      	movs	r3, #0
 800a048:	60fb      	str	r3, [r7, #12]
 800a04a:	f107 0310 	add.w	r3, r7, #16
 800a04e:	222e      	movs	r2, #46	; 0x2e
 800a050:	2100      	movs	r1, #0
 800a052:	4618      	mov	r0, r3
 800a054:	f001 fe4a 	bl	800bcec <memset>

    sprintf(&console_message[0], "%s is %s. \n", &threadName[0], &threadStatus[0]);
 800a058:	f107 000c 	add.w	r0, r7, #12
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	4906      	ldr	r1, [pc, #24]	; (800a07c <DEBUG_printThread+0x40>)
 800a062:	f001 fe4b 	bl	800bcfc <siprintf>

    HAL_UART_Transmit(&DEBUG_UART, (U8 *)&console_message[0], sizeof(console_message), 10);
 800a066:	f107 010c 	add.w	r1, r7, #12
 800a06a:	230a      	movs	r3, #10
 800a06c:	2232      	movs	r2, #50	; 0x32
 800a06e:	4804      	ldr	r0, [pc, #16]	; (800a080 <DEBUG_printThread+0x44>)
 800a070:	f7fc fa81 	bl	8006576 <HAL_UART_Transmit>
    return;
 800a074:	bf00      	nop

}
 800a076:	3740      	adds	r7, #64	; 0x40
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	0800c780 	.word	0x0800c780
 800a080:	2000139c 	.word	0x2000139c

0800a084 <Initilialise_App>:
#endif


void Initilialise_App(void)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af04      	add	r7, sp, #16
	/***************** Create Static Threads ******************************/

#ifdef BSP_PROCESS_BODYCONTROLMAIN
	xHandle.Process_BodyControlMAIN = xTaskCreateStatic
 800a08a:	4bac      	ldr	r3, [pc, #688]	; (800a33c <Initilialise_App+0x2b8>)
 800a08c:	9302      	str	r3, [sp, #8]
 800a08e:	4bac      	ldr	r3, [pc, #688]	; (800a340 <Initilialise_App+0x2bc>)
 800a090:	9301      	str	r3, [sp, #4]
 800a092:	2301      	movs	r3, #1
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	2301      	movs	r3, #1
 800a098:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a09c:	49a9      	ldr	r1, [pc, #676]	; (800a344 <Initilialise_App+0x2c0>)
 800a09e:	48aa      	ldr	r0, [pc, #680]	; (800a348 <Initilialise_App+0x2c4>)
 800a0a0:	f7fd fec0 	bl	8007e24 <xTaskCreateStatic>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	4aa9      	ldr	r2, [pc, #676]	; (800a34c <Initilialise_App+0x2c8>)
 800a0a8:	6013      	str	r3, [r2, #0]
										);
#endif


#ifdef BSP_PROCESS_ADC
	xHandle.Process_ADC = xTaskCreateStatic
 800a0aa:	4ba9      	ldr	r3, [pc, #676]	; (800a350 <Initilialise_App+0x2cc>)
 800a0ac:	9302      	str	r3, [sp, #8]
 800a0ae:	4ba9      	ldr	r3, [pc, #676]	; (800a354 <Initilialise_App+0x2d0>)
 800a0b0:	9301      	str	r3, [sp, #4]
 800a0b2:	2306      	movs	r3, #6
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0bc:	49a6      	ldr	r1, [pc, #664]	; (800a358 <Initilialise_App+0x2d4>)
 800a0be:	48a7      	ldr	r0, [pc, #668]	; (800a35c <Initilialise_App+0x2d8>)
 800a0c0:	f7fd feb0 	bl	8007e24 <xTaskCreateStatic>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	4aa1      	ldr	r2, [pc, #644]	; (800a34c <Initilialise_App+0x2c8>)
 800a0c8:	6053      	str	r3, [r2, #4]
										&xTaskBuffer.Process_ADC
										);
#endif

#ifdef BSP_PROCESS_AUDIO
	xHandle.Process_AUDIO = xTaskCreateStatic
 800a0ca:	4ba5      	ldr	r3, [pc, #660]	; (800a360 <Initilialise_App+0x2dc>)
 800a0cc:	9302      	str	r3, [sp, #8]
 800a0ce:	4ba5      	ldr	r3, [pc, #660]	; (800a364 <Initilialise_App+0x2e0>)
 800a0d0:	9301      	str	r3, [sp, #4]
 800a0d2:	230a      	movs	r3, #10
 800a0d4:	9300      	str	r3, [sp, #0]
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0dc:	49a2      	ldr	r1, [pc, #648]	; (800a368 <Initilialise_App+0x2e4>)
 800a0de:	48a3      	ldr	r0, [pc, #652]	; (800a36c <Initilialise_App+0x2e8>)
 800a0e0:	f7fd fea0 	bl	8007e24 <xTaskCreateStatic>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	4a99      	ldr	r2, [pc, #612]	; (800a34c <Initilialise_App+0x2c8>)
 800a0e8:	6093      	str	r3, [r2, #8]
										&xTaskBuffer.Process_AUDIO
										);
#endif

#ifdef BSP_PROCESS_CAN
	xHandle.Process_CAN = xTaskCreateStatic
 800a0ea:	4ba1      	ldr	r3, [pc, #644]	; (800a370 <Initilialise_App+0x2ec>)
 800a0ec:	9302      	str	r3, [sp, #8]
 800a0ee:	4ba1      	ldr	r3, [pc, #644]	; (800a374 <Initilialise_App+0x2f0>)
 800a0f0:	9301      	str	r3, [sp, #4]
 800a0f2:	2305      	movs	r3, #5
 800a0f4:	9300      	str	r3, [sp, #0]
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0fc:	499e      	ldr	r1, [pc, #632]	; (800a378 <Initilialise_App+0x2f4>)
 800a0fe:	489f      	ldr	r0, [pc, #636]	; (800a37c <Initilialise_App+0x2f8>)
 800a100:	f7fd fe90 	bl	8007e24 <xTaskCreateStatic>
 800a104:	4603      	mov	r3, r0
 800a106:	4a91      	ldr	r2, [pc, #580]	; (800a34c <Initilialise_App+0x2c8>)
 800a108:	60d3      	str	r3, [r2, #12]
										&xTaskBuffer.Process_CAN
										);
#endif

#ifdef BSP_PROCESS_CONTROL
	xHandle.Process_CONTROL = xTaskCreateStatic
 800a10a:	4b9d      	ldr	r3, [pc, #628]	; (800a380 <Initilialise_App+0x2fc>)
 800a10c:	9302      	str	r3, [sp, #8]
 800a10e:	4b9d      	ldr	r3, [pc, #628]	; (800a384 <Initilialise_App+0x300>)
 800a110:	9301      	str	r3, [sp, #4]
 800a112:	2304      	movs	r3, #4
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	2301      	movs	r3, #1
 800a118:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a11c:	499a      	ldr	r1, [pc, #616]	; (800a388 <Initilialise_App+0x304>)
 800a11e:	489b      	ldr	r0, [pc, #620]	; (800a38c <Initilialise_App+0x308>)
 800a120:	f7fd fe80 	bl	8007e24 <xTaskCreateStatic>
 800a124:	4603      	mov	r3, r0
 800a126:	4a89      	ldr	r2, [pc, #548]	; (800a34c <Initilialise_App+0x2c8>)
 800a128:	6113      	str	r3, [r2, #16]
										&xTaskBuffer.Process_CONTROL
										);
#endif

#ifdef BSP_PROCESS_FLASH
	xHandle.Process_FLASH = xTaskCreateStatic
 800a12a:	4b99      	ldr	r3, [pc, #612]	; (800a390 <Initilialise_App+0x30c>)
 800a12c:	9302      	str	r3, [sp, #8]
 800a12e:	4b99      	ldr	r3, [pc, #612]	; (800a394 <Initilialise_App+0x310>)
 800a130:	9301      	str	r3, [sp, #4]
 800a132:	2302      	movs	r3, #2
 800a134:	9300      	str	r3, [sp, #0]
 800a136:	2301      	movs	r3, #1
 800a138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a13c:	4996      	ldr	r1, [pc, #600]	; (800a398 <Initilialise_App+0x314>)
 800a13e:	4897      	ldr	r0, [pc, #604]	; (800a39c <Initilialise_App+0x318>)
 800a140:	f7fd fe70 	bl	8007e24 <xTaskCreateStatic>
 800a144:	4603      	mov	r3, r0
 800a146:	4a81      	ldr	r2, [pc, #516]	; (800a34c <Initilialise_App+0x2c8>)
 800a148:	6153      	str	r3, [r2, #20]
										&xTaskBuffer.Process_FLASH
										);
#endif

#ifdef BSP_PROCESS_POWERSWITCH
	xHandle.Process_POWERSWITCH = xTaskCreateStatic
 800a14a:	4b95      	ldr	r3, [pc, #596]	; (800a3a0 <Initilialise_App+0x31c>)
 800a14c:	9302      	str	r3, [sp, #8]
 800a14e:	4b95      	ldr	r3, [pc, #596]	; (800a3a4 <Initilialise_App+0x320>)
 800a150:	9301      	str	r3, [sp, #4]
 800a152:	2307      	movs	r3, #7
 800a154:	9300      	str	r3, [sp, #0]
 800a156:	2301      	movs	r3, #1
 800a158:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a15c:	4992      	ldr	r1, [pc, #584]	; (800a3a8 <Initilialise_App+0x324>)
 800a15e:	4893      	ldr	r0, [pc, #588]	; (800a3ac <Initilialise_App+0x328>)
 800a160:	f7fd fe60 	bl	8007e24 <xTaskCreateStatic>
 800a164:	4603      	mov	r3, r0
 800a166:	4a79      	ldr	r2, [pc, #484]	; (800a34c <Initilialise_App+0x2c8>)
 800a168:	6193      	str	r3, [r2, #24]
										&xTaskBuffer.Process_POWERSWITCH
										);
#endif

#ifdef BSP_PROCESS_RTC
	xHandle.Process_RTC = xTaskCreateStatic
 800a16a:	4b91      	ldr	r3, [pc, #580]	; (800a3b0 <Initilialise_App+0x32c>)
 800a16c:	9302      	str	r3, [sp, #8]
 800a16e:	4b91      	ldr	r3, [pc, #580]	; (800a3b4 <Initilialise_App+0x330>)
 800a170:	9301      	str	r3, [sp, #4]
 800a172:	2303      	movs	r3, #3
 800a174:	9300      	str	r3, [sp, #0]
 800a176:	2301      	movs	r3, #1
 800a178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a17c:	498e      	ldr	r1, [pc, #568]	; (800a3b8 <Initilialise_App+0x334>)
 800a17e:	488f      	ldr	r0, [pc, #572]	; (800a3bc <Initilialise_App+0x338>)
 800a180:	f7fd fe50 	bl	8007e24 <xTaskCreateStatic>
 800a184:	4603      	mov	r3, r0
 800a186:	4a71      	ldr	r2, [pc, #452]	; (800a34c <Initilialise_App+0x2c8>)
 800a188:	61d3      	str	r3, [r2, #28]
										&xTaskBuffer.Process_RTC
										);
#endif

#ifdef BSP_PROCESS_SDCARD
	xHandle.Process_SDCARD = xTaskCreateStatic
 800a18a:	4b8d      	ldr	r3, [pc, #564]	; (800a3c0 <Initilialise_App+0x33c>)
 800a18c:	9302      	str	r3, [sp, #8]
 800a18e:	4b8d      	ldr	r3, [pc, #564]	; (800a3c4 <Initilialise_App+0x340>)
 800a190:	9301      	str	r3, [sp, #4]
 800a192:	2309      	movs	r3, #9
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	2301      	movs	r3, #1
 800a198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a19c:	498a      	ldr	r1, [pc, #552]	; (800a3c8 <Initilialise_App+0x344>)
 800a19e:	488b      	ldr	r0, [pc, #556]	; (800a3cc <Initilialise_App+0x348>)
 800a1a0:	f7fd fe40 	bl	8007e24 <xTaskCreateStatic>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	4a69      	ldr	r2, [pc, #420]	; (800a34c <Initilialise_App+0x2c8>)
 800a1a8:	6213      	str	r3, [r2, #32]
										&xTaskBuffer.Process_SDCARD
										);
#endif

#ifdef BSP_PROCESS_TELEMETRY
	xHandle.Process_TELEMETRY = xTaskCreateStatic
 800a1aa:	4b89      	ldr	r3, [pc, #548]	; (800a3d0 <Initilialise_App+0x34c>)
 800a1ac:	9302      	str	r3, [sp, #8]
 800a1ae:	4b89      	ldr	r3, [pc, #548]	; (800a3d4 <Initilialise_App+0x350>)
 800a1b0:	9301      	str	r3, [sp, #4]
 800a1b2:	2308      	movs	r3, #8
 800a1b4:	9300      	str	r3, [sp, #0]
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1bc:	4986      	ldr	r1, [pc, #536]	; (800a3d8 <Initilialise_App+0x354>)
 800a1be:	4887      	ldr	r0, [pc, #540]	; (800a3dc <Initilialise_App+0x358>)
 800a1c0:	f7fd fe30 	bl	8007e24 <xTaskCreateStatic>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	4a61      	ldr	r2, [pc, #388]	; (800a34c <Initilialise_App+0x2c8>)
 800a1c8:	6253      	str	r3, [r2, #36]	; 0x24


/********************* Binary Semaphore Create **********************/

#ifdef BSP_PROCESS_ADC
	xSemHandle.Process_ADC 			= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_ADC);
 800a1ca:	2303      	movs	r3, #3
 800a1cc:	9300      	str	r3, [sp, #0]
 800a1ce:	4b84      	ldr	r3, [pc, #528]	; (800a3e0 <Initilialise_App+0x35c>)
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	2100      	movs	r1, #0
 800a1d4:	2001      	movs	r0, #1
 800a1d6:	f7fd f87d 	bl	80072d4 <xQueueGenericCreateStatic>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	4a81      	ldr	r2, [pc, #516]	; (800a3e4 <Initilialise_App+0x360>)
 800a1de:	6013      	str	r3, [r2, #0]
#endif

#ifdef BSP_PROCESS_AUDIO
	xSemHandle.Process_AUDIO 		= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_AUDIO);
 800a1e0:	2303      	movs	r3, #3
 800a1e2:	9300      	str	r3, [sp, #0]
 800a1e4:	4b80      	ldr	r3, [pc, #512]	; (800a3e8 <Initilialise_App+0x364>)
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	2100      	movs	r1, #0
 800a1ea:	2001      	movs	r0, #1
 800a1ec:	f7fd f872 	bl	80072d4 <xQueueGenericCreateStatic>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	4a7c      	ldr	r2, [pc, #496]	; (800a3e4 <Initilialise_App+0x360>)
 800a1f4:	6053      	str	r3, [r2, #4]
#endif

#ifdef BSP_PROCESS_CAN
	xSemHandle.Process_CAN 			= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CAN);
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	4b7c      	ldr	r3, [pc, #496]	; (800a3ec <Initilialise_App+0x368>)
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	2100      	movs	r1, #0
 800a200:	2001      	movs	r0, #1
 800a202:	f7fd f867 	bl	80072d4 <xQueueGenericCreateStatic>
 800a206:	4603      	mov	r3, r0
 800a208:	4a76      	ldr	r2, [pc, #472]	; (800a3e4 <Initilialise_App+0x360>)
 800a20a:	6093      	str	r3, [r2, #8]
#endif

#ifdef BSP_PROCESS_CONTROL
	xSemHandle.Process_CONTROL 		= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CONTROL);
 800a20c:	2303      	movs	r3, #3
 800a20e:	9300      	str	r3, [sp, #0]
 800a210:	4b77      	ldr	r3, [pc, #476]	; (800a3f0 <Initilialise_App+0x36c>)
 800a212:	2200      	movs	r2, #0
 800a214:	2100      	movs	r1, #0
 800a216:	2001      	movs	r0, #1
 800a218:	f7fd f85c 	bl	80072d4 <xQueueGenericCreateStatic>
 800a21c:	4603      	mov	r3, r0
 800a21e:	4a71      	ldr	r2, [pc, #452]	; (800a3e4 <Initilialise_App+0x360>)
 800a220:	60d3      	str	r3, [r2, #12]
#endif

#ifdef BSP_PROCESS_FLASH
	xSemHandle.Process_FLASH 		= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_FLASH);
 800a222:	2303      	movs	r3, #3
 800a224:	9300      	str	r3, [sp, #0]
 800a226:	4b73      	ldr	r3, [pc, #460]	; (800a3f4 <Initilialise_App+0x370>)
 800a228:	2200      	movs	r2, #0
 800a22a:	2100      	movs	r1, #0
 800a22c:	2001      	movs	r0, #1
 800a22e:	f7fd f851 	bl	80072d4 <xQueueGenericCreateStatic>
 800a232:	4603      	mov	r3, r0
 800a234:	4a6b      	ldr	r2, [pc, #428]	; (800a3e4 <Initilialise_App+0x360>)
 800a236:	6113      	str	r3, [r2, #16]
#endif

#ifdef BSP_PROCESS_POWERSWITCH
	xSemHandle.Process_POWERSWITCH 	= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_POWERSWITCH);
 800a238:	2303      	movs	r3, #3
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	4b6e      	ldr	r3, [pc, #440]	; (800a3f8 <Initilialise_App+0x374>)
 800a23e:	2200      	movs	r2, #0
 800a240:	2100      	movs	r1, #0
 800a242:	2001      	movs	r0, #1
 800a244:	f7fd f846 	bl	80072d4 <xQueueGenericCreateStatic>
 800a248:	4603      	mov	r3, r0
 800a24a:	4a66      	ldr	r2, [pc, #408]	; (800a3e4 <Initilialise_App+0x360>)
 800a24c:	6153      	str	r3, [r2, #20]
#endif

#ifdef BSP_PROCESS_RTC
	xSemHandle.Process_RTC 			= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_RTC);
 800a24e:	2303      	movs	r3, #3
 800a250:	9300      	str	r3, [sp, #0]
 800a252:	4b6a      	ldr	r3, [pc, #424]	; (800a3fc <Initilialise_App+0x378>)
 800a254:	2200      	movs	r2, #0
 800a256:	2100      	movs	r1, #0
 800a258:	2001      	movs	r0, #1
 800a25a:	f7fd f83b 	bl	80072d4 <xQueueGenericCreateStatic>
 800a25e:	4603      	mov	r3, r0
 800a260:	4a60      	ldr	r2, [pc, #384]	; (800a3e4 <Initilialise_App+0x360>)
 800a262:	6193      	str	r3, [r2, #24]
#endif

#ifdef BSP_PROCESS_SDCARD
	xSemHandle.Process_SDCARD 		= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_SDCARD);
 800a264:	2303      	movs	r3, #3
 800a266:	9300      	str	r3, [sp, #0]
 800a268:	4b65      	ldr	r3, [pc, #404]	; (800a400 <Initilialise_App+0x37c>)
 800a26a:	2200      	movs	r2, #0
 800a26c:	2100      	movs	r1, #0
 800a26e:	2001      	movs	r0, #1
 800a270:	f7fd f830 	bl	80072d4 <xQueueGenericCreateStatic>
 800a274:	4603      	mov	r3, r0
 800a276:	4a5b      	ldr	r2, [pc, #364]	; (800a3e4 <Initilialise_App+0x360>)
 800a278:	61d3      	str	r3, [r2, #28]
#endif

#ifdef BSP_PROCESS_TELEMETRY
	xSemHandle.Process_TELEMETRY 	= xSemaphoreCreateBinaryStatic(&xSemaphore.Process_TELEMETRY);
 800a27a:	2303      	movs	r3, #3
 800a27c:	9300      	str	r3, [sp, #0]
 800a27e:	4b61      	ldr	r3, [pc, #388]	; (800a404 <Initilialise_App+0x380>)
 800a280:	2200      	movs	r2, #0
 800a282:	2100      	movs	r1, #0
 800a284:	2001      	movs	r0, #1
 800a286:	f7fd f825 	bl	80072d4 <xQueueGenericCreateStatic>
 800a28a:	4603      	mov	r3, r0
 800a28c:	4a55      	ldr	r2, [pc, #340]	; (800a3e4 <Initilialise_App+0x360>)
 800a28e:	6213      	str	r3, [r2, #32]
#endif


	/************************ Create  Software Timers ***********************************/

    xTimerID.periodic = 	osTimerNew( APP_periodicTimerIRQHandler			,
 800a290:	4b5d      	ldr	r3, [pc, #372]	; (800a408 <Initilialise_App+0x384>)
 800a292:	2200      	movs	r2, #0
 800a294:	2101      	movs	r1, #1
 800a296:	485d      	ldr	r0, [pc, #372]	; (800a40c <Initilialise_App+0x388>)
 800a298:	f7fc fe22 	bl	8006ee0 <osTimerNew>
 800a29c:	4603      	mov	r3, r0
 800a29e:	4a5c      	ldr	r2, [pc, #368]	; (800a410 <Initilialise_App+0x38c>)
 800a2a0:	6013      	str	r3, [r2, #0]
    									osTimerPeriodic						,
										NULL								,
										&APP_periodic_attributes			);

    xTimerID.timeout  = 	osTimerNew( APP_timeoutTimerIRQHandler			,
 800a2a2:	4b5c      	ldr	r3, [pc, #368]	; (800a414 <Initilialise_App+0x390>)
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	2100      	movs	r1, #0
 800a2a8:	485b      	ldr	r0, [pc, #364]	; (800a418 <Initilialise_App+0x394>)
 800a2aa:	f7fc fe19 	bl	8006ee0 <osTimerNew>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	4a57      	ldr	r2, [pc, #348]	; (800a410 <Initilialise_App+0x38c>)
 800a2b2:	6053      	str	r3, [r2, #4]
										NULL								,
										&APP_timeout_attributes				);

    /* Create Broadcast Timers */

    xTimerID.broadcast01 = 	osTimerNew( APP_broadcast01TimerIRQHandler		,
 800a2b4:	4b59      	ldr	r3, [pc, #356]	; (800a41c <Initilialise_App+0x398>)
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	2101      	movs	r1, #1
 800a2ba:	4859      	ldr	r0, [pc, #356]	; (800a420 <Initilialise_App+0x39c>)
 800a2bc:	f7fc fe10 	bl	8006ee0 <osTimerNew>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	4a53      	ldr	r2, [pc, #332]	; (800a410 <Initilialise_App+0x38c>)
 800a2c4:	6093      	str	r3, [r2, #8]
    									osTimerPeriodic						,
										NULL								,
										&APP_broadcast01_attributes			);

    xTimerID.broadcast02 = 	osTimerNew( APP_broadcast02TimerIRQHandler		,
 800a2c6:	4b57      	ldr	r3, [pc, #348]	; (800a424 <Initilialise_App+0x3a0>)
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2101      	movs	r1, #1
 800a2cc:	4856      	ldr	r0, [pc, #344]	; (800a428 <Initilialise_App+0x3a4>)
 800a2ce:	f7fc fe07 	bl	8006ee0 <osTimerNew>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	4a4e      	ldr	r2, [pc, #312]	; (800a410 <Initilialise_App+0x38c>)
 800a2d6:	60d3      	str	r3, [r2, #12]
    									osTimerPeriodic						,
										NULL								,
										&APP_broadcast02_attributes			);

    xTimerID.broadcast03 = 	osTimerNew( APP_broadcast03TimerIRQHandler		,
 800a2d8:	4b54      	ldr	r3, [pc, #336]	; (800a42c <Initilialise_App+0x3a8>)
 800a2da:	2200      	movs	r2, #0
 800a2dc:	2101      	movs	r1, #1
 800a2de:	4854      	ldr	r0, [pc, #336]	; (800a430 <Initilialise_App+0x3ac>)
 800a2e0:	f7fc fdfe 	bl	8006ee0 <osTimerNew>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	4a4a      	ldr	r2, [pc, #296]	; (800a410 <Initilialise_App+0x38c>)
 800a2e8:	6113      	str	r3, [r2, #16]
    									osTimerPeriodic						,
										NULL								,
										&APP_broadcast03_attributes			);

    xTimerID.broadcast04 = 	osTimerNew( APP_broadcast04TimerIRQHandler		,
 800a2ea:	4b52      	ldr	r3, [pc, #328]	; (800a434 <Initilialise_App+0x3b0>)
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	2101      	movs	r1, #1
 800a2f0:	4851      	ldr	r0, [pc, #324]	; (800a438 <Initilialise_App+0x3b4>)
 800a2f2:	f7fc fdf5 	bl	8006ee0 <osTimerNew>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	4a45      	ldr	r2, [pc, #276]	; (800a410 <Initilialise_App+0x38c>)
 800a2fa:	6153      	str	r3, [r2, #20]
    									osTimerPeriodic						,
										NULL								,
										&APP_broadcast04_attributes			);

    xTimerID.broadcast05 = 	osTimerNew( APP_broadcast05TimerIRQHandler		,
 800a2fc:	4b4f      	ldr	r3, [pc, #316]	; (800a43c <Initilialise_App+0x3b8>)
 800a2fe:	2200      	movs	r2, #0
 800a300:	2101      	movs	r1, #1
 800a302:	484f      	ldr	r0, [pc, #316]	; (800a440 <Initilialise_App+0x3bc>)
 800a304:	f7fc fdec 	bl	8006ee0 <osTimerNew>
 800a308:	4603      	mov	r3, r0
 800a30a:	4a41      	ldr	r2, [pc, #260]	; (800a410 <Initilialise_App+0x38c>)
 800a30c:	6193      	str	r3, [r2, #24]
    									osTimerPeriodic						,
										NULL								,
										&APP_broadcast05_attributes			);

    xTimerID.broadcast06 = 	osTimerNew( APP_broadcast06TimerIRQHandler		,
 800a30e:	4b4d      	ldr	r3, [pc, #308]	; (800a444 <Initilialise_App+0x3c0>)
 800a310:	2200      	movs	r2, #0
 800a312:	2101      	movs	r1, #1
 800a314:	484c      	ldr	r0, [pc, #304]	; (800a448 <Initilialise_App+0x3c4>)
 800a316:	f7fc fde3 	bl	8006ee0 <osTimerNew>
 800a31a:	4603      	mov	r3, r0
 800a31c:	4a3c      	ldr	r2, [pc, #240]	; (800a410 <Initilialise_App+0x38c>)
 800a31e:	61d3      	str	r3, [r2, #28]
    									osTimerPeriodic						,
										NULL								,
										&APP_broadcast06_attributes			);

    xTimerID.broadcast07 = 	osTimerNew( APP_broadcast07TimerIRQHandler		,
 800a320:	4b4a      	ldr	r3, [pc, #296]	; (800a44c <Initilialise_App+0x3c8>)
 800a322:	2200      	movs	r2, #0
 800a324:	2101      	movs	r1, #1
 800a326:	484a      	ldr	r0, [pc, #296]	; (800a450 <Initilialise_App+0x3cc>)
 800a328:	f7fc fdda 	bl	8006ee0 <osTimerNew>
 800a32c:	4603      	mov	r3, r0
 800a32e:	4a38      	ldr	r2, [pc, #224]	; (800a410 <Initilialise_App+0x38c>)
 800a330:	6213      	str	r3, [r2, #32]
//										&APP_broadcast08_attributes			);

    /*
    * 10ms Periodic Timer Start
    */
    osTimerStart(xTimerID.periodic, pdMS_TO_TICKS(10));
 800a332:	4b37      	ldr	r3, [pc, #220]	; (800a410 <Initilialise_App+0x38c>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	210a      	movs	r1, #10
 800a338:	4618      	mov	r0, r3
 800a33a:	e08b      	b.n	800a454 <Initilialise_App+0x3d0>
 800a33c:	20005ee4 	.word	0x20005ee4
 800a340:	2000627c 	.word	0x2000627c
 800a344:	0800c78c 	.word	0x0800c78c
 800a348:	0800a4dd 	.word	0x0800a4dd
 800a34c:	2000ba7c 	.word	0x2000ba7c
 800a350:	20005f40 	.word	0x20005f40
 800a354:	2000727c 	.word	0x2000727c
 800a358:	0800c7a4 	.word	0x0800c7a4
 800a35c:	0800a511 	.word	0x0800a511
 800a360:	20005f9c 	.word	0x20005f9c
 800a364:	20007a7c 	.word	0x20007a7c
 800a368:	0800c7b8 	.word	0x0800c7b8
 800a36c:	0800a619 	.word	0x0800a619
 800a370:	20005ff8 	.word	0x20005ff8
 800a374:	2000827c 	.word	0x2000827c
 800a378:	0800c7cc 	.word	0x0800c7cc
 800a37c:	0800a699 	.word	0x0800a699
 800a380:	20006054 	.word	0x20006054
 800a384:	20008a7c 	.word	0x20008a7c
 800a388:	0800c7e0 	.word	0x0800c7e0
 800a38c:	0800a7a1 	.word	0x0800a7a1
 800a390:	200060b0 	.word	0x200060b0
 800a394:	2000927c 	.word	0x2000927c
 800a398:	0800c7f8 	.word	0x0800c7f8
 800a39c:	0800a821 	.word	0x0800a821
 800a3a0:	2000610c 	.word	0x2000610c
 800a3a4:	20009a7c 	.word	0x20009a7c
 800a3a8:	0800c80c 	.word	0x0800c80c
 800a3ac:	0800a8a1 	.word	0x0800a8a1
 800a3b0:	20006168 	.word	0x20006168
 800a3b4:	2000a27c 	.word	0x2000a27c
 800a3b8:	0800c81c 	.word	0x0800c81c
 800a3bc:	0800a921 	.word	0x0800a921
 800a3c0:	200061c4 	.word	0x200061c4
 800a3c4:	2000aa7c 	.word	0x2000aa7c
 800a3c8:	0800c830 	.word	0x0800c830
 800a3cc:	0800a9a1 	.word	0x0800a9a1
 800a3d0:	20006220 	.word	0x20006220
 800a3d4:	2000b27c 	.word	0x2000b27c
 800a3d8:	0800c844 	.word	0x0800c844
 800a3dc:	0800aa21 	.word	0x0800aa21
 800a3e0:	2000baa4 	.word	0x2000baa4
 800a3e4:	2000bd74 	.word	0x2000bd74
 800a3e8:	2000baf4 	.word	0x2000baf4
 800a3ec:	2000bb44 	.word	0x2000bb44
 800a3f0:	2000bb94 	.word	0x2000bb94
 800a3f4:	2000bbe4 	.word	0x2000bbe4
 800a3f8:	2000bc34 	.word	0x2000bc34
 800a3fc:	2000bc84 	.word	0x2000bc84
 800a400:	2000bcd4 	.word	0x2000bcd4
 800a404:	2000bd24 	.word	0x2000bd24
 800a408:	0800c9f0 	.word	0x0800c9f0
 800a40c:	08009eb1 	.word	0x08009eb1
 800a410:	2000bdbc 	.word	0x2000bdbc
 800a414:	0800ca00 	.word	0x0800ca00
 800a418:	08009e9d 	.word	0x08009e9d
 800a41c:	0800c980 	.word	0x0800c980
 800a420:	08009f25 	.word	0x08009f25
 800a424:	0800c990 	.word	0x0800c990
 800a428:	08009f4d 	.word	0x08009f4d
 800a42c:	0800c9a0 	.word	0x0800c9a0
 800a430:	08009f75 	.word	0x08009f75
 800a434:	0800c9b0 	.word	0x0800c9b0
 800a438:	08009f9d 	.word	0x08009f9d
 800a43c:	0800c9c0 	.word	0x0800c9c0
 800a440:	08009fc5 	.word	0x08009fc5
 800a444:	0800c9d0 	.word	0x0800c9d0
 800a448:	08009fed 	.word	0x08009fed
 800a44c:	0800c9e0 	.word	0x0800c9e0
 800a450:	0800a015 	.word	0x0800a015
 800a454:	f7fc fdc0 	bl	8006fd8 <osTimerStart>
    /* Broadcast periodic sw timer start */

    /*
     * Broadcast01 - Start for Message 03
     */
    osTimerStart(xTimerID.broadcast01 , pdMS_TO_TICKS(100));
 800a458:	4b17      	ldr	r3, [pc, #92]	; (800a4b8 <Initilialise_App+0x434>)
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	2164      	movs	r1, #100	; 0x64
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fc fdba 	bl	8006fd8 <osTimerStart>

    /*
    * Broadcast02 - Start for Message 04
    */
    osTimerStart(xTimerID.broadcast02 , pdMS_TO_TICKS(100));
 800a464:	4b14      	ldr	r3, [pc, #80]	; (800a4b8 <Initilialise_App+0x434>)
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	2164      	movs	r1, #100	; 0x64
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7fc fdb4 	bl	8006fd8 <osTimerStart>

    /*
    * Broadcast03 - Start for Message 05
    */
    osTimerStart(xTimerID.broadcast03 , pdMS_TO_TICKS(100));
 800a470:	4b11      	ldr	r3, [pc, #68]	; (800a4b8 <Initilialise_App+0x434>)
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	2164      	movs	r1, #100	; 0x64
 800a476:	4618      	mov	r0, r3
 800a478:	f7fc fdae 	bl	8006fd8 <osTimerStart>

    /*
     * Broadcast04 - Start for Message 11
     */
    osTimerStart(xTimerID.broadcast04 , pdMS_TO_TICKS(100));
 800a47c:	4b0e      	ldr	r3, [pc, #56]	; (800a4b8 <Initilialise_App+0x434>)
 800a47e:	695b      	ldr	r3, [r3, #20]
 800a480:	2164      	movs	r1, #100	; 0x64
 800a482:	4618      	mov	r0, r3
 800a484:	f7fc fda8 	bl	8006fd8 <osTimerStart>

    /*
    * Broadcast05 - Start for Message 12
    */
    osTimerStart(xTimerID.broadcast05 , pdMS_TO_TICKS(100));
 800a488:	4b0b      	ldr	r3, [pc, #44]	; (800a4b8 <Initilialise_App+0x434>)
 800a48a:	699b      	ldr	r3, [r3, #24]
 800a48c:	2164      	movs	r1, #100	; 0x64
 800a48e:	4618      	mov	r0, r3
 800a490:	f7fc fda2 	bl	8006fd8 <osTimerStart>

    /*
    * Broadcast06 - Start for Message 19
    */
    osTimerStart(xTimerID.broadcast06 , pdMS_TO_TICKS(100));
 800a494:	4b08      	ldr	r3, [pc, #32]	; (800a4b8 <Initilialise_App+0x434>)
 800a496:	69db      	ldr	r3, [r3, #28]
 800a498:	2164      	movs	r1, #100	; 0x64
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7fc fd9c 	bl	8006fd8 <osTimerStart>

    /*
    * Broadcast07 - Start for Message 20
    */
    osTimerStart(xTimerID.broadcast07 , pdMS_TO_TICKS(100));
 800a4a0:	4b05      	ldr	r3, [pc, #20]	; (800a4b8 <Initilialise_App+0x434>)
 800a4a2:	6a1b      	ldr	r3, [r3, #32]
 800a4a4:	2164      	movs	r1, #100	; 0x64
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7fc fd96 	bl	8006fd8 <osTimerStart>
    vTaskDelay(pdMS_TO_TICKS(10));
 800a4ac:	200a      	movs	r0, #10
 800a4ae:	f7fd fe5b 	bl	8008168 <vTaskDelay>

#ifdef DEBUG_MODE
    HAL_UART_Receive_DMA(&huart1, (U8 *)&__GL.DEBUG_Buffer[0], (U8)DEBUG_MSG_SIZE);
#endif

}
 800a4b2:	bf00      	nop
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	2000bdbc 	.word	0x2000bdbc

0800a4bc <MAIN_App>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void MAIN_App(void)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	af00      	add	r7, sp, #0

	//@NOTICE: @DEL: Flash sekansları eklendigi zaman silinecektir.
	memset( &__GL , 0x00 , sizeof(__GL) );
 800a4c0:	f640 72bb 	movw	r2, #4027	; 0xfbb
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	4804      	ldr	r0, [pc, #16]	; (800a4d8 <MAIN_App+0x1c>)
 800a4c8:	f001 fc10 	bl	800bcec <memset>

	/* Create Threads, Semph, SW Timers */
    Initilialise_App();
 800a4cc:	f7ff fdda 	bl	800a084 <Initilialise_App>
    /* Start Scheduler */
    vTaskStartScheduler();
 800a4d0:	f7fd fe7e 	bl	80081d0 <vTaskStartScheduler>

}
 800a4d4:	bf00      	nop
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	20000084 	.word	0x20000084

0800a4dc <Process_BodyControlMAIN_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_BodyControlMAIN_TaskHandler(void* param)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]

	BodyControlMAIN_StartUP();
 800a4e4:	f000 faea 	bl	800aabc <BodyControlMAIN_StartUP>
	while(1)
	{

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_BODYCONTROLMAIN_THREADNAME, "STARTED");
 800a4e8:	4906      	ldr	r1, [pc, #24]	; (800a504 <Process_BodyControlMAIN_TaskHandler+0x28>)
 800a4ea:	4807      	ldr	r0, [pc, #28]	; (800a508 <Process_BodyControlMAIN_TaskHandler+0x2c>)
 800a4ec:	f7ff fda6 	bl	800a03c <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        BodyControlMAIN(); /* Main Application */
 800a4f0:	f000 fb18 	bl	800ab24 <BodyControlMAIN>

        vTaskDelay( pdMS_TO_TICKS(10) );
 800a4f4:	200a      	movs	r0, #10
 800a4f6:	f7fd fe37 	bl	8008168 <vTaskDelay>
//        Process_SDCARD_Run();
//        Process_TELEMETRY_Run();

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_BODYCONTROLMAIN_THREADNAME, "ENDED");
 800a4fa:	4904      	ldr	r1, [pc, #16]	; (800a50c <Process_BodyControlMAIN_TaskHandler+0x30>)
 800a4fc:	4802      	ldr	r0, [pc, #8]	; (800a508 <Process_BodyControlMAIN_TaskHandler+0x2c>)
 800a4fe:	f7ff fd9d 	bl	800a03c <DEBUG_printThread>
        DEBUG_printThread((char *)PROCESS_BODYCONTROLMAIN_THREADNAME, "STARTED");
 800a502:	e7f1      	b.n	800a4e8 <Process_BodyControlMAIN_TaskHandler+0xc>
 800a504:	0800c858 	.word	0x0800c858
 800a508:	0800c78c 	.word	0x0800c78c
 800a50c:	0800c860 	.word	0x0800c860

0800a510 <Process_ADC_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_ADC_TaskHandler(void *params)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af02      	add	r7, sp, #8
 800a516:	6078      	str	r0, [r7, #4]
	ModuleADC_StartUP();
 800a518:	f000 fb90 	bl	800ac3c <ModuleADC_StartUP>


 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_ADC = xQueueSemaphoreTake(xSemHandle.Process_ADC, osWaitForever);
 800a51c:	4b15      	ldr	r3, [pc, #84]	; (800a574 <Process_ADC_TaskHandler+0x64>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f04f 31ff 	mov.w	r1, #4294967295
 800a524:	4618      	mov	r0, r3
 800a526:	f7fd f9eb 	bl	8007900 <xQueueSemaphoreTake>
 800a52a:	4603      	mov	r3, r0
 800a52c:	4a12      	ldr	r2, [pc, #72]	; (800a578 <Process_ADC_TaskHandler+0x68>)
 800a52e:	6013      	str	r3, [r2, #0]
	if (pdTRUE == xSemResult.Process_ADC)
 800a530:	4b11      	ldr	r3, [pc, #68]	; (800a578 <Process_ADC_TaskHandler+0x68>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2b01      	cmp	r3, #1
 800a536:	d111      	bne.n	800a55c <Process_ADC_TaskHandler+0x4c>
	{

		/* Semph has taken */
		__GL.itc.flag.adc = FALSE;
 800a538:	4a10      	ldr	r2, [pc, #64]	; (800a57c <Process_ADC_TaskHandler+0x6c>)
 800a53a:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a53e:	f36f 0300 	bfc	r3, #0, #1
 800a542:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_ADC_THREADNAME, "STARTED");
 800a546:	490e      	ldr	r1, [pc, #56]	; (800a580 <Process_ADC_TaskHandler+0x70>)
 800a548:	480e      	ldr	r0, [pc, #56]	; (800a584 <Process_ADC_TaskHandler+0x74>)
 800a54a:	f7ff fd77 	bl	800a03c <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleADC_MAIN(); /* Main Application */
 800a54e:	f000 fcb5 	bl	800aebc <ModuleADC_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_ADC_THREADNAME, "ENDED");
 800a552:	490d      	ldr	r1, [pc, #52]	; (800a588 <Process_ADC_TaskHandler+0x78>)
 800a554:	480b      	ldr	r0, [pc, #44]	; (800a584 <Process_ADC_TaskHandler+0x74>)
 800a556:	f7ff fd71 	bl	800a03c <DEBUG_printThread>
 800a55a:	e7df      	b.n	800a51c <Process_ADC_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_ADC = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_ADC);
 800a55c:	2303      	movs	r3, #3
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	4b0a      	ldr	r3, [pc, #40]	; (800a58c <Process_ADC_TaskHandler+0x7c>)
 800a562:	2200      	movs	r2, #0
 800a564:	2100      	movs	r1, #0
 800a566:	2001      	movs	r0, #1
 800a568:	f7fc feb4 	bl	80072d4 <xQueueGenericCreateStatic>
 800a56c:	4603      	mov	r3, r0
 800a56e:	4a01      	ldr	r2, [pc, #4]	; (800a574 <Process_ADC_TaskHandler+0x64>)
 800a570:	6013      	str	r3, [r2, #0]
	xSemResult.Process_ADC = xQueueSemaphoreTake(xSemHandle.Process_ADC, osWaitForever);
 800a572:	e7d3      	b.n	800a51c <Process_ADC_TaskHandler+0xc>
 800a574:	2000bd74 	.word	0x2000bd74
 800a578:	2000bd98 	.word	0x2000bd98
 800a57c:	20000084 	.word	0x20000084
 800a580:	0800c858 	.word	0x0800c858
 800a584:	0800c7a4 	.word	0x0800c7a4
 800a588:	0800c860 	.word	0x0800c860
 800a58c:	2000baa4 	.word	0x2000baa4

0800a590 <Process_ADC_Run>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_ADC_Run(void)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af02      	add	r7, sp, #8
/* Message first, release later :) */

#ifdef DEBUG_THREAD
    DEBUG_printThread((char *)PROCESS_ADC_SEMAPHORENAME, "RELEASED");
 800a596:	4919      	ldr	r1, [pc, #100]	; (800a5fc <Process_ADC_Run+0x6c>)
 800a598:	4819      	ldr	r0, [pc, #100]	; (800a600 <Process_ADC_Run+0x70>)
 800a59a:	f7ff fd4f 	bl	800a03c <DEBUG_printThread>
#endif

    xSemResult.Process_ADC = xSemaphoreGive(xSemHandle.Process_ADC);
 800a59e:	4b19      	ldr	r3, [pc, #100]	; (800a604 <Process_ADC_Run+0x74>)
 800a5a0:	6818      	ldr	r0, [r3, #0]
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	2100      	movs	r1, #0
 800a5a8:	f7fc ff30 	bl	800740c <xQueueGenericSend>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	4a16      	ldr	r2, [pc, #88]	; (800a608 <Process_ADC_Run+0x78>)
 800a5b0:	6013      	str	r3, [r2, #0]

    if (pdPASS == xSemResult.Process_ADC)
 800a5b2:	4b15      	ldr	r3, [pc, #84]	; (800a608 <Process_ADC_Run+0x78>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d107      	bne.n	800a5ca <Process_ADC_Run+0x3a>
    {
        /* Bootloader Semaphore is Passed */
    	__GL.itc.flag.adc = TRUE;
 800a5ba:	4a14      	ldr	r2, [pc, #80]	; (800a60c <Process_ADC_Run+0x7c>)
 800a5bc:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a5c0:	f043 0301 	orr.w	r3, r3, #1
 800a5c4:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00
   DEBUG_printThread((char *)PROCESS_ADC_SEMAPHORENAME, "ALREADY RUNNING");
#endif

        xSemHandle.Process_ADC = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_ADC);
    }
}
 800a5c8:	e015      	b.n	800a5f6 <Process_ADC_Run+0x66>
    	__GL.itc.flag.adc = FALSE;
 800a5ca:	4a10      	ldr	r2, [pc, #64]	; (800a60c <Process_ADC_Run+0x7c>)
 800a5cc:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a5d0:	f36f 0300 	bfc	r3, #0, #1
 800a5d4:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00
   DEBUG_printThread((char *)PROCESS_ADC_SEMAPHORENAME, "ALREADY RUNNING");
 800a5d8:	490d      	ldr	r1, [pc, #52]	; (800a610 <Process_ADC_Run+0x80>)
 800a5da:	4809      	ldr	r0, [pc, #36]	; (800a600 <Process_ADC_Run+0x70>)
 800a5dc:	f7ff fd2e 	bl	800a03c <DEBUG_printThread>
        xSemHandle.Process_ADC = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_ADC);
 800a5e0:	2303      	movs	r3, #3
 800a5e2:	9300      	str	r3, [sp, #0]
 800a5e4:	4b0b      	ldr	r3, [pc, #44]	; (800a614 <Process_ADC_Run+0x84>)
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	2001      	movs	r0, #1
 800a5ec:	f7fc fe72 	bl	80072d4 <xQueueGenericCreateStatic>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	4a04      	ldr	r2, [pc, #16]	; (800a604 <Process_ADC_Run+0x74>)
 800a5f4:	6013      	str	r3, [r2, #0]
}
 800a5f6:	bf00      	nop
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	0800c868 	.word	0x0800c868
 800a600:	0800c874 	.word	0x0800c874
 800a604:	2000bd74 	.word	0x2000bd74
 800a608:	2000bd98 	.word	0x2000bd98
 800a60c:	20000084 	.word	0x20000084
 800a610:	0800c888 	.word	0x0800c888
 800a614:	2000baa4 	.word	0x2000baa4

0800a618 <Process_AUDIO_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_AUDIO_TaskHandler(void *params)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af02      	add	r7, sp, #8
 800a61e:	6078      	str	r0, [r7, #4]
	ModuleAUDIO_StartUP();
 800a620:	f000 ff0a 	bl	800b438 <ModuleAUDIO_StartUP>

 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_AUDIO = xQueueSemaphoreTake(xSemHandle.Process_AUDIO, osWaitForever);
 800a624:	4b15      	ldr	r3, [pc, #84]	; (800a67c <Process_AUDIO_TaskHandler+0x64>)
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	f04f 31ff 	mov.w	r1, #4294967295
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7fd f967 	bl	8007900 <xQueueSemaphoreTake>
 800a632:	4603      	mov	r3, r0
 800a634:	4a12      	ldr	r2, [pc, #72]	; (800a680 <Process_AUDIO_TaskHandler+0x68>)
 800a636:	6053      	str	r3, [r2, #4]
	if (pdTRUE == xSemResult.Process_AUDIO)
 800a638:	4b11      	ldr	r3, [pc, #68]	; (800a680 <Process_AUDIO_TaskHandler+0x68>)
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d111      	bne.n	800a664 <Process_AUDIO_TaskHandler+0x4c>
	{

		/* Semph has taken */
		__GL.itc.flag.audio = FALSE;
 800a640:	4a10      	ldr	r2, [pc, #64]	; (800a684 <Process_AUDIO_TaskHandler+0x6c>)
 800a642:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a646:	f36f 0341 	bfc	r3, #1, #1
 800a64a:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_AUDIO_THREADNAME, "STARTED");
 800a64e:	490e      	ldr	r1, [pc, #56]	; (800a688 <Process_AUDIO_TaskHandler+0x70>)
 800a650:	480e      	ldr	r0, [pc, #56]	; (800a68c <Process_AUDIO_TaskHandler+0x74>)
 800a652:	f7ff fcf3 	bl	800a03c <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleAUDIO_MAIN(); /* Main Application */
 800a656:	f000 ff05 	bl	800b464 <ModuleAUDIO_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_AUDIO_THREADNAME, "ENDED");
 800a65a:	490d      	ldr	r1, [pc, #52]	; (800a690 <Process_AUDIO_TaskHandler+0x78>)
 800a65c:	480b      	ldr	r0, [pc, #44]	; (800a68c <Process_AUDIO_TaskHandler+0x74>)
 800a65e:	f7ff fced 	bl	800a03c <DEBUG_printThread>
 800a662:	e7df      	b.n	800a624 <Process_AUDIO_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_AUDIO = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_AUDIO);
 800a664:	2303      	movs	r3, #3
 800a666:	9300      	str	r3, [sp, #0]
 800a668:	4b0a      	ldr	r3, [pc, #40]	; (800a694 <Process_AUDIO_TaskHandler+0x7c>)
 800a66a:	2200      	movs	r2, #0
 800a66c:	2100      	movs	r1, #0
 800a66e:	2001      	movs	r0, #1
 800a670:	f7fc fe30 	bl	80072d4 <xQueueGenericCreateStatic>
 800a674:	4603      	mov	r3, r0
 800a676:	4a01      	ldr	r2, [pc, #4]	; (800a67c <Process_AUDIO_TaskHandler+0x64>)
 800a678:	6053      	str	r3, [r2, #4]
	xSemResult.Process_AUDIO = xQueueSemaphoreTake(xSemHandle.Process_AUDIO, osWaitForever);
 800a67a:	e7d3      	b.n	800a624 <Process_AUDIO_TaskHandler+0xc>
 800a67c:	2000bd74 	.word	0x2000bd74
 800a680:	2000bd98 	.word	0x2000bd98
 800a684:	20000084 	.word	0x20000084
 800a688:	0800c858 	.word	0x0800c858
 800a68c:	0800c7b8 	.word	0x0800c7b8
 800a690:	0800c860 	.word	0x0800c860
 800a694:	2000baf4 	.word	0x2000baf4

0800a698 <Process_CAN_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_CAN_TaskHandler(void *params)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af02      	add	r7, sp, #8
 800a69e:	6078      	str	r0, [r7, #4]
	ModuleCAN_StartUP();
 800a6a0:	f000 ff54 	bl	800b54c <ModuleCAN_StartUP>


 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_CAN = xQueueSemaphoreTake(xSemHandle.Process_CAN, osWaitForever);
 800a6a4:	4b15      	ldr	r3, [pc, #84]	; (800a6fc <Process_CAN_TaskHandler+0x64>)
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	f04f 31ff 	mov.w	r1, #4294967295
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7fd f927 	bl	8007900 <xQueueSemaphoreTake>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	4a12      	ldr	r2, [pc, #72]	; (800a700 <Process_CAN_TaskHandler+0x68>)
 800a6b6:	6093      	str	r3, [r2, #8]
	if (pdTRUE == xSemResult.Process_CAN)
 800a6b8:	4b11      	ldr	r3, [pc, #68]	; (800a700 <Process_CAN_TaskHandler+0x68>)
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d111      	bne.n	800a6e4 <Process_CAN_TaskHandler+0x4c>
	{

		/* Semph has taken */
		__GL.itc.flag.can = FALSE;
 800a6c0:	4a10      	ldr	r2, [pc, #64]	; (800a704 <Process_CAN_TaskHandler+0x6c>)
 800a6c2:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a6c6:	f36f 0382 	bfc	r3, #2, #1
 800a6ca:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_CAN_THREADNAME, "STARTED");
 800a6ce:	490e      	ldr	r1, [pc, #56]	; (800a708 <Process_CAN_TaskHandler+0x70>)
 800a6d0:	480e      	ldr	r0, [pc, #56]	; (800a70c <Process_CAN_TaskHandler+0x74>)
 800a6d2:	f7ff fcb3 	bl	800a03c <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleCAN_MAIN(); /* Main Application */
 800a6d6:	f001 f8e1 	bl	800b89c <ModuleCAN_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_CAN_THREADNAME, "ENDED");
 800a6da:	490d      	ldr	r1, [pc, #52]	; (800a710 <Process_CAN_TaskHandler+0x78>)
 800a6dc:	480b      	ldr	r0, [pc, #44]	; (800a70c <Process_CAN_TaskHandler+0x74>)
 800a6de:	f7ff fcad 	bl	800a03c <DEBUG_printThread>
 800a6e2:	e7df      	b.n	800a6a4 <Process_CAN_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_CAN = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CAN);
 800a6e4:	2303      	movs	r3, #3
 800a6e6:	9300      	str	r3, [sp, #0]
 800a6e8:	4b0a      	ldr	r3, [pc, #40]	; (800a714 <Process_CAN_TaskHandler+0x7c>)
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	2001      	movs	r0, #1
 800a6f0:	f7fc fdf0 	bl	80072d4 <xQueueGenericCreateStatic>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	4a01      	ldr	r2, [pc, #4]	; (800a6fc <Process_CAN_TaskHandler+0x64>)
 800a6f8:	6093      	str	r3, [r2, #8]
	xSemResult.Process_CAN = xQueueSemaphoreTake(xSemHandle.Process_CAN, osWaitForever);
 800a6fa:	e7d3      	b.n	800a6a4 <Process_CAN_TaskHandler+0xc>
 800a6fc:	2000bd74 	.word	0x2000bd74
 800a700:	2000bd98 	.word	0x2000bd98
 800a704:	20000084 	.word	0x20000084
 800a708:	0800c858 	.word	0x0800c858
 800a70c:	0800c7cc 	.word	0x0800c7cc
 800a710:	0800c860 	.word	0x0800c860
 800a714:	2000bb44 	.word	0x2000bb44

0800a718 <Process_CAN_Run>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_CAN_Run(void)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af02      	add	r7, sp, #8
/* Message first, release later :) */

#ifdef DEBUG_THREAD
    DEBUG_printThread((char *)PROCESS_CAN_SEMAPHORENAME, "RELEASED");
 800a71e:	4919      	ldr	r1, [pc, #100]	; (800a784 <Process_CAN_Run+0x6c>)
 800a720:	4819      	ldr	r0, [pc, #100]	; (800a788 <Process_CAN_Run+0x70>)
 800a722:	f7ff fc8b 	bl	800a03c <DEBUG_printThread>
#endif

    xSemResult.Process_CAN = xSemaphoreGive(xSemHandle.Process_CAN);
 800a726:	4b19      	ldr	r3, [pc, #100]	; (800a78c <Process_CAN_Run+0x74>)
 800a728:	6898      	ldr	r0, [r3, #8]
 800a72a:	2300      	movs	r3, #0
 800a72c:	2200      	movs	r2, #0
 800a72e:	2100      	movs	r1, #0
 800a730:	f7fc fe6c 	bl	800740c <xQueueGenericSend>
 800a734:	4603      	mov	r3, r0
 800a736:	4a16      	ldr	r2, [pc, #88]	; (800a790 <Process_CAN_Run+0x78>)
 800a738:	6093      	str	r3, [r2, #8]

    if (pdPASS == xSemResult.Process_CAN)
 800a73a:	4b15      	ldr	r3, [pc, #84]	; (800a790 <Process_CAN_Run+0x78>)
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d107      	bne.n	800a752 <Process_CAN_Run+0x3a>
    {
        /* Bootloader Semaphore is Passed */
    	__GL.itc.flag.can = TRUE;
 800a742:	4a14      	ldr	r2, [pc, #80]	; (800a794 <Process_CAN_Run+0x7c>)
 800a744:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a748:	f043 0304 	orr.w	r3, r3, #4
 800a74c:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00
#endif

        xSemHandle.Process_CAN = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CAN);
    }

}
 800a750:	e015      	b.n	800a77e <Process_CAN_Run+0x66>
    	__GL.itc.flag.can = FALSE;
 800a752:	4a10      	ldr	r2, [pc, #64]	; (800a794 <Process_CAN_Run+0x7c>)
 800a754:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a758:	f36f 0382 	bfc	r3, #2, #1
 800a75c:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00
   DEBUG_printThread((char *)PROCESS_CAN_SEMAPHORENAME, "ALREADY RUNNING");
 800a760:	490d      	ldr	r1, [pc, #52]	; (800a798 <Process_CAN_Run+0x80>)
 800a762:	4809      	ldr	r0, [pc, #36]	; (800a788 <Process_CAN_Run+0x70>)
 800a764:	f7ff fc6a 	bl	800a03c <DEBUG_printThread>
        xSemHandle.Process_CAN = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CAN);
 800a768:	2303      	movs	r3, #3
 800a76a:	9300      	str	r3, [sp, #0]
 800a76c:	4b0b      	ldr	r3, [pc, #44]	; (800a79c <Process_CAN_Run+0x84>)
 800a76e:	2200      	movs	r2, #0
 800a770:	2100      	movs	r1, #0
 800a772:	2001      	movs	r0, #1
 800a774:	f7fc fdae 	bl	80072d4 <xQueueGenericCreateStatic>
 800a778:	4603      	mov	r3, r0
 800a77a:	4a04      	ldr	r2, [pc, #16]	; (800a78c <Process_CAN_Run+0x74>)
 800a77c:	6093      	str	r3, [r2, #8]
}
 800a77e:	bf00      	nop
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}
 800a784:	0800c868 	.word	0x0800c868
 800a788:	0800c8b0 	.word	0x0800c8b0
 800a78c:	2000bd74 	.word	0x2000bd74
 800a790:	2000bd98 	.word	0x2000bd98
 800a794:	20000084 	.word	0x20000084
 800a798:	0800c888 	.word	0x0800c888
 800a79c:	2000bb44 	.word	0x2000bb44

0800a7a0 <Process_CONTROL_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_CONTROL_TaskHandler(void *params)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af02      	add	r7, sp, #8
 800a7a6:	6078      	str	r0, [r7, #4]
	ModuleCONTROL_StartUP();
 800a7a8:	f001 f8ae 	bl	800b908 <ModuleCONTROL_StartUP>

 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_CONTROL = xQueueSemaphoreTake(xSemHandle.Process_CONTROL, osWaitForever);
 800a7ac:	4b15      	ldr	r3, [pc, #84]	; (800a804 <Process_CONTROL_TaskHandler+0x64>)
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	f04f 31ff 	mov.w	r1, #4294967295
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7fd f8a3 	bl	8007900 <xQueueSemaphoreTake>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	4a12      	ldr	r2, [pc, #72]	; (800a808 <Process_CONTROL_TaskHandler+0x68>)
 800a7be:	60d3      	str	r3, [r2, #12]
	if (pdTRUE == xSemResult.Process_CONTROL)
 800a7c0:	4b11      	ldr	r3, [pc, #68]	; (800a808 <Process_CONTROL_TaskHandler+0x68>)
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d111      	bne.n	800a7ec <Process_CONTROL_TaskHandler+0x4c>
	{

		/* Semph has taken */
		__GL.itc.flag.control = FALSE;
 800a7c8:	4a10      	ldr	r2, [pc, #64]	; (800a80c <Process_CONTROL_TaskHandler+0x6c>)
 800a7ca:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a7ce:	f36f 03c3 	bfc	r3, #3, #1
 800a7d2:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_CONTROL_THREADNAME, "STARTED");
 800a7d6:	490e      	ldr	r1, [pc, #56]	; (800a810 <Process_CONTROL_TaskHandler+0x70>)
 800a7d8:	480e      	ldr	r0, [pc, #56]	; (800a814 <Process_CONTROL_TaskHandler+0x74>)
 800a7da:	f7ff fc2f 	bl	800a03c <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleCONTROL_MAIN(); /* Main Application */
 800a7de:	f001 f8a9 	bl	800b934 <ModuleCONTROL_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_CONTROL_THREADNAME, "ENDED");
 800a7e2:	490d      	ldr	r1, [pc, #52]	; (800a818 <Process_CONTROL_TaskHandler+0x78>)
 800a7e4:	480b      	ldr	r0, [pc, #44]	; (800a814 <Process_CONTROL_TaskHandler+0x74>)
 800a7e6:	f7ff fc29 	bl	800a03c <DEBUG_printThread>
 800a7ea:	e7df      	b.n	800a7ac <Process_CONTROL_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_CONTROL = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CONTROL);
 800a7ec:	2303      	movs	r3, #3
 800a7ee:	9300      	str	r3, [sp, #0]
 800a7f0:	4b0a      	ldr	r3, [pc, #40]	; (800a81c <Process_CONTROL_TaskHandler+0x7c>)
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	2100      	movs	r1, #0
 800a7f6:	2001      	movs	r0, #1
 800a7f8:	f7fc fd6c 	bl	80072d4 <xQueueGenericCreateStatic>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	4a01      	ldr	r2, [pc, #4]	; (800a804 <Process_CONTROL_TaskHandler+0x64>)
 800a800:	60d3      	str	r3, [r2, #12]
	xSemResult.Process_CONTROL = xQueueSemaphoreTake(xSemHandle.Process_CONTROL, osWaitForever);
 800a802:	e7d3      	b.n	800a7ac <Process_CONTROL_TaskHandler+0xc>
 800a804:	2000bd74 	.word	0x2000bd74
 800a808:	2000bd98 	.word	0x2000bd98
 800a80c:	20000084 	.word	0x20000084
 800a810:	0800c858 	.word	0x0800c858
 800a814:	0800c7e0 	.word	0x0800c7e0
 800a818:	0800c860 	.word	0x0800c860
 800a81c:	2000bb94 	.word	0x2000bb94

0800a820 <Process_FLASH_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_FLASH_TaskHandler(void *params)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af02      	add	r7, sp, #8
 800a826:	6078      	str	r0, [r7, #4]
	ModuleFLASH_StartUP();
 800a828:	f001 f8ba 	bl	800b9a0 <ModuleFLASH_StartUP>

 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_FLASH = xQueueSemaphoreTake(xSemHandle.Process_FLASH, osWaitForever);
 800a82c:	4b15      	ldr	r3, [pc, #84]	; (800a884 <Process_FLASH_TaskHandler+0x64>)
 800a82e:	691b      	ldr	r3, [r3, #16]
 800a830:	f04f 31ff 	mov.w	r1, #4294967295
 800a834:	4618      	mov	r0, r3
 800a836:	f7fd f863 	bl	8007900 <xQueueSemaphoreTake>
 800a83a:	4603      	mov	r3, r0
 800a83c:	4a12      	ldr	r2, [pc, #72]	; (800a888 <Process_FLASH_TaskHandler+0x68>)
 800a83e:	6113      	str	r3, [r2, #16]
	if (pdTRUE == xSemResult.Process_FLASH)
 800a840:	4b11      	ldr	r3, [pc, #68]	; (800a888 <Process_FLASH_TaskHandler+0x68>)
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	2b01      	cmp	r3, #1
 800a846:	d111      	bne.n	800a86c <Process_FLASH_TaskHandler+0x4c>
	{

		/* Semph has taken */
		__GL.itc.flag.flash = FALSE;
 800a848:	4a10      	ldr	r2, [pc, #64]	; (800a88c <Process_FLASH_TaskHandler+0x6c>)
 800a84a:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a84e:	f36f 1304 	bfc	r3, #4, #1
 800a852:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_FLASH_THREADNAME, "STARTED");
 800a856:	490e      	ldr	r1, [pc, #56]	; (800a890 <Process_FLASH_TaskHandler+0x70>)
 800a858:	480e      	ldr	r0, [pc, #56]	; (800a894 <Process_FLASH_TaskHandler+0x74>)
 800a85a:	f7ff fbef 	bl	800a03c <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleFLASH_MAIN(); /* Main Application */
 800a85e:	f001 f8b5 	bl	800b9cc <ModuleFLASH_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_FLASH_THREADNAME, "ENDED");
 800a862:	490d      	ldr	r1, [pc, #52]	; (800a898 <Process_FLASH_TaskHandler+0x78>)
 800a864:	480b      	ldr	r0, [pc, #44]	; (800a894 <Process_FLASH_TaskHandler+0x74>)
 800a866:	f7ff fbe9 	bl	800a03c <DEBUG_printThread>
 800a86a:	e7df      	b.n	800a82c <Process_FLASH_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_FLASH = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_FLASH);
 800a86c:	2303      	movs	r3, #3
 800a86e:	9300      	str	r3, [sp, #0]
 800a870:	4b0a      	ldr	r3, [pc, #40]	; (800a89c <Process_FLASH_TaskHandler+0x7c>)
 800a872:	2200      	movs	r2, #0
 800a874:	2100      	movs	r1, #0
 800a876:	2001      	movs	r0, #1
 800a878:	f7fc fd2c 	bl	80072d4 <xQueueGenericCreateStatic>
 800a87c:	4603      	mov	r3, r0
 800a87e:	4a01      	ldr	r2, [pc, #4]	; (800a884 <Process_FLASH_TaskHandler+0x64>)
 800a880:	6113      	str	r3, [r2, #16]
	xSemResult.Process_FLASH = xQueueSemaphoreTake(xSemHandle.Process_FLASH, osWaitForever);
 800a882:	e7d3      	b.n	800a82c <Process_FLASH_TaskHandler+0xc>
 800a884:	2000bd74 	.word	0x2000bd74
 800a888:	2000bd98 	.word	0x2000bd98
 800a88c:	20000084 	.word	0x20000084
 800a890:	0800c858 	.word	0x0800c858
 800a894:	0800c7f8 	.word	0x0800c7f8
 800a898:	0800c860 	.word	0x0800c860
 800a89c:	2000bbe4 	.word	0x2000bbe4

0800a8a0 <Process_POWERSWITCH_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_POWERSWITCH_TaskHandler(void *params)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af02      	add	r7, sp, #8
 800a8a6:	6078      	str	r0, [r7, #4]
	ModulePOWERSWITCH_StartUP();
 800a8a8:	f001 f8c6 	bl	800ba38 <ModulePOWERSWITCH_StartUP>
 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_POWERSWITCH = xQueueSemaphoreTake(xSemHandle.Process_POWERSWITCH, osWaitForever);
 800a8ac:	4b15      	ldr	r3, [pc, #84]	; (800a904 <Process_POWERSWITCH_TaskHandler+0x64>)
 800a8ae:	695b      	ldr	r3, [r3, #20]
 800a8b0:	f04f 31ff 	mov.w	r1, #4294967295
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7fd f823 	bl	8007900 <xQueueSemaphoreTake>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	4a12      	ldr	r2, [pc, #72]	; (800a908 <Process_POWERSWITCH_TaskHandler+0x68>)
 800a8be:	6153      	str	r3, [r2, #20]
	if (pdTRUE == xSemResult.Process_FLASH)
 800a8c0:	4b11      	ldr	r3, [pc, #68]	; (800a908 <Process_POWERSWITCH_TaskHandler+0x68>)
 800a8c2:	691b      	ldr	r3, [r3, #16]
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d111      	bne.n	800a8ec <Process_POWERSWITCH_TaskHandler+0x4c>
	{

		/* Semph has taken */
		__GL.itc.flag.powerswitch = FALSE;
 800a8c8:	4a10      	ldr	r2, [pc, #64]	; (800a90c <Process_POWERSWITCH_TaskHandler+0x6c>)
 800a8ca:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a8ce:	f36f 1345 	bfc	r3, #5, #1
 800a8d2:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_POWERSWITCH_THREADNAME, "STARTED");
 800a8d6:	490e      	ldr	r1, [pc, #56]	; (800a910 <Process_POWERSWITCH_TaskHandler+0x70>)
 800a8d8:	480e      	ldr	r0, [pc, #56]	; (800a914 <Process_POWERSWITCH_TaskHandler+0x74>)
 800a8da:	f7ff fbaf 	bl	800a03c <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModulePOWERSWITCH_MAIN(); /* Main Application */
 800a8de:	f001 f8c1 	bl	800ba64 <ModulePOWERSWITCH_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_POWERSWITCH_THREADNAME, "ENDED");
 800a8e2:	490d      	ldr	r1, [pc, #52]	; (800a918 <Process_POWERSWITCH_TaskHandler+0x78>)
 800a8e4:	480b      	ldr	r0, [pc, #44]	; (800a914 <Process_POWERSWITCH_TaskHandler+0x74>)
 800a8e6:	f7ff fba9 	bl	800a03c <DEBUG_printThread>
 800a8ea:	e7df      	b.n	800a8ac <Process_POWERSWITCH_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_POWERSWITCH = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_POWERSWITCH);
 800a8ec:	2303      	movs	r3, #3
 800a8ee:	9300      	str	r3, [sp, #0]
 800a8f0:	4b0a      	ldr	r3, [pc, #40]	; (800a91c <Process_POWERSWITCH_TaskHandler+0x7c>)
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	2001      	movs	r0, #1
 800a8f8:	f7fc fcec 	bl	80072d4 <xQueueGenericCreateStatic>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	4a01      	ldr	r2, [pc, #4]	; (800a904 <Process_POWERSWITCH_TaskHandler+0x64>)
 800a900:	6153      	str	r3, [r2, #20]
	xSemResult.Process_POWERSWITCH = xQueueSemaphoreTake(xSemHandle.Process_POWERSWITCH, osWaitForever);
 800a902:	e7d3      	b.n	800a8ac <Process_POWERSWITCH_TaskHandler+0xc>
 800a904:	2000bd74 	.word	0x2000bd74
 800a908:	2000bd98 	.word	0x2000bd98
 800a90c:	20000084 	.word	0x20000084
 800a910:	0800c858 	.word	0x0800c858
 800a914:	0800c80c 	.word	0x0800c80c
 800a918:	0800c860 	.word	0x0800c860
 800a91c:	2000bc34 	.word	0x2000bc34

0800a920 <Process_RTC_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_RTC_TaskHandler(void *params)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af02      	add	r7, sp, #8
 800a926:	6078      	str	r0, [r7, #4]
	ModuleRTC_StartUP();
 800a928:	f001 f8d2 	bl	800bad0 <ModuleRTC_StartUP>

 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_RTC = xQueueSemaphoreTake(xSemHandle.Process_RTC, osWaitForever);
 800a92c:	4b15      	ldr	r3, [pc, #84]	; (800a984 <Process_RTC_TaskHandler+0x64>)
 800a92e:	699b      	ldr	r3, [r3, #24]
 800a930:	f04f 31ff 	mov.w	r1, #4294967295
 800a934:	4618      	mov	r0, r3
 800a936:	f7fc ffe3 	bl	8007900 <xQueueSemaphoreTake>
 800a93a:	4603      	mov	r3, r0
 800a93c:	4a12      	ldr	r2, [pc, #72]	; (800a988 <Process_RTC_TaskHandler+0x68>)
 800a93e:	6193      	str	r3, [r2, #24]
	if (pdTRUE == xSemResult.Process_RTC)
 800a940:	4b11      	ldr	r3, [pc, #68]	; (800a988 <Process_RTC_TaskHandler+0x68>)
 800a942:	699b      	ldr	r3, [r3, #24]
 800a944:	2b01      	cmp	r3, #1
 800a946:	d111      	bne.n	800a96c <Process_RTC_TaskHandler+0x4c>
	{

		/* Semph has taken */
		__GL.itc.flag.rtc = FALSE;
 800a948:	4a10      	ldr	r2, [pc, #64]	; (800a98c <Process_RTC_TaskHandler+0x6c>)
 800a94a:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a94e:	f36f 1386 	bfc	r3, #6, #1
 800a952:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_RTC_THREADNAME, "STARTED");
 800a956:	490e      	ldr	r1, [pc, #56]	; (800a990 <Process_RTC_TaskHandler+0x70>)
 800a958:	480e      	ldr	r0, [pc, #56]	; (800a994 <Process_RTC_TaskHandler+0x74>)
 800a95a:	f7ff fb6f 	bl	800a03c <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleRTC_MAIN(); /* Main Application */
 800a95e:	f001 f8cd 	bl	800bafc <ModuleRTC_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_RTC_THREADNAME, "ENDED");
 800a962:	490d      	ldr	r1, [pc, #52]	; (800a998 <Process_RTC_TaskHandler+0x78>)
 800a964:	480b      	ldr	r0, [pc, #44]	; (800a994 <Process_RTC_TaskHandler+0x74>)
 800a966:	f7ff fb69 	bl	800a03c <DEBUG_printThread>
 800a96a:	e7df      	b.n	800a92c <Process_RTC_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_RTC = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_RTC);
 800a96c:	2303      	movs	r3, #3
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	4b0a      	ldr	r3, [pc, #40]	; (800a99c <Process_RTC_TaskHandler+0x7c>)
 800a972:	2200      	movs	r2, #0
 800a974:	2100      	movs	r1, #0
 800a976:	2001      	movs	r0, #1
 800a978:	f7fc fcac 	bl	80072d4 <xQueueGenericCreateStatic>
 800a97c:	4603      	mov	r3, r0
 800a97e:	4a01      	ldr	r2, [pc, #4]	; (800a984 <Process_RTC_TaskHandler+0x64>)
 800a980:	6193      	str	r3, [r2, #24]
	xSemResult.Process_RTC = xQueueSemaphoreTake(xSemHandle.Process_RTC, osWaitForever);
 800a982:	e7d3      	b.n	800a92c <Process_RTC_TaskHandler+0xc>
 800a984:	2000bd74 	.word	0x2000bd74
 800a988:	2000bd98 	.word	0x2000bd98
 800a98c:	20000084 	.word	0x20000084
 800a990:	0800c858 	.word	0x0800c858
 800a994:	0800c81c 	.word	0x0800c81c
 800a998:	0800c860 	.word	0x0800c860
 800a99c:	2000bc84 	.word	0x2000bc84

0800a9a0 <Process_SDCARD_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_SDCARD_TaskHandler(void *params)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af02      	add	r7, sp, #8
 800a9a6:	6078      	str	r0, [r7, #4]
	ModuleSDCARD_StartUP();
 800a9a8:	f001 f8de 	bl	800bb68 <ModuleSDCARD_StartUP>

 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_SDCARD = xQueueSemaphoreTake(xSemHandle.Process_SDCARD, osWaitForever);
 800a9ac:	4b15      	ldr	r3, [pc, #84]	; (800aa04 <Process_SDCARD_TaskHandler+0x64>)
 800a9ae:	69db      	ldr	r3, [r3, #28]
 800a9b0:	f04f 31ff 	mov.w	r1, #4294967295
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7fc ffa3 	bl	8007900 <xQueueSemaphoreTake>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	4a12      	ldr	r2, [pc, #72]	; (800aa08 <Process_SDCARD_TaskHandler+0x68>)
 800a9be:	61d3      	str	r3, [r2, #28]
	if (pdTRUE == xSemResult.Process_SDCARD)
 800a9c0:	4b11      	ldr	r3, [pc, #68]	; (800aa08 <Process_SDCARD_TaskHandler+0x68>)
 800a9c2:	69db      	ldr	r3, [r3, #28]
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d111      	bne.n	800a9ec <Process_SDCARD_TaskHandler+0x4c>
	{

		/* Semph has taken */
		__GL.itc.flag.sdcard = FALSE;
 800a9c8:	4a10      	ldr	r2, [pc, #64]	; (800aa0c <Process_SDCARD_TaskHandler+0x6c>)
 800a9ca:	f892 3a00 	ldrb.w	r3, [r2, #2560]	; 0xa00
 800a9ce:	f36f 13c7 	bfc	r3, #7, #1
 800a9d2:	f882 3a00 	strb.w	r3, [r2, #2560]	; 0xa00

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_SDCARD_THREADNAME, "STARTED");
 800a9d6:	490e      	ldr	r1, [pc, #56]	; (800aa10 <Process_SDCARD_TaskHandler+0x70>)
 800a9d8:	480e      	ldr	r0, [pc, #56]	; (800aa14 <Process_SDCARD_TaskHandler+0x74>)
 800a9da:	f7ff fb2f 	bl	800a03c <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleSDCARD_MAIN(); /* Main Application */
 800a9de:	f001 f8d9 	bl	800bb94 <ModuleSDCARD_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_SDCARD_THREADNAME, "ENDED");
 800a9e2:	490d      	ldr	r1, [pc, #52]	; (800aa18 <Process_SDCARD_TaskHandler+0x78>)
 800a9e4:	480b      	ldr	r0, [pc, #44]	; (800aa14 <Process_SDCARD_TaskHandler+0x74>)
 800a9e6:	f7ff fb29 	bl	800a03c <DEBUG_printThread>
 800a9ea:	e7df      	b.n	800a9ac <Process_SDCARD_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_SDCARD = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_SDCARD);
 800a9ec:	2303      	movs	r3, #3
 800a9ee:	9300      	str	r3, [sp, #0]
 800a9f0:	4b0a      	ldr	r3, [pc, #40]	; (800aa1c <Process_SDCARD_TaskHandler+0x7c>)
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	2001      	movs	r0, #1
 800a9f8:	f7fc fc6c 	bl	80072d4 <xQueueGenericCreateStatic>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	4a01      	ldr	r2, [pc, #4]	; (800aa04 <Process_SDCARD_TaskHandler+0x64>)
 800aa00:	61d3      	str	r3, [r2, #28]
	xSemResult.Process_SDCARD = xQueueSemaphoreTake(xSemHandle.Process_SDCARD, osWaitForever);
 800aa02:	e7d3      	b.n	800a9ac <Process_SDCARD_TaskHandler+0xc>
 800aa04:	2000bd74 	.word	0x2000bd74
 800aa08:	2000bd98 	.word	0x2000bd98
 800aa0c:	20000084 	.word	0x20000084
 800aa10:	0800c858 	.word	0x0800c858
 800aa14:	0800c830 	.word	0x0800c830
 800aa18:	0800c860 	.word	0x0800c860
 800aa1c:	2000bcd4 	.word	0x2000bcd4

0800aa20 <Process_TELEMETRY_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     		Process_TELEMETRY_TaskHandler(void *params)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af02      	add	r7, sp, #8
 800aa26:	6078      	str	r0, [r7, #4]
	ModuleTELEMETRY_StartUP();
 800aa28:	f001 f8ea 	bl	800bc00 <ModuleTELEMETRY_StartUP>

 while (1)
 {
	/* Semaphore Wait */
	xSemResult.Process_TELEMETRY = xQueueSemaphoreTake(xSemHandle.Process_TELEMETRY, osWaitForever);
 800aa2c:	4b15      	ldr	r3, [pc, #84]	; (800aa84 <Process_TELEMETRY_TaskHandler+0x64>)
 800aa2e:	6a1b      	ldr	r3, [r3, #32]
 800aa30:	f04f 31ff 	mov.w	r1, #4294967295
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7fc ff63 	bl	8007900 <xQueueSemaphoreTake>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	4a12      	ldr	r2, [pc, #72]	; (800aa88 <Process_TELEMETRY_TaskHandler+0x68>)
 800aa3e:	6213      	str	r3, [r2, #32]
	if (pdTRUE == xSemResult.Process_TELEMETRY)
 800aa40:	4b11      	ldr	r3, [pc, #68]	; (800aa88 <Process_TELEMETRY_TaskHandler+0x68>)
 800aa42:	6a1b      	ldr	r3, [r3, #32]
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d111      	bne.n	800aa6c <Process_TELEMETRY_TaskHandler+0x4c>
	{
		/* Semph has taken */
		__GL.itc.flag.telemetry = FALSE;
 800aa48:	4a10      	ldr	r2, [pc, #64]	; (800aa8c <Process_TELEMETRY_TaskHandler+0x6c>)
 800aa4a:	f892 3a01 	ldrb.w	r3, [r2, #2561]	; 0xa01
 800aa4e:	f36f 0300 	bfc	r3, #0, #1
 800aa52:	f882 3a01 	strb.w	r3, [r2, #2561]	; 0xa01

		//HAL_IWDG_Refresh(&hiwdg);   /*	Watchdog-Clear	 */
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_TELEMETRY_THREADNAME, "STARTED");
 800aa56:	490e      	ldr	r1, [pc, #56]	; (800aa90 <Process_TELEMETRY_TaskHandler+0x70>)
 800aa58:	480e      	ldr	r0, [pc, #56]	; (800aa94 <Process_TELEMETRY_TaskHandler+0x74>)
 800aa5a:	f7ff faef 	bl	800a03c <DEBUG_printThread>
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleTELEMETRY_MAIN(); /* Main Application */
 800aa5e:	f001 f8e5 	bl	800bc2c <ModuleTELEMETRY_MAIN>

        // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_TELEMETRY_THREADNAME, "ENDED");
 800aa62:	490d      	ldr	r1, [pc, #52]	; (800aa98 <Process_TELEMETRY_TaskHandler+0x78>)
 800aa64:	480b      	ldr	r0, [pc, #44]	; (800aa94 <Process_TELEMETRY_TaskHandler+0x74>)
 800aa66:	f7ff fae9 	bl	800a03c <DEBUG_printThread>
 800aa6a:	e7df      	b.n	800aa2c <Process_TELEMETRY_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_TELEMETRY = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_TELEMETRY);
 800aa6c:	2303      	movs	r3, #3
 800aa6e:	9300      	str	r3, [sp, #0]
 800aa70:	4b0a      	ldr	r3, [pc, #40]	; (800aa9c <Process_TELEMETRY_TaskHandler+0x7c>)
 800aa72:	2200      	movs	r2, #0
 800aa74:	2100      	movs	r1, #0
 800aa76:	2001      	movs	r0, #1
 800aa78:	f7fc fc2c 	bl	80072d4 <xQueueGenericCreateStatic>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	4a01      	ldr	r2, [pc, #4]	; (800aa84 <Process_TELEMETRY_TaskHandler+0x64>)
 800aa80:	6213      	str	r3, [r2, #32]
	xSemResult.Process_TELEMETRY = xQueueSemaphoreTake(xSemHandle.Process_TELEMETRY, osWaitForever);
 800aa82:	e7d3      	b.n	800aa2c <Process_TELEMETRY_TaskHandler+0xc>
 800aa84:	2000bd74 	.word	0x2000bd74
 800aa88:	2000bd98 	.word	0x2000bd98
 800aa8c:	20000084 	.word	0x20000084
 800aa90:	0800c858 	.word	0x0800c858
 800aa94:	0800c844 	.word	0x0800c844
 800aa98:	0800c860 	.word	0x0800c860
 800aa9c:	2000bd24 	.word	0x2000bd24

0800aaa0 <BodyControlMAIN_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void BodyControlMAIN_HWInit(void)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	af00      	add	r7, sp, #0
	
}
 800aaa4:	bf00      	nop
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr

0800aaae <BodyControlMAIN_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void BodyControlMAIN_SWInit(void)
{
 800aaae:	b480      	push	{r7}
 800aab0:	af00      	add	r7, sp, #0

}
 800aab2:	bf00      	nop
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <BodyControlMAIN_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void BodyControlMAIN_StartUP(void)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	af00      	add	r7, sp, #0
	BodyControlMAIN_HWInit();
 800aac0:	f7ff ffee 	bl	800aaa0 <BodyControlMAIN_HWInit>
	BodyControlMAIN_SWInit();
 800aac4:	f7ff fff3 	bl	800aaae <BodyControlMAIN_SWInit>
}
 800aac8:	bf00      	nop
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <BodyControlMAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void BodyControlMAIN_Routine(void)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	af00      	add	r7, sp, #0

	if( __GL.mainState.flag.adc == TRUE )
 800aad0:	4b0d      	ldr	r3, [pc, #52]	; (800ab08 <BodyControlMAIN_Routine+0x3c>)
 800aad2:	f893 3a02 	ldrb.w	r3, [r3, #2562]	; 0xa02
 800aad6:	f003 0301 	and.w	r3, r3, #1
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d009      	beq.n	800aaf4 <BodyControlMAIN_Routine+0x28>
	{
		/* Release Periodically ADC Semph */
		Process_ADC_Run();
 800aae0:	f7ff fd56 	bl	800a590 <Process_ADC_Run>
		__GL.mainState.flag.adc = FALSE;
 800aae4:	4a08      	ldr	r2, [pc, #32]	; (800ab08 <BodyControlMAIN_Routine+0x3c>)
 800aae6:	f892 3a02 	ldrb.w	r3, [r2, #2562]	; 0xa02
 800aaea:	f36f 0300 	bfc	r3, #0, #1
 800aaee:	f882 3a02 	strb.w	r3, [r2, #2562]	; 0xa02
	{
		adcModule.ops.setMotorSpeed1( &BCM_MSG, adcModule.obj );
	}


}
 800aaf2:	e006      	b.n	800ab02 <BodyControlMAIN_Routine+0x36>
		adcModule.ops.setMotorSpeed1( &BCM_MSG, adcModule.obj );
 800aaf4:	4b05      	ldr	r3, [pc, #20]	; (800ab0c <BodyControlMAIN_Routine+0x40>)
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	4a04      	ldr	r2, [pc, #16]	; (800ab0c <BodyControlMAIN_Routine+0x40>)
 800aafa:	6912      	ldr	r2, [r2, #16]
 800aafc:	4611      	mov	r1, r2
 800aafe:	4804      	ldr	r0, [pc, #16]	; (800ab10 <BodyControlMAIN_Routine+0x44>)
 800ab00:	4798      	blx	r3
}
 800ab02:	bf00      	nop
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	20000084 	.word	0x20000084
 800ab0c:	2000c158 	.word	0x2000c158
 800ab10:	200013ec 	.word	0x200013ec

0800ab14 <BodyControlMAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void BodyControlMAIN_Process(void)
{
 800ab14:	b480      	push	{r7}
 800ab16:	af00      	add	r7, sp, #0

}
 800ab18:	bf00      	nop
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
	...

0800ab24 <BodyControlMAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void BodyControlMAIN(void)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	af00      	add	r7, sp, #0

	switch(BodyControlMAIN_State)
 800ab28:	4b11      	ldr	r3, [pc, #68]	; (800ab70 <BodyControlMAIN+0x4c>)
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	2b03      	cmp	r3, #3
 800ab2e:	d819      	bhi.n	800ab64 <BodyControlMAIN+0x40>
 800ab30:	a201      	add	r2, pc, #4	; (adr r2, 800ab38 <BodyControlMAIN+0x14>)
 800ab32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab36:	bf00      	nop
 800ab38:	0800ab49 	.word	0x0800ab49
 800ab3c:	0800ab51 	.word	0x0800ab51
 800ab40:	0800ab57 	.word	0x0800ab57
 800ab44:	0800ab5d 	.word	0x0800ab5d
	{
	    case BodyControlMAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	BodyControlMAIN_State = BodyControlMAIN_State_ROUTINE;
 800ab48:	4b09      	ldr	r3, [pc, #36]	; (800ab70 <BodyControlMAIN+0x4c>)
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	701a      	strb	r2, [r3, #0]
	    break;
 800ab4e:	e00d      	b.n	800ab6c <BodyControlMAIN+0x48>

	    case BodyControlMAIN_State_ROUTINE:

	    	BodyControlMAIN_Routine();
 800ab50:	f7ff ffbc 	bl	800aacc <BodyControlMAIN_Routine>
	    break;
 800ab54:	e00a      	b.n	800ab6c <BodyControlMAIN+0x48>

	    case BodyControlMAIN_State_PROCESS:

	    	BodyControlMAIN_Process();
 800ab56:	f7ff ffdd 	bl	800ab14 <BodyControlMAIN_Process>

	    break;
 800ab5a:	e007      	b.n	800ab6c <BodyControlMAIN+0x48>

	    case BodyControlMAIN_State_SUSPEND:
	    	BodyControlMAIN_State = BodyControlMAIN_State_IDLE;
 800ab5c:	4b04      	ldr	r3, [pc, #16]	; (800ab70 <BodyControlMAIN+0x4c>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	701a      	strb	r2, [r3, #0]
	    break;
 800ab62:	e003      	b.n	800ab6c <BodyControlMAIN+0x48>

	    default:
	    	BodyControlMAIN_State = BodyControlMAIN_State_SUSPEND;
 800ab64:	4b02      	ldr	r3, [pc, #8]	; (800ab70 <BodyControlMAIN+0x4c>)
 800ab66:	2203      	movs	r2, #3
 800ab68:	701a      	strb	r2, [r3, #0]
	    break;
 800ab6a:	bf00      	nop

	}
}
 800ab6c:	bf00      	nop
 800ab6e:	bd80      	pop	{r7, pc}
 800ab70:	2000c154 	.word	0x2000c154

0800ab74 <getWheelAngle>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
U16 getWheelAngle(adc_st* analogHandle)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
	return analogHandle->WheelAngle;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800ab80:	b29b      	uxth	r3, r3
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	370c      	adds	r7, #12
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr

0800ab8e <getBrakeParam>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
U16 getBrakeParam(adc_st* analogHandle)
{
 800ab8e:	b480      	push	{r7}
 800ab90:	b083      	sub	sp, #12
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
	return analogHandle->Brake;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab9a:	b29b      	uxth	r3, r3
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <getGasParam>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
U16 getGasParam(adc_st* analogHandle)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
	return analogHandle->Gas;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800abb6:	b29b      	uxth	r3, r3
}
 800abb8:	4618      	mov	r0, r3
 800abba:	370c      	adds	r7, #12
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <setMotorSpeed1>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void setMotorSpeed1( BCM_Module_st* BCM_MS1_SpeedHandle , adc_st* analogHandle)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
#ifdef TEST_ADC_V1
	BCM_MS1_SpeedHandle->Message11.SPN.BCM_MS1_Speed = analogHandle->WheelAngle ;
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8a3 2029 	strh.w	r2, [r3, #41]	; 0x29
#else
	BCM_MS1_SpeedHandle->Message11.SPN.BCM_MS1_Speed = (uint16_t)( getGasParam(analogHandle) - getBrakeParam(analogHandle) );
#endif
}
 800abda:	bf00      	nop
 800abdc:	370c      	adds	r7, #12
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr
	...

0800abe8 <ModuleADC_CTOR>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleADC_CTOR(Adc_Type* param , adc_st* _obj )
{
 800abe8:	b490      	push	{r4, r7}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
			getWheelAngle,
			getBrakeParam,
			getGasParam,
			setMotorSpeed1
	};
	param->ops = Vtable;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	4a06      	ldr	r2, [pc, #24]	; (800ac10 <ModuleADC_CTOR+0x28>)
 800abf6:	461c      	mov	r4, r3
 800abf8:	4613      	mov	r3, r2
 800abfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800abfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	param->obj = _obj;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	683a      	ldr	r2, [r7, #0]
 800ac04:	611a      	str	r2, [r3, #16]
}
 800ac06:	bf00      	nop
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bc90      	pop	{r4, r7}
 800ac0e:	4770      	bx	lr
 800ac10:	20000010 	.word	0x20000010

0800ac14 <ModuleADC_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleADC_HWInit(void)
{
 800ac14:	b480      	push	{r7}
 800ac16:	af00      	add	r7, sp, #0
	
}
 800ac18:	bf00      	nop
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
	...

0800ac24 <ModuleADC_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleADC_SWInit(void)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	af00      	add	r7, sp, #0
	ModuleADC_CTOR(&adcModule , &__GL.adc );
 800ac28:	4902      	ldr	r1, [pc, #8]	; (800ac34 <ModuleADC_SWInit+0x10>)
 800ac2a:	4803      	ldr	r0, [pc, #12]	; (800ac38 <ModuleADC_SWInit+0x14>)
 800ac2c:	f7ff ffdc 	bl	800abe8 <ModuleADC_CTOR>
}
 800ac30:	bf00      	nop
 800ac32:	bd80      	pop	{r7, pc}
 800ac34:	20000184 	.word	0x20000184
 800ac38:	2000c158 	.word	0x2000c158

0800ac3c <ModuleADC_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleADC_StartUP(void)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	af00      	add	r7, sp, #0
	ModuleADC_HWInit();
 800ac40:	f7ff ffe8 	bl	800ac14 <ModuleADC_HWInit>
	ModuleADC_SWInit();
 800ac44:	f7ff ffee 	bl	800ac24 <ModuleADC_SWInit>
}
 800ac48:	bf00      	nop
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <ModuleADC_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleADC_MAIN_Routine(void)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	af00      	add	r7, sp, #0
    /* Read All Channels and All Data with polling method	*/

    /* MUX1 POLLING READ */
    // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
    /* Read FBR_VS1 data from Mux1-Pin0 polling mode */
    __GL.adc.VOLTAGE_3V3 = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_MUX1,
 800ac50:	2100      	movs	r1, #0
 800ac52:	2001      	movs	r0, #1
 800ac54:	f000 f97c 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	b29a      	uxth	r2, r3
 800ac5c:	4b92      	ldr	r3, [pc, #584]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800ac5e:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
                                                                 PROCESS_ANALOGSIGNALS_SELECT_PIN0);
    /* Read FBL_IS1 data from Mux1-Pin1 polling mode */
    __GL.adc.VOLTAGE_VMCU = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_MUX1,
 800ac62:	2101      	movs	r1, #1
 800ac64:	2001      	movs	r0, #1
 800ac66:	f000 f973 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	b29a      	uxth	r2, r3
 800ac6e:	4b8e      	ldr	r3, [pc, #568]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800ac70:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
                                                                 PROCESS_ANALOGSIGNALS_SELECT_PIN1);
    /* Read FBL_VS1 data from Mux1-Pin2 polling mode */
    __GL.adc.VOLTAGE_5V = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_MUX1,
 800ac74:	2102      	movs	r1, #2
 800ac76:	2001      	movs	r0, #1
 800ac78:	f000 f96a 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	b29a      	uxth	r2, r3
 800ac80:	4b89      	ldr	r3, [pc, #548]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800ac82:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
                                                                 PROCESS_ANALOGSIGNALS_SELECT_PIN2);
    /* Read FBR_IS1 data from Mux1-Pin3 polling mode */
    __GL.adc.VOLTAGE_12V = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_MUX1,
 800ac86:	2103      	movs	r1, #3
 800ac88:	2001      	movs	r0, #1
 800ac8a:	f000 f961 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	b29a      	uxth	r2, r3
 800ac92:	4b85      	ldr	r3, [pc, #532]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800ac94:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
                                                                 PROCESS_ANALOGSIGNALS_SELECT_PIN3);
    /* Read FBL_VS2 data from Mux1-Pin4 polling mode */
    __GL.adc.VOLTAGE_24V = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_MUX1,
 800ac98:	2104      	movs	r1, #4
 800ac9a:	2001      	movs	r0, #1
 800ac9c:	f000 f958 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800aca0:	4603      	mov	r3, r0
 800aca2:	b29a      	uxth	r2, r3
 800aca4:	4b80      	ldr	r3, [pc, #512]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800aca6:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
    // ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

    /* MUX2 POLLING READ */
    // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
    /* Read POUT_IS7 data from Mux2-Pin0 polling mode */
    __GL.adc.A0_IN0 = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_MUX2,
 800acaa:	2100      	movs	r1, #0
 800acac:	2002      	movs	r0, #2
 800acae:	f000 f94f 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800acb2:	4603      	mov	r3, r0
 800acb4:	b29a      	uxth	r2, r3
 800acb6:	4b7c      	ldr	r3, [pc, #496]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800acb8:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
                                                             PROCESS_ANALOGSIGNALS_SELECT_PIN0);
    /* Read POUT_VS4 data from Mux2-Pin1 polling mode */
    __GL.adc.A0_IN1 = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_MUX2,
 800acbc:	2101      	movs	r1, #1
 800acbe:	2002      	movs	r0, #2
 800acc0:	f000 f946 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800acc4:	4603      	mov	r3, r0
 800acc6:	b29a      	uxth	r2, r3
 800acc8:	4b77      	ldr	r3, [pc, #476]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800acca:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
                                                             PROCESS_ANALOGSIGNALS_SELECT_PIN1);
    /* Read POUT_IS4 data from Mux2-Pin2 polling mode */
    __GL.adc.A0_IN2 = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_MUX2,
 800acce:	2102      	movs	r1, #2
 800acd0:	2002      	movs	r0, #2
 800acd2:	f000 f93d 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800acd6:	4603      	mov	r3, r0
 800acd8:	b29a      	uxth	r2, r3
 800acda:	4b73      	ldr	r3, [pc, #460]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800acdc:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
                                                             PROCESS_ANALOGSIGNALS_SELECT_PIN2);
    /* Read POUT_VS7 data from Mux2-Pin3 polling mode */
    __GL.adc.A0_IN3 = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_MUX2,
 800ace0:	2103      	movs	r1, #3
 800ace2:	2002      	movs	r0, #2
 800ace4:	f000 f934 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800ace8:	4603      	mov	r3, r0
 800acea:	b29a      	uxth	r2, r3
 800acec:	4b6e      	ldr	r3, [pc, #440]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800acee:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
                                                             PROCESS_ANALOGSIGNALS_SELECT_PIN3);
    /* Read POUT_IS1 data from Mux2-Pin4 polling mode */
    __GL.adc.A0_IN4 = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_MUX2,
 800acf2:	2104      	movs	r1, #4
 800acf4:	2002      	movs	r0, #2
 800acf6:	f000 f92b 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800acfa:	4603      	mov	r3, r0
 800acfc:	b29a      	uxth	r2, r3
 800acfe:	4b6a      	ldr	r3, [pc, #424]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800ad00:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
                                                                PROCESS_ANALOGSIGNALS_SELECT_PIN4);
    /* Read PVDD_SNSS data from Mux2-Pin5 polling mode */
    __GL.adc.A0_IN5 = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_MUX2,
 800ad04:	2105      	movs	r1, #5
 800ad06:	2002      	movs	r0, #2
 800ad08:	f000 f922 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	b29a      	uxth	r2, r3
 800ad10:	4b65      	ldr	r3, [pc, #404]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800ad12:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                                                                PROCESS_ANALOGSIGNALS_SELECT_PIN5);
    /* Read POUT_VS1 data from Mux2-Pin6 polling mode */
    __GL.adc.A0_IN6 = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_MUX2,
 800ad16:	2106      	movs	r1, #6
 800ad18:	2002      	movs	r0, #2
 800ad1a:	f000 f919 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	4b61      	ldr	r3, [pc, #388]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800ad24:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                                                                PROCESS_ANALOGSIGNALS_SELECT_PIN6);
    /* Read V12_SNS data from Mux2-Pin7 polling mode */
    __GL.adc.A0_IN7 = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_MUX2,
 800ad28:	2107      	movs	r1, #7
 800ad2a:	2002      	movs	r0, #2
 800ad2c:	f000 f910 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800ad30:	4603      	mov	r3, r0
 800ad32:	b29a      	uxth	r2, r3
 800ad34:	4b5c      	ldr	r3, [pc, #368]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800ad36:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118


    /*  OTHER CHANNEL POLLING READ */
    // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
    /* Read POUT_IS11 data from Mux5-Pin0 polling mode */
    __GL.adc.VIN = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_VIN,
 800ad3a:	21ff      	movs	r1, #255	; 0xff
 800ad3c:	2003      	movs	r0, #3
 800ad3e:	f000 f907 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800ad42:	4603      	mov	r3, r0
 800ad44:	b29a      	uxth	r2, r3
 800ad46:	4b58      	ldr	r3, [pc, #352]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800ad48:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
    															   PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_VS8 data from Mux5-Pin1 polling mode */
    __GL.adc.ACS_5V = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_ACS_5V,
 800ad4c:	21ff      	movs	r1, #255	; 0xff
 800ad4e:	2004      	movs	r0, #4
 800ad50:	f000 f8fe 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800ad54:	4603      	mov	r3, r0
 800ad56:	b29a      	uxth	r2, r3
 800ad58:	4b53      	ldr	r3, [pc, #332]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800ad5a:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
    																PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_IS8 data from Mux5-Pin2 polling mode */
    __GL.adc.ACS_12V = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_ACS_12V,
 800ad5e:	21ff      	movs	r1, #255	; 0xff
 800ad60:	2005      	movs	r0, #5
 800ad62:	f000 f8f5 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800ad66:	4603      	mov	r3, r0
 800ad68:	b29a      	uxth	r2, r3
 800ad6a:	4b4f      	ldr	r3, [pc, #316]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800ad6c:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
   															 PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_VS8 data from Mux5-Pin1 polling mode */
    __GL.adc.ACS_VMCU = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_ACS_VMCU,
 800ad70:	21ff      	movs	r1, #255	; 0xff
 800ad72:	2006      	movs	r0, #6
 800ad74:	f000 f8ec 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	b29a      	uxth	r2, r3
 800ad7c:	4b4a      	ldr	r3, [pc, #296]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800ad7e:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    																PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_IS8 data from Mux5-Pin2 polling mode */
    __GL.adc.ACS_3V3 = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_ACS_3V3,
 800ad82:	21ff      	movs	r1, #255	; 0xff
 800ad84:	2007      	movs	r0, #7
 800ad86:	f000 f8e3 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	b29a      	uxth	r2, r3
 800ad8e:	4b46      	ldr	r3, [pc, #280]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800ad90:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
   															 PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_VS8 data from Mux5-Pin1 polling mode */
    __GL.adc.ACS_FL = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_ACS_FL,
 800ad94:	21ff      	movs	r1, #255	; 0xff
 800ad96:	2008      	movs	r0, #8
 800ad98:	f000 f8da 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	b29a      	uxth	r2, r3
 800ada0:	4b41      	ldr	r3, [pc, #260]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800ada2:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    																PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_IS8 data from Mux5-Pin2 polling mode */
    __GL.adc.ACS_BL = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_ACS_BL,
 800ada6:	21ff      	movs	r1, #255	; 0xff
 800ada8:	2009      	movs	r0, #9
 800adaa:	f000 f8d1 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800adae:	4603      	mov	r3, r0
 800adb0:	b29a      	uxth	r2, r3
 800adb2:	4b3d      	ldr	r3, [pc, #244]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800adb4:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
   															 PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_VS8 data from Mux5-Pin1 polling mode */
    __GL.adc.ACS_VINL1 = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_ACS_VINL1,
 800adb8:	21ff      	movs	r1, #255	; 0xff
 800adba:	2010      	movs	r0, #16
 800adbc:	f000 f8c8 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800adc0:	4603      	mov	r3, r0
 800adc2:	b29a      	uxth	r2, r3
 800adc4:	4b38      	ldr	r3, [pc, #224]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800adc6:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
    																PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_IS8 data from Mux5-Pin2 polling mode */
    __GL.adc.ACS_VINL2 = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_ACS_VINL2,
 800adca:	21ff      	movs	r1, #255	; 0xff
 800adcc:	2011      	movs	r0, #17
 800adce:	f000 f8bf 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800add2:	4603      	mov	r3, r0
 800add4:	b29a      	uxth	r2, r3
 800add6:	4b34      	ldr	r3, [pc, #208]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800add8:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
   															 PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_VS8 data from Mux5-Pin1 polling mode */
    __GL.adc.ACS_BINL = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_ACS_BINL,
 800addc:	21ff      	movs	r1, #255	; 0xff
 800adde:	2012      	movs	r0, #18
 800ade0:	f000 f8b6 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800ade4:	4603      	mov	r3, r0
 800ade6:	b29a      	uxth	r2, r3
 800ade8:	4b2f      	ldr	r3, [pc, #188]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800adea:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
    															PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_IS8 data from Mux5-Pin2 polling mode */
    __GL.adc.ACS_STOP = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_ACS_STOP,
 800adee:	21ff      	movs	r1, #255	; 0xff
 800adf0:	2013      	movs	r0, #19
 800adf2:	f000 f8ad 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800adf6:	4603      	mov	r3, r0
 800adf8:	b29a      	uxth	r2, r3
 800adfa:	4b2b      	ldr	r3, [pc, #172]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800adfc:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
   															 PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_VS8 data from Mux5-Pin1 polling mode */
    __GL.adc.ACS_RS = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_ACS_RS,
 800ae00:	21ff      	movs	r1, #255	; 0xff
 800ae02:	2014      	movs	r0, #20
 800ae04:	f000 f8a4 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	b29a      	uxth	r2, r3
 800ae0c:	4b26      	ldr	r3, [pc, #152]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800ae0e:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
    																PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_IS8 data from Mux5-Pin2 polling mode */
    __GL.adc.ACS_LS = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_ACS_LS,
 800ae12:	21ff      	movs	r1, #255	; 0xff
 800ae14:	2015      	movs	r0, #21
 800ae16:	f000 f89b 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	b29a      	uxth	r2, r3
 800ae1e:	4b22      	ldr	r3, [pc, #136]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800ae20:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
   															 PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_VS8 data from Mux5-Pin1 polling mode */
    __GL.adc.RS_VRx = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_RS_VRx,
 800ae24:	21ff      	movs	r1, #255	; 0xff
 800ae26:	2016      	movs	r0, #22
 800ae28:	f000 f892 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	b29a      	uxth	r2, r3
 800ae30:	4b1d      	ldr	r3, [pc, #116]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800ae32:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
    																PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_IS8 data from Mux5-Pin2 polling mode */
    __GL.adc.RS_VRy = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_RS_VRy,
 800ae36:	21ff      	movs	r1, #255	; 0xff
 800ae38:	2017      	movs	r0, #23
 800ae3a:	f000 f889 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	b29a      	uxth	r2, r3
 800ae42:	4b19      	ldr	r3, [pc, #100]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800ae44:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
   															 PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_VS8 data from Mux5-Pin1 polling mode */
    __GL.adc.LS_VRx = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_LS_VRx,
 800ae48:	21ff      	movs	r1, #255	; 0xff
 800ae4a:	2018      	movs	r0, #24
 800ae4c:	f000 f880 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800ae50:	4603      	mov	r3, r0
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	4b14      	ldr	r3, [pc, #80]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800ae56:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
    																PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_IS8 data from Mux5-Pin2 polling mode */
    __GL.adc.LS_VRy = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_LS_VRy,
 800ae5a:	21ff      	movs	r1, #255	; 0xff
 800ae5c:	2019      	movs	r0, #25
 800ae5e:	f000 f877 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800ae62:	4603      	mov	r3, r0
 800ae64:	b29a      	uxth	r2, r3
 800ae66:	4b10      	ldr	r3, [pc, #64]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800ae68:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
   															 PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_VS8 data from Mux5-Pin1 polling mode */
    __GL.adc.WheelAngle = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_WHEELANGLE,
 800ae6c:	21ff      	movs	r1, #255	; 0xff
 800ae6e:	2020      	movs	r0, #32
 800ae70:	f000 f86e 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800ae74:	4603      	mov	r3, r0
 800ae76:	b29a      	uxth	r2, r3
 800ae78:	4b0b      	ldr	r3, [pc, #44]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800ae7a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
    																PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_IS8 data from Mux5-Pin2 polling mode */
    __GL.adc.Brake = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_BRAKE,
 800ae7e:	21ff      	movs	r1, #255	; 0xff
 800ae80:	2021      	movs	r0, #33	; 0x21
 800ae82:	f000 f865 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800ae86:	4603      	mov	r3, r0
 800ae88:	b29a      	uxth	r2, r3
 800ae8a:	4b07      	ldr	r3, [pc, #28]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800ae8c:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
   															 PROCESS_ANALOGSIGNALS_SELECT_NULL);
    /* Read POUT_VS8 data from Mux5-Pin1 polling mode */
    __GL.adc.Gas = Process_AnalogSignals_ReadChannel(PROCESS_ANALOGSIGNALS_AN_GAS,
 800ae90:	21ff      	movs	r1, #255	; 0xff
 800ae92:	2022      	movs	r0, #34	; 0x22
 800ae94:	f000 f85c 	bl	800af50 <Process_AnalogSignals_ReadChannel>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	b29a      	uxth	r2, r3
 800ae9c:	4b02      	ldr	r3, [pc, #8]	; (800aea8 <ModuleADC_MAIN_Routine+0x25c>)
 800ae9e:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140


#ifdef  DEBUG_ANALOGREAD_PROCESS
    DEBUG_Process();
#endif
}
 800aea2:	bf00      	nop
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	20000084 	.word	0x20000084

0800aeac <ModuleADC_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleADC_MAIN_Process(void)
{
 800aeac:	b480      	push	{r7}
 800aeae:	af00      	add	r7, sp, #0

}
 800aeb0:	bf00      	nop
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr
	...

0800aebc <ModuleADC_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleADC_MAIN(void)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	af00      	add	r7, sp, #0
	switch(ModuleADC_MAIN_State)
 800aec0:	4b11      	ldr	r3, [pc, #68]	; (800af08 <ModuleADC_MAIN+0x4c>)
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	2b03      	cmp	r3, #3
 800aec6:	d819      	bhi.n	800aefc <ModuleADC_MAIN+0x40>
 800aec8:	a201      	add	r2, pc, #4	; (adr r2, 800aed0 <ModuleADC_MAIN+0x14>)
 800aeca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aece:	bf00      	nop
 800aed0:	0800aee1 	.word	0x0800aee1
 800aed4:	0800aee9 	.word	0x0800aee9
 800aed8:	0800aeef 	.word	0x0800aeef
 800aedc:	0800aef5 	.word	0x0800aef5
	{
	    case ModuleADC_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleADC_MAIN_State = ModuleADC_MAIN_State_ROUTINE;
 800aee0:	4b09      	ldr	r3, [pc, #36]	; (800af08 <ModuleADC_MAIN+0x4c>)
 800aee2:	2201      	movs	r2, #1
 800aee4:	701a      	strb	r2, [r3, #0]
	    break;
 800aee6:	e00d      	b.n	800af04 <ModuleADC_MAIN+0x48>

	    case ModuleADC_MAIN_State_ROUTINE:

	    	ModuleADC_MAIN_Routine();
 800aee8:	f7ff feb0 	bl	800ac4c <ModuleADC_MAIN_Routine>
	    break;
 800aeec:	e00a      	b.n	800af04 <ModuleADC_MAIN+0x48>

	    case ModuleADC_MAIN_State_PROCESS:

	    	ModuleADC_MAIN_Process();
 800aeee:	f7ff ffdd 	bl	800aeac <ModuleADC_MAIN_Process>

	    break;
 800aef2:	e007      	b.n	800af04 <ModuleADC_MAIN+0x48>

	    case ModuleADC_MAIN_State_SUSPEND:
	    	ModuleADC_MAIN_State = ModuleADC_MAIN_State_IDLE;
 800aef4:	4b04      	ldr	r3, [pc, #16]	; (800af08 <ModuleADC_MAIN+0x4c>)
 800aef6:	2200      	movs	r2, #0
 800aef8:	701a      	strb	r2, [r3, #0]
	    break;
 800aefa:	e003      	b.n	800af04 <ModuleADC_MAIN+0x48>

	    default:
	    	ModuleADC_MAIN_State = ModuleADC_MAIN_State_SUSPEND;
 800aefc:	4b02      	ldr	r3, [pc, #8]	; (800af08 <ModuleADC_MAIN+0x4c>)
 800aefe:	2203      	movs	r2, #3
 800af00:	701a      	strb	r2, [r3, #0]
	    break;
 800af02:	bf00      	nop

	}
}
 800af04:	bf00      	nop
 800af06:	bd80      	pop	{r7, pc}
 800af08:	2000c16c 	.word	0x2000c16c

0800af0c <Process_AnalogSignals_SeperateChannels>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void    Process_AnalogSignals_SeperateChannels(ADC_HandleTypeDef *hadc, U32 ADC_CHANNEL, U32 RANK)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b088      	sub	sp, #32
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	607a      	str	r2, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 800af18:	f107 0310 	add.w	r3, r7, #16
 800af1c:	2200      	movs	r2, #0
 800af1e:	601a      	str	r2, [r3, #0]
 800af20:	605a      	str	r2, [r3, #4]
 800af22:	609a      	str	r2, [r3, #8]
 800af24:	60da      	str	r2, [r3, #12]

    sConfig.Channel      = ADC_CHANNEL;
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	613b      	str	r3, [r7, #16]
    sConfig.Rank         = RANK;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	617b      	str	r3, [r7, #20]
    sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800af2e:	2302      	movs	r3, #2
 800af30:	61bb      	str	r3, [r7, #24]

    if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 800af32:	f107 0310 	add.w	r3, r7, #16
 800af36:	4619      	mov	r1, r3
 800af38:	68f8      	ldr	r0, [r7, #12]
 800af3a:	f7f7 fed7 	bl	8002cec <HAL_ADC_ConfigChannel>
 800af3e:	4603      	mov	r3, r0
 800af40:	2b00      	cmp	r3, #0
 800af42:	d001      	beq.n	800af48 <Process_AnalogSignals_SeperateChannels+0x3c>
    {
        Error_Handler();
 800af44:	f7f6 f9aa 	bl	800129c <Error_Handler>
    }
}
 800af48:	bf00      	nop
 800af4a:	3720      	adds	r7, #32
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <Process_AnalogSignals_ReadChannel>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
U32 Process_AnalogSignals_ReadChannel(U8 MUX_SELECT, U8 SELECT_PIN)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b096      	sub	sp, #88	; 0x58
 800af54:	af00      	add	r7, sp, #0
 800af56:	4603      	mov	r3, r0
 800af58:	460a      	mov	r2, r1
 800af5a:	71fb      	strb	r3, [r7, #7]
 800af5c:	4613      	mov	r3, r2
 800af5e:	71bb      	strb	r3, [r7, #6]
    ADC_HandleTypeDef tempAdcHandle;
    U32 tempAdcValue  = 0;
 800af60:	2300      	movs	r3, #0
 800af62:	657b      	str	r3, [r7, #84]	; 0x54

    /* Analog Mux Pin Selection																*/
    switch (MUX_SELECT)
 800af64:	79fb      	ldrb	r3, [r7, #7]
 800af66:	3b01      	subs	r3, #1
 800af68:	2b21      	cmp	r3, #33	; 0x21
 800af6a:	f200 817b 	bhi.w	800b264 <Process_AnalogSignals_ReadChannel+0x314>
 800af6e:	a201      	add	r2, pc, #4	; (adr r2, 800af74 <Process_AnalogSignals_ReadChannel+0x24>)
 800af70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af74:	0800affd 	.word	0x0800affd
 800af78:	0800b019 	.word	0x0800b019
 800af7c:	0800b035 	.word	0x0800b035
 800af80:	0800b051 	.word	0x0800b051
 800af84:	0800b06d 	.word	0x0800b06d
 800af88:	0800b089 	.word	0x0800b089
 800af8c:	0800b0a5 	.word	0x0800b0a5
 800af90:	0800b0c1 	.word	0x0800b0c1
 800af94:	0800b0dd 	.word	0x0800b0dd
 800af98:	0800b265 	.word	0x0800b265
 800af9c:	0800b265 	.word	0x0800b265
 800afa0:	0800b265 	.word	0x0800b265
 800afa4:	0800b265 	.word	0x0800b265
 800afa8:	0800b265 	.word	0x0800b265
 800afac:	0800b265 	.word	0x0800b265
 800afb0:	0800b0f9 	.word	0x0800b0f9
 800afb4:	0800b115 	.word	0x0800b115
 800afb8:	0800b131 	.word	0x0800b131
 800afbc:	0800b14d 	.word	0x0800b14d
 800afc0:	0800b169 	.word	0x0800b169
 800afc4:	0800b185 	.word	0x0800b185
 800afc8:	0800b1a1 	.word	0x0800b1a1
 800afcc:	0800b1bd 	.word	0x0800b1bd
 800afd0:	0800b1d9 	.word	0x0800b1d9
 800afd4:	0800b1f5 	.word	0x0800b1f5
 800afd8:	0800b265 	.word	0x0800b265
 800afdc:	0800b265 	.word	0x0800b265
 800afe0:	0800b265 	.word	0x0800b265
 800afe4:	0800b265 	.word	0x0800b265
 800afe8:	0800b265 	.word	0x0800b265
 800afec:	0800b265 	.word	0x0800b265
 800aff0:	0800b211 	.word	0x0800b211
 800aff4:	0800b22d 	.word	0x0800b22d
 800aff8:	0800b249 	.word	0x0800b249
    {
        case PROCESS_ANALOGSIGNALS_AN_MUX1:    /* PC1 - ADC3 - CHANNEL_13       */

            Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_MUX1_HANDLE,
 800affc:	2203      	movs	r2, #3
 800affe:	210d      	movs	r1, #13
 800b000:	48cd      	ldr	r0, [pc, #820]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b002:	f7ff ff83 	bl	800af0c <Process_AnalogSignals_SeperateChannels>
                                                   PROCESS_ANALOGSIGNALS_AN_MUX1_CHANNEL,
                                                   PROCESS_ANALOGSIGNALS_AN_MUX1_RANK);

            tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_MUX1_HANDLE;
 800b006:	4acc      	ldr	r2, [pc, #816]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b008:	f107 030c 	add.w	r3, r7, #12
 800b00c:	4611      	mov	r1, r2
 800b00e:	2248      	movs	r2, #72	; 0x48
 800b010:	4618      	mov	r0, r3
 800b012:	f000 fe5d 	bl	800bcd0 <memcpy>

            break;
 800b016:	e125      	b.n	800b264 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_MUX2:    /* PC1 - ADC3 - CHANNEL_14       */

            Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_MUX2_HANDLE,
 800b018:	2203      	movs	r2, #3
 800b01a:	210e      	movs	r1, #14
 800b01c:	48c6      	ldr	r0, [pc, #792]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b01e:	f7ff ff75 	bl	800af0c <Process_AnalogSignals_SeperateChannels>
                                                   PROCESS_ANALOGSIGNALS_AN_MUX2_CHANNEL,
                                                   PROCESS_ANALOGSIGNALS_AN_MUX2_RANK);

            tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_MUX2_HANDLE;
 800b022:	4ac5      	ldr	r2, [pc, #788]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b024:	f107 030c 	add.w	r3, r7, #12
 800b028:	4611      	mov	r1, r2
 800b02a:	2248      	movs	r2, #72	; 0x48
 800b02c:	4618      	mov	r0, r3
 800b02e:	f000 fe4f 	bl	800bcd0 <memcpy>

            break;
 800b032:	e117      	b.n	800b264 <Process_AnalogSignals_ReadChannel+0x314>

#ifdef SCI_BCM_SMALL
        /* ACS712 POWER Selection									*/
        case PROCESS_ANALOGSIGNALS_AN_VIN:

                    Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_VIN_HANDLE,
 800b034:	2203      	movs	r2, #3
 800b036:	210f      	movs	r1, #15
 800b038:	48bf      	ldr	r0, [pc, #764]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b03a:	f7ff ff67 	bl	800af0c <Process_AnalogSignals_SeperateChannels>
                    										PROCESS_ANALOGSIGNALS_AN_VIN_CHANNEL,
															PROCESS_ANALOGSIGNALS_AN_VIN_RANK);

                    tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_VIN_HANDLE;
 800b03e:	4abe      	ldr	r2, [pc, #760]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b040:	f107 030c 	add.w	r3, r7, #12
 800b044:	4611      	mov	r1, r2
 800b046:	2248      	movs	r2, #72	; 0x48
 800b048:	4618      	mov	r0, r3
 800b04a:	f000 fe41 	bl	800bcd0 <memcpy>

                    break;
 800b04e:	e109      	b.n	800b264 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_ACS_5V:

                    Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_ACS_5V_HANDLE,
 800b050:	2203      	movs	r2, #3
 800b052:	2109      	movs	r1, #9
 800b054:	48b8      	ldr	r0, [pc, #736]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b056:	f7ff ff59 	bl	800af0c <Process_AnalogSignals_SeperateChannels>
                    									   PROCESS_ANALOGSIGNALS_AN_ACS_5V_CHANNEL,
														   PROCESS_ANALOGSIGNALS_AN_ACS_5V_RANK);

                    tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_ACS_5V_HANDLE;
 800b05a:	4ab7      	ldr	r2, [pc, #732]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b05c:	f107 030c 	add.w	r3, r7, #12
 800b060:	4611      	mov	r1, r2
 800b062:	2248      	movs	r2, #72	; 0x48
 800b064:	4618      	mov	r0, r3
 800b066:	f000 fe33 	bl	800bcd0 <memcpy>

                    break;
 800b06a:	e0fb      	b.n	800b264 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_ACS_12V:

                   	Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_ACS_12V_HANDLE,
 800b06c:	2203      	movs	r2, #3
 800b06e:	210a      	movs	r1, #10
 800b070:	48b1      	ldr	r0, [pc, #708]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b072:	f7ff ff4b 	bl	800af0c <Process_AnalogSignals_SeperateChannels>
                        		  	  	  	  	  	  	  PROCESS_ANALOGSIGNALS_AN_ACS_12V_CHANNEL,
														  PROCESS_ANALOGSIGNALS_AN_ACS_12V_RANK);

                    tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_ACS_12V_HANDLE;
 800b076:	4ab0      	ldr	r2, [pc, #704]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b078:	f107 030c 	add.w	r3, r7, #12
 800b07c:	4611      	mov	r1, r2
 800b07e:	2248      	movs	r2, #72	; 0x48
 800b080:	4618      	mov	r0, r3
 800b082:	f000 fe25 	bl	800bcd0 <memcpy>

                    break;
 800b086:	e0ed      	b.n	800b264 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_ACS_VMCU:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_ACS_VMCU_HANDLE,
 800b088:	2203      	movs	r2, #3
 800b08a:	210b      	movs	r1, #11
 800b08c:	48aa      	ldr	r0, [pc, #680]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b08e:	f7ff ff3d 	bl	800af0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_ACS_VMCU_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_ACS_VMCU_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_ACS_VMCU_HANDLE;
 800b092:	4aa9      	ldr	r2, [pc, #676]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b094:	f107 030c 	add.w	r3, r7, #12
 800b098:	4611      	mov	r1, r2
 800b09a:	2248      	movs	r2, #72	; 0x48
 800b09c:	4618      	mov	r0, r3
 800b09e:	f000 fe17 	bl	800bcd0 <memcpy>

                     break;
 800b0a2:	e0df      	b.n	800b264 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_ACS_3V3:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_ACS_3V3_HANDLE,
 800b0a4:	2203      	movs	r2, #3
 800b0a6:	210c      	movs	r1, #12
 800b0a8:	48a3      	ldr	r0, [pc, #652]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b0aa:	f7ff ff2f 	bl	800af0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_ACS_3V3_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_ACS_3V3_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_ACS_3V3_HANDLE;
 800b0ae:	4aa2      	ldr	r2, [pc, #648]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b0b0:	f107 030c 	add.w	r3, r7, #12
 800b0b4:	4611      	mov	r1, r2
 800b0b6:	2248      	movs	r2, #72	; 0x48
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f000 fe09 	bl	800bcd0 <memcpy>

                     break;
 800b0be:	e0d1      	b.n	800b264 <Process_AnalogSignals_ReadChannel+0x314>

        /* ACS712 DRIVER Selection									*/
        case PROCESS_ANALOGSIGNALS_AN_ACS_FL:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_ACS_FL_HANDLE,
 800b0c0:	2203      	movs	r2, #3
 800b0c2:	2101      	movs	r1, #1
 800b0c4:	489c      	ldr	r0, [pc, #624]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b0c6:	f7ff ff21 	bl	800af0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_ACS_FL_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_ACS_FL_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_ACS_FL_HANDLE;
 800b0ca:	4a9b      	ldr	r2, [pc, #620]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b0cc:	f107 030c 	add.w	r3, r7, #12
 800b0d0:	4611      	mov	r1, r2
 800b0d2:	2248      	movs	r2, #72	; 0x48
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f000 fdfb 	bl	800bcd0 <memcpy>

                     break;
 800b0da:	e0c3      	b.n	800b264 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_ACS_BL:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_ACS_BL_HANDLE,
 800b0dc:	2203      	movs	r2, #3
 800b0de:	2102      	movs	r1, #2
 800b0e0:	4895      	ldr	r0, [pc, #596]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b0e2:	f7ff ff13 	bl	800af0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_ACS_BL_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_ACS_BL_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_ACS_BL_HANDLE;
 800b0e6:	4a94      	ldr	r2, [pc, #592]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b0e8:	f107 030c 	add.w	r3, r7, #12
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	2248      	movs	r2, #72	; 0x48
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f000 fded 	bl	800bcd0 <memcpy>

                     break;
 800b0f6:	e0b5      	b.n	800b264 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_ACS_VINL1:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_ACS_VINL1_HANDLE,
 800b0f8:	2203      	movs	r2, #3
 800b0fa:	2103      	movs	r1, #3
 800b0fc:	488e      	ldr	r0, [pc, #568]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b0fe:	f7ff ff05 	bl	800af0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_ACS_VINL1_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_ACS_VINL1_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_ACS_VINL1_HANDLE;
 800b102:	4a8d      	ldr	r2, [pc, #564]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b104:	f107 030c 	add.w	r3, r7, #12
 800b108:	4611      	mov	r1, r2
 800b10a:	2248      	movs	r2, #72	; 0x48
 800b10c:	4618      	mov	r0, r3
 800b10e:	f000 fddf 	bl	800bcd0 <memcpy>

                     break;
 800b112:	e0a7      	b.n	800b264 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_ACS_VINL2:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_ACS_VINL2_HANDLE,
 800b114:	2203      	movs	r2, #3
 800b116:	2104      	movs	r1, #4
 800b118:	4887      	ldr	r0, [pc, #540]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b11a:	f7ff fef7 	bl	800af0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_ACS_VINL2_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_ACS_VINL2_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_ACS_VINL2_HANDLE;
 800b11e:	4a86      	ldr	r2, [pc, #536]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b120:	f107 030c 	add.w	r3, r7, #12
 800b124:	4611      	mov	r1, r2
 800b126:	2248      	movs	r2, #72	; 0x48
 800b128:	4618      	mov	r0, r3
 800b12a:	f000 fdd1 	bl	800bcd0 <memcpy>

                     break;
 800b12e:	e099      	b.n	800b264 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_ACS_BINL:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_ACS_BINL_HANDLE,
 800b130:	2203      	movs	r2, #3
 800b132:	2105      	movs	r1, #5
 800b134:	4880      	ldr	r0, [pc, #512]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b136:	f7ff fee9 	bl	800af0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_ACS_BINL_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_ACS_BINL_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_ACS_BINL_HANDLE;
 800b13a:	4a7f      	ldr	r2, [pc, #508]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b13c:	f107 030c 	add.w	r3, r7, #12
 800b140:	4611      	mov	r1, r2
 800b142:	2248      	movs	r2, #72	; 0x48
 800b144:	4618      	mov	r0, r3
 800b146:	f000 fdc3 	bl	800bcd0 <memcpy>

                     break;
 800b14a:	e08b      	b.n	800b264 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_ACS_STOP:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_ACS_STOP_HANDLE,
 800b14c:	2203      	movs	r2, #3
 800b14e:	2105      	movs	r1, #5
 800b150:	4879      	ldr	r0, [pc, #484]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b152:	f7ff fedb 	bl	800af0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_ACS_STOP_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_ACS_STOP_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_ACS_STOP_HANDLE;
 800b156:	4a78      	ldr	r2, [pc, #480]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b158:	f107 030c 	add.w	r3, r7, #12
 800b15c:	4611      	mov	r1, r2
 800b15e:	2248      	movs	r2, #72	; 0x48
 800b160:	4618      	mov	r0, r3
 800b162:	f000 fdb5 	bl	800bcd0 <memcpy>

                     break;
 800b166:	e07d      	b.n	800b264 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_ACS_RS:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_ACS_RS_HANDLE,
 800b168:	2203      	movs	r2, #3
 800b16a:	2107      	movs	r1, #7
 800b16c:	4872      	ldr	r0, [pc, #456]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b16e:	f7ff fecd 	bl	800af0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_ACS_RS_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_ACS_RS_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_ACS_RS_HANDLE;
 800b172:	4a71      	ldr	r2, [pc, #452]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b174:	f107 030c 	add.w	r3, r7, #12
 800b178:	4611      	mov	r1, r2
 800b17a:	2248      	movs	r2, #72	; 0x48
 800b17c:	4618      	mov	r0, r3
 800b17e:	f000 fda7 	bl	800bcd0 <memcpy>

                     break;
 800b182:	e06f      	b.n	800b264 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_ACS_LS:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_ACS_LS_HANDLE,
 800b184:	2203      	movs	r2, #3
 800b186:	2108      	movs	r1, #8
 800b188:	486b      	ldr	r0, [pc, #428]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b18a:	f7ff febf 	bl	800af0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_ACS_LS_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_ACS_LS_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_ACS_LS_HANDLE;
 800b18e:	4a6a      	ldr	r2, [pc, #424]	; (800b338 <Process_AnalogSignals_ReadChannel+0x3e8>)
 800b190:	f107 030c 	add.w	r3, r7, #12
 800b194:	4611      	mov	r1, r2
 800b196:	2248      	movs	r2, #72	; 0x48
 800b198:	4618      	mov	r0, r3
 800b19a:	f000 fd99 	bl	800bcd0 <memcpy>

                     break;
 800b19e:	e061      	b.n	800b264 <Process_AnalogSignals_ReadChannel+0x314>

        /* GPIO DRIVER Selection									 */
        case PROCESS_ANALOGSIGNALS_AN_RS_VRx:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_RS_VRx_HANDLE,
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	2109      	movs	r1, #9
 800b1a4:	4865      	ldr	r0, [pc, #404]	; (800b33c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800b1a6:	f7ff feb1 	bl	800af0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_RS_VRx_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_RS_VRx_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_RS_VRx_HANDLE;
 800b1aa:	4a64      	ldr	r2, [pc, #400]	; (800b33c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800b1ac:	f107 030c 	add.w	r3, r7, #12
 800b1b0:	4611      	mov	r1, r2
 800b1b2:	2248      	movs	r2, #72	; 0x48
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f000 fd8b 	bl	800bcd0 <memcpy>

                     break;
 800b1ba:	e053      	b.n	800b264 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_RS_VRy:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_RS_VRy_HANDLE,
 800b1bc:	2201      	movs	r2, #1
 800b1be:	2107      	movs	r1, #7
 800b1c0:	485e      	ldr	r0, [pc, #376]	; (800b33c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800b1c2:	f7ff fea3 	bl	800af0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_RS_VRy_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_RS_VRy_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_RS_VRy_HANDLE;
 800b1c6:	4a5d      	ldr	r2, [pc, #372]	; (800b33c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800b1c8:	f107 030c 	add.w	r3, r7, #12
 800b1cc:	4611      	mov	r1, r2
 800b1ce:	2248      	movs	r2, #72	; 0x48
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f000 fd7d 	bl	800bcd0 <memcpy>

                     break;
 800b1d6:	e045      	b.n	800b264 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_LS_VRx:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_LS_VRx_HANDLE,
 800b1d8:	2201      	movs	r2, #1
 800b1da:	210e      	movs	r1, #14
 800b1dc:	4857      	ldr	r0, [pc, #348]	; (800b33c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800b1de:	f7ff fe95 	bl	800af0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_LS_VRx_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_LS_VRx_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_LS_VRx_HANDLE;
 800b1e2:	4a56      	ldr	r2, [pc, #344]	; (800b33c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800b1e4:	f107 030c 	add.w	r3, r7, #12
 800b1e8:	4611      	mov	r1, r2
 800b1ea:	2248      	movs	r2, #72	; 0x48
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f000 fd6f 	bl	800bcd0 <memcpy>

                     break;
 800b1f2:	e037      	b.n	800b264 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_LS_VRy:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_LS_VRy_HANDLE,
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	210f      	movs	r1, #15
 800b1f8:	4850      	ldr	r0, [pc, #320]	; (800b33c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800b1fa:	f7ff fe87 	bl	800af0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_LS_VRy_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_LS_VRy_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_LS_VRy_HANDLE;
 800b1fe:	4a4f      	ldr	r2, [pc, #316]	; (800b33c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800b200:	f107 030c 	add.w	r3, r7, #12
 800b204:	4611      	mov	r1, r2
 800b206:	2248      	movs	r2, #72	; 0x48
 800b208:	4618      	mov	r0, r3
 800b20a:	f000 fd61 	bl	800bcd0 <memcpy>

                     break;
 800b20e:	e029      	b.n	800b264 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_WHEELANGLE:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_DIREKSIYON_HANDLE,
 800b210:	2201      	movs	r2, #1
 800b212:	2105      	movs	r1, #5
 800b214:	4849      	ldr	r0, [pc, #292]	; (800b33c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800b216:	f7ff fe79 	bl	800af0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_DIREKSIYON_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_DIREKSIYON_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_DIREKSIYON_HANDLE;
 800b21a:	4a48      	ldr	r2, [pc, #288]	; (800b33c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800b21c:	f107 030c 	add.w	r3, r7, #12
 800b220:	4611      	mov	r1, r2
 800b222:	2248      	movs	r2, #72	; 0x48
 800b224:	4618      	mov	r0, r3
 800b226:	f000 fd53 	bl	800bcd0 <memcpy>

                     break;
 800b22a:	e01b      	b.n	800b264 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_BRAKE:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_FREN_HANDLE,
 800b22c:	2201      	movs	r2, #1
 800b22e:	2104      	movs	r1, #4
 800b230:	4842      	ldr	r0, [pc, #264]	; (800b33c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800b232:	f7ff fe6b 	bl	800af0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_FREN_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_FREN_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_FREN_HANDLE;
 800b236:	4a41      	ldr	r2, [pc, #260]	; (800b33c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800b238:	f107 030c 	add.w	r3, r7, #12
 800b23c:	4611      	mov	r1, r2
 800b23e:	2248      	movs	r2, #72	; 0x48
 800b240:	4618      	mov	r0, r3
 800b242:	f000 fd45 	bl	800bcd0 <memcpy>

                     break;
 800b246:	e00d      	b.n	800b264 <Process_AnalogSignals_ReadChannel+0x314>

        case PROCESS_ANALOGSIGNALS_AN_GAS:

                     Process_AnalogSignals_SeperateChannels(&PROCESS_ANALOGSIGNALS_AN_GAZ_HANDLE,
 800b248:	2201      	movs	r2, #1
 800b24a:	2106      	movs	r1, #6
 800b24c:	483b      	ldr	r0, [pc, #236]	; (800b33c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800b24e:	f7ff fe5d 	bl	800af0c <Process_AnalogSignals_SeperateChannels>
                        								PROCESS_ANALOGSIGNALS_AN_GAZ_CHANNEL,
    													PROCESS_ANALOGSIGNALS_AN_GAZ_RANK);

                     tempAdcHandle = PROCESS_ANALOGSIGNALS_AN_GAZ_HANDLE;
 800b252:	4a3a      	ldr	r2, [pc, #232]	; (800b33c <Process_AnalogSignals_ReadChannel+0x3ec>)
 800b254:	f107 030c 	add.w	r3, r7, #12
 800b258:	4611      	mov	r1, r2
 800b25a:	2248      	movs	r2, #72	; 0x48
 800b25c:	4618      	mov	r0, r3
 800b25e:	f000 fd37 	bl	800bcd0 <memcpy>

                     break;
 800b262:	bf00      	nop
#endif

    }


    switch (SELECT_PIN)
 800b264:	79bb      	ldrb	r3, [r7, #6]
 800b266:	2b07      	cmp	r3, #7
 800b268:	dc18      	bgt.n	800b29c <Process_AnalogSignals_ReadChannel+0x34c>
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	f2c0 80b6 	blt.w	800b3dc <Process_AnalogSignals_ReadChannel+0x48c>
 800b270:	2b07      	cmp	r3, #7
 800b272:	f200 80b3 	bhi.w	800b3dc <Process_AnalogSignals_ReadChannel+0x48c>
 800b276:	a201      	add	r2, pc, #4	; (adr r2, 800b27c <Process_AnalogSignals_ReadChannel+0x32c>)
 800b278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b27c:	0800b2a1 	.word	0x0800b2a1
 800b280:	0800b2c7 	.word	0x0800b2c7
 800b284:	0800b2ed 	.word	0x0800b2ed
 800b288:	0800b313 	.word	0x0800b313
 800b28c:	0800b345 	.word	0x0800b345
 800b290:	0800b36b 	.word	0x0800b36b
 800b294:	0800b391 	.word	0x0800b391
 800b298:	0800b3b7 	.word	0x0800b3b7
 800b29c:	2bff      	cmp	r3, #255	; 0xff
 800b29e:	e09d      	b.n	800b3dc <Process_AnalogSignals_ReadChannel+0x48c>
    {
    	case PROCESS_ANALOGSIGNALS_SELECT_NULL: break;

        case PROCESS_ANALOGSIGNALS_SELECT_PIN0: A0_MUX_SET(); break;
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b2a6:	4826      	ldr	r0, [pc, #152]	; (800b340 <Process_AnalogSignals_ReadChannel+0x3f0>)
 800b2a8:	f7f8 ff9c 	bl	80041e4 <HAL_GPIO_WritePin>
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b2b2:	4823      	ldr	r0, [pc, #140]	; (800b340 <Process_AnalogSignals_ReadChannel+0x3f0>)
 800b2b4:	f7f8 ff96 	bl	80041e4 <HAL_GPIO_WritePin>
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b2be:	4820      	ldr	r0, [pc, #128]	; (800b340 <Process_AnalogSignals_ReadChannel+0x3f0>)
 800b2c0:	f7f8 ff90 	bl	80041e4 <HAL_GPIO_WritePin>
 800b2c4:	e08a      	b.n	800b3dc <Process_AnalogSignals_ReadChannel+0x48c>

        case PROCESS_ANALOGSIGNALS_SELECT_PIN1: A1_MUX_SET(); break;
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b2cc:	481c      	ldr	r0, [pc, #112]	; (800b340 <Process_AnalogSignals_ReadChannel+0x3f0>)
 800b2ce:	f7f8 ff89 	bl	80041e4 <HAL_GPIO_WritePin>
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b2d8:	4819      	ldr	r0, [pc, #100]	; (800b340 <Process_AnalogSignals_ReadChannel+0x3f0>)
 800b2da:	f7f8 ff83 	bl	80041e4 <HAL_GPIO_WritePin>
 800b2de:	2201      	movs	r2, #1
 800b2e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b2e4:	4816      	ldr	r0, [pc, #88]	; (800b340 <Process_AnalogSignals_ReadChannel+0x3f0>)
 800b2e6:	f7f8 ff7d 	bl	80041e4 <HAL_GPIO_WritePin>
 800b2ea:	e077      	b.n	800b3dc <Process_AnalogSignals_ReadChannel+0x48c>

        case PROCESS_ANALOGSIGNALS_SELECT_PIN2: A2_MUX_SET(); break;
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b2f2:	4813      	ldr	r0, [pc, #76]	; (800b340 <Process_AnalogSignals_ReadChannel+0x3f0>)
 800b2f4:	f7f8 ff76 	bl	80041e4 <HAL_GPIO_WritePin>
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b2fe:	4810      	ldr	r0, [pc, #64]	; (800b340 <Process_AnalogSignals_ReadChannel+0x3f0>)
 800b300:	f7f8 ff70 	bl	80041e4 <HAL_GPIO_WritePin>
 800b304:	2200      	movs	r2, #0
 800b306:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b30a:	480d      	ldr	r0, [pc, #52]	; (800b340 <Process_AnalogSignals_ReadChannel+0x3f0>)
 800b30c:	f7f8 ff6a 	bl	80041e4 <HAL_GPIO_WritePin>
 800b310:	e064      	b.n	800b3dc <Process_AnalogSignals_ReadChannel+0x48c>

        case PROCESS_ANALOGSIGNALS_SELECT_PIN3: A3_MUX_SET(); break;
 800b312:	2200      	movs	r2, #0
 800b314:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b318:	4809      	ldr	r0, [pc, #36]	; (800b340 <Process_AnalogSignals_ReadChannel+0x3f0>)
 800b31a:	f7f8 ff63 	bl	80041e4 <HAL_GPIO_WritePin>
 800b31e:	2201      	movs	r2, #1
 800b320:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b324:	4806      	ldr	r0, [pc, #24]	; (800b340 <Process_AnalogSignals_ReadChannel+0x3f0>)
 800b326:	f7f8 ff5d 	bl	80041e4 <HAL_GPIO_WritePin>
 800b32a:	2201      	movs	r2, #1
 800b32c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b330:	4803      	ldr	r0, [pc, #12]	; (800b340 <Process_AnalogSignals_ReadChannel+0x3f0>)
 800b332:	f7f8 ff57 	bl	80041e4 <HAL_GPIO_WritePin>
 800b336:	e051      	b.n	800b3dc <Process_AnalogSignals_ReadChannel+0x48c>
 800b338:	200010a4 	.word	0x200010a4
 800b33c:	2000105c 	.word	0x2000105c
 800b340:	40020c00 	.word	0x40020c00

        case PROCESS_ANALOGSIGNALS_SELECT_PIN4: A4_MUX_SET(); break;
 800b344:	2201      	movs	r2, #1
 800b346:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b34a:	4833      	ldr	r0, [pc, #204]	; (800b418 <Process_AnalogSignals_ReadChannel+0x4c8>)
 800b34c:	f7f8 ff4a 	bl	80041e4 <HAL_GPIO_WritePin>
 800b350:	2200      	movs	r2, #0
 800b352:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b356:	4830      	ldr	r0, [pc, #192]	; (800b418 <Process_AnalogSignals_ReadChannel+0x4c8>)
 800b358:	f7f8 ff44 	bl	80041e4 <HAL_GPIO_WritePin>
 800b35c:	2200      	movs	r2, #0
 800b35e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b362:	482d      	ldr	r0, [pc, #180]	; (800b418 <Process_AnalogSignals_ReadChannel+0x4c8>)
 800b364:	f7f8 ff3e 	bl	80041e4 <HAL_GPIO_WritePin>
 800b368:	e038      	b.n	800b3dc <Process_AnalogSignals_ReadChannel+0x48c>

        case PROCESS_ANALOGSIGNALS_SELECT_PIN5: A5_MUX_SET(); break;
 800b36a:	2201      	movs	r2, #1
 800b36c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b370:	4829      	ldr	r0, [pc, #164]	; (800b418 <Process_AnalogSignals_ReadChannel+0x4c8>)
 800b372:	f7f8 ff37 	bl	80041e4 <HAL_GPIO_WritePin>
 800b376:	2200      	movs	r2, #0
 800b378:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b37c:	4826      	ldr	r0, [pc, #152]	; (800b418 <Process_AnalogSignals_ReadChannel+0x4c8>)
 800b37e:	f7f8 ff31 	bl	80041e4 <HAL_GPIO_WritePin>
 800b382:	2201      	movs	r2, #1
 800b384:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b388:	4823      	ldr	r0, [pc, #140]	; (800b418 <Process_AnalogSignals_ReadChannel+0x4c8>)
 800b38a:	f7f8 ff2b 	bl	80041e4 <HAL_GPIO_WritePin>
 800b38e:	e025      	b.n	800b3dc <Process_AnalogSignals_ReadChannel+0x48c>

        case PROCESS_ANALOGSIGNALS_SELECT_PIN6: A6_MUX_SET(); break;
 800b390:	2201      	movs	r2, #1
 800b392:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b396:	4820      	ldr	r0, [pc, #128]	; (800b418 <Process_AnalogSignals_ReadChannel+0x4c8>)
 800b398:	f7f8 ff24 	bl	80041e4 <HAL_GPIO_WritePin>
 800b39c:	2201      	movs	r2, #1
 800b39e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b3a2:	481d      	ldr	r0, [pc, #116]	; (800b418 <Process_AnalogSignals_ReadChannel+0x4c8>)
 800b3a4:	f7f8 ff1e 	bl	80041e4 <HAL_GPIO_WritePin>
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b3ae:	481a      	ldr	r0, [pc, #104]	; (800b418 <Process_AnalogSignals_ReadChannel+0x4c8>)
 800b3b0:	f7f8 ff18 	bl	80041e4 <HAL_GPIO_WritePin>
 800b3b4:	e012      	b.n	800b3dc <Process_AnalogSignals_ReadChannel+0x48c>

        case PROCESS_ANALOGSIGNALS_SELECT_PIN7: A7_MUX_SET(); break;
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b3bc:	4816      	ldr	r0, [pc, #88]	; (800b418 <Process_AnalogSignals_ReadChannel+0x4c8>)
 800b3be:	f7f8 ff11 	bl	80041e4 <HAL_GPIO_WritePin>
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b3c8:	4813      	ldr	r0, [pc, #76]	; (800b418 <Process_AnalogSignals_ReadChannel+0x4c8>)
 800b3ca:	f7f8 ff0b 	bl	80041e4 <HAL_GPIO_WritePin>
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b3d4:	4810      	ldr	r0, [pc, #64]	; (800b418 <Process_AnalogSignals_ReadChannel+0x4c8>)
 800b3d6:	f7f8 ff05 	bl	80041e4 <HAL_GPIO_WritePin>
 800b3da:	bf00      	nop
    }

    /* 74HC4051 Enable-Pin Always ground */

    /* 74HC4051 Select-Pin Maximum response time 90ns overcondutions            */
    HAL_Delay(1);   /* 1ms blocking delay hope to solve this select sequence    */
 800b3dc:	2001      	movs	r0, #1
 800b3de:	f7f7 fa7f 	bl	80028e0 <HAL_Delay>

    HAL_ADC_Start(&tempAdcHandle);
 800b3e2:	f107 030c 	add.w	r3, r7, #12
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7f7 fae2 	bl	80029b0 <HAL_ADC_Start>

    HAL_ADC_PollForConversion(&tempAdcHandle, 100);
 800b3ec:	f107 030c 	add.w	r3, r7, #12
 800b3f0:	2164      	movs	r1, #100	; 0x64
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7f7 fbe1 	bl	8002bba <HAL_ADC_PollForConversion>

    tempAdcValue = HAL_ADC_GetValue(&tempAdcHandle);
 800b3f8:	f107 030c 	add.w	r3, r7, #12
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f7f7 fc67 	bl	8002cd0 <HAL_ADC_GetValue>
 800b402:	6578      	str	r0, [r7, #84]	; 0x54

    HAL_ADC_Stop(&tempAdcHandle);
 800b404:	f107 030c 	add.w	r3, r7, #12
 800b408:	4618      	mov	r0, r3
 800b40a:	f7f7 fba3 	bl	8002b54 <HAL_ADC_Stop>

    return tempAdcValue;
 800b40e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800b410:	4618      	mov	r0, r3
 800b412:	3758      	adds	r7, #88	; 0x58
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	40020c00 	.word	0x40020c00

0800b41c <ModuleAUDIO_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleAUDIO_HWInit(void)
{
 800b41c:	b480      	push	{r7}
 800b41e:	af00      	add	r7, sp, #0

}
 800b420:	bf00      	nop
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr

0800b42a <ModuleAUDIO_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleAUDIO_SWInit(void)
{
 800b42a:	b480      	push	{r7}
 800b42c:	af00      	add	r7, sp, #0
	
}
 800b42e:	bf00      	nop
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <ModuleAUDIO_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleAUDIO_StartUP(void)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	af00      	add	r7, sp, #0
	ModuleAUDIO_HWInit();
 800b43c:	f7ff ffee 	bl	800b41c <ModuleAUDIO_HWInit>
	ModuleAUDIO_SWInit();
 800b440:	f7ff fff3 	bl	800b42a <ModuleAUDIO_SWInit>
}
 800b444:	bf00      	nop
 800b446:	bd80      	pop	{r7, pc}

0800b448 <ModuleAUDIO_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleAUDIO_MAIN_Routine(void)
{
 800b448:	b480      	push	{r7}
 800b44a:	af00      	add	r7, sp, #0

}
 800b44c:	bf00      	nop
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr

0800b456 <ModuleAUDIO_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleAUDIO_MAIN_Process(void)
{
 800b456:	b480      	push	{r7}
 800b458:	af00      	add	r7, sp, #0

}
 800b45a:	bf00      	nop
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <ModuleAUDIO_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleAUDIO_MAIN(void)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	af00      	add	r7, sp, #0

	switch(ModuleAUDIO_MAIN_State)
 800b468:	4b11      	ldr	r3, [pc, #68]	; (800b4b0 <ModuleAUDIO_MAIN+0x4c>)
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	2b03      	cmp	r3, #3
 800b46e:	d819      	bhi.n	800b4a4 <ModuleAUDIO_MAIN+0x40>
 800b470:	a201      	add	r2, pc, #4	; (adr r2, 800b478 <ModuleAUDIO_MAIN+0x14>)
 800b472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b476:	bf00      	nop
 800b478:	0800b489 	.word	0x0800b489
 800b47c:	0800b491 	.word	0x0800b491
 800b480:	0800b497 	.word	0x0800b497
 800b484:	0800b49d 	.word	0x0800b49d
	{
	    case ModuleAUDIO_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleAUDIO_MAIN_State = ModuleAUDIO_MAIN_State_ROUTINE;
 800b488:	4b09      	ldr	r3, [pc, #36]	; (800b4b0 <ModuleAUDIO_MAIN+0x4c>)
 800b48a:	2201      	movs	r2, #1
 800b48c:	701a      	strb	r2, [r3, #0]
	    break;
 800b48e:	e00d      	b.n	800b4ac <ModuleAUDIO_MAIN+0x48>

	    case ModuleAUDIO_MAIN_State_ROUTINE:

	    	ModuleAUDIO_MAIN_Routine();
 800b490:	f7ff ffda 	bl	800b448 <ModuleAUDIO_MAIN_Routine>
	    break;
 800b494:	e00a      	b.n	800b4ac <ModuleAUDIO_MAIN+0x48>

	    case ModuleAUDIO_MAIN_State_PROCESS:

	    	ModuleAUDIO_MAIN_Process();
 800b496:	f7ff ffde 	bl	800b456 <ModuleAUDIO_MAIN_Process>

	    break;
 800b49a:	e007      	b.n	800b4ac <ModuleAUDIO_MAIN+0x48>

	    case ModuleAUDIO_MAIN_State_SUSPEND:
	    	ModuleAUDIO_MAIN_State = ModuleAUDIO_MAIN_State_IDLE;
 800b49c:	4b04      	ldr	r3, [pc, #16]	; (800b4b0 <ModuleAUDIO_MAIN+0x4c>)
 800b49e:	2200      	movs	r2, #0
 800b4a0:	701a      	strb	r2, [r3, #0]
	    break;
 800b4a2:	e003      	b.n	800b4ac <ModuleAUDIO_MAIN+0x48>

	    default:
	    	ModuleAUDIO_MAIN_State = ModuleAUDIO_MAIN_State_SUSPEND;
 800b4a4:	4b02      	ldr	r3, [pc, #8]	; (800b4b0 <ModuleAUDIO_MAIN+0x4c>)
 800b4a6:	2203      	movs	r2, #3
 800b4a8:	701a      	strb	r2, [r3, #0]
	    break;
 800b4aa:	bf00      	nop

	}
}
 800b4ac:	bf00      	nop
 800b4ae:	bd80      	pop	{r7, pc}
 800b4b0:	2000c16d 	.word	0x2000c16d

0800b4b4 <ModuleCAN_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleCAN_HWInit(void)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af02      	add	r7, sp, #8
	/* Construction function of protocol */

	EEM_CTOR(&protocol /* Main protocol Class Construct */
 800b4ba:	4b13      	ldr	r3, [pc, #76]	; (800b508 <ModuleCAN_HWInit+0x54>)
 800b4bc:	4a13      	ldr	r2, [pc, #76]	; (800b50c <ModuleCAN_HWInit+0x58>)
 800b4be:	9200      	str	r2, [sp, #0]
 800b4c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b4c2:	4813      	ldr	r0, [pc, #76]	; (800b510 <ModuleCAN_HWInit+0x5c>)
 800b4c4:	f7f6 fd45 	bl	8001f52 <EEM_CTOR>
/* Only works for spi2can */
#endif
	);

	/* Init protocol settings in order to 250KBps Bit Rate */
	protocol.ops.EEM_INIT(&protocol.obj);
 800b4c8:	4b11      	ldr	r3, [pc, #68]	; (800b510 <ModuleCAN_HWInit+0x5c>)
 800b4ca:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800b4ce:	4810      	ldr	r0, [pc, #64]	; (800b510 <ModuleCAN_HWInit+0x5c>)
 800b4d0:	4798      	blx	r3

	/* Send Test Data */
	const char testData[ EEM_MAX_SIZE ] = { 0xEE , 0x00 , 0xEE , 0x00 , 0xEE , 0x00 , 0xEE , 0x00 };
 800b4d2:	4a10      	ldr	r2, [pc, #64]	; (800b514 <ModuleCAN_HWInit+0x60>)
 800b4d4:	463b      	mov	r3, r7
 800b4d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b4da:	e883 0003 	stmia.w	r3, {r0, r1}
	memcpy(&protocol.obj.canPacket.DATA[0] , &testData[0] , 8);
 800b4de:	463b      	mov	r3, r7
 800b4e0:	2208      	movs	r2, #8
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	480c      	ldr	r0, [pc, #48]	; (800b518 <ModuleCAN_HWInit+0x64>)
 800b4e6:	f000 fbf3 	bl	800bcd0 <memcpy>
	protocol.obj.canPacket.EXTENDED_ID.identifier = 0x1CFFFFFF;
 800b4ea:	4b09      	ldr	r3, [pc, #36]	; (800b510 <ModuleCAN_HWInit+0x5c>)
 800b4ec:	f06f 4263 	mvn.w	r2, #3808428032	; 0xe3000000
 800b4f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 800b4f4:	4b06      	ldr	r3, [pc, #24]	; (800b510 <ModuleCAN_HWInit+0x5c>)
 800b4f6:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800b4fa:	2100      	movs	r1, #0
 800b4fc:	4807      	ldr	r0, [pc, #28]	; (800b51c <ModuleCAN_HWInit+0x68>)
 800b4fe:	4798      	blx	r3
}
 800b500:	bf00      	nop
 800b502:	3708      	adds	r7, #8
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	0800c974 	.word	0x0800c974
 800b50c:	200010ec 	.word	0x200010ec
 800b510:	2000bfa0 	.word	0x2000bfa0
 800b514:	0800c930 	.word	0x0800c930
 800b518:	2000c040 	.word	0x2000c040
 800b51c:	2000c03c 	.word	0x2000c03c

0800b520 <ModuleCAN_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCAN_SWInit(void)
{
 800b520:	b480      	push	{r7}
 800b522:	af00      	add	r7, sp, #0
	__GL.can.msgTickCounter_u32 = 0 ;
 800b524:	4b08      	ldr	r3, [pc, #32]	; (800b548 <ModuleCAN_SWInit+0x28>)
 800b526:	2200      	movs	r2, #0
 800b528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800b52c:	2200      	movs	r2, #0
 800b52e:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
 800b532:	2200      	movs	r2, #0
 800b534:	f883 2302 	strb.w	r2, [r3, #770]	; 0x302
 800b538:	2200      	movs	r2, #0
 800b53a:	f883 2303 	strb.w	r2, [r3, #771]	; 0x303

}
 800b53e:	bf00      	nop
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr
 800b548:	20000084 	.word	0x20000084

0800b54c <ModuleCAN_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCAN_StartUP(void)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	af00      	add	r7, sp, #0
	ModuleCAN_HWInit();
 800b550:	f7ff ffb0 	bl	800b4b4 <ModuleCAN_HWInit>
	ModuleCAN_SWInit();
 800b554:	f7ff ffe4 	bl	800b520 <ModuleCAN_SWInit>

}
 800b558:	bf00      	nop
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <ModuleCAN_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleCAN_MAIN_Routine(void)
{
 800b55c:	b480      	push	{r7}
 800b55e:	af00      	add	r7, sp, #0
	if( TRUE == __GL.can.msgSelect.Flag.ID01 )
 800b560:	4b3f      	ldr	r3, [pc, #252]	; (800b660 <ModuleCAN_MAIN_Routine+0x104>)
 800b562:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800b566:	f003 0301 	and.w	r3, r3, #1
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d006      	beq.n	800b57e <ModuleCAN_MAIN_Routine+0x22>
	{
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_PROCESS;
 800b570:	4b3c      	ldr	r3, [pc, #240]	; (800b664 <ModuleCAN_MAIN_Routine+0x108>)
 800b572:	2202      	movs	r2, #2
 800b574:	701a      	strb	r2, [r3, #0]
		ModuleCAN_PROCESS_State	= ModuleCAN_PROCESS_State_MSG01;
 800b576:	4b3c      	ldr	r3, [pc, #240]	; (800b668 <ModuleCAN_MAIN_Routine+0x10c>)
 800b578:	2201      	movs	r2, #1
 800b57a:	701a      	strb	r2, [r3, #0]
	else
	{
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_SUSPEND;
	}

}
 800b57c:	e06b      	b.n	800b656 <ModuleCAN_MAIN_Routine+0xfa>
	else if( TRUE == __GL.can.msgSelect.Flag.ID02 )
 800b57e:	4b38      	ldr	r3, [pc, #224]	; (800b660 <ModuleCAN_MAIN_Routine+0x104>)
 800b580:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800b584:	f003 0302 	and.w	r3, r3, #2
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d006      	beq.n	800b59c <ModuleCAN_MAIN_Routine+0x40>
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_PROCESS;
 800b58e:	4b35      	ldr	r3, [pc, #212]	; (800b664 <ModuleCAN_MAIN_Routine+0x108>)
 800b590:	2202      	movs	r2, #2
 800b592:	701a      	strb	r2, [r3, #0]
		ModuleCAN_PROCESS_State	= ModuleCAN_PROCESS_State_MSG02;
 800b594:	4b34      	ldr	r3, [pc, #208]	; (800b668 <ModuleCAN_MAIN_Routine+0x10c>)
 800b596:	2202      	movs	r2, #2
 800b598:	701a      	strb	r2, [r3, #0]
}
 800b59a:	e05c      	b.n	800b656 <ModuleCAN_MAIN_Routine+0xfa>
	else if( TRUE == __GL.can.msgSelect.Flag.ID03 )
 800b59c:	4b30      	ldr	r3, [pc, #192]	; (800b660 <ModuleCAN_MAIN_Routine+0x104>)
 800b59e:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800b5a2:	f003 0304 	and.w	r3, r3, #4
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d006      	beq.n	800b5ba <ModuleCAN_MAIN_Routine+0x5e>
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_PROCESS;
 800b5ac:	4b2d      	ldr	r3, [pc, #180]	; (800b664 <ModuleCAN_MAIN_Routine+0x108>)
 800b5ae:	2202      	movs	r2, #2
 800b5b0:	701a      	strb	r2, [r3, #0]
		ModuleCAN_PROCESS_State	= ModuleCAN_PROCESS_State_MSG03;
 800b5b2:	4b2d      	ldr	r3, [pc, #180]	; (800b668 <ModuleCAN_MAIN_Routine+0x10c>)
 800b5b4:	2203      	movs	r2, #3
 800b5b6:	701a      	strb	r2, [r3, #0]
}
 800b5b8:	e04d      	b.n	800b656 <ModuleCAN_MAIN_Routine+0xfa>
	else if( TRUE == __GL.can.msgSelect.Flag.ID04 )
 800b5ba:	4b29      	ldr	r3, [pc, #164]	; (800b660 <ModuleCAN_MAIN_Routine+0x104>)
 800b5bc:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800b5c0:	f003 0308 	and.w	r3, r3, #8
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d006      	beq.n	800b5d8 <ModuleCAN_MAIN_Routine+0x7c>
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_PROCESS;
 800b5ca:	4b26      	ldr	r3, [pc, #152]	; (800b664 <ModuleCAN_MAIN_Routine+0x108>)
 800b5cc:	2202      	movs	r2, #2
 800b5ce:	701a      	strb	r2, [r3, #0]
		ModuleCAN_PROCESS_State	= ModuleCAN_PROCESS_State_MSG04;
 800b5d0:	4b25      	ldr	r3, [pc, #148]	; (800b668 <ModuleCAN_MAIN_Routine+0x10c>)
 800b5d2:	2204      	movs	r2, #4
 800b5d4:	701a      	strb	r2, [r3, #0]
}
 800b5d6:	e03e      	b.n	800b656 <ModuleCAN_MAIN_Routine+0xfa>
	else if( TRUE == __GL.can.msgSelect.Flag.ID05 )
 800b5d8:	4b21      	ldr	r3, [pc, #132]	; (800b660 <ModuleCAN_MAIN_Routine+0x104>)
 800b5da:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800b5de:	f003 0310 	and.w	r3, r3, #16
 800b5e2:	b2db      	uxtb	r3, r3
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d006      	beq.n	800b5f6 <ModuleCAN_MAIN_Routine+0x9a>
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_PROCESS;
 800b5e8:	4b1e      	ldr	r3, [pc, #120]	; (800b664 <ModuleCAN_MAIN_Routine+0x108>)
 800b5ea:	2202      	movs	r2, #2
 800b5ec:	701a      	strb	r2, [r3, #0]
		ModuleCAN_PROCESS_State	= ModuleCAN_PROCESS_State_MSG05;
 800b5ee:	4b1e      	ldr	r3, [pc, #120]	; (800b668 <ModuleCAN_MAIN_Routine+0x10c>)
 800b5f0:	2205      	movs	r2, #5
 800b5f2:	701a      	strb	r2, [r3, #0]
}
 800b5f4:	e02f      	b.n	800b656 <ModuleCAN_MAIN_Routine+0xfa>
	else if( TRUE == __GL.can.msgSelect.Flag.ID06 )
 800b5f6:	4b1a      	ldr	r3, [pc, #104]	; (800b660 <ModuleCAN_MAIN_Routine+0x104>)
 800b5f8:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800b5fc:	f003 0320 	and.w	r3, r3, #32
 800b600:	b2db      	uxtb	r3, r3
 800b602:	2b00      	cmp	r3, #0
 800b604:	d006      	beq.n	800b614 <ModuleCAN_MAIN_Routine+0xb8>
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_PROCESS;
 800b606:	4b17      	ldr	r3, [pc, #92]	; (800b664 <ModuleCAN_MAIN_Routine+0x108>)
 800b608:	2202      	movs	r2, #2
 800b60a:	701a      	strb	r2, [r3, #0]
		ModuleCAN_PROCESS_State	= ModuleCAN_PROCESS_State_MSG06;
 800b60c:	4b16      	ldr	r3, [pc, #88]	; (800b668 <ModuleCAN_MAIN_Routine+0x10c>)
 800b60e:	2206      	movs	r2, #6
 800b610:	701a      	strb	r2, [r3, #0]
}
 800b612:	e020      	b.n	800b656 <ModuleCAN_MAIN_Routine+0xfa>
	else if( TRUE == __GL.can.msgSelect.Flag.ID07 )
 800b614:	4b12      	ldr	r3, [pc, #72]	; (800b660 <ModuleCAN_MAIN_Routine+0x104>)
 800b616:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800b61a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	2b00      	cmp	r3, #0
 800b622:	d006      	beq.n	800b632 <ModuleCAN_MAIN_Routine+0xd6>
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_PROCESS;
 800b624:	4b0f      	ldr	r3, [pc, #60]	; (800b664 <ModuleCAN_MAIN_Routine+0x108>)
 800b626:	2202      	movs	r2, #2
 800b628:	701a      	strb	r2, [r3, #0]
		ModuleCAN_PROCESS_State	= ModuleCAN_PROCESS_State_MSG07;
 800b62a:	4b0f      	ldr	r3, [pc, #60]	; (800b668 <ModuleCAN_MAIN_Routine+0x10c>)
 800b62c:	2207      	movs	r2, #7
 800b62e:	701a      	strb	r2, [r3, #0]
}
 800b630:	e011      	b.n	800b656 <ModuleCAN_MAIN_Routine+0xfa>
	else if( TRUE == __GL.can.msgSelect.Flag.ID08 )
 800b632:	4b0b      	ldr	r3, [pc, #44]	; (800b660 <ModuleCAN_MAIN_Routine+0x104>)
 800b634:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800b638:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d006      	beq.n	800b650 <ModuleCAN_MAIN_Routine+0xf4>
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_PROCESS;
 800b642:	4b08      	ldr	r3, [pc, #32]	; (800b664 <ModuleCAN_MAIN_Routine+0x108>)
 800b644:	2202      	movs	r2, #2
 800b646:	701a      	strb	r2, [r3, #0]
		ModuleCAN_PROCESS_State	= ModuleCAN_PROCESS_State_MSG08;
 800b648:	4b07      	ldr	r3, [pc, #28]	; (800b668 <ModuleCAN_MAIN_Routine+0x10c>)
 800b64a:	2208      	movs	r2, #8
 800b64c:	701a      	strb	r2, [r3, #0]
}
 800b64e:	e002      	b.n	800b656 <ModuleCAN_MAIN_Routine+0xfa>
		ModuleCAN_MAIN_State 	= ModuleCAN_MAIN_State_SUSPEND;
 800b650:	4b04      	ldr	r3, [pc, #16]	; (800b664 <ModuleCAN_MAIN_Routine+0x108>)
 800b652:	2203      	movs	r2, #3
 800b654:	701a      	strb	r2, [r3, #0]
}
 800b656:	bf00      	nop
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr
 800b660:	20000084 	.word	0x20000084
 800b664:	2000c16e 	.word	0x2000c16e
 800b668:	2000c16f 	.word	0x2000c16f

0800b66c <ModuleCAN_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCAN_MAIN_Process(void)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	af00      	add	r7, sp, #0
	switch( ModuleCAN_PROCESS_State )
 800b670:	4b7c      	ldr	r3, [pc, #496]	; (800b864 <ModuleCAN_MAIN_Process+0x1f8>)
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	2b09      	cmp	r3, #9
 800b676:	f200 80eb 	bhi.w	800b850 <ModuleCAN_MAIN_Process+0x1e4>
 800b67a:	a201      	add	r2, pc, #4	; (adr r2, 800b680 <ModuleCAN_MAIN_Process+0x14>)
 800b67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b680:	0800b85f 	.word	0x0800b85f
 800b684:	0800b6a9 	.word	0x0800b6a9
 800b688:	0800b6df 	.word	0x0800b6df
 800b68c:	0800b715 	.word	0x0800b715
 800b690:	0800b74d 	.word	0x0800b74d
 800b694:	0800b785 	.word	0x0800b785
 800b698:	0800b7bd 	.word	0x0800b7bd
 800b69c:	0800b7f5 	.word	0x0800b7f5
 800b6a0:	0800b82d 	.word	0x0800b82d
 800b6a4:	0800b843 	.word	0x0800b843

	case ModuleCAN_PROCESS_State_IDLE  : break;

	case ModuleCAN_PROCESS_State_MSG01  :

		memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message03.payload[0] , 8);
 800b6a8:	2208      	movs	r2, #8
 800b6aa:	496f      	ldr	r1, [pc, #444]	; (800b868 <ModuleCAN_MAIN_Process+0x1fc>)
 800b6ac:	486f      	ldr	r0, [pc, #444]	; (800b86c <ModuleCAN_MAIN_Process+0x200>)
 800b6ae:	f000 fb0f 	bl	800bcd0 <memcpy>
		protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message03_ID;
 800b6b2:	4b6f      	ldr	r3, [pc, #444]	; (800b870 <ModuleCAN_MAIN_Process+0x204>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4a6f      	ldr	r2, [pc, #444]	; (800b874 <ModuleCAN_MAIN_Process+0x208>)
 800b6b8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 800b6bc:	4b6d      	ldr	r3, [pc, #436]	; (800b874 <ModuleCAN_MAIN_Process+0x208>)
 800b6be:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800b6c2:	2100      	movs	r1, #0
 800b6c4:	486c      	ldr	r0, [pc, #432]	; (800b878 <ModuleCAN_MAIN_Process+0x20c>)
 800b6c6:	4798      	blx	r3

		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800b6c8:	4b66      	ldr	r3, [pc, #408]	; (800b864 <ModuleCAN_MAIN_Process+0x1f8>)
 800b6ca:	2209      	movs	r2, #9
 800b6cc:	701a      	strb	r2, [r3, #0]
		__GL.can.msgSelect.Flag.ID01 = FALSE;
 800b6ce:	4a6b      	ldr	r2, [pc, #428]	; (800b87c <ModuleCAN_MAIN_Process+0x210>)
 800b6d0:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 800b6d4:	f36f 0300 	bfc	r3, #0, #1
 800b6d8:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304

	break;
 800b6dc:	e0c0      	b.n	800b860 <ModuleCAN_MAIN_Process+0x1f4>

	case ModuleCAN_PROCESS_State_MSG02 :

		memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message04.payload[0] , 8);
 800b6de:	2208      	movs	r2, #8
 800b6e0:	4967      	ldr	r1, [pc, #412]	; (800b880 <ModuleCAN_MAIN_Process+0x214>)
 800b6e2:	4862      	ldr	r0, [pc, #392]	; (800b86c <ModuleCAN_MAIN_Process+0x200>)
 800b6e4:	f000 faf4 	bl	800bcd0 <memcpy>
		protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message04_ID;
 800b6e8:	4b61      	ldr	r3, [pc, #388]	; (800b870 <ModuleCAN_MAIN_Process+0x204>)
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	4a61      	ldr	r2, [pc, #388]	; (800b874 <ModuleCAN_MAIN_Process+0x208>)
 800b6ee:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 800b6f2:	4b60      	ldr	r3, [pc, #384]	; (800b874 <ModuleCAN_MAIN_Process+0x208>)
 800b6f4:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800b6f8:	2100      	movs	r1, #0
 800b6fa:	485f      	ldr	r0, [pc, #380]	; (800b878 <ModuleCAN_MAIN_Process+0x20c>)
 800b6fc:	4798      	blx	r3

		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800b6fe:	4b59      	ldr	r3, [pc, #356]	; (800b864 <ModuleCAN_MAIN_Process+0x1f8>)
 800b700:	2209      	movs	r2, #9
 800b702:	701a      	strb	r2, [r3, #0]
		__GL.can.msgSelect.Flag.ID02 = FALSE;
 800b704:	4a5d      	ldr	r2, [pc, #372]	; (800b87c <ModuleCAN_MAIN_Process+0x210>)
 800b706:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 800b70a:	f36f 0341 	bfc	r3, #1, #1
 800b70e:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304

	break;
 800b712:	e0a5      	b.n	800b860 <ModuleCAN_MAIN_Process+0x1f4>

	case ModuleCAN_PROCESS_State_MSG03 :

		memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message05.payload[0] , 8);
 800b714:	2208      	movs	r2, #8
 800b716:	495b      	ldr	r1, [pc, #364]	; (800b884 <ModuleCAN_MAIN_Process+0x218>)
 800b718:	4854      	ldr	r0, [pc, #336]	; (800b86c <ModuleCAN_MAIN_Process+0x200>)
 800b71a:	f000 fad9 	bl	800bcd0 <memcpy>
		protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message05_ID;
 800b71e:	4b54      	ldr	r3, [pc, #336]	; (800b870 <ModuleCAN_MAIN_Process+0x204>)
 800b720:	f8d3 3019 	ldr.w	r3, [r3, #25]
 800b724:	4a53      	ldr	r2, [pc, #332]	; (800b874 <ModuleCAN_MAIN_Process+0x208>)
 800b726:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 800b72a:	4b52      	ldr	r3, [pc, #328]	; (800b874 <ModuleCAN_MAIN_Process+0x208>)
 800b72c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800b730:	2100      	movs	r1, #0
 800b732:	4851      	ldr	r0, [pc, #324]	; (800b878 <ModuleCAN_MAIN_Process+0x20c>)
 800b734:	4798      	blx	r3

		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800b736:	4b4b      	ldr	r3, [pc, #300]	; (800b864 <ModuleCAN_MAIN_Process+0x1f8>)
 800b738:	2209      	movs	r2, #9
 800b73a:	701a      	strb	r2, [r3, #0]
		__GL.can.msgSelect.Flag.ID03 = FALSE;
 800b73c:	4a4f      	ldr	r2, [pc, #316]	; (800b87c <ModuleCAN_MAIN_Process+0x210>)
 800b73e:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 800b742:	f36f 0382 	bfc	r3, #2, #1
 800b746:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304

	break;
 800b74a:	e089      	b.n	800b860 <ModuleCAN_MAIN_Process+0x1f4>

	case ModuleCAN_PROCESS_State_MSG04 :

		memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message11.payload[0] , 8);
 800b74c:	2208      	movs	r2, #8
 800b74e:	494e      	ldr	r1, [pc, #312]	; (800b888 <ModuleCAN_MAIN_Process+0x21c>)
 800b750:	4846      	ldr	r0, [pc, #280]	; (800b86c <ModuleCAN_MAIN_Process+0x200>)
 800b752:	f000 fabd 	bl	800bcd0 <memcpy>
		protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message11_ID;
 800b756:	4b46      	ldr	r3, [pc, #280]	; (800b870 <ModuleCAN_MAIN_Process+0x204>)
 800b758:	f8d3 3025 	ldr.w	r3, [r3, #37]	; 0x25
 800b75c:	4a45      	ldr	r2, [pc, #276]	; (800b874 <ModuleCAN_MAIN_Process+0x208>)
 800b75e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 800b762:	4b44      	ldr	r3, [pc, #272]	; (800b874 <ModuleCAN_MAIN_Process+0x208>)
 800b764:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800b768:	2100      	movs	r1, #0
 800b76a:	4843      	ldr	r0, [pc, #268]	; (800b878 <ModuleCAN_MAIN_Process+0x20c>)
 800b76c:	4798      	blx	r3

		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800b76e:	4b3d      	ldr	r3, [pc, #244]	; (800b864 <ModuleCAN_MAIN_Process+0x1f8>)
 800b770:	2209      	movs	r2, #9
 800b772:	701a      	strb	r2, [r3, #0]
		__GL.can.msgSelect.Flag.ID04 = FALSE;
 800b774:	4a41      	ldr	r2, [pc, #260]	; (800b87c <ModuleCAN_MAIN_Process+0x210>)
 800b776:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 800b77a:	f36f 03c3 	bfc	r3, #3, #1
 800b77e:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304

	break;
 800b782:	e06d      	b.n	800b860 <ModuleCAN_MAIN_Process+0x1f4>

	case ModuleCAN_PROCESS_State_MSG05 :

		memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message12.payload[0] , 8);
 800b784:	2208      	movs	r2, #8
 800b786:	4941      	ldr	r1, [pc, #260]	; (800b88c <ModuleCAN_MAIN_Process+0x220>)
 800b788:	4838      	ldr	r0, [pc, #224]	; (800b86c <ModuleCAN_MAIN_Process+0x200>)
 800b78a:	f000 faa1 	bl	800bcd0 <memcpy>
		protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message12_ID;
 800b78e:	4b38      	ldr	r3, [pc, #224]	; (800b870 <ModuleCAN_MAIN_Process+0x204>)
 800b790:	f8d3 3031 	ldr.w	r3, [r3, #49]	; 0x31
 800b794:	4a37      	ldr	r2, [pc, #220]	; (800b874 <ModuleCAN_MAIN_Process+0x208>)
 800b796:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 800b79a:	4b36      	ldr	r3, [pc, #216]	; (800b874 <ModuleCAN_MAIN_Process+0x208>)
 800b79c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800b7a0:	2100      	movs	r1, #0
 800b7a2:	4835      	ldr	r0, [pc, #212]	; (800b878 <ModuleCAN_MAIN_Process+0x20c>)
 800b7a4:	4798      	blx	r3

		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800b7a6:	4b2f      	ldr	r3, [pc, #188]	; (800b864 <ModuleCAN_MAIN_Process+0x1f8>)
 800b7a8:	2209      	movs	r2, #9
 800b7aa:	701a      	strb	r2, [r3, #0]
		__GL.can.msgSelect.Flag.ID05 = FALSE;
 800b7ac:	4a33      	ldr	r2, [pc, #204]	; (800b87c <ModuleCAN_MAIN_Process+0x210>)
 800b7ae:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 800b7b2:	f36f 1304 	bfc	r3, #4, #1
 800b7b6:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304

	break;
 800b7ba:	e051      	b.n	800b860 <ModuleCAN_MAIN_Process+0x1f4>

	case ModuleCAN_PROCESS_State_MSG06 :

		memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message19.payload[0] , 8);
 800b7bc:	2208      	movs	r2, #8
 800b7be:	4934      	ldr	r1, [pc, #208]	; (800b890 <ModuleCAN_MAIN_Process+0x224>)
 800b7c0:	482a      	ldr	r0, [pc, #168]	; (800b86c <ModuleCAN_MAIN_Process+0x200>)
 800b7c2:	f000 fa85 	bl	800bcd0 <memcpy>
		protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message19_ID;
 800b7c6:	4b2a      	ldr	r3, [pc, #168]	; (800b870 <ModuleCAN_MAIN_Process+0x204>)
 800b7c8:	f8d3 303d 	ldr.w	r3, [r3, #61]	; 0x3d
 800b7cc:	4a29      	ldr	r2, [pc, #164]	; (800b874 <ModuleCAN_MAIN_Process+0x208>)
 800b7ce:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 800b7d2:	4b28      	ldr	r3, [pc, #160]	; (800b874 <ModuleCAN_MAIN_Process+0x208>)
 800b7d4:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800b7d8:	2100      	movs	r1, #0
 800b7da:	4827      	ldr	r0, [pc, #156]	; (800b878 <ModuleCAN_MAIN_Process+0x20c>)
 800b7dc:	4798      	blx	r3

		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800b7de:	4b21      	ldr	r3, [pc, #132]	; (800b864 <ModuleCAN_MAIN_Process+0x1f8>)
 800b7e0:	2209      	movs	r2, #9
 800b7e2:	701a      	strb	r2, [r3, #0]
		__GL.can.msgSelect.Flag.ID06 = FALSE;
 800b7e4:	4a25      	ldr	r2, [pc, #148]	; (800b87c <ModuleCAN_MAIN_Process+0x210>)
 800b7e6:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 800b7ea:	f36f 1345 	bfc	r3, #5, #1
 800b7ee:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304

	break;
 800b7f2:	e035      	b.n	800b860 <ModuleCAN_MAIN_Process+0x1f4>

	case ModuleCAN_PROCESS_State_MSG07 :

		memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message20.payload[0] , 8);
 800b7f4:	2208      	movs	r2, #8
 800b7f6:	4927      	ldr	r1, [pc, #156]	; (800b894 <ModuleCAN_MAIN_Process+0x228>)
 800b7f8:	481c      	ldr	r0, [pc, #112]	; (800b86c <ModuleCAN_MAIN_Process+0x200>)
 800b7fa:	f000 fa69 	bl	800bcd0 <memcpy>
		protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message20_ID;
 800b7fe:	4b1c      	ldr	r3, [pc, #112]	; (800b870 <ModuleCAN_MAIN_Process+0x204>)
 800b800:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 800b804:	4a1b      	ldr	r2, [pc, #108]	; (800b874 <ModuleCAN_MAIN_Process+0x208>)
 800b806:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 800b80a:	4b1a      	ldr	r3, [pc, #104]	; (800b874 <ModuleCAN_MAIN_Process+0x208>)
 800b80c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800b810:	2100      	movs	r1, #0
 800b812:	4819      	ldr	r0, [pc, #100]	; (800b878 <ModuleCAN_MAIN_Process+0x20c>)
 800b814:	4798      	blx	r3

		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800b816:	4b13      	ldr	r3, [pc, #76]	; (800b864 <ModuleCAN_MAIN_Process+0x1f8>)
 800b818:	2209      	movs	r2, #9
 800b81a:	701a      	strb	r2, [r3, #0]
		__GL.can.msgSelect.Flag.ID07 = FALSE;
 800b81c:	4a17      	ldr	r2, [pc, #92]	; (800b87c <ModuleCAN_MAIN_Process+0x210>)
 800b81e:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 800b822:	f36f 1386 	bfc	r3, #6, #1
 800b826:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304

	break;
 800b82a:	e019      	b.n	800b860 <ModuleCAN_MAIN_Process+0x1f4>

	case ModuleCAN_PROCESS_State_MSG08 :

		/* NULL */
		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800b82c:	4b0d      	ldr	r3, [pc, #52]	; (800b864 <ModuleCAN_MAIN_Process+0x1f8>)
 800b82e:	2209      	movs	r2, #9
 800b830:	701a      	strb	r2, [r3, #0]
		__GL.can.msgSelect.Flag.ID08 = FALSE;
 800b832:	4a12      	ldr	r2, [pc, #72]	; (800b87c <ModuleCAN_MAIN_Process+0x210>)
 800b834:	f892 3304 	ldrb.w	r3, [r2, #772]	; 0x304
 800b838:	f36f 13c7 	bfc	r3, #7, #1
 800b83c:	f882 3304 	strb.w	r3, [r2, #772]	; 0x304

	break;
 800b840:	e00e      	b.n	800b860 <ModuleCAN_MAIN_Process+0x1f4>

	case ModuleCAN_PROCESS_State_SUSPEND:

		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_IDLE;
 800b842:	4b08      	ldr	r3, [pc, #32]	; (800b864 <ModuleCAN_MAIN_Process+0x1f8>)
 800b844:	2200      	movs	r2, #0
 800b846:	701a      	strb	r2, [r3, #0]
		ModuleCAN_MAIN_State	= ModuleCAN_MAIN_State_SUSPEND;
 800b848:	4b13      	ldr	r3, [pc, #76]	; (800b898 <ModuleCAN_MAIN_Process+0x22c>)
 800b84a:	2203      	movs	r2, #3
 800b84c:	701a      	strb	r2, [r3, #0]
	break;
 800b84e:	e007      	b.n	800b860 <ModuleCAN_MAIN_Process+0x1f4>


	default:
		ModuleCAN_PROCESS_State = ModuleCAN_PROCESS_State_SUSPEND;
 800b850:	4b04      	ldr	r3, [pc, #16]	; (800b864 <ModuleCAN_MAIN_Process+0x1f8>)
 800b852:	2209      	movs	r2, #9
 800b854:	701a      	strb	r2, [r3, #0]
		ModuleCAN_MAIN_State	= ModuleCAN_MAIN_State_SUSPEND;
 800b856:	4b10      	ldr	r3, [pc, #64]	; (800b898 <ModuleCAN_MAIN_Process+0x22c>)
 800b858:	2203      	movs	r2, #3
 800b85a:	701a      	strb	r2, [r3, #0]
	break;
 800b85c:	e000      	b.n	800b860 <ModuleCAN_MAIN_Process+0x1f4>
	case ModuleCAN_PROCESS_State_IDLE  : break;
 800b85e:	bf00      	nop

	}

}
 800b860:	bf00      	nop
 800b862:	bd80      	pop	{r7, pc}
 800b864:	2000c16f 	.word	0x2000c16f
 800b868:	200013f0 	.word	0x200013f0
 800b86c:	2000c040 	.word	0x2000c040
 800b870:	200013ec 	.word	0x200013ec
 800b874:	2000bfa0 	.word	0x2000bfa0
 800b878:	2000c03c 	.word	0x2000c03c
 800b87c:	20000084 	.word	0x20000084
 800b880:	200013fc 	.word	0x200013fc
 800b884:	20001409 	.word	0x20001409
 800b888:	20001415 	.word	0x20001415
 800b88c:	20001421 	.word	0x20001421
 800b890:	2000142d 	.word	0x2000142d
 800b894:	20001439 	.word	0x20001439
 800b898:	2000c16e 	.word	0x2000c16e

0800b89c <ModuleCAN_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleCAN_MAIN(void)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	af00      	add	r7, sp, #0
  while(1)
  {
	if( ModuleCAN_MAIN_State == ModuleCAN_MAIN_State_SUSPEND )
 800b8a0:	4b11      	ldr	r3, [pc, #68]	; (800b8e8 <ModuleCAN_MAIN+0x4c>)
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	2b03      	cmp	r3, #3
 800b8a6:	d103      	bne.n	800b8b0 <ModuleCAN_MAIN+0x14>
	{
		ModuleCAN_MAIN_State = ModuleCAN_MAIN_State_IDLE;
 800b8a8:	4b0f      	ldr	r3, [pc, #60]	; (800b8e8 <ModuleCAN_MAIN+0x4c>)
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	701a      	strb	r2, [r3, #0]
		break;
 800b8ae:	e019      	b.n	800b8e4 <ModuleCAN_MAIN+0x48>
	}

	switch(ModuleCAN_MAIN_State)
 800b8b0:	4b0d      	ldr	r3, [pc, #52]	; (800b8e8 <ModuleCAN_MAIN+0x4c>)
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	2b02      	cmp	r3, #2
 800b8b6:	d00d      	beq.n	800b8d4 <ModuleCAN_MAIN+0x38>
 800b8b8:	2b02      	cmp	r3, #2
 800b8ba:	dc0e      	bgt.n	800b8da <ModuleCAN_MAIN+0x3e>
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d002      	beq.n	800b8c6 <ModuleCAN_MAIN+0x2a>
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d004      	beq.n	800b8ce <ModuleCAN_MAIN+0x32>
 800b8c4:	e009      	b.n	800b8da <ModuleCAN_MAIN+0x3e>
#if defined(SPI2CAN_Protocol)
	    	/* Check Can FIFO's each 10 ms semph relases */
	    	EEM_PERIODIC(&protocol.obj.canPacket);
#endif

	    	ModuleCAN_MAIN_State = ModuleCAN_MAIN_State_ROUTINE;
 800b8c6:	4b08      	ldr	r3, [pc, #32]	; (800b8e8 <ModuleCAN_MAIN+0x4c>)
 800b8c8:	2201      	movs	r2, #1
 800b8ca:	701a      	strb	r2, [r3, #0]
	    break;
 800b8cc:	e009      	b.n	800b8e2 <ModuleCAN_MAIN+0x46>

	    case ModuleCAN_MAIN_State_ROUTINE:

	    	ModuleCAN_MAIN_Routine();
 800b8ce:	f7ff fe45 	bl	800b55c <ModuleCAN_MAIN_Routine>
	    break;
 800b8d2:	e006      	b.n	800b8e2 <ModuleCAN_MAIN+0x46>

	    case ModuleCAN_MAIN_State_PROCESS:

	    	ModuleCAN_MAIN_Process();
 800b8d4:	f7ff feca 	bl	800b66c <ModuleCAN_MAIN_Process>

	    break;
 800b8d8:	e003      	b.n	800b8e2 <ModuleCAN_MAIN+0x46>

	    default:
	    	ModuleCAN_MAIN_State = ModuleCAN_MAIN_State_SUSPEND;
 800b8da:	4b03      	ldr	r3, [pc, #12]	; (800b8e8 <ModuleCAN_MAIN+0x4c>)
 800b8dc:	2203      	movs	r2, #3
 800b8de:	701a      	strb	r2, [r3, #0]
	    break;
 800b8e0:	bf00      	nop
	if( ModuleCAN_MAIN_State == ModuleCAN_MAIN_State_SUSPEND )
 800b8e2:	e7dd      	b.n	800b8a0 <ModuleCAN_MAIN+0x4>
	}
  }
}
 800b8e4:	bf00      	nop
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	2000c16e 	.word	0x2000c16e

0800b8ec <ModuleCONTROL_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleCONTROL_HWInit(void)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	af00      	add	r7, sp, #0

}
 800b8f0:	bf00      	nop
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr

0800b8fa <ModuleCONTROL_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCONTROL_SWInit(void)
{
 800b8fa:	b480      	push	{r7}
 800b8fc:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait yazilimsal init fonksiyonları
}
 800b8fe:	bf00      	nop
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr

0800b908 <ModuleCONTROL_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCONTROL_StartUP(void)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	af00      	add	r7, sp, #0
	ModuleCONTROL_HWInit();
 800b90c:	f7ff ffee 	bl	800b8ec <ModuleCONTROL_HWInit>
	ModuleCONTROL_SWInit();
 800b910:	f7ff fff3 	bl	800b8fa <ModuleCONTROL_SWInit>
}
 800b914:	bf00      	nop
 800b916:	bd80      	pop	{r7, pc}

0800b918 <ModuleCONTROL_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleCONTROL_MAIN_Routine(void)
{
 800b918:	b480      	push	{r7}
 800b91a:	af00      	add	r7, sp, #0

}
 800b91c:	bf00      	nop
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr

0800b926 <ModuleCONTROL_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCONTROL_MAIN_Process(void)
{
 800b926:	b480      	push	{r7}
 800b928:	af00      	add	r7, sp, #0

}
 800b92a:	bf00      	nop
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <ModuleCONTROL_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleCONTROL_MAIN(void)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	af00      	add	r7, sp, #0

	switch(ModuleCONTROL_MAIN_State)
 800b938:	4b11      	ldr	r3, [pc, #68]	; (800b980 <ModuleCONTROL_MAIN+0x4c>)
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	2b03      	cmp	r3, #3
 800b93e:	d818      	bhi.n	800b972 <ModuleCONTROL_MAIN+0x3e>
 800b940:	a201      	add	r2, pc, #4	; (adr r2, 800b948 <ModuleCONTROL_MAIN+0x14>)
 800b942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b946:	bf00      	nop
 800b948:	0800b959 	.word	0x0800b959
 800b94c:	0800b95f 	.word	0x0800b95f
 800b950:	0800b965 	.word	0x0800b965
 800b954:	0800b96b 	.word	0x0800b96b
	{
	    case ModuleCONTROL_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleCONTROL_MAIN_State = ModuleCONTROL_MAIN_State_ROUTINE;
 800b958:	4b09      	ldr	r3, [pc, #36]	; (800b980 <ModuleCONTROL_MAIN+0x4c>)
 800b95a:	2201      	movs	r2, #1
 800b95c:	701a      	strb	r2, [r3, #0]


	    case ModuleCONTROL_MAIN_State_ROUTINE:

	    	ModuleCONTROL_MAIN_Routine();
 800b95e:	f7ff ffdb 	bl	800b918 <ModuleCONTROL_MAIN_Routine>
	    break;
 800b962:	e00a      	b.n	800b97a <ModuleCONTROL_MAIN+0x46>

	    case ModuleCONTROL_MAIN_State_PROCESS:

	    	ModuleCONTROL_MAIN_Process();
 800b964:	f7ff ffdf 	bl	800b926 <ModuleCONTROL_MAIN_Process>

	    break;
 800b968:	e007      	b.n	800b97a <ModuleCONTROL_MAIN+0x46>

	    case ModuleCONTROL_MAIN_State_SUSPEND:
	    	ModuleCONTROL_MAIN_State = ModuleCONTROL_MAIN_State_IDLE;
 800b96a:	4b05      	ldr	r3, [pc, #20]	; (800b980 <ModuleCONTROL_MAIN+0x4c>)
 800b96c:	2200      	movs	r2, #0
 800b96e:	701a      	strb	r2, [r3, #0]
	    break;
 800b970:	e003      	b.n	800b97a <ModuleCONTROL_MAIN+0x46>

	    default:
	    	ModuleCONTROL_MAIN_State = ModuleCONTROL_MAIN_State_SUSPEND;
 800b972:	4b03      	ldr	r3, [pc, #12]	; (800b980 <ModuleCONTROL_MAIN+0x4c>)
 800b974:	2203      	movs	r2, #3
 800b976:	701a      	strb	r2, [r3, #0]
	    break;
 800b978:	bf00      	nop

	}

}
 800b97a:	bf00      	nop
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	2000c170 	.word	0x2000c170

0800b984 <ModuleFLASH_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleFLASH_HWInit(void)
{
 800b984:	b480      	push	{r7}
 800b986:	af00      	add	r7, sp, #0
	
}
 800b988:	bf00      	nop
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr

0800b992 <ModuleFLASH_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleFLASH_SWInit(void)
{
 800b992:	b480      	push	{r7}
 800b994:	af00      	add	r7, sp, #0
	
}
 800b996:	bf00      	nop
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <ModuleFLASH_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleFLASH_StartUP(void)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	af00      	add	r7, sp, #0
	ModuleFLASH_HWInit();
 800b9a4:	f7ff ffee 	bl	800b984 <ModuleFLASH_HWInit>
	ModuleFLASH_SWInit();
 800b9a8:	f7ff fff3 	bl	800b992 <ModuleFLASH_SWInit>
}
 800b9ac:	bf00      	nop
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <ModuleFLASH_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleFLASH_MAIN_Routine(void)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	af00      	add	r7, sp, #0

}
 800b9b4:	bf00      	nop
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr

0800b9be <ModuleFLASH_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleFLASH_MAIN_Process(void)
{
 800b9be:	b480      	push	{r7}
 800b9c0:	af00      	add	r7, sp, #0

}
 800b9c2:	bf00      	nop
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr

0800b9cc <ModuleFLASH_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleFLASH_MAIN(void)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	af00      	add	r7, sp, #0

	switch(ModuleFLASH_MAIN_State)
 800b9d0:	4b11      	ldr	r3, [pc, #68]	; (800ba18 <ModuleFLASH_MAIN+0x4c>)
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	2b03      	cmp	r3, #3
 800b9d6:	d819      	bhi.n	800ba0c <ModuleFLASH_MAIN+0x40>
 800b9d8:	a201      	add	r2, pc, #4	; (adr r2, 800b9e0 <ModuleFLASH_MAIN+0x14>)
 800b9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9de:	bf00      	nop
 800b9e0:	0800b9f1 	.word	0x0800b9f1
 800b9e4:	0800b9f9 	.word	0x0800b9f9
 800b9e8:	0800b9ff 	.word	0x0800b9ff
 800b9ec:	0800ba05 	.word	0x0800ba05
	{
	    case ModuleFLASH_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleFLASH_MAIN_State = ModuleFLASH_MAIN_State_ROUTINE;
 800b9f0:	4b09      	ldr	r3, [pc, #36]	; (800ba18 <ModuleFLASH_MAIN+0x4c>)
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	701a      	strb	r2, [r3, #0]
	    break;
 800b9f6:	e00d      	b.n	800ba14 <ModuleFLASH_MAIN+0x48>

	    case ModuleFLASH_MAIN_State_ROUTINE:

	    	ModuleFLASH_MAIN_Routine();
 800b9f8:	f7ff ffda 	bl	800b9b0 <ModuleFLASH_MAIN_Routine>
	    break;
 800b9fc:	e00a      	b.n	800ba14 <ModuleFLASH_MAIN+0x48>

	    case ModuleFLASH_MAIN_State_PROCESS:

	    	ModuleFLASH_MAIN_Process();
 800b9fe:	f7ff ffde 	bl	800b9be <ModuleFLASH_MAIN_Process>

	    break;
 800ba02:	e007      	b.n	800ba14 <ModuleFLASH_MAIN+0x48>

	    case ModuleFLASH_MAIN_State_SUSPEND:
	    	ModuleFLASH_MAIN_State = ModuleFLASH_MAIN_State_IDLE;
 800ba04:	4b04      	ldr	r3, [pc, #16]	; (800ba18 <ModuleFLASH_MAIN+0x4c>)
 800ba06:	2200      	movs	r2, #0
 800ba08:	701a      	strb	r2, [r3, #0]
	    break;
 800ba0a:	e003      	b.n	800ba14 <ModuleFLASH_MAIN+0x48>

	    default:
	    	ModuleFLASH_MAIN_State = ModuleFLASH_MAIN_State_SUSPEND;
 800ba0c:	4b02      	ldr	r3, [pc, #8]	; (800ba18 <ModuleFLASH_MAIN+0x4c>)
 800ba0e:	2203      	movs	r2, #3
 800ba10:	701a      	strb	r2, [r3, #0]
	    break;
 800ba12:	bf00      	nop

	}

}
 800ba14:	bf00      	nop
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	2000c171 	.word	0x2000c171

0800ba1c <ModulePOWERSWITCH_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModulePOWERSWITCH_HWInit(void)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	af00      	add	r7, sp, #0
	
}
 800ba20:	bf00      	nop
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr

0800ba2a <ModulePOWERSWITCH_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModulePOWERSWITCH_SWInit(void)
{
 800ba2a:	b480      	push	{r7}
 800ba2c:	af00      	add	r7, sp, #0
	
}
 800ba2e:	bf00      	nop
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <ModulePOWERSWITCH_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModulePOWERSWITCH_StartUP(void)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	af00      	add	r7, sp, #0
	ModulePOWERSWITCH_HWInit();
 800ba3c:	f7ff ffee 	bl	800ba1c <ModulePOWERSWITCH_HWInit>
	ModulePOWERSWITCH_SWInit();
 800ba40:	f7ff fff3 	bl	800ba2a <ModulePOWERSWITCH_SWInit>
}
 800ba44:	bf00      	nop
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <ModulePOWERSWITCH_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModulePOWERSWITCH_MAIN_Routine(void)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	af00      	add	r7, sp, #0

}
 800ba4c:	bf00      	nop
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba54:	4770      	bx	lr

0800ba56 <ModulePOWERSWITCH_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModulePOWERSWITCH_MAIN_Process(void)
{
 800ba56:	b480      	push	{r7}
 800ba58:	af00      	add	r7, sp, #0

}
 800ba5a:	bf00      	nop
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr

0800ba64 <ModulePOWERSWITCH_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModulePOWERSWITCH_MAIN(void)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	af00      	add	r7, sp, #0

	switch(ModulePOWERSWITCH_MAIN_State)
 800ba68:	4b11      	ldr	r3, [pc, #68]	; (800bab0 <ModulePOWERSWITCH_MAIN+0x4c>)
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	2b03      	cmp	r3, #3
 800ba6e:	d819      	bhi.n	800baa4 <ModulePOWERSWITCH_MAIN+0x40>
 800ba70:	a201      	add	r2, pc, #4	; (adr r2, 800ba78 <ModulePOWERSWITCH_MAIN+0x14>)
 800ba72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba76:	bf00      	nop
 800ba78:	0800ba89 	.word	0x0800ba89
 800ba7c:	0800ba91 	.word	0x0800ba91
 800ba80:	0800ba97 	.word	0x0800ba97
 800ba84:	0800ba9d 	.word	0x0800ba9d
	{
	    case ModulePOWERSWITCH_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModulePOWERSWITCH_MAIN_State = ModulePOWERSWITCH_MAIN_State_ROUTINE;
 800ba88:	4b09      	ldr	r3, [pc, #36]	; (800bab0 <ModulePOWERSWITCH_MAIN+0x4c>)
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	701a      	strb	r2, [r3, #0]
	    break;
 800ba8e:	e00d      	b.n	800baac <ModulePOWERSWITCH_MAIN+0x48>

	    case ModulePOWERSWITCH_MAIN_State_ROUTINE:

	    	ModulePOWERSWITCH_MAIN_Routine();
 800ba90:	f7ff ffda 	bl	800ba48 <ModulePOWERSWITCH_MAIN_Routine>
	    break;
 800ba94:	e00a      	b.n	800baac <ModulePOWERSWITCH_MAIN+0x48>

	    case ModulePOWERSWITCH_MAIN_State_PROCESS:

	    	ModulePOWERSWITCH_MAIN_Process();
 800ba96:	f7ff ffde 	bl	800ba56 <ModulePOWERSWITCH_MAIN_Process>

	    break;
 800ba9a:	e007      	b.n	800baac <ModulePOWERSWITCH_MAIN+0x48>

	    case ModulePOWERSWITCH_MAIN_State_SUSPEND:
	    	ModulePOWERSWITCH_MAIN_State = ModulePOWERSWITCH_MAIN_State_IDLE;
 800ba9c:	4b04      	ldr	r3, [pc, #16]	; (800bab0 <ModulePOWERSWITCH_MAIN+0x4c>)
 800ba9e:	2200      	movs	r2, #0
 800baa0:	701a      	strb	r2, [r3, #0]
	    break;
 800baa2:	e003      	b.n	800baac <ModulePOWERSWITCH_MAIN+0x48>

	    default:
	    	ModulePOWERSWITCH_MAIN_State = ModulePOWERSWITCH_MAIN_State_SUSPEND;
 800baa4:	4b02      	ldr	r3, [pc, #8]	; (800bab0 <ModulePOWERSWITCH_MAIN+0x4c>)
 800baa6:	2203      	movs	r2, #3
 800baa8:	701a      	strb	r2, [r3, #0]
	    break;
 800baaa:	bf00      	nop

	}

}
 800baac:	bf00      	nop
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	2000c172 	.word	0x2000c172

0800bab4 <ModuleRTC_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleRTC_HWInit(void)
{
 800bab4:	b480      	push	{r7}
 800bab6:	af00      	add	r7, sp, #0

}
 800bab8:	bf00      	nop
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr

0800bac2 <ModuleRTC_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleRTC_SWInit(void)
{
 800bac2:	b480      	push	{r7}
 800bac4:	af00      	add	r7, sp, #0
	
}
 800bac6:	bf00      	nop
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr

0800bad0 <ModuleRTC_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleRTC_StartUP(void)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	af00      	add	r7, sp, #0
	ModuleRTC_HWInit();
 800bad4:	f7ff ffee 	bl	800bab4 <ModuleRTC_HWInit>
	ModuleRTC_SWInit();
 800bad8:	f7ff fff3 	bl	800bac2 <ModuleRTC_SWInit>
}
 800badc:	bf00      	nop
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <ModuleRTC_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleRTC_MAIN_Routine(void)
{
 800bae0:	b480      	push	{r7}
 800bae2:	af00      	add	r7, sp, #0

}
 800bae4:	bf00      	nop
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr

0800baee <ModuleRTC_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleRTC_MAIN_Process(void)
{
 800baee:	b480      	push	{r7}
 800baf0:	af00      	add	r7, sp, #0

}
 800baf2:	bf00      	nop
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr

0800bafc <ModuleRTC_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleRTC_MAIN(void)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	af00      	add	r7, sp, #0
	switch(ModuleRTC_MAIN_State)
 800bb00:	4b11      	ldr	r3, [pc, #68]	; (800bb48 <ModuleRTC_MAIN+0x4c>)
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	2b03      	cmp	r3, #3
 800bb06:	d819      	bhi.n	800bb3c <ModuleRTC_MAIN+0x40>
 800bb08:	a201      	add	r2, pc, #4	; (adr r2, 800bb10 <ModuleRTC_MAIN+0x14>)
 800bb0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb0e:	bf00      	nop
 800bb10:	0800bb21 	.word	0x0800bb21
 800bb14:	0800bb29 	.word	0x0800bb29
 800bb18:	0800bb2f 	.word	0x0800bb2f
 800bb1c:	0800bb35 	.word	0x0800bb35
	{
	    case ModuleRTC_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleRTC_MAIN_State = ModuleRTC_MAIN_State_ROUTINE;
 800bb20:	4b09      	ldr	r3, [pc, #36]	; (800bb48 <ModuleRTC_MAIN+0x4c>)
 800bb22:	2201      	movs	r2, #1
 800bb24:	701a      	strb	r2, [r3, #0]
	    break;
 800bb26:	e00d      	b.n	800bb44 <ModuleRTC_MAIN+0x48>

	    case ModuleRTC_MAIN_State_ROUTINE:

	    	ModuleRTC_MAIN_Routine();
 800bb28:	f7ff ffda 	bl	800bae0 <ModuleRTC_MAIN_Routine>
	    break;
 800bb2c:	e00a      	b.n	800bb44 <ModuleRTC_MAIN+0x48>

	    case ModuleRTC_MAIN_State_PROCESS:

	    	ModuleRTC_MAIN_Process();
 800bb2e:	f7ff ffde 	bl	800baee <ModuleRTC_MAIN_Process>

	    break;
 800bb32:	e007      	b.n	800bb44 <ModuleRTC_MAIN+0x48>

	    case ModuleRTC_MAIN_State_SUSPEND:
	    	ModuleRTC_MAIN_State = ModuleRTC_MAIN_State_IDLE;
 800bb34:	4b04      	ldr	r3, [pc, #16]	; (800bb48 <ModuleRTC_MAIN+0x4c>)
 800bb36:	2200      	movs	r2, #0
 800bb38:	701a      	strb	r2, [r3, #0]
	    break;
 800bb3a:	e003      	b.n	800bb44 <ModuleRTC_MAIN+0x48>

	    default:
	    	ModuleRTC_MAIN_State = ModuleRTC_MAIN_State_SUSPEND;
 800bb3c:	4b02      	ldr	r3, [pc, #8]	; (800bb48 <ModuleRTC_MAIN+0x4c>)
 800bb3e:	2203      	movs	r2, #3
 800bb40:	701a      	strb	r2, [r3, #0]
	    break;
 800bb42:	bf00      	nop

	}
}
 800bb44:	bf00      	nop
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	2000c173 	.word	0x2000c173

0800bb4c <ModuleSDCARD_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleSDCARD_HWInit(void)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	af00      	add	r7, sp, #0

}
 800bb50:	bf00      	nop
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr

0800bb5a <ModuleSDCARD_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleSDCARD_SWInit(void)
{
 800bb5a:	b480      	push	{r7}
 800bb5c:	af00      	add	r7, sp, #0
	
}
 800bb5e:	bf00      	nop
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr

0800bb68 <ModuleSDCARD_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleSDCARD_StartUP(void)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	af00      	add	r7, sp, #0
	ModuleSDCARD_HWInit();
 800bb6c:	f7ff ffee 	bl	800bb4c <ModuleSDCARD_HWInit>
	ModuleSDCARD_SWInit();
 800bb70:	f7ff fff3 	bl	800bb5a <ModuleSDCARD_SWInit>
}
 800bb74:	bf00      	nop
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <ModuleSDCARD_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleSDCARD_MAIN_Routine(void)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	af00      	add	r7, sp, #0

}
 800bb7c:	bf00      	nop
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr

0800bb86 <ModuleSDCARD_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleSDCARD_MAIN_Process(void)
{
 800bb86:	b480      	push	{r7}
 800bb88:	af00      	add	r7, sp, #0

}
 800bb8a:	bf00      	nop
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <ModuleSDCARD_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleSDCARD_MAIN(void)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	af00      	add	r7, sp, #0
	switch(ModuleSDCARD_MAIN_State)
 800bb98:	4b11      	ldr	r3, [pc, #68]	; (800bbe0 <ModuleSDCARD_MAIN+0x4c>)
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	2b03      	cmp	r3, #3
 800bb9e:	d819      	bhi.n	800bbd4 <ModuleSDCARD_MAIN+0x40>
 800bba0:	a201      	add	r2, pc, #4	; (adr r2, 800bba8 <ModuleSDCARD_MAIN+0x14>)
 800bba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba6:	bf00      	nop
 800bba8:	0800bbb9 	.word	0x0800bbb9
 800bbac:	0800bbc1 	.word	0x0800bbc1
 800bbb0:	0800bbc7 	.word	0x0800bbc7
 800bbb4:	0800bbcd 	.word	0x0800bbcd
	{
	    case ModuleSDCARD_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleSDCARD_MAIN_State = ModuleSDCARD_MAIN_State_ROUTINE;
 800bbb8:	4b09      	ldr	r3, [pc, #36]	; (800bbe0 <ModuleSDCARD_MAIN+0x4c>)
 800bbba:	2201      	movs	r2, #1
 800bbbc:	701a      	strb	r2, [r3, #0]
	    break;
 800bbbe:	e00d      	b.n	800bbdc <ModuleSDCARD_MAIN+0x48>

	    case ModuleSDCARD_MAIN_State_ROUTINE:

	    	ModuleSDCARD_MAIN_Routine();
 800bbc0:	f7ff ffda 	bl	800bb78 <ModuleSDCARD_MAIN_Routine>
	    break;
 800bbc4:	e00a      	b.n	800bbdc <ModuleSDCARD_MAIN+0x48>

	    case ModuleSDCARD_MAIN_State_PROCESS:

	    	ModuleSDCARD_MAIN_Process();
 800bbc6:	f7ff ffde 	bl	800bb86 <ModuleSDCARD_MAIN_Process>

	    break;
 800bbca:	e007      	b.n	800bbdc <ModuleSDCARD_MAIN+0x48>

	    case ModuleSDCARD_MAIN_State_SUSPEND:
	    	ModuleSDCARD_MAIN_State = ModuleSDCARD_MAIN_State_IDLE;
 800bbcc:	4b04      	ldr	r3, [pc, #16]	; (800bbe0 <ModuleSDCARD_MAIN+0x4c>)
 800bbce:	2200      	movs	r2, #0
 800bbd0:	701a      	strb	r2, [r3, #0]
	    break;
 800bbd2:	e003      	b.n	800bbdc <ModuleSDCARD_MAIN+0x48>

	    default:
	    	ModuleSDCARD_MAIN_State = ModuleSDCARD_MAIN_State_SUSPEND;
 800bbd4:	4b02      	ldr	r3, [pc, #8]	; (800bbe0 <ModuleSDCARD_MAIN+0x4c>)
 800bbd6:	2203      	movs	r2, #3
 800bbd8:	701a      	strb	r2, [r3, #0]
	    break;
 800bbda:	bf00      	nop

	}
}
 800bbdc:	bf00      	nop
 800bbde:	bd80      	pop	{r7, pc}
 800bbe0:	2000c174 	.word	0x2000c174

0800bbe4 <ModuleTELEMETRY_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleTELEMETRY_HWInit(void)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	af00      	add	r7, sp, #0
	
}
 800bbe8:	bf00      	nop
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr

0800bbf2 <ModuleTELEMETRY_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleTELEMETRY_SWInit(void)
{
 800bbf2:	b480      	push	{r7}
 800bbf4:	af00      	add	r7, sp, #0
	
}
 800bbf6:	bf00      	nop
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr

0800bc00 <ModuleTELEMETRY_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleTELEMETRY_StartUP(void)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	af00      	add	r7, sp, #0
	ModuleTELEMETRY_HWInit();
 800bc04:	f7ff ffee 	bl	800bbe4 <ModuleTELEMETRY_HWInit>
	ModuleTELEMETRY_SWInit();
 800bc08:	f7ff fff3 	bl	800bbf2 <ModuleTELEMETRY_SWInit>
}
 800bc0c:	bf00      	nop
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <ModuleTELEMETRY_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleTELEMETRY_MAIN_Routine(void)
{
 800bc10:	b480      	push	{r7}
 800bc12:	af00      	add	r7, sp, #0

}
 800bc14:	bf00      	nop
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr

0800bc1e <ModuleTELEMETRY_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleTELEMETRY_MAIN_Process(void)
{
 800bc1e:	b480      	push	{r7}
 800bc20:	af00      	add	r7, sp, #0

}
 800bc22:	bf00      	nop
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <ModuleTELEMETRY_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleTELEMETRY_MAIN(void)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	af00      	add	r7, sp, #0

	switch(ModuleTELEMETRY_MAIN_State)
 800bc30:	4b11      	ldr	r3, [pc, #68]	; (800bc78 <ModuleTELEMETRY_MAIN+0x4c>)
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	2b03      	cmp	r3, #3
 800bc36:	d819      	bhi.n	800bc6c <ModuleTELEMETRY_MAIN+0x40>
 800bc38:	a201      	add	r2, pc, #4	; (adr r2, 800bc40 <ModuleTELEMETRY_MAIN+0x14>)
 800bc3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc3e:	bf00      	nop
 800bc40:	0800bc51 	.word	0x0800bc51
 800bc44:	0800bc59 	.word	0x0800bc59
 800bc48:	0800bc5f 	.word	0x0800bc5f
 800bc4c:	0800bc65 	.word	0x0800bc65
	{
	    case ModuleTELEMETRY_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleTELEMETRY_MAIN_State = ModuleTELEMETRY_MAIN_State_ROUTINE;
 800bc50:	4b09      	ldr	r3, [pc, #36]	; (800bc78 <ModuleTELEMETRY_MAIN+0x4c>)
 800bc52:	2201      	movs	r2, #1
 800bc54:	701a      	strb	r2, [r3, #0]
	    break;
 800bc56:	e00d      	b.n	800bc74 <ModuleTELEMETRY_MAIN+0x48>

	    case ModuleTELEMETRY_MAIN_State_ROUTINE:

	    	ModuleTELEMETRY_MAIN_Routine();
 800bc58:	f7ff ffda 	bl	800bc10 <ModuleTELEMETRY_MAIN_Routine>
	    break;
 800bc5c:	e00a      	b.n	800bc74 <ModuleTELEMETRY_MAIN+0x48>

	    case ModuleTELEMETRY_MAIN_State_PROCESS:

	    	ModuleTELEMETRY_MAIN_Process();
 800bc5e:	f7ff ffde 	bl	800bc1e <ModuleTELEMETRY_MAIN_Process>

	    break;
 800bc62:	e007      	b.n	800bc74 <ModuleTELEMETRY_MAIN+0x48>

	    case ModuleTELEMETRY_MAIN_State_SUSPEND:
	    	ModuleTELEMETRY_MAIN_State = ModuleTELEMETRY_MAIN_State_IDLE;
 800bc64:	4b04      	ldr	r3, [pc, #16]	; (800bc78 <ModuleTELEMETRY_MAIN+0x4c>)
 800bc66:	2200      	movs	r2, #0
 800bc68:	701a      	strb	r2, [r3, #0]
	    break;
 800bc6a:	e003      	b.n	800bc74 <ModuleTELEMETRY_MAIN+0x48>

	    default:
	    	ModuleTELEMETRY_MAIN_State = ModuleTELEMETRY_MAIN_State_SUSPEND;
 800bc6c:	4b02      	ldr	r3, [pc, #8]	; (800bc78 <ModuleTELEMETRY_MAIN+0x4c>)
 800bc6e:	2203      	movs	r2, #3
 800bc70:	701a      	strb	r2, [r3, #0]
	    break;
 800bc72:	bf00      	nop

	}

}
 800bc74:	bf00      	nop
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	2000c175 	.word	0x2000c175

0800bc7c <__errno>:
 800bc7c:	4b01      	ldr	r3, [pc, #4]	; (800bc84 <__errno+0x8>)
 800bc7e:	6818      	ldr	r0, [r3, #0]
 800bc80:	4770      	bx	lr
 800bc82:	bf00      	nop
 800bc84:	20000020 	.word	0x20000020

0800bc88 <__libc_init_array>:
 800bc88:	b570      	push	{r4, r5, r6, lr}
 800bc8a:	4d0d      	ldr	r5, [pc, #52]	; (800bcc0 <__libc_init_array+0x38>)
 800bc8c:	4c0d      	ldr	r4, [pc, #52]	; (800bcc4 <__libc_init_array+0x3c>)
 800bc8e:	1b64      	subs	r4, r4, r5
 800bc90:	10a4      	asrs	r4, r4, #2
 800bc92:	2600      	movs	r6, #0
 800bc94:	42a6      	cmp	r6, r4
 800bc96:	d109      	bne.n	800bcac <__libc_init_array+0x24>
 800bc98:	4d0b      	ldr	r5, [pc, #44]	; (800bcc8 <__libc_init_array+0x40>)
 800bc9a:	4c0c      	ldr	r4, [pc, #48]	; (800bccc <__libc_init_array+0x44>)
 800bc9c:	f000 fc8e 	bl	800c5bc <_init>
 800bca0:	1b64      	subs	r4, r4, r5
 800bca2:	10a4      	asrs	r4, r4, #2
 800bca4:	2600      	movs	r6, #0
 800bca6:	42a6      	cmp	r6, r4
 800bca8:	d105      	bne.n	800bcb6 <__libc_init_array+0x2e>
 800bcaa:	bd70      	pop	{r4, r5, r6, pc}
 800bcac:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcb0:	4798      	blx	r3
 800bcb2:	3601      	adds	r6, #1
 800bcb4:	e7ee      	b.n	800bc94 <__libc_init_array+0xc>
 800bcb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcba:	4798      	blx	r3
 800bcbc:	3601      	adds	r6, #1
 800bcbe:	e7f2      	b.n	800bca6 <__libc_init_array+0x1e>
 800bcc0:	0800ca4c 	.word	0x0800ca4c
 800bcc4:	0800ca4c 	.word	0x0800ca4c
 800bcc8:	0800ca4c 	.word	0x0800ca4c
 800bccc:	0800ca50 	.word	0x0800ca50

0800bcd0 <memcpy>:
 800bcd0:	440a      	add	r2, r1
 800bcd2:	4291      	cmp	r1, r2
 800bcd4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bcd8:	d100      	bne.n	800bcdc <memcpy+0xc>
 800bcda:	4770      	bx	lr
 800bcdc:	b510      	push	{r4, lr}
 800bcde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bce2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bce6:	4291      	cmp	r1, r2
 800bce8:	d1f9      	bne.n	800bcde <memcpy+0xe>
 800bcea:	bd10      	pop	{r4, pc}

0800bcec <memset>:
 800bcec:	4402      	add	r2, r0
 800bcee:	4603      	mov	r3, r0
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d100      	bne.n	800bcf6 <memset+0xa>
 800bcf4:	4770      	bx	lr
 800bcf6:	f803 1b01 	strb.w	r1, [r3], #1
 800bcfa:	e7f9      	b.n	800bcf0 <memset+0x4>

0800bcfc <siprintf>:
 800bcfc:	b40e      	push	{r1, r2, r3}
 800bcfe:	b500      	push	{lr}
 800bd00:	b09c      	sub	sp, #112	; 0x70
 800bd02:	ab1d      	add	r3, sp, #116	; 0x74
 800bd04:	9002      	str	r0, [sp, #8]
 800bd06:	9006      	str	r0, [sp, #24]
 800bd08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bd0c:	4809      	ldr	r0, [pc, #36]	; (800bd34 <siprintf+0x38>)
 800bd0e:	9107      	str	r1, [sp, #28]
 800bd10:	9104      	str	r1, [sp, #16]
 800bd12:	4909      	ldr	r1, [pc, #36]	; (800bd38 <siprintf+0x3c>)
 800bd14:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd18:	9105      	str	r1, [sp, #20]
 800bd1a:	6800      	ldr	r0, [r0, #0]
 800bd1c:	9301      	str	r3, [sp, #4]
 800bd1e:	a902      	add	r1, sp, #8
 800bd20:	f000 f868 	bl	800bdf4 <_svfiprintf_r>
 800bd24:	9b02      	ldr	r3, [sp, #8]
 800bd26:	2200      	movs	r2, #0
 800bd28:	701a      	strb	r2, [r3, #0]
 800bd2a:	b01c      	add	sp, #112	; 0x70
 800bd2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd30:	b003      	add	sp, #12
 800bd32:	4770      	bx	lr
 800bd34:	20000020 	.word	0x20000020
 800bd38:	ffff0208 	.word	0xffff0208

0800bd3c <__ssputs_r>:
 800bd3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd40:	688e      	ldr	r6, [r1, #8]
 800bd42:	429e      	cmp	r6, r3
 800bd44:	4682      	mov	sl, r0
 800bd46:	460c      	mov	r4, r1
 800bd48:	4690      	mov	r8, r2
 800bd4a:	461f      	mov	r7, r3
 800bd4c:	d838      	bhi.n	800bdc0 <__ssputs_r+0x84>
 800bd4e:	898a      	ldrh	r2, [r1, #12]
 800bd50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd54:	d032      	beq.n	800bdbc <__ssputs_r+0x80>
 800bd56:	6825      	ldr	r5, [r4, #0]
 800bd58:	6909      	ldr	r1, [r1, #16]
 800bd5a:	eba5 0901 	sub.w	r9, r5, r1
 800bd5e:	6965      	ldr	r5, [r4, #20]
 800bd60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd68:	3301      	adds	r3, #1
 800bd6a:	444b      	add	r3, r9
 800bd6c:	106d      	asrs	r5, r5, #1
 800bd6e:	429d      	cmp	r5, r3
 800bd70:	bf38      	it	cc
 800bd72:	461d      	movcc	r5, r3
 800bd74:	0553      	lsls	r3, r2, #21
 800bd76:	d531      	bpl.n	800bddc <__ssputs_r+0xa0>
 800bd78:	4629      	mov	r1, r5
 800bd7a:	f000 fb55 	bl	800c428 <_malloc_r>
 800bd7e:	4606      	mov	r6, r0
 800bd80:	b950      	cbnz	r0, 800bd98 <__ssputs_r+0x5c>
 800bd82:	230c      	movs	r3, #12
 800bd84:	f8ca 3000 	str.w	r3, [sl]
 800bd88:	89a3      	ldrh	r3, [r4, #12]
 800bd8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd8e:	81a3      	strh	r3, [r4, #12]
 800bd90:	f04f 30ff 	mov.w	r0, #4294967295
 800bd94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd98:	6921      	ldr	r1, [r4, #16]
 800bd9a:	464a      	mov	r2, r9
 800bd9c:	f7ff ff98 	bl	800bcd0 <memcpy>
 800bda0:	89a3      	ldrh	r3, [r4, #12]
 800bda2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bda6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdaa:	81a3      	strh	r3, [r4, #12]
 800bdac:	6126      	str	r6, [r4, #16]
 800bdae:	6165      	str	r5, [r4, #20]
 800bdb0:	444e      	add	r6, r9
 800bdb2:	eba5 0509 	sub.w	r5, r5, r9
 800bdb6:	6026      	str	r6, [r4, #0]
 800bdb8:	60a5      	str	r5, [r4, #8]
 800bdba:	463e      	mov	r6, r7
 800bdbc:	42be      	cmp	r6, r7
 800bdbe:	d900      	bls.n	800bdc2 <__ssputs_r+0x86>
 800bdc0:	463e      	mov	r6, r7
 800bdc2:	6820      	ldr	r0, [r4, #0]
 800bdc4:	4632      	mov	r2, r6
 800bdc6:	4641      	mov	r1, r8
 800bdc8:	f000 faa8 	bl	800c31c <memmove>
 800bdcc:	68a3      	ldr	r3, [r4, #8]
 800bdce:	1b9b      	subs	r3, r3, r6
 800bdd0:	60a3      	str	r3, [r4, #8]
 800bdd2:	6823      	ldr	r3, [r4, #0]
 800bdd4:	4433      	add	r3, r6
 800bdd6:	6023      	str	r3, [r4, #0]
 800bdd8:	2000      	movs	r0, #0
 800bdda:	e7db      	b.n	800bd94 <__ssputs_r+0x58>
 800bddc:	462a      	mov	r2, r5
 800bdde:	f000 fb97 	bl	800c510 <_realloc_r>
 800bde2:	4606      	mov	r6, r0
 800bde4:	2800      	cmp	r0, #0
 800bde6:	d1e1      	bne.n	800bdac <__ssputs_r+0x70>
 800bde8:	6921      	ldr	r1, [r4, #16]
 800bdea:	4650      	mov	r0, sl
 800bdec:	f000 fab0 	bl	800c350 <_free_r>
 800bdf0:	e7c7      	b.n	800bd82 <__ssputs_r+0x46>
	...

0800bdf4 <_svfiprintf_r>:
 800bdf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf8:	4698      	mov	r8, r3
 800bdfa:	898b      	ldrh	r3, [r1, #12]
 800bdfc:	061b      	lsls	r3, r3, #24
 800bdfe:	b09d      	sub	sp, #116	; 0x74
 800be00:	4607      	mov	r7, r0
 800be02:	460d      	mov	r5, r1
 800be04:	4614      	mov	r4, r2
 800be06:	d50e      	bpl.n	800be26 <_svfiprintf_r+0x32>
 800be08:	690b      	ldr	r3, [r1, #16]
 800be0a:	b963      	cbnz	r3, 800be26 <_svfiprintf_r+0x32>
 800be0c:	2140      	movs	r1, #64	; 0x40
 800be0e:	f000 fb0b 	bl	800c428 <_malloc_r>
 800be12:	6028      	str	r0, [r5, #0]
 800be14:	6128      	str	r0, [r5, #16]
 800be16:	b920      	cbnz	r0, 800be22 <_svfiprintf_r+0x2e>
 800be18:	230c      	movs	r3, #12
 800be1a:	603b      	str	r3, [r7, #0]
 800be1c:	f04f 30ff 	mov.w	r0, #4294967295
 800be20:	e0d1      	b.n	800bfc6 <_svfiprintf_r+0x1d2>
 800be22:	2340      	movs	r3, #64	; 0x40
 800be24:	616b      	str	r3, [r5, #20]
 800be26:	2300      	movs	r3, #0
 800be28:	9309      	str	r3, [sp, #36]	; 0x24
 800be2a:	2320      	movs	r3, #32
 800be2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be30:	f8cd 800c 	str.w	r8, [sp, #12]
 800be34:	2330      	movs	r3, #48	; 0x30
 800be36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bfe0 <_svfiprintf_r+0x1ec>
 800be3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be3e:	f04f 0901 	mov.w	r9, #1
 800be42:	4623      	mov	r3, r4
 800be44:	469a      	mov	sl, r3
 800be46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be4a:	b10a      	cbz	r2, 800be50 <_svfiprintf_r+0x5c>
 800be4c:	2a25      	cmp	r2, #37	; 0x25
 800be4e:	d1f9      	bne.n	800be44 <_svfiprintf_r+0x50>
 800be50:	ebba 0b04 	subs.w	fp, sl, r4
 800be54:	d00b      	beq.n	800be6e <_svfiprintf_r+0x7a>
 800be56:	465b      	mov	r3, fp
 800be58:	4622      	mov	r2, r4
 800be5a:	4629      	mov	r1, r5
 800be5c:	4638      	mov	r0, r7
 800be5e:	f7ff ff6d 	bl	800bd3c <__ssputs_r>
 800be62:	3001      	adds	r0, #1
 800be64:	f000 80aa 	beq.w	800bfbc <_svfiprintf_r+0x1c8>
 800be68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be6a:	445a      	add	r2, fp
 800be6c:	9209      	str	r2, [sp, #36]	; 0x24
 800be6e:	f89a 3000 	ldrb.w	r3, [sl]
 800be72:	2b00      	cmp	r3, #0
 800be74:	f000 80a2 	beq.w	800bfbc <_svfiprintf_r+0x1c8>
 800be78:	2300      	movs	r3, #0
 800be7a:	f04f 32ff 	mov.w	r2, #4294967295
 800be7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be82:	f10a 0a01 	add.w	sl, sl, #1
 800be86:	9304      	str	r3, [sp, #16]
 800be88:	9307      	str	r3, [sp, #28]
 800be8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be8e:	931a      	str	r3, [sp, #104]	; 0x68
 800be90:	4654      	mov	r4, sl
 800be92:	2205      	movs	r2, #5
 800be94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be98:	4851      	ldr	r0, [pc, #324]	; (800bfe0 <_svfiprintf_r+0x1ec>)
 800be9a:	f7f4 f9b9 	bl	8000210 <memchr>
 800be9e:	9a04      	ldr	r2, [sp, #16]
 800bea0:	b9d8      	cbnz	r0, 800beda <_svfiprintf_r+0xe6>
 800bea2:	06d0      	lsls	r0, r2, #27
 800bea4:	bf44      	itt	mi
 800bea6:	2320      	movmi	r3, #32
 800bea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800beac:	0711      	lsls	r1, r2, #28
 800beae:	bf44      	itt	mi
 800beb0:	232b      	movmi	r3, #43	; 0x2b
 800beb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800beb6:	f89a 3000 	ldrb.w	r3, [sl]
 800beba:	2b2a      	cmp	r3, #42	; 0x2a
 800bebc:	d015      	beq.n	800beea <_svfiprintf_r+0xf6>
 800bebe:	9a07      	ldr	r2, [sp, #28]
 800bec0:	4654      	mov	r4, sl
 800bec2:	2000      	movs	r0, #0
 800bec4:	f04f 0c0a 	mov.w	ip, #10
 800bec8:	4621      	mov	r1, r4
 800beca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bece:	3b30      	subs	r3, #48	; 0x30
 800bed0:	2b09      	cmp	r3, #9
 800bed2:	d94e      	bls.n	800bf72 <_svfiprintf_r+0x17e>
 800bed4:	b1b0      	cbz	r0, 800bf04 <_svfiprintf_r+0x110>
 800bed6:	9207      	str	r2, [sp, #28]
 800bed8:	e014      	b.n	800bf04 <_svfiprintf_r+0x110>
 800beda:	eba0 0308 	sub.w	r3, r0, r8
 800bede:	fa09 f303 	lsl.w	r3, r9, r3
 800bee2:	4313      	orrs	r3, r2
 800bee4:	9304      	str	r3, [sp, #16]
 800bee6:	46a2      	mov	sl, r4
 800bee8:	e7d2      	b.n	800be90 <_svfiprintf_r+0x9c>
 800beea:	9b03      	ldr	r3, [sp, #12]
 800beec:	1d19      	adds	r1, r3, #4
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	9103      	str	r1, [sp, #12]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	bfbb      	ittet	lt
 800bef6:	425b      	neglt	r3, r3
 800bef8:	f042 0202 	orrlt.w	r2, r2, #2
 800befc:	9307      	strge	r3, [sp, #28]
 800befe:	9307      	strlt	r3, [sp, #28]
 800bf00:	bfb8      	it	lt
 800bf02:	9204      	strlt	r2, [sp, #16]
 800bf04:	7823      	ldrb	r3, [r4, #0]
 800bf06:	2b2e      	cmp	r3, #46	; 0x2e
 800bf08:	d10c      	bne.n	800bf24 <_svfiprintf_r+0x130>
 800bf0a:	7863      	ldrb	r3, [r4, #1]
 800bf0c:	2b2a      	cmp	r3, #42	; 0x2a
 800bf0e:	d135      	bne.n	800bf7c <_svfiprintf_r+0x188>
 800bf10:	9b03      	ldr	r3, [sp, #12]
 800bf12:	1d1a      	adds	r2, r3, #4
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	9203      	str	r2, [sp, #12]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	bfb8      	it	lt
 800bf1c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf20:	3402      	adds	r4, #2
 800bf22:	9305      	str	r3, [sp, #20]
 800bf24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bff0 <_svfiprintf_r+0x1fc>
 800bf28:	7821      	ldrb	r1, [r4, #0]
 800bf2a:	2203      	movs	r2, #3
 800bf2c:	4650      	mov	r0, sl
 800bf2e:	f7f4 f96f 	bl	8000210 <memchr>
 800bf32:	b140      	cbz	r0, 800bf46 <_svfiprintf_r+0x152>
 800bf34:	2340      	movs	r3, #64	; 0x40
 800bf36:	eba0 000a 	sub.w	r0, r0, sl
 800bf3a:	fa03 f000 	lsl.w	r0, r3, r0
 800bf3e:	9b04      	ldr	r3, [sp, #16]
 800bf40:	4303      	orrs	r3, r0
 800bf42:	3401      	adds	r4, #1
 800bf44:	9304      	str	r3, [sp, #16]
 800bf46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf4a:	4826      	ldr	r0, [pc, #152]	; (800bfe4 <_svfiprintf_r+0x1f0>)
 800bf4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf50:	2206      	movs	r2, #6
 800bf52:	f7f4 f95d 	bl	8000210 <memchr>
 800bf56:	2800      	cmp	r0, #0
 800bf58:	d038      	beq.n	800bfcc <_svfiprintf_r+0x1d8>
 800bf5a:	4b23      	ldr	r3, [pc, #140]	; (800bfe8 <_svfiprintf_r+0x1f4>)
 800bf5c:	bb1b      	cbnz	r3, 800bfa6 <_svfiprintf_r+0x1b2>
 800bf5e:	9b03      	ldr	r3, [sp, #12]
 800bf60:	3307      	adds	r3, #7
 800bf62:	f023 0307 	bic.w	r3, r3, #7
 800bf66:	3308      	adds	r3, #8
 800bf68:	9303      	str	r3, [sp, #12]
 800bf6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf6c:	4433      	add	r3, r6
 800bf6e:	9309      	str	r3, [sp, #36]	; 0x24
 800bf70:	e767      	b.n	800be42 <_svfiprintf_r+0x4e>
 800bf72:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf76:	460c      	mov	r4, r1
 800bf78:	2001      	movs	r0, #1
 800bf7a:	e7a5      	b.n	800bec8 <_svfiprintf_r+0xd4>
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	3401      	adds	r4, #1
 800bf80:	9305      	str	r3, [sp, #20]
 800bf82:	4619      	mov	r1, r3
 800bf84:	f04f 0c0a 	mov.w	ip, #10
 800bf88:	4620      	mov	r0, r4
 800bf8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf8e:	3a30      	subs	r2, #48	; 0x30
 800bf90:	2a09      	cmp	r2, #9
 800bf92:	d903      	bls.n	800bf9c <_svfiprintf_r+0x1a8>
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d0c5      	beq.n	800bf24 <_svfiprintf_r+0x130>
 800bf98:	9105      	str	r1, [sp, #20]
 800bf9a:	e7c3      	b.n	800bf24 <_svfiprintf_r+0x130>
 800bf9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfa0:	4604      	mov	r4, r0
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e7f0      	b.n	800bf88 <_svfiprintf_r+0x194>
 800bfa6:	ab03      	add	r3, sp, #12
 800bfa8:	9300      	str	r3, [sp, #0]
 800bfaa:	462a      	mov	r2, r5
 800bfac:	4b0f      	ldr	r3, [pc, #60]	; (800bfec <_svfiprintf_r+0x1f8>)
 800bfae:	a904      	add	r1, sp, #16
 800bfb0:	4638      	mov	r0, r7
 800bfb2:	f3af 8000 	nop.w
 800bfb6:	1c42      	adds	r2, r0, #1
 800bfb8:	4606      	mov	r6, r0
 800bfba:	d1d6      	bne.n	800bf6a <_svfiprintf_r+0x176>
 800bfbc:	89ab      	ldrh	r3, [r5, #12]
 800bfbe:	065b      	lsls	r3, r3, #25
 800bfc0:	f53f af2c 	bmi.w	800be1c <_svfiprintf_r+0x28>
 800bfc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfc6:	b01d      	add	sp, #116	; 0x74
 800bfc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfcc:	ab03      	add	r3, sp, #12
 800bfce:	9300      	str	r3, [sp, #0]
 800bfd0:	462a      	mov	r2, r5
 800bfd2:	4b06      	ldr	r3, [pc, #24]	; (800bfec <_svfiprintf_r+0x1f8>)
 800bfd4:	a904      	add	r1, sp, #16
 800bfd6:	4638      	mov	r0, r7
 800bfd8:	f000 f87a 	bl	800c0d0 <_printf_i>
 800bfdc:	e7eb      	b.n	800bfb6 <_svfiprintf_r+0x1c2>
 800bfde:	bf00      	nop
 800bfe0:	0800ca10 	.word	0x0800ca10
 800bfe4:	0800ca1a 	.word	0x0800ca1a
 800bfe8:	00000000 	.word	0x00000000
 800bfec:	0800bd3d 	.word	0x0800bd3d
 800bff0:	0800ca16 	.word	0x0800ca16

0800bff4 <_printf_common>:
 800bff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bff8:	4616      	mov	r6, r2
 800bffa:	4699      	mov	r9, r3
 800bffc:	688a      	ldr	r2, [r1, #8]
 800bffe:	690b      	ldr	r3, [r1, #16]
 800c000:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c004:	4293      	cmp	r3, r2
 800c006:	bfb8      	it	lt
 800c008:	4613      	movlt	r3, r2
 800c00a:	6033      	str	r3, [r6, #0]
 800c00c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c010:	4607      	mov	r7, r0
 800c012:	460c      	mov	r4, r1
 800c014:	b10a      	cbz	r2, 800c01a <_printf_common+0x26>
 800c016:	3301      	adds	r3, #1
 800c018:	6033      	str	r3, [r6, #0]
 800c01a:	6823      	ldr	r3, [r4, #0]
 800c01c:	0699      	lsls	r1, r3, #26
 800c01e:	bf42      	ittt	mi
 800c020:	6833      	ldrmi	r3, [r6, #0]
 800c022:	3302      	addmi	r3, #2
 800c024:	6033      	strmi	r3, [r6, #0]
 800c026:	6825      	ldr	r5, [r4, #0]
 800c028:	f015 0506 	ands.w	r5, r5, #6
 800c02c:	d106      	bne.n	800c03c <_printf_common+0x48>
 800c02e:	f104 0a19 	add.w	sl, r4, #25
 800c032:	68e3      	ldr	r3, [r4, #12]
 800c034:	6832      	ldr	r2, [r6, #0]
 800c036:	1a9b      	subs	r3, r3, r2
 800c038:	42ab      	cmp	r3, r5
 800c03a:	dc26      	bgt.n	800c08a <_printf_common+0x96>
 800c03c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c040:	1e13      	subs	r3, r2, #0
 800c042:	6822      	ldr	r2, [r4, #0]
 800c044:	bf18      	it	ne
 800c046:	2301      	movne	r3, #1
 800c048:	0692      	lsls	r2, r2, #26
 800c04a:	d42b      	bmi.n	800c0a4 <_printf_common+0xb0>
 800c04c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c050:	4649      	mov	r1, r9
 800c052:	4638      	mov	r0, r7
 800c054:	47c0      	blx	r8
 800c056:	3001      	adds	r0, #1
 800c058:	d01e      	beq.n	800c098 <_printf_common+0xa4>
 800c05a:	6823      	ldr	r3, [r4, #0]
 800c05c:	68e5      	ldr	r5, [r4, #12]
 800c05e:	6832      	ldr	r2, [r6, #0]
 800c060:	f003 0306 	and.w	r3, r3, #6
 800c064:	2b04      	cmp	r3, #4
 800c066:	bf08      	it	eq
 800c068:	1aad      	subeq	r5, r5, r2
 800c06a:	68a3      	ldr	r3, [r4, #8]
 800c06c:	6922      	ldr	r2, [r4, #16]
 800c06e:	bf0c      	ite	eq
 800c070:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c074:	2500      	movne	r5, #0
 800c076:	4293      	cmp	r3, r2
 800c078:	bfc4      	itt	gt
 800c07a:	1a9b      	subgt	r3, r3, r2
 800c07c:	18ed      	addgt	r5, r5, r3
 800c07e:	2600      	movs	r6, #0
 800c080:	341a      	adds	r4, #26
 800c082:	42b5      	cmp	r5, r6
 800c084:	d11a      	bne.n	800c0bc <_printf_common+0xc8>
 800c086:	2000      	movs	r0, #0
 800c088:	e008      	b.n	800c09c <_printf_common+0xa8>
 800c08a:	2301      	movs	r3, #1
 800c08c:	4652      	mov	r2, sl
 800c08e:	4649      	mov	r1, r9
 800c090:	4638      	mov	r0, r7
 800c092:	47c0      	blx	r8
 800c094:	3001      	adds	r0, #1
 800c096:	d103      	bne.n	800c0a0 <_printf_common+0xac>
 800c098:	f04f 30ff 	mov.w	r0, #4294967295
 800c09c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0a0:	3501      	adds	r5, #1
 800c0a2:	e7c6      	b.n	800c032 <_printf_common+0x3e>
 800c0a4:	18e1      	adds	r1, r4, r3
 800c0a6:	1c5a      	adds	r2, r3, #1
 800c0a8:	2030      	movs	r0, #48	; 0x30
 800c0aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c0ae:	4422      	add	r2, r4
 800c0b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c0b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c0b8:	3302      	adds	r3, #2
 800c0ba:	e7c7      	b.n	800c04c <_printf_common+0x58>
 800c0bc:	2301      	movs	r3, #1
 800c0be:	4622      	mov	r2, r4
 800c0c0:	4649      	mov	r1, r9
 800c0c2:	4638      	mov	r0, r7
 800c0c4:	47c0      	blx	r8
 800c0c6:	3001      	adds	r0, #1
 800c0c8:	d0e6      	beq.n	800c098 <_printf_common+0xa4>
 800c0ca:	3601      	adds	r6, #1
 800c0cc:	e7d9      	b.n	800c082 <_printf_common+0x8e>
	...

0800c0d0 <_printf_i>:
 800c0d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0d4:	7e0f      	ldrb	r7, [r1, #24]
 800c0d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c0d8:	2f78      	cmp	r7, #120	; 0x78
 800c0da:	4691      	mov	r9, r2
 800c0dc:	4680      	mov	r8, r0
 800c0de:	460c      	mov	r4, r1
 800c0e0:	469a      	mov	sl, r3
 800c0e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c0e6:	d807      	bhi.n	800c0f8 <_printf_i+0x28>
 800c0e8:	2f62      	cmp	r7, #98	; 0x62
 800c0ea:	d80a      	bhi.n	800c102 <_printf_i+0x32>
 800c0ec:	2f00      	cmp	r7, #0
 800c0ee:	f000 80d8 	beq.w	800c2a2 <_printf_i+0x1d2>
 800c0f2:	2f58      	cmp	r7, #88	; 0x58
 800c0f4:	f000 80a3 	beq.w	800c23e <_printf_i+0x16e>
 800c0f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c100:	e03a      	b.n	800c178 <_printf_i+0xa8>
 800c102:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c106:	2b15      	cmp	r3, #21
 800c108:	d8f6      	bhi.n	800c0f8 <_printf_i+0x28>
 800c10a:	a101      	add	r1, pc, #4	; (adr r1, 800c110 <_printf_i+0x40>)
 800c10c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c110:	0800c169 	.word	0x0800c169
 800c114:	0800c17d 	.word	0x0800c17d
 800c118:	0800c0f9 	.word	0x0800c0f9
 800c11c:	0800c0f9 	.word	0x0800c0f9
 800c120:	0800c0f9 	.word	0x0800c0f9
 800c124:	0800c0f9 	.word	0x0800c0f9
 800c128:	0800c17d 	.word	0x0800c17d
 800c12c:	0800c0f9 	.word	0x0800c0f9
 800c130:	0800c0f9 	.word	0x0800c0f9
 800c134:	0800c0f9 	.word	0x0800c0f9
 800c138:	0800c0f9 	.word	0x0800c0f9
 800c13c:	0800c289 	.word	0x0800c289
 800c140:	0800c1ad 	.word	0x0800c1ad
 800c144:	0800c26b 	.word	0x0800c26b
 800c148:	0800c0f9 	.word	0x0800c0f9
 800c14c:	0800c0f9 	.word	0x0800c0f9
 800c150:	0800c2ab 	.word	0x0800c2ab
 800c154:	0800c0f9 	.word	0x0800c0f9
 800c158:	0800c1ad 	.word	0x0800c1ad
 800c15c:	0800c0f9 	.word	0x0800c0f9
 800c160:	0800c0f9 	.word	0x0800c0f9
 800c164:	0800c273 	.word	0x0800c273
 800c168:	682b      	ldr	r3, [r5, #0]
 800c16a:	1d1a      	adds	r2, r3, #4
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	602a      	str	r2, [r5, #0]
 800c170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c178:	2301      	movs	r3, #1
 800c17a:	e0a3      	b.n	800c2c4 <_printf_i+0x1f4>
 800c17c:	6820      	ldr	r0, [r4, #0]
 800c17e:	6829      	ldr	r1, [r5, #0]
 800c180:	0606      	lsls	r6, r0, #24
 800c182:	f101 0304 	add.w	r3, r1, #4
 800c186:	d50a      	bpl.n	800c19e <_printf_i+0xce>
 800c188:	680e      	ldr	r6, [r1, #0]
 800c18a:	602b      	str	r3, [r5, #0]
 800c18c:	2e00      	cmp	r6, #0
 800c18e:	da03      	bge.n	800c198 <_printf_i+0xc8>
 800c190:	232d      	movs	r3, #45	; 0x2d
 800c192:	4276      	negs	r6, r6
 800c194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c198:	485e      	ldr	r0, [pc, #376]	; (800c314 <_printf_i+0x244>)
 800c19a:	230a      	movs	r3, #10
 800c19c:	e019      	b.n	800c1d2 <_printf_i+0x102>
 800c19e:	680e      	ldr	r6, [r1, #0]
 800c1a0:	602b      	str	r3, [r5, #0]
 800c1a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c1a6:	bf18      	it	ne
 800c1a8:	b236      	sxthne	r6, r6
 800c1aa:	e7ef      	b.n	800c18c <_printf_i+0xbc>
 800c1ac:	682b      	ldr	r3, [r5, #0]
 800c1ae:	6820      	ldr	r0, [r4, #0]
 800c1b0:	1d19      	adds	r1, r3, #4
 800c1b2:	6029      	str	r1, [r5, #0]
 800c1b4:	0601      	lsls	r1, r0, #24
 800c1b6:	d501      	bpl.n	800c1bc <_printf_i+0xec>
 800c1b8:	681e      	ldr	r6, [r3, #0]
 800c1ba:	e002      	b.n	800c1c2 <_printf_i+0xf2>
 800c1bc:	0646      	lsls	r6, r0, #25
 800c1be:	d5fb      	bpl.n	800c1b8 <_printf_i+0xe8>
 800c1c0:	881e      	ldrh	r6, [r3, #0]
 800c1c2:	4854      	ldr	r0, [pc, #336]	; (800c314 <_printf_i+0x244>)
 800c1c4:	2f6f      	cmp	r7, #111	; 0x6f
 800c1c6:	bf0c      	ite	eq
 800c1c8:	2308      	moveq	r3, #8
 800c1ca:	230a      	movne	r3, #10
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c1d2:	6865      	ldr	r5, [r4, #4]
 800c1d4:	60a5      	str	r5, [r4, #8]
 800c1d6:	2d00      	cmp	r5, #0
 800c1d8:	bfa2      	ittt	ge
 800c1da:	6821      	ldrge	r1, [r4, #0]
 800c1dc:	f021 0104 	bicge.w	r1, r1, #4
 800c1e0:	6021      	strge	r1, [r4, #0]
 800c1e2:	b90e      	cbnz	r6, 800c1e8 <_printf_i+0x118>
 800c1e4:	2d00      	cmp	r5, #0
 800c1e6:	d04d      	beq.n	800c284 <_printf_i+0x1b4>
 800c1e8:	4615      	mov	r5, r2
 800c1ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800c1ee:	fb03 6711 	mls	r7, r3, r1, r6
 800c1f2:	5dc7      	ldrb	r7, [r0, r7]
 800c1f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c1f8:	4637      	mov	r7, r6
 800c1fa:	42bb      	cmp	r3, r7
 800c1fc:	460e      	mov	r6, r1
 800c1fe:	d9f4      	bls.n	800c1ea <_printf_i+0x11a>
 800c200:	2b08      	cmp	r3, #8
 800c202:	d10b      	bne.n	800c21c <_printf_i+0x14c>
 800c204:	6823      	ldr	r3, [r4, #0]
 800c206:	07de      	lsls	r6, r3, #31
 800c208:	d508      	bpl.n	800c21c <_printf_i+0x14c>
 800c20a:	6923      	ldr	r3, [r4, #16]
 800c20c:	6861      	ldr	r1, [r4, #4]
 800c20e:	4299      	cmp	r1, r3
 800c210:	bfde      	ittt	le
 800c212:	2330      	movle	r3, #48	; 0x30
 800c214:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c218:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c21c:	1b52      	subs	r2, r2, r5
 800c21e:	6122      	str	r2, [r4, #16]
 800c220:	f8cd a000 	str.w	sl, [sp]
 800c224:	464b      	mov	r3, r9
 800c226:	aa03      	add	r2, sp, #12
 800c228:	4621      	mov	r1, r4
 800c22a:	4640      	mov	r0, r8
 800c22c:	f7ff fee2 	bl	800bff4 <_printf_common>
 800c230:	3001      	adds	r0, #1
 800c232:	d14c      	bne.n	800c2ce <_printf_i+0x1fe>
 800c234:	f04f 30ff 	mov.w	r0, #4294967295
 800c238:	b004      	add	sp, #16
 800c23a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c23e:	4835      	ldr	r0, [pc, #212]	; (800c314 <_printf_i+0x244>)
 800c240:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c244:	6829      	ldr	r1, [r5, #0]
 800c246:	6823      	ldr	r3, [r4, #0]
 800c248:	f851 6b04 	ldr.w	r6, [r1], #4
 800c24c:	6029      	str	r1, [r5, #0]
 800c24e:	061d      	lsls	r5, r3, #24
 800c250:	d514      	bpl.n	800c27c <_printf_i+0x1ac>
 800c252:	07df      	lsls	r7, r3, #31
 800c254:	bf44      	itt	mi
 800c256:	f043 0320 	orrmi.w	r3, r3, #32
 800c25a:	6023      	strmi	r3, [r4, #0]
 800c25c:	b91e      	cbnz	r6, 800c266 <_printf_i+0x196>
 800c25e:	6823      	ldr	r3, [r4, #0]
 800c260:	f023 0320 	bic.w	r3, r3, #32
 800c264:	6023      	str	r3, [r4, #0]
 800c266:	2310      	movs	r3, #16
 800c268:	e7b0      	b.n	800c1cc <_printf_i+0xfc>
 800c26a:	6823      	ldr	r3, [r4, #0]
 800c26c:	f043 0320 	orr.w	r3, r3, #32
 800c270:	6023      	str	r3, [r4, #0]
 800c272:	2378      	movs	r3, #120	; 0x78
 800c274:	4828      	ldr	r0, [pc, #160]	; (800c318 <_printf_i+0x248>)
 800c276:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c27a:	e7e3      	b.n	800c244 <_printf_i+0x174>
 800c27c:	0659      	lsls	r1, r3, #25
 800c27e:	bf48      	it	mi
 800c280:	b2b6      	uxthmi	r6, r6
 800c282:	e7e6      	b.n	800c252 <_printf_i+0x182>
 800c284:	4615      	mov	r5, r2
 800c286:	e7bb      	b.n	800c200 <_printf_i+0x130>
 800c288:	682b      	ldr	r3, [r5, #0]
 800c28a:	6826      	ldr	r6, [r4, #0]
 800c28c:	6961      	ldr	r1, [r4, #20]
 800c28e:	1d18      	adds	r0, r3, #4
 800c290:	6028      	str	r0, [r5, #0]
 800c292:	0635      	lsls	r5, r6, #24
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	d501      	bpl.n	800c29c <_printf_i+0x1cc>
 800c298:	6019      	str	r1, [r3, #0]
 800c29a:	e002      	b.n	800c2a2 <_printf_i+0x1d2>
 800c29c:	0670      	lsls	r0, r6, #25
 800c29e:	d5fb      	bpl.n	800c298 <_printf_i+0x1c8>
 800c2a0:	8019      	strh	r1, [r3, #0]
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	6123      	str	r3, [r4, #16]
 800c2a6:	4615      	mov	r5, r2
 800c2a8:	e7ba      	b.n	800c220 <_printf_i+0x150>
 800c2aa:	682b      	ldr	r3, [r5, #0]
 800c2ac:	1d1a      	adds	r2, r3, #4
 800c2ae:	602a      	str	r2, [r5, #0]
 800c2b0:	681d      	ldr	r5, [r3, #0]
 800c2b2:	6862      	ldr	r2, [r4, #4]
 800c2b4:	2100      	movs	r1, #0
 800c2b6:	4628      	mov	r0, r5
 800c2b8:	f7f3 ffaa 	bl	8000210 <memchr>
 800c2bc:	b108      	cbz	r0, 800c2c2 <_printf_i+0x1f2>
 800c2be:	1b40      	subs	r0, r0, r5
 800c2c0:	6060      	str	r0, [r4, #4]
 800c2c2:	6863      	ldr	r3, [r4, #4]
 800c2c4:	6123      	str	r3, [r4, #16]
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2cc:	e7a8      	b.n	800c220 <_printf_i+0x150>
 800c2ce:	6923      	ldr	r3, [r4, #16]
 800c2d0:	462a      	mov	r2, r5
 800c2d2:	4649      	mov	r1, r9
 800c2d4:	4640      	mov	r0, r8
 800c2d6:	47d0      	blx	sl
 800c2d8:	3001      	adds	r0, #1
 800c2da:	d0ab      	beq.n	800c234 <_printf_i+0x164>
 800c2dc:	6823      	ldr	r3, [r4, #0]
 800c2de:	079b      	lsls	r3, r3, #30
 800c2e0:	d413      	bmi.n	800c30a <_printf_i+0x23a>
 800c2e2:	68e0      	ldr	r0, [r4, #12]
 800c2e4:	9b03      	ldr	r3, [sp, #12]
 800c2e6:	4298      	cmp	r0, r3
 800c2e8:	bfb8      	it	lt
 800c2ea:	4618      	movlt	r0, r3
 800c2ec:	e7a4      	b.n	800c238 <_printf_i+0x168>
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	4632      	mov	r2, r6
 800c2f2:	4649      	mov	r1, r9
 800c2f4:	4640      	mov	r0, r8
 800c2f6:	47d0      	blx	sl
 800c2f8:	3001      	adds	r0, #1
 800c2fa:	d09b      	beq.n	800c234 <_printf_i+0x164>
 800c2fc:	3501      	adds	r5, #1
 800c2fe:	68e3      	ldr	r3, [r4, #12]
 800c300:	9903      	ldr	r1, [sp, #12]
 800c302:	1a5b      	subs	r3, r3, r1
 800c304:	42ab      	cmp	r3, r5
 800c306:	dcf2      	bgt.n	800c2ee <_printf_i+0x21e>
 800c308:	e7eb      	b.n	800c2e2 <_printf_i+0x212>
 800c30a:	2500      	movs	r5, #0
 800c30c:	f104 0619 	add.w	r6, r4, #25
 800c310:	e7f5      	b.n	800c2fe <_printf_i+0x22e>
 800c312:	bf00      	nop
 800c314:	0800ca21 	.word	0x0800ca21
 800c318:	0800ca32 	.word	0x0800ca32

0800c31c <memmove>:
 800c31c:	4288      	cmp	r0, r1
 800c31e:	b510      	push	{r4, lr}
 800c320:	eb01 0402 	add.w	r4, r1, r2
 800c324:	d902      	bls.n	800c32c <memmove+0x10>
 800c326:	4284      	cmp	r4, r0
 800c328:	4623      	mov	r3, r4
 800c32a:	d807      	bhi.n	800c33c <memmove+0x20>
 800c32c:	1e43      	subs	r3, r0, #1
 800c32e:	42a1      	cmp	r1, r4
 800c330:	d008      	beq.n	800c344 <memmove+0x28>
 800c332:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c336:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c33a:	e7f8      	b.n	800c32e <memmove+0x12>
 800c33c:	4402      	add	r2, r0
 800c33e:	4601      	mov	r1, r0
 800c340:	428a      	cmp	r2, r1
 800c342:	d100      	bne.n	800c346 <memmove+0x2a>
 800c344:	bd10      	pop	{r4, pc}
 800c346:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c34a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c34e:	e7f7      	b.n	800c340 <memmove+0x24>

0800c350 <_free_r>:
 800c350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c352:	2900      	cmp	r1, #0
 800c354:	d044      	beq.n	800c3e0 <_free_r+0x90>
 800c356:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c35a:	9001      	str	r0, [sp, #4]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	f1a1 0404 	sub.w	r4, r1, #4
 800c362:	bfb8      	it	lt
 800c364:	18e4      	addlt	r4, r4, r3
 800c366:	f000 f913 	bl	800c590 <__malloc_lock>
 800c36a:	4a1e      	ldr	r2, [pc, #120]	; (800c3e4 <_free_r+0x94>)
 800c36c:	9801      	ldr	r0, [sp, #4]
 800c36e:	6813      	ldr	r3, [r2, #0]
 800c370:	b933      	cbnz	r3, 800c380 <_free_r+0x30>
 800c372:	6063      	str	r3, [r4, #4]
 800c374:	6014      	str	r4, [r2, #0]
 800c376:	b003      	add	sp, #12
 800c378:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c37c:	f000 b90e 	b.w	800c59c <__malloc_unlock>
 800c380:	42a3      	cmp	r3, r4
 800c382:	d908      	bls.n	800c396 <_free_r+0x46>
 800c384:	6825      	ldr	r5, [r4, #0]
 800c386:	1961      	adds	r1, r4, r5
 800c388:	428b      	cmp	r3, r1
 800c38a:	bf01      	itttt	eq
 800c38c:	6819      	ldreq	r1, [r3, #0]
 800c38e:	685b      	ldreq	r3, [r3, #4]
 800c390:	1949      	addeq	r1, r1, r5
 800c392:	6021      	streq	r1, [r4, #0]
 800c394:	e7ed      	b.n	800c372 <_free_r+0x22>
 800c396:	461a      	mov	r2, r3
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	b10b      	cbz	r3, 800c3a0 <_free_r+0x50>
 800c39c:	42a3      	cmp	r3, r4
 800c39e:	d9fa      	bls.n	800c396 <_free_r+0x46>
 800c3a0:	6811      	ldr	r1, [r2, #0]
 800c3a2:	1855      	adds	r5, r2, r1
 800c3a4:	42a5      	cmp	r5, r4
 800c3a6:	d10b      	bne.n	800c3c0 <_free_r+0x70>
 800c3a8:	6824      	ldr	r4, [r4, #0]
 800c3aa:	4421      	add	r1, r4
 800c3ac:	1854      	adds	r4, r2, r1
 800c3ae:	42a3      	cmp	r3, r4
 800c3b0:	6011      	str	r1, [r2, #0]
 800c3b2:	d1e0      	bne.n	800c376 <_free_r+0x26>
 800c3b4:	681c      	ldr	r4, [r3, #0]
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	6053      	str	r3, [r2, #4]
 800c3ba:	4421      	add	r1, r4
 800c3bc:	6011      	str	r1, [r2, #0]
 800c3be:	e7da      	b.n	800c376 <_free_r+0x26>
 800c3c0:	d902      	bls.n	800c3c8 <_free_r+0x78>
 800c3c2:	230c      	movs	r3, #12
 800c3c4:	6003      	str	r3, [r0, #0]
 800c3c6:	e7d6      	b.n	800c376 <_free_r+0x26>
 800c3c8:	6825      	ldr	r5, [r4, #0]
 800c3ca:	1961      	adds	r1, r4, r5
 800c3cc:	428b      	cmp	r3, r1
 800c3ce:	bf04      	itt	eq
 800c3d0:	6819      	ldreq	r1, [r3, #0]
 800c3d2:	685b      	ldreq	r3, [r3, #4]
 800c3d4:	6063      	str	r3, [r4, #4]
 800c3d6:	bf04      	itt	eq
 800c3d8:	1949      	addeq	r1, r1, r5
 800c3da:	6021      	streq	r1, [r4, #0]
 800c3dc:	6054      	str	r4, [r2, #4]
 800c3de:	e7ca      	b.n	800c376 <_free_r+0x26>
 800c3e0:	b003      	add	sp, #12
 800c3e2:	bd30      	pop	{r4, r5, pc}
 800c3e4:	2000c178 	.word	0x2000c178

0800c3e8 <sbrk_aligned>:
 800c3e8:	b570      	push	{r4, r5, r6, lr}
 800c3ea:	4e0e      	ldr	r6, [pc, #56]	; (800c424 <sbrk_aligned+0x3c>)
 800c3ec:	460c      	mov	r4, r1
 800c3ee:	6831      	ldr	r1, [r6, #0]
 800c3f0:	4605      	mov	r5, r0
 800c3f2:	b911      	cbnz	r1, 800c3fa <sbrk_aligned+0x12>
 800c3f4:	f000 f8bc 	bl	800c570 <_sbrk_r>
 800c3f8:	6030      	str	r0, [r6, #0]
 800c3fa:	4621      	mov	r1, r4
 800c3fc:	4628      	mov	r0, r5
 800c3fe:	f000 f8b7 	bl	800c570 <_sbrk_r>
 800c402:	1c43      	adds	r3, r0, #1
 800c404:	d00a      	beq.n	800c41c <sbrk_aligned+0x34>
 800c406:	1cc4      	adds	r4, r0, #3
 800c408:	f024 0403 	bic.w	r4, r4, #3
 800c40c:	42a0      	cmp	r0, r4
 800c40e:	d007      	beq.n	800c420 <sbrk_aligned+0x38>
 800c410:	1a21      	subs	r1, r4, r0
 800c412:	4628      	mov	r0, r5
 800c414:	f000 f8ac 	bl	800c570 <_sbrk_r>
 800c418:	3001      	adds	r0, #1
 800c41a:	d101      	bne.n	800c420 <sbrk_aligned+0x38>
 800c41c:	f04f 34ff 	mov.w	r4, #4294967295
 800c420:	4620      	mov	r0, r4
 800c422:	bd70      	pop	{r4, r5, r6, pc}
 800c424:	2000c17c 	.word	0x2000c17c

0800c428 <_malloc_r>:
 800c428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c42c:	1ccd      	adds	r5, r1, #3
 800c42e:	f025 0503 	bic.w	r5, r5, #3
 800c432:	3508      	adds	r5, #8
 800c434:	2d0c      	cmp	r5, #12
 800c436:	bf38      	it	cc
 800c438:	250c      	movcc	r5, #12
 800c43a:	2d00      	cmp	r5, #0
 800c43c:	4607      	mov	r7, r0
 800c43e:	db01      	blt.n	800c444 <_malloc_r+0x1c>
 800c440:	42a9      	cmp	r1, r5
 800c442:	d905      	bls.n	800c450 <_malloc_r+0x28>
 800c444:	230c      	movs	r3, #12
 800c446:	603b      	str	r3, [r7, #0]
 800c448:	2600      	movs	r6, #0
 800c44a:	4630      	mov	r0, r6
 800c44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c450:	4e2e      	ldr	r6, [pc, #184]	; (800c50c <_malloc_r+0xe4>)
 800c452:	f000 f89d 	bl	800c590 <__malloc_lock>
 800c456:	6833      	ldr	r3, [r6, #0]
 800c458:	461c      	mov	r4, r3
 800c45a:	bb34      	cbnz	r4, 800c4aa <_malloc_r+0x82>
 800c45c:	4629      	mov	r1, r5
 800c45e:	4638      	mov	r0, r7
 800c460:	f7ff ffc2 	bl	800c3e8 <sbrk_aligned>
 800c464:	1c43      	adds	r3, r0, #1
 800c466:	4604      	mov	r4, r0
 800c468:	d14d      	bne.n	800c506 <_malloc_r+0xde>
 800c46a:	6834      	ldr	r4, [r6, #0]
 800c46c:	4626      	mov	r6, r4
 800c46e:	2e00      	cmp	r6, #0
 800c470:	d140      	bne.n	800c4f4 <_malloc_r+0xcc>
 800c472:	6823      	ldr	r3, [r4, #0]
 800c474:	4631      	mov	r1, r6
 800c476:	4638      	mov	r0, r7
 800c478:	eb04 0803 	add.w	r8, r4, r3
 800c47c:	f000 f878 	bl	800c570 <_sbrk_r>
 800c480:	4580      	cmp	r8, r0
 800c482:	d13a      	bne.n	800c4fa <_malloc_r+0xd2>
 800c484:	6821      	ldr	r1, [r4, #0]
 800c486:	3503      	adds	r5, #3
 800c488:	1a6d      	subs	r5, r5, r1
 800c48a:	f025 0503 	bic.w	r5, r5, #3
 800c48e:	3508      	adds	r5, #8
 800c490:	2d0c      	cmp	r5, #12
 800c492:	bf38      	it	cc
 800c494:	250c      	movcc	r5, #12
 800c496:	4629      	mov	r1, r5
 800c498:	4638      	mov	r0, r7
 800c49a:	f7ff ffa5 	bl	800c3e8 <sbrk_aligned>
 800c49e:	3001      	adds	r0, #1
 800c4a0:	d02b      	beq.n	800c4fa <_malloc_r+0xd2>
 800c4a2:	6823      	ldr	r3, [r4, #0]
 800c4a4:	442b      	add	r3, r5
 800c4a6:	6023      	str	r3, [r4, #0]
 800c4a8:	e00e      	b.n	800c4c8 <_malloc_r+0xa0>
 800c4aa:	6822      	ldr	r2, [r4, #0]
 800c4ac:	1b52      	subs	r2, r2, r5
 800c4ae:	d41e      	bmi.n	800c4ee <_malloc_r+0xc6>
 800c4b0:	2a0b      	cmp	r2, #11
 800c4b2:	d916      	bls.n	800c4e2 <_malloc_r+0xba>
 800c4b4:	1961      	adds	r1, r4, r5
 800c4b6:	42a3      	cmp	r3, r4
 800c4b8:	6025      	str	r5, [r4, #0]
 800c4ba:	bf18      	it	ne
 800c4bc:	6059      	strne	r1, [r3, #4]
 800c4be:	6863      	ldr	r3, [r4, #4]
 800c4c0:	bf08      	it	eq
 800c4c2:	6031      	streq	r1, [r6, #0]
 800c4c4:	5162      	str	r2, [r4, r5]
 800c4c6:	604b      	str	r3, [r1, #4]
 800c4c8:	4638      	mov	r0, r7
 800c4ca:	f104 060b 	add.w	r6, r4, #11
 800c4ce:	f000 f865 	bl	800c59c <__malloc_unlock>
 800c4d2:	f026 0607 	bic.w	r6, r6, #7
 800c4d6:	1d23      	adds	r3, r4, #4
 800c4d8:	1af2      	subs	r2, r6, r3
 800c4da:	d0b6      	beq.n	800c44a <_malloc_r+0x22>
 800c4dc:	1b9b      	subs	r3, r3, r6
 800c4de:	50a3      	str	r3, [r4, r2]
 800c4e0:	e7b3      	b.n	800c44a <_malloc_r+0x22>
 800c4e2:	6862      	ldr	r2, [r4, #4]
 800c4e4:	42a3      	cmp	r3, r4
 800c4e6:	bf0c      	ite	eq
 800c4e8:	6032      	streq	r2, [r6, #0]
 800c4ea:	605a      	strne	r2, [r3, #4]
 800c4ec:	e7ec      	b.n	800c4c8 <_malloc_r+0xa0>
 800c4ee:	4623      	mov	r3, r4
 800c4f0:	6864      	ldr	r4, [r4, #4]
 800c4f2:	e7b2      	b.n	800c45a <_malloc_r+0x32>
 800c4f4:	4634      	mov	r4, r6
 800c4f6:	6876      	ldr	r6, [r6, #4]
 800c4f8:	e7b9      	b.n	800c46e <_malloc_r+0x46>
 800c4fa:	230c      	movs	r3, #12
 800c4fc:	603b      	str	r3, [r7, #0]
 800c4fe:	4638      	mov	r0, r7
 800c500:	f000 f84c 	bl	800c59c <__malloc_unlock>
 800c504:	e7a1      	b.n	800c44a <_malloc_r+0x22>
 800c506:	6025      	str	r5, [r4, #0]
 800c508:	e7de      	b.n	800c4c8 <_malloc_r+0xa0>
 800c50a:	bf00      	nop
 800c50c:	2000c178 	.word	0x2000c178

0800c510 <_realloc_r>:
 800c510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c514:	4680      	mov	r8, r0
 800c516:	4614      	mov	r4, r2
 800c518:	460e      	mov	r6, r1
 800c51a:	b921      	cbnz	r1, 800c526 <_realloc_r+0x16>
 800c51c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c520:	4611      	mov	r1, r2
 800c522:	f7ff bf81 	b.w	800c428 <_malloc_r>
 800c526:	b92a      	cbnz	r2, 800c534 <_realloc_r+0x24>
 800c528:	f7ff ff12 	bl	800c350 <_free_r>
 800c52c:	4625      	mov	r5, r4
 800c52e:	4628      	mov	r0, r5
 800c530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c534:	f000 f838 	bl	800c5a8 <_malloc_usable_size_r>
 800c538:	4284      	cmp	r4, r0
 800c53a:	4607      	mov	r7, r0
 800c53c:	d802      	bhi.n	800c544 <_realloc_r+0x34>
 800c53e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c542:	d812      	bhi.n	800c56a <_realloc_r+0x5a>
 800c544:	4621      	mov	r1, r4
 800c546:	4640      	mov	r0, r8
 800c548:	f7ff ff6e 	bl	800c428 <_malloc_r>
 800c54c:	4605      	mov	r5, r0
 800c54e:	2800      	cmp	r0, #0
 800c550:	d0ed      	beq.n	800c52e <_realloc_r+0x1e>
 800c552:	42bc      	cmp	r4, r7
 800c554:	4622      	mov	r2, r4
 800c556:	4631      	mov	r1, r6
 800c558:	bf28      	it	cs
 800c55a:	463a      	movcs	r2, r7
 800c55c:	f7ff fbb8 	bl	800bcd0 <memcpy>
 800c560:	4631      	mov	r1, r6
 800c562:	4640      	mov	r0, r8
 800c564:	f7ff fef4 	bl	800c350 <_free_r>
 800c568:	e7e1      	b.n	800c52e <_realloc_r+0x1e>
 800c56a:	4635      	mov	r5, r6
 800c56c:	e7df      	b.n	800c52e <_realloc_r+0x1e>
	...

0800c570 <_sbrk_r>:
 800c570:	b538      	push	{r3, r4, r5, lr}
 800c572:	4d06      	ldr	r5, [pc, #24]	; (800c58c <_sbrk_r+0x1c>)
 800c574:	2300      	movs	r3, #0
 800c576:	4604      	mov	r4, r0
 800c578:	4608      	mov	r0, r1
 800c57a:	602b      	str	r3, [r5, #0]
 800c57c:	f7f5 fc00 	bl	8001d80 <_sbrk>
 800c580:	1c43      	adds	r3, r0, #1
 800c582:	d102      	bne.n	800c58a <_sbrk_r+0x1a>
 800c584:	682b      	ldr	r3, [r5, #0]
 800c586:	b103      	cbz	r3, 800c58a <_sbrk_r+0x1a>
 800c588:	6023      	str	r3, [r4, #0]
 800c58a:	bd38      	pop	{r3, r4, r5, pc}
 800c58c:	2000c180 	.word	0x2000c180

0800c590 <__malloc_lock>:
 800c590:	4801      	ldr	r0, [pc, #4]	; (800c598 <__malloc_lock+0x8>)
 800c592:	f000 b811 	b.w	800c5b8 <__retarget_lock_acquire_recursive>
 800c596:	bf00      	nop
 800c598:	2000c184 	.word	0x2000c184

0800c59c <__malloc_unlock>:
 800c59c:	4801      	ldr	r0, [pc, #4]	; (800c5a4 <__malloc_unlock+0x8>)
 800c59e:	f000 b80c 	b.w	800c5ba <__retarget_lock_release_recursive>
 800c5a2:	bf00      	nop
 800c5a4:	2000c184 	.word	0x2000c184

0800c5a8 <_malloc_usable_size_r>:
 800c5a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5ac:	1f18      	subs	r0, r3, #4
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	bfbc      	itt	lt
 800c5b2:	580b      	ldrlt	r3, [r1, r0]
 800c5b4:	18c0      	addlt	r0, r0, r3
 800c5b6:	4770      	bx	lr

0800c5b8 <__retarget_lock_acquire_recursive>:
 800c5b8:	4770      	bx	lr

0800c5ba <__retarget_lock_release_recursive>:
 800c5ba:	4770      	bx	lr

0800c5bc <_init>:
 800c5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5be:	bf00      	nop
 800c5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5c2:	bc08      	pop	{r3}
 800c5c4:	469e      	mov	lr, r3
 800c5c6:	4770      	bx	lr

0800c5c8 <_fini>:
 800c5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ca:	bf00      	nop
 800c5cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5ce:	bc08      	pop	{r3}
 800c5d0:	469e      	mov	lr, r3
 800c5d2:	4770      	bx	lr
